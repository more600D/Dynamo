# encoding: utf-8
# module Autodesk.Revit.DB calls itself DB
# from RevitAPI, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
# by generator 1.145
# no doc
# no imports

# no functions
# classes

class BaseExportOptions(object, IDisposable):
    """ The base class for options used to export DWG, DXF and DGN format files. """
    def Dispose(self):
        """ Dispose(self: BaseExportOptions) """
        pass

    def GetExportFontTable(self):
        """
        GetExportFontTable(self: BaseExportOptions) -> ExportFontTable
        
            Gets font table.
        """
        pass

    def GetExportLayerTable(self):
        """
        GetExportLayerTable(self: BaseExportOptions) -> ExportLayerTable
        
            Gets the layer table.
            Returns: The layer table.
        """
        pass

    def GetExportLinetypeTable(self):
        """
        GetExportLinetypeTable(self: BaseExportOptions) -> ExportLinetypeTable
        
            Gets a copy of the line type table.
            Returns: The line type table.
        """
        pass

    def GetExportPatternTable(self):
        """
        GetExportPatternTable(self: BaseExportOptions) -> ExportPatternTable
        
            Gets a copy of the pattern table.
            Returns: The pattern table.
        """
        pass

    @staticmethod
    def GetPredefinedSetupNames(document):
        """
        GetPredefinedSetupNames(document: Document) -> IList[str]
        
            Returns a list of names of predefined setups of export options.
        
            document: A Revit document to retrieve names from.
            Returns: An array of strings representing names of predefined setups.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BaseExportOptions, disposing: bool) """
        pass

    def SetExportFontTable(self, fontTable):
        """
        SetExportFontTable(self: BaseExportOptions, fontTable: ExportFontTable)
            Sets font table to option.
        
            fontTable: The font table to be set.
        """
        pass

    def SetExportLayerTable(self, layerTable):
        """
        SetExportLayerTable(self: BaseExportOptions, layerTable: ExportLayerTable)
            Sets layer table back to option
        
            layerTable: The layer table to be set
        """
        pass

    def SetExportLinetypeTable(self, linetypeTable):
        """
        SetExportLinetypeTable(self: BaseExportOptions, linetypeTable: ExportLinetypeTable)
            Sets the line type table to use during export.
        
            linetypeTable: The line type table to be set.
        """
        pass

    def SetExportPatternTable(self, patternTable):
        """
        SetExportPatternTable(self: BaseExportOptions, patternTable: ExportPatternTable)
            Sets the pattern table to use during export.
        
            patternTable: The pattern table to be set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Colors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Export color mode.
   Default value is ExportColorMode.IndexColors.

Get: Colors(self: BaseExportOptions) -> ExportColorMode

Set: Colors(self: BaseExportOptions) = value
"""

    HatchPatternsFileName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Custom hatch patterns (pat) file name.

Get: HatchPatternsFileName(self: BaseExportOptions) -> str

Set: HatchPatternsFileName(self: BaseExportOptions) = value
"""

    HideReferencePlane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not to hide reference planes.
   Default value is false.

Get: HideReferencePlane(self: BaseExportOptions) -> bool

Set: HideReferencePlane(self: BaseExportOptions) = value
"""

    HideScopeBox = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not to hide the scope box.
   Default value is false.

Get: HideScopeBox(self: BaseExportOptions) -> bool

Set: HideScopeBox(self: BaseExportOptions) = value
"""

    HideUnreferenceViewTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not to hide unreference view tags.
   Default value is false.

Get: HideUnreferenceViewTags(self: BaseExportOptions) -> bool

Set: HideUnreferenceViewTags(self: BaseExportOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: BaseExportOptions) -> bool

"""

    LayerMapping = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Name of a layer settings standard or filename (with custom layer settings).
   Valid standards are: DGNV7 (only for DGN), AIA, CP83, BS1192, and ISO13567.
   default value is "" (empty) which means if no value is set,
   if no value is set, Revit will use a default value according to the localization.

Get: LayerMapping(self: BaseExportOptions) -> str

Set: LayerMapping(self: BaseExportOptions) = value
"""

    PreserveCoincidentLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not to preserve coincident lines.
   Default value is false.

Get: PreserveCoincidentLines(self: BaseExportOptions) -> bool

Set: PreserveCoincidentLines(self: BaseExportOptions) = value
"""

    PropOverrides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """How to export overridden object styles.
   Default value is PropOverrideMode.ByEntity.

Get: PropOverrides(self: BaseExportOptions) -> PropOverrideMode

Set: PropOverrides(self: BaseExportOptions) = value
"""



class ACADExportOptions(BaseExportOptions, IDisposable):
    """ The base class for options used to export DWG and DXF format files. """
    def Dispose(self):
        """ Dispose(self: BaseExportOptions, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BaseExportOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ACAPreference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The preferred way to generate geometry of ACA objects.
   Default value is ACAObjectPreference.Object.

Get: ACAPreference(self: ACADExportOptions) -> ACAObjectPreference

Set: ACAPreference(self: ACADExportOptions) = value
"""

    ExportingAreas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to export area and room geometry, false otherwise.
   Default value is false.

Get: ExportingAreas(self: ACADExportOptions) -> bool

Set: ExportingAreas(self: ACADExportOptions) = value
"""

    ExportOfSolids = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The mode used to export solids in 3D views.
   Default value is SolidGeometry.Polymesh.

Get: ExportOfSolids(self: ACADExportOptions) -> SolidGeometry

Set: ExportOfSolids(self: ACADExportOptions) = value
"""

    FileVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """ACADVersion::Default
   Default value is ACADVersion.Default.

Get: FileVersion(self: ACADExportOptions) -> ACADVersion

Set: FileVersion(self: ACADExportOptions) = value
"""

    LineScaling = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The scaling mode for the line type.
   Default value is LineScaling.ViewScale.

Get: LineScaling(self: ACADExportOptions) -> LineScaling

Set: LineScaling(self: ACADExportOptions) = value
"""

    LinetypesFileName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The custom linetype file name (*.lin).
   Default value is empty.

Get: LinetypesFileName(self: ACADExportOptions) -> str

Set: LinetypesFileName(self: ACADExportOptions) = value
"""

    MarkNonplotLayers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """If true and the nonplot layer suffix is not empty, all layers whose names contain that suffix will be marked as non-plot.

Get: MarkNonplotLayers(self: ACADExportOptions) -> bool

Set: MarkNonplotLayers(self: ACADExportOptions) = value
"""

    NonplotSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """If the MarkNonplotLayers attribute is set to true, all layers with names containing this suffix will be marked as non-plot.
   No action will be performed if the suffix is empty.

Get: NonplotSuffix(self: ACADExportOptions) -> str

Set: NonplotSuffix(self: ACADExportOptions) = value
"""

    SharedCoords = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to use the shared coordinate system's origin, false to use the project origin.
   Default value is false.

Get: SharedCoords(self: ACADExportOptions) -> bool

Set: SharedCoords(self: ACADExportOptions) = value
"""

    TargetUnit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The target unit type.
   Default value is ExportUnit.Default.

Get: TargetUnit(self: ACADExportOptions) -> ExportUnit

Set: TargetUnit(self: ACADExportOptions) = value
"""

    TextTreatment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text treatment.
   Deault value is TextTreatment.Exact.

Get: TextTreatment(self: ACADExportOptions) -> TextTreatment

Set: TextTreatment(self: ACADExportOptions) = value
"""



class ACADVersion(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing available AutoCAD versions, into which a file may be exported.
    
    enum ACADVersion, values: Default (22), R2007 (3), R2010 (16), R2013 (22)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Default = None
    R2007 = None
    R2010 = None
    R2013 = None
    value__ = None


class ACAObjectPreference(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible ways to generate geometry of an ACA object
       Revit object parameters used to generate geometry of the exported ACA object.
       Revit object geometry is used to generate geometry of the exported ACA object. That may produce better geometric fidelity in some cases.
    
    enum ACAObjectPreference, values: Geometry (1), Object (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Geometry = None
    Object = None
    value__ = None


class AdaptiveComponentFamilyUtils(object):
    """ An interface for Adaptive Component Instances. """
    @staticmethod
    def GetNumberOfAdaptivePoints(family):
        """
        GetNumberOfAdaptivePoints(family: Family) -> int
        
            Gets number of Adaptive Point Elements in Adaptive Component Family.
        
            family: The Family
            Returns: Number of Adaptive Point Element References in Adaptive Component Family.
        """
        pass

    @staticmethod
    def GetNumberOfPlacementPoints(family):
        """
        GetNumberOfPlacementPoints(family: Family) -> int
        
            Gets number of Placement Point Elements in Adaptive Component Family.
        
            family: The Family
            Returns: Number of Adaptive Placement Point Element References in Adaptive Component 
             Family.
        """
        pass

    @staticmethod
    def GetNumberOfShapeHandlePoints(family):
        """
        GetNumberOfShapeHandlePoints(family: Family) -> int
        
            Gets number of Shape Handle Point Elements in Adaptive Component Family.
        
            family: The Family
            Returns: Number of Adaptive Shape Handle Point Element References in the Adaptive 
             Component Family.
        """
        pass

    @staticmethod
    def GetPlacementNumber(doc, refPointId):
        """
        GetPlacementNumber(doc: Document, refPointId: ElementId) -> int
        
            Gets Placement number of an Adaptive Placement Point.
        
            doc: The Document
            refPointId: The ReferencePoint id
            Returns: Placement number of the Adaptive Placement Point.
        """
        pass

    @staticmethod
    def GetPointConstraintType(doc, refPointId):
        """
        GetPointConstraintType(doc: Document, refPointId: ElementId) -> AdaptivePointConstraintType
        
            Gets constrain type of an Adaptive Shape Handle Point.
        
            doc: The Document
            refPointId: The ReferencePoint id
            Returns: Constraint type of the Adaptive Shape Handle Point.
        """
        pass

    @staticmethod
    def GetPointOrientationType(doc, refPointId):
        """
        GetPointOrientationType(doc: Document, refPointId: ElementId) -> AdaptivePointOrientationType
        
            Gets orientation type of an Adaptive Placement Point.
        
            doc: The Document
            refPointId: The ReferencePoint id
            Returns: Orientation type of Adaptive Placement Point.
        """
        pass

    @staticmethod
    def IsAdaptiveComponentFamily(family):
        """
        IsAdaptiveComponentFamily(family: Family) -> bool
        
            Verifies if the Family is an Adaptive Component Family.
        
            family: The Family
            Returns: True if the Family is an Adaptive Component Family.
        """
        pass

    @staticmethod
    def IsAdaptivePlacementPoint(doc, refPointId):
        """
        IsAdaptivePlacementPoint(doc: Document, refPointId: ElementId) -> bool
        
            Verifies if the Reference Point is an Adaptive Placement Point.
        
            doc: The Document
            refPointId: The ReferencePoint id
            Returns: True if the Point is an Adaptive Placement Point.
        """
        pass

    @staticmethod
    def IsAdaptivePoint(doc, refPointId):
        """
        IsAdaptivePoint(doc: Document, refPointId: ElementId) -> bool
        
            Verifies if the Reference Point is an Adaptive Point.
        
            doc: The Document
            refPointId: The ReferencePoint id
            Returns: True if the Point is an Adaptive Point (Placement Point or Shape Handle Point).
        """
        pass

    @staticmethod
    def IsAdaptiveShapeHandlePoint(doc, refPointId):
        """
        IsAdaptiveShapeHandlePoint(doc: Document, refPointId: ElementId) -> bool
        
            Verifies if the Reference Point is an Adaptive Shape Handle Point.
        
            doc: The Document
            refPointId: The ReferencePoint id
            Returns: True if the Point is an Adaptive Shape Handle Point.
        """
        pass

    @staticmethod
    def MakeAdaptivePoint(doc, refPointId, type):
        """
        MakeAdaptivePoint(doc: Document, refPointId: ElementId, type: AdaptivePointType)
            Makes Reference Point an Adaptive Point or makes an Adaptive Point a Reference 
             Point.
        
        
            doc: The Document
            refPointId: The ReferencePoint id
            type: The Adaptive Point Type
        """
        pass

    @staticmethod
    def SetPlacementNumber(doc, refPointId, placementNumber):
        """
        SetPlacementNumber(doc: Document, refPointId: ElementId, placementNumber: int)
            Sets Placement Number of an Adaptive Placement Point.
        
            doc: The Document
            refPointId: The ReferencePoint id
            placementNumber: Placement number of the Adaptive Placement Point.
        """
        pass

    @staticmethod
    def SetPointConstraintType(doc, refPointId, constraintType):
        """
        SetPointConstraintType(doc: Document, refPointId: ElementId, constraintType: AdaptivePointConstraintType)
            Sets constrain type of an Adaptive Shape Handle Point.
        
            doc: The Document
            refPointId: The ReferencePoint id
            constraintType: Constraint type of the Adaptive Shape Handle Point.
        """
        pass

    @staticmethod
    def SetPointOrientationType(doc, refPointId, orientationType):
        """
        SetPointOrientationType(doc: Document, refPointId: ElementId, orientationType: AdaptivePointOrientationType)
            Sets orientation type of an Adaptive Placement Point.
        
            doc: The Document
            refPointId: The ReferencePoint id
            orientationType: Orientation type of the Adaptive Placement Point.
        """
        pass

    __all__ = [
        'GetNumberOfAdaptivePoints',
        'GetNumberOfPlacementPoints',
        'GetNumberOfShapeHandlePoints',
        'GetPlacementNumber',
        'GetPointConstraintType',
        'GetPointOrientationType',
        'IsAdaptiveComponentFamily',
        'IsAdaptivePlacementPoint',
        'IsAdaptivePoint',
        'IsAdaptiveShapeHandlePoint',
        'MakeAdaptivePoint',
        'SetPlacementNumber',
        'SetPointConstraintType',
        'SetPointOrientationType',
    ]


class AdaptiveComponentInstanceUtils(object):
    """ An interface for Adaptive Component Instances. """
    @staticmethod
    def CreateAdaptiveComponentInstance(doc, famSymb):
        """
        CreateAdaptiveComponentInstance(doc: Document, famSymb: FamilySymbol) -> FamilyInstance
        
            Creates a FamilyInstance of Adaptive Component Family.
        
            doc: The Document
            famSymb: The FamilySymbol
            Returns: The Family Instance
        """
        pass

    @staticmethod
    def GetInstancePlacementPointElementRefIds(famInst):
        """
        GetInstancePlacementPointElementRefIds(famInst: FamilyInstance) -> IList[ElementId]
        
            Gets Placement Adaptive Point Element Ref ids to which the instance geometry 
             adapts.
        
        
            famInst: The FamilyInstance.
            Returns: The Placement Adaptive Point Element Ref ids to which the instance geometry 
             adapts.
        """
        pass

    @staticmethod
    def GetInstancePointElementRefIds(famInst):
        """
        GetInstancePointElementRefIds(famInst: FamilyInstance) -> IList[ElementId]
        
            Gets Adaptive Point Element Ref ids to which the instance geometry adapts.
        
            famInst: The FamilyInstance.
            Returns: The Adaptive Point Element Ref ids to which the instance geometry adapts.
        """
        pass

    @staticmethod
    def GetInstanceShapeHandlePointElementRefIds(famInst):
        """
        GetInstanceShapeHandlePointElementRefIds(famInst: FamilyInstance) -> IList[ElementId]
        
            Gets Shape Handle Adaptive Point Element Ref ids to which the instance geometry 
             adapts.
        
        
            famInst: The FamilyInstance
            Returns: The Shape Handle Adaptive Point Element Ref ids to which the instance geometry 
             adapts.
        """
        pass

    @staticmethod
    def HasAdaptiveFamilySymbol(famInst):
        """
        HasAdaptiveFamilySymbol(famInst: FamilyInstance) -> bool
        
            Verifies if a FamilyInstance has an Adaptive Family Symbol.
        
            famInst: The FamilyInstance
            Returns: True if the FamilyInstance has an Adaptive Family Symbol.
        """
        pass

    @staticmethod
    def IsAdaptiveComponentInstance(famInst):
        """
        IsAdaptiveComponentInstance(famInst: FamilyInstance) -> bool
        
            Verifies if a FamilyInstance is an Adaptive Component Instance.
        
            famInst: The FamilyInstance
            Returns: True if the FamilyInstance has an Adaptive Component Instances.
        """
        pass

    @staticmethod
    def IsAdaptiveFamilySymbol(famSymb):
        """
        IsAdaptiveFamilySymbol(famSymb: FamilySymbol) -> bool
        
            Verifies if a FamilySymbol is a valid Adaptive Family Symbol.
        
            famSymb: The FamilySymbol
            Returns: True if the FamilySymbol is a valid Adaptive Family Symbol.
        """
        pass

    @staticmethod
    def IsInstanceFlipped(famInst):
        """
        IsInstanceFlipped(famInst: FamilyInstance) -> bool
        
            Gets the value of the flip parameter on the adaptive instance.
        
            famInst: The FamilyInstance
            Returns: True if the instance is flipped.
        """
        pass

    @staticmethod
    def MoveAdaptiveComponentInstance(famInst, trf, unHost):
        """
        MoveAdaptiveComponentInstance(famInst: FamilyInstance, trf: Transform, unHost: bool)
            Moves Adaptive Component Instance by the specified transformation.
        
            famInst: The FamilyInstance
            trf: The Transformation
            unHost: True if the move should disassociate the Point Element Refs from their hosts.
         
               False if the Point Element Refs remain hosted.
        """
        pass

    @staticmethod
    def SetInstanceFlipped(famInst, flip):
        """
        SetInstanceFlipped(famInst: FamilyInstance, flip: bool)
            Sets the value of the flip parameter on the adaptive instance.
        
            famInst: The FamilyInstance
            flip: The flip flag
        """
        pass

    __all__ = [
        'CreateAdaptiveComponentInstance',
        'GetInstancePlacementPointElementRefIds',
        'GetInstancePointElementRefIds',
        'GetInstanceShapeHandlePointElementRefIds',
        'HasAdaptiveFamilySymbol',
        'IsAdaptiveComponentInstance',
        'IsAdaptiveFamilySymbol',
        'IsInstanceFlipped',
        'MoveAdaptiveComponentInstance',
        'SetInstanceFlipped',
    ]


class AdaptivePointConstraintType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type containing possible constraint types for Adaptive Points.
    
    enum AdaptivePointConstraintType, values: Axis_X (4), Axis_Y (5), Axis_Z (6), None (0), Plane_XY (3), Plane_YZ (1), Plane_ZX (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Axis_X = None
    Axis_Y = None
    Axis_Z = None
    None = None
    Plane_XY = None
    Plane_YZ = None
    Plane_ZX = None
    value__ = None


class AdaptivePointOrientationType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type containing possible orientation types for Adaptive Points.
    
    enum AdaptivePointOrientationType, values: ToGlobalXYZ (7), ToGlobalZthenHost (6), ToHost (2), ToHostAndLoopSystem (3), ToInstance (9), ToInstanceZthenHost (8)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ToGlobalXYZ = None
    ToGlobalZthenHost = None
    ToHost = None
    ToHostAndLoopSystem = None
    ToInstance = None
    ToInstanceZthenHost = None
    value__ = None


class AdaptivePointType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type containing possible types for Adaptive Points.
    
    enum AdaptivePointType, values: PlacementPoint (1), ReferencePoint (0), ShapeHandlePoint (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    PlacementPoint = None
    ReferencePoint = None
    ShapeHandlePoint = None
    value__ = None


class AddInId(object, IDisposable):
    """
    Identifies an AddIn registered with Revit
    
    AddInId(val: Guid)
    """
    def Dispose(self):
        """ Dispose(self: AddInId) """
        pass

    def GetAddInName(self):
        """
        GetAddInName(self: AddInId) -> str
        
            name of addin associated with this AddInId
           Attempts to obtain the name from 
             loaded Third Party AddIns
        
            Returns: name of addin
        """
        pass

    def GetAddInNameFromDocument(self, aDoc):
        """
        GetAddInNameFromDocument(self: AddInId, aDoc: Document) -> str
        
            name of application associated with this ApplicationId
           First attempts to 
             obtain the name from AddInIds stored in the document.
           If unsuccessful, 
             attempts to obtain the name from loaded Third Party AddIns.
        
        
            aDoc: target document
            Returns: name of application
        """
        pass

    def GetGUID(self):
        """
        GetGUID(self: AddInId) -> Guid
        
            value of the AddInId as a GUID
            Returns: GUID value of the AddInId
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AddInId, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, val):
        """ __new__(cls: type, val: Guid) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: AddInId) -> bool

"""



class AllowedValues(Enum, IComparable, IFormattable, IConvertible):
    """
    A range of allowed values.
    
    enum AllowedValues, values: All (1), NonNegative (0), Positive (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    All = None
    NonNegative = None
    Positive = None
    value__ = None


class AlphanumericRevisionSettings(object, IDisposable):
    """
    Contains settings that apply to Revisions with the Alphanumeric RevisionNumberType.
    
    AlphanumericRevisionSettings(sequence: IList[str], prefix: str, suffix: str)
    AlphanumericRevisionSettings()
    AlphanumericRevisionSettings(other: AlphanumericRevisionSettings)
    """
    def Dispose(self):
        """ Dispose(self: AlphanumericRevisionSettings) """
        pass

    def GetSequence(self):
        """
        GetSequence(self: AlphanumericRevisionSettings) -> IList[str]
        
            Gets a list containing the strings to be used as the numbering sequence for
           
             revisions with the Alphanumeric RevisionNumberType.
        """
        pass

    def IsEqual(self, other):
        """
        IsEqual(self: AlphanumericRevisionSettings, other: AlphanumericRevisionSettings) -> bool
        
            Determines whether a specified AlphanumericRevisionSettings is the same as 
             'this'.
        
        
            other: The AlphanumericRevisionSettings object to be compared with 'this'.
            Returns: True, if two AlphanumericRevisionSettings are the same.
        """
        pass

    def IsValid(self):
        """
        IsValid(self: AlphanumericRevisionSettings) -> bool
        
            Determines whether the AlphanumericRevisionSettings object is in a valid state.
            Returns: True if the settings are valid.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AlphanumericRevisionSettings, disposing: bool) """
        pass

    def SetSequence(self, sequence):
        """ SetSequence(self: AlphanumericRevisionSettings, sequence: IList[str]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, sequence: IList[str], prefix: str, suffix: str)
        __new__(cls: type)
        __new__(cls: type, other: AlphanumericRevisionSettings)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: AlphanumericRevisionSettings) -> bool

"""

    Prefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The prefix string that will be prepended to the number of each revision with Alphanumeric RevisionNumberingType.

Get: Prefix(self: AlphanumericRevisionSettings) -> str

Set: Prefix(self: AlphanumericRevisionSettings) = value
"""

    Suffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The suffix string that will be appended to the number of each revision with Alphanumeric RevisionNumberingType.

Get: Suffix(self: AlphanumericRevisionSettings) -> str

Set: Suffix(self: AlphanumericRevisionSettings) = value
"""



class AlternateUnits(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing the locations where Alternate units may be displayed in dimensions.
    
    enum AlternateUnits, values: Below (2), None (0), Right (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Below = None
    None = None
    Right = None
    value__ = None


class AnalyzesAsType(Enum, IComparable, IFormattable, IConvertible):
    """
    This enum class is used for the BuiltInParameter STRUCTURAL_ANALYZES_AS.
    
    enum AnalyzesAsType, values: AA_Gravity (1), AA_GravityLateral (8), AA_Hanger (0), AA_Lateral (2), AA_Mat (4), AA_Not_For_Analysis (6), AA_SlabOneWay (3), AA_SlabOnGrade (5), AA_SlabTwoWay (7)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AA_Gravity = None
    AA_GravityLateral = None
    AA_Hanger = None
    AA_Lateral = None
    AA_Mat = None
    AA_Not_For_Analysis = None
    AA_SlabOneWay = None
    AA_SlabOnGrade = None
    AA_SlabTwoWay = None
    value__ = None


class Element(object, IDisposable):
    """ Base class for most persistent data within a Revit document. """
    def ArePhasesModifiable(self):
        """
        ArePhasesModifiable(self: Element) -> bool
        
            Returns true if the properties CreatedPhaseId and DemolishedPhaseId can be 
             modified for this Element.
        
            Returns: True if the properties CreatedPhaseId and DemolishedPhaseId can be modified for 
             this Element, false otherwise.
        """
        pass

    def CanBeHidden(self, pView):
        """
        CanBeHidden(self: Element, pView: View) -> bool
        
            Indicates if the element can be hidden in the view.
            Returns: If the element is not permitted to be hidden, false is returned.
        """
        pass

    def CanBeLocked(self):
        """
        CanBeLocked(self: Element) -> bool
        
            Identifies if the element can be locked.
            Returns: True if the element can be locked, false otherwise.
        """
        pass

    def CanHaveAnalyticalModel(self):
        """
        CanHaveAnalyticalModel(self: Element) -> bool
        
            Indicates whether the Element can have an Analytical Model.
            Returns: True if the Element can have an Analytical Model, false otherwise.
        """
        pass

    @staticmethod
    def CanHaveTypeAssigned(document=None, elementIds=None):
        """
        CanHaveTypeAssigned(self: Element) -> bool
        
            Identifies if the element can have a type assigned.
            Returns: True if element can have a type assigned, false otherwise.
        CanHaveTypeAssigned(document: Document, elementIds: ICollection[ElementId]) -> bool
        """
        pass

    @staticmethod
    def ChangeTypeId(*__args):
        """
        ChangeTypeId(self: Element, typeId: ElementId) -> ElementId
        
            Changes the type of the element.
        
            typeId: Identifier of the type to assign to this element.
            Returns: The new element id if new element is created, or InvalidElementId if the 
             element's type changed without creating a new element.
        
        ChangeTypeId(document: Document, elementIds: ICollection[ElementId], typeId: ElementId) -> IDictionary[ElementId, ElementId]
        """
        pass

    def DeleteEntity(self, schema):
        """
        DeleteEntity(self: Element, schema: Schema) -> bool
        
            Deletes the existing entity created by %schema% in the element
        
            schema: Schema used for creation of the entity
            Returns: True if entity was deleted, false if entity didn't exist
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element) """
        pass

    def GetAnalyticalModel(self):
        """
        GetAnalyticalModel(self: Element) -> AnalyticalModel
        
            Retrieves writeable Analytical Model for Element.
            Returns: Writeable Analytical Model.
        """
        pass

    def GetAnalyticalModelId(self):
        """
        GetAnalyticalModelId(self: Element) -> ElementId
        
            Retrieves the Element Id of the Analytical Model Element for this Element.
            Returns: Element Id.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetChangeTypeAny():
        """
        GetChangeTypeAny() -> ChangeType
        
            Returns ChangeType associated with any change in an element.
            Returns: ChangeType that can be used to define a trigger for an Updater,
           triggering 
             on any change in an element.
        """
        pass

    @staticmethod
    def GetChangeTypeElementAddition():
        """
        GetChangeTypeElementAddition() -> ChangeType
        
            Returns ChangeType associated with element addition
            Returns: ChangeType that can be used to define a trigger for an Updater,
           triggering 
             on element addition.
        """
        pass

    @staticmethod
    def GetChangeTypeElementDeletion():
        """
        GetChangeTypeElementDeletion() -> ChangeType
        
            Returns ChangeType associated with element deletion.
            Returns: ChangeType that can be used to define a trigger for an Updater,
           triggering 
             on element deletion.
        """
        pass

    @staticmethod
    def GetChangeTypeGeometry():
        """
        GetChangeTypeGeometry() -> ChangeType
        
            Returns ChangeType associated with a change in the geometry of an element
            Returns: ChangeType that can be used to define a trigger for an Updater,
           triggering 
             on a geometry change in an element
        """
        pass

    @staticmethod
    def GetChangeTypeParameter(*__args):
        """
        GetChangeTypeParameter(param: Parameter) -> ChangeType
        
            Returns ChangeType associated with a change in a parameter's value
        
            param: Parameter for the ChangeType to trigger on
            Returns: ChangeType that can be used to define a trigger for an Updater,
           triggering 
             on parameter value change
        
        GetChangeTypeParameter(parameterId: ElementId) -> ChangeType
        
            Returns ChangeType associated with a change in a parameter's value
        
            parameterId: ElementId of parameter for the ChangeType to trigger on.
            Returns: ChangeType that can be used to define a trigger for an Updater,
           triggering 
             on parameter value change.
        """
        pass

    def GetEntity(self, schema):
        """
        GetEntity(self: Element, schema: Schema) -> Entity
        
            Returns the existing entity corresponding to the Schema if it has been saved in 
             the
           Element, or an invalid entity otherwise.
        
        
            schema: The Schema describing the Entity.
            Returns: The returned Entity.
        """
        pass

    def GetEntitySchemaGuids(self):
        """
        GetEntitySchemaGuids(self: Element) -> IList[Guid]
        
            Returns the Schema guids of any Entities stored in this element.
            Returns: The schema Entity guids.
        """
        pass

    def GetExternalFileReference(self):
        """
        GetExternalFileReference(self: Element) -> ExternalFileReference
        
            Gets information pertaining to the external file referenced
           by the element.
            Returns: An object containing path and type information for the external
           file 
             referenced by the element.
        """
        pass

    def GetExternalResourceReference(self, resourceType):
        """
        GetExternalResourceReference(self: Element, resourceType: ExternalResourceType) -> ExternalResourceReference
        
            Gets the ExternalResourceReference associated with a specified external 
             resource type.
        
        
            resourceType: The desired external resource type.
            Returns: The copy of the ExternalResourceReference associated with a specified external 
             resource type.
        """
        pass

    def GetExternalResourceReferences(self):
        """
        GetExternalResourceReferences(self: Element) -> IDictionary[ExternalResourceType, ExternalResourceReference]
        
            Gets the full map of the external resource references referenced
           by the 
             element.
        
            Returns: The full map of the external resource references referenced by the element.
        """
        pass

    def GetGeneratingElementIds(self, geometryObject):
        """
        GetGeneratingElementIds(self: Element, geometryObject: GeometryObject) -> ICollection[ElementId]
        
            Returns the ids of the element(s) that generated the input geometry object.
        
            geometryObject: The geometry object whose generating element is requested.
            Returns: The id(s) of the element(s) that generated (or may have generated) the given 
             geometry object.  Empty if no generating elements are found. If the set 
             contains just one id, it is the id of the element that generated the geometry 
             object.
        """
        pass

    def GetGeometryObjectFromReference(self, reference):
        """
        GetGeometryObjectFromReference(self: Element, reference: Reference) -> GeometryObject
        
            Retrieve one geometric primitive contained in the element given a reference.
        
            reference: The geometric object referenced by this instance will be retrieved from the 
             model.
        
            Returns: The geometric object referenced by the input reference.
        """
        pass

    def GetMaterialArea(self, materialId, usePaintMaterial):
        """
        GetMaterialArea(self: Element, materialId: ElementId, usePaintMaterial: bool) -> float
        
            Gets the area of the material with the given id.
        
            materialId: The material id returned from 
             Autodesk.Revit.DB.Element.GetMaterialIds(System.Boolean).
        
            usePaintMaterial: If true, this material id was returned as a paint material from 
             Autodesk.Revit.DB.Element.GetMaterialIds(System.Boolean) and the area returned 
             should be calculated from paint applied to the element.
           If false, this 
             material id was returned as a non-paint element material from 
             Autodesk.Revit.DB.Element.GetMaterialIds(System.Boolean) and the area is 
             calculated from the element geometry and layers.
        
            Returns: The area of the material for this element.  Returns 0.0 if the material id is 
             not a part of this element.
        """
        pass

    def GetMaterialIds(self, returnPaintMaterials):
        """
        GetMaterialIds(self: Element, returnPaintMaterials: bool) -> ICollection[ElementId]
        
            Gets the element ids of all materials present in the element.
        
            returnPaintMaterials: If true, this returns material ids assigned to element faces by the Paint 
             tools.  If false, this returns ids associated to the material through
           its 
             geometry or compound structure layers.
        
            Returns: The set of material ids.
        """
        pass

    def GetMaterialVolume(self, materialId):
        """
        GetMaterialVolume(self: Element, materialId: ElementId) -> float
        
            Gets the volume of the material with the given id.
        
            materialId: The material id returned from 
             Autodesk.Revit.DB.Element.GetMaterialIds(System.Boolean).
        
            Returns: The volume of the material for this element.  Returns 0.0 if the material is 
             not a part of this element.
        """
        pass

    def GetMonitoredLinkElementIds(self):
        """
        GetMonitoredLinkElementIds(self: Element) -> IList[ElementId]
        
            Provides the link instance IDs when the element is monitoring.
            Returns: The IDs of linked instances.
        """
        pass

    def GetMonitoredLocalElementIds(self):
        """
        GetMonitoredLocalElementIds(self: Element) -> IList[ElementId]
        
            Provides the local element IDs when the element is monitoring.
            Returns: The IDs of local element IDs being monitored by this element.
        """
        pass

    def GetOrderedParameters(self):
        """
        GetOrderedParameters(self: Element) -> IList[Parameter]
        
            Gets the parameters associated to the element in order.
            Returns: A collection containing all parameters.
        """
        pass

    def GetParameterFormatOptions(self, parameterId):
        """
        GetParameterFormatOptions(self: Element, parameterId: ElementId) -> FormatOptions
        
            Returns a FormatOptions override for the element Parameter, or a default 
             FormatOptions if no override exists.
        
        
            parameterId: Id of parameter for which FormatOptions will be returned.
            Returns: Format options of element parameter. If the UseDefault property is true, then 
             no formatting overrides have been defined in the element for the specified 
             parameter, and the FormatOptions for the parameter should be obtained from the 
             Unit object, which can be obtained from the Document.
        """
        pass

    def GetParameters(self, name):
        """
        GetParameters(self: Element, name: str) -> IList[Parameter]
        
            Retrieves the parameters from the element via the given name.
        
            name: The name of the parameter to be retrieved.
            Returns: A collection containing the parameters having the same given parameter name.
        """
        pass

    def GetPhaseStatus(self, phaseId):
        """
        GetPhaseStatus(self: Element, phaseId: ElementId) -> ElementOnPhaseStatus
        
            Gets the status of a given element in the input phase
        
            phaseId: Id of the phase.
            Returns: The status of the element in the phase.
        """
        pass

    def GetTypeId(self):
        """
        GetTypeId(self: Element) -> ElementId
        
            Returns the identifier of this element's type.
            Returns: The id of the element's type, or invalid element id if the element cannot have 
             type assigned.
        """
        pass

    @staticmethod
    def GetValidTypes(document=None, elementIds=None):
        """
        GetValidTypes(self: Element) -> ICollection[ElementId]
        
            Obtains a set of types that are valid for this element.
            Returns: A set of element IDs of types that are valid for this element or an empty set 
             if element cannot have type assigned.
        
        GetValidTypes(document: Document, elementIds: ICollection[ElementId]) -> ICollection[ElementId]
        """
        pass

    def HasPhases(self):
        """
        HasPhases(self: Element) -> bool
        
            Returns true if this Element has the properties CreatedPhaseId and 
             DemolishedPhaseId.
        
            Returns: True if this Element has the properties CreatedPhaseId and DemolishedPhaseId, 
             false otherwise.
        """
        pass

    def IsExternalFileReference(self):
        """
        IsExternalFileReference(self: Element) -> bool
        
            Determines whether this Element represents an external
           file.
            Returns: True if this element contains information about some external
           file, false 
             if it does not.
        """
        pass

    def IsHidden(self, pView):
        """
        IsHidden(self: Element, pView: View) -> bool
        
            Identifies if the element has been permanently hidden in the view.
        """
        pass

    def IsMonitoringLinkElement(self):
        """
        IsMonitoringLinkElement(self: Element) -> bool
        
            Indicate whether an element is monitoring any elements in any linked models.
            Returns: True if this element is monitoring elements in a linked models. Otherwise, 
             false will be returned.
        """
        pass

    def IsMonitoringLocalElement(self):
        """
        IsMonitoringLocalElement(self: Element) -> bool
        
            Indicate whether an element is monitoring other local elements.
            Returns: True if this element is monitoring other elements in same project. Otherwise, 
             false will be returned.
        """
        pass

    def IsPhaseCreatedValid(self, createdPhaseId):
        """
        IsPhaseCreatedValid(self: Element, createdPhaseId: ElementId) -> bool
        
            Returns true if createdPhaseId is an allowed value for the property 
             CreatedPhaseId in this Element.
        
        
            createdPhaseId: The id of a Phase.
            Returns: True if createdPhaseId is an allowed value for the property CreatedPhaseId in 
             this Element, false otherwise.
        """
        pass

    def IsPhaseDemolishedValid(self, demolishedPhaseId):
        """
        IsPhaseDemolishedValid(self: Element, demolishedPhaseId: ElementId) -> bool
        
            Returns true if demolishedPhaseId is an allowed value for the property 
             DemolishedPhaseId in this Element.
        
        
            demolishedPhaseId: The id of a Phase or invalidElementId.
            Returns: True if demolishedPhaseId is an allowed value for the property 
             DemolishedPhaseId in this Element, false otherwise.
        """
        pass

    @staticmethod
    def IsValidType(*__args):
        """
        IsValidType(self: Element, typeId: ElementId) -> bool
        
            Checks if given type is valid for this element.
        
            typeId: ElementId of the type to check.
            Returns: True if element can have a type assigned and this type is valid for this 
             element, false otherwise.
        
        IsValidType(document: Document, elementIds: ICollection[ElementId], typeId: ElementId) -> bool
        """
        pass

    def LookupParameter(self, name):
        """
        LookupParameter(self: Element, name: str) -> Parameter
        
            Attempts to find a parameter on the element which has the given name.
        
            name: The name of the parameter to be retrieved.
            Returns: The matching parameter. This return may be ll if there is no matching 
             parameter. If there are multiple matching parameters the first one found is 
             returned.
        """
        pass

    def RefersToExternalResourceReference(self, resourceType):
        """
        RefersToExternalResourceReference(self: Element, resourceType: ExternalResourceType) -> bool
        
            Determines whether this Element uses external resources associated with
           a 
             specified external resource type.
        
        
            resourceType: The desired external resource type.
            Returns: Returns true if this Element uses external resources associated with
           the 
             specified external resource type; otherwise, false.
        """
        pass

    def RefersToExternalResourceReferences(self):
        """
        RefersToExternalResourceReferences(self: Element) -> bool
        
            Determines whether this Element uses external resources.
            Returns: True if this element uses external resources, false if it does not.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetEntity(self, entity):
        """
        SetEntity(self: Element, entity: Entity)
            Stores the entity in the element. If an Entity described by the same Schema 
             already
           exists, it is overwritten.
        
        
            entity: The Entity to be stored.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AssemblyInstanceId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the assembly instance to which the element belongs.

Get: AssemblyInstanceId(self: Element) -> ElementId

"""

    Category = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves a Category object that represents the category or sub category in which the
element resides.

Get: Category(self: Element) -> Category

"""

    CreatedPhaseId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of a Phase at which the Element was created.

Get: CreatedPhaseId(self: Element) -> ElementId

Set: CreatedPhaseId(self: Element) = value
"""

    DemolishedPhaseId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of a Phase at which the Element was demolished.

Get: DemolishedPhaseId(self: Element) -> ElementId

Set: DemolishedPhaseId(self: Element) = value
"""

    DesignOption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the design option to which the element belongs.

Get: DesignOption(self: Element) -> DesignOption

"""

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Document in which the Element resides.

Get: Document(self: Element) -> Document

"""

    GroupId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the group to which an element belongs.

Get: GroupId(self: Element) -> ElementId

"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A unique identifier for an Element in an Autodesk Revit project.

Get: Id(self: Element) -> ElementId

"""

    IsTransient = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether an element is transient or permanent.

Get: IsTransient(self: Element) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: Element) -> bool

"""

    LevelId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the level associated with the element.

Get: LevelId(self: Element) -> ElementId

"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property is used to find the physical location of an element within a project.

Get: Location(self: Element) -> Location

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A human readable name for the Element.

Get: Name(self: Element) -> str

Set: Name(self: Element) = value
"""

    OwnerViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the view that owns the element.

Get: OwnerViewId(self: Element) -> ElementId

"""

    Parameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves a set containing all of the parameters that are contained within the element.

Get: Parameters(self: Element) -> ParameterSet

"""

    ParametersMap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves a map containing all of the parameters that are contained within the element.

Get: ParametersMap(self: Element) -> ParameterMap

"""

    Pinned = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the element has been pinned to prevent changes.

Get: Pinned(self: Element) -> bool

Set: Pinned(self: Element) = value
"""

    UniqueId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A stable unique identifier for an element within the document.

Get: UniqueId(self: Element) -> str

"""

    ViewSpecific = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the element is owned by a view.

Get: ViewSpecific(self: Element) -> bool

"""

    WorksetId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get Id of the Workset which owns the element.

Get: WorksetId(self: Element) -> WorksetId

"""



class Dimension(Element, IDisposable):
    """ An object that represents a dimension within the Revit project. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def IsTextPositionAdjustable(self):
        """
        IsTextPositionAdjustable(self: Dimension) -> bool
        
            Indicates if this dimension is supported to set/get TextPosition/LeaderPosition.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def ResetTextPosition(self):
        """
        ResetTextPosition(self: Dimension)
            Resets the text position of the dimension to the initial position determined by 
             its type and parameters.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Above = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text shown above the segment's value.

Get: Above(self: Dimension) -> str

Set: Above(self: Dimension) = value
"""

    AreSegmentsEqual = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if all segments are forced to be equal.

Get: AreSegmentsEqual(self: Dimension) -> bool

Set: AreSegmentsEqual(self: Dimension) = value
"""

    Below = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text shown below the segment's value.

Get: Below(self: Dimension) -> str

Set: Below(self: Dimension) = value
"""

    Curve = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A curve that represents the dimension line.

Get: Curve(self: Dimension) -> Curve

"""

    DimensionShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The shape of this dimension.

Get: DimensionShape(self: Dimension) -> DimensionShape

"""

    DimensionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The dimension style of this dimension.

Get: DimensionType(self: Dimension) -> DimensionType

Set: DimensionType(self: Dimension) = value
"""

    FamilyLabel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The family parameter label of the dimension.

Get: FamilyLabel(self: Dimension) -> FamilyParameter

Set: FamilyLabel(self: Dimension) = value
"""

    IsLocked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if this dimension is locked.

Get: IsLocked(self: Dimension) -> bool

Set: IsLocked(self: Dimension) = value
"""

    LeaderEndPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position of the dimension's leader end point.

Get: LeaderEndPosition(self: Dimension) -> XYZ

Set: LeaderEndPosition(self: Dimension) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the name associated with the Dimension.

Get: Name(self: Dimension) -> str

Set: Name(self: Dimension) = value
"""

    NumberOfSegments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of segments for the dimension.

Get: NumberOfSegments(self: Dimension) -> int

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The dimension origin.

Get: Origin(self: Dimension) -> XYZ

"""

    Prefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text shown before the segment's value.

Get: Prefix(self: Dimension) -> str

Set: Prefix(self: Dimension) = value
"""

    References = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns an array of geometric references to which the dimension is attached.

Get: References(self: Dimension) -> ReferenceArray

"""

    Segments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The segments in the dimension.

Get: Segments(self: Dimension) -> DimensionSegmentArray

"""

    Suffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text shown after the segment's value.

Get: Suffix(self: Dimension) -> str

Set: Suffix(self: Dimension) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position of the dimension text's drag point.

Get: TextPosition(self: Dimension) -> XYZ

Set: TextPosition(self: Dimension) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The value of the dimension.

Get: Value(self: Dimension) -> Nullable[float]

"""

    ValueOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text that replaces the segment's value.

Get: ValueOverride(self: Dimension) -> str

Set: ValueOverride(self: Dimension) = value
"""

    ValueString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The dimension value as a user visible string.

Get: ValueString(self: Dimension) -> str

"""

    View = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Supplies the view that contains the dimension if the dimension is view specific.

Get: View(self: Dimension) -> View

"""



class AngularDimension(Dimension, IDisposable):
    """ An object that represents an Angular Dimension within the Revit project. """
    @staticmethod
    def Create(document, dbView, arc, references, dimensionStyle):
        """ Create(document: Document, dbView: View, arc: Arc, references: IList[Reference], dimensionStyle: DimensionType) -> AngularDimension """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetRadius(self, radius):
        """
        SetRadius(self: AngularDimension, radius: float)
            Set radius of an Angular Dimension arc.
           The new radius of the arc.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class Instance(Element, IDisposable):
    """ The base class for all instance objects. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetTotalTransform(self):
        """
        GetTotalTransform(self: Instance) -> Transform
        
            Gets the total transform, which includes the true north transform for instances 
             like import instances.
        
            Returns: The calculated total transform.
        """
        pass

    def GetTransform(self):
        """
        GetTransform(self: Instance) -> Transform
        
            Gets the transform of the instance.
            Returns: The inherent transform.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FamilyInstance(Instance, IDisposable):
    """ This object represents a single instance of a family type, such as a single I beam. """
    def AddCoping(self, cutter):
        """
        AddCoping(self: FamilyInstance, cutter: FamilyInstance) -> bool
        
            Adds a coping (cut) to a steel beam.
        
            cutter: A steel beam or column. May not be ll or itself.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def flipFacing(self):
        """
        flipFacing(self: FamilyInstance) -> bool
        
            The orientation of family instance facing will be flipped. If it can not be 
             flipped, return false, otherwise return true.
        """
        pass

    def FlipFromToRoom(self):
        """
        FlipFromToRoom(self: FamilyInstance)
            Flips the settings of "From Room" and "To Room" for the door or window instance.
        """
        pass

    def flipHand(self):
        """
        flipHand(self: FamilyInstance) -> bool
        
            The orientation of family instance hand will be flipped. If it can not be 
             flipped, return false, otherwise return true.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetCopingIds(self):
        """
        GetCopingIds(self: FamilyInstance) -> ICollection[ElementId]
        
            Lists the elements currently used as coping cutters for this element.
            Returns: The coping ElementIds
        """
        pass

    def GetFamilyPointPlacementReferences(self):
        """
        GetFamilyPointPlacementReferences(self: FamilyInstance) -> IList[FamilyPointPlacementReference]
        
            Returns the Point Placement References for the Family Instance.
        """
        pass

    def GetOriginalGeometry(self, options):
        """
        GetOriginalGeometry(self: FamilyInstance, options: Options) -> GeometryElement
        
            Returns the original geometry of the instance, before the instance is modified 
             by 
        joins, cuts, coping, extensions, or other post-processing.
        
        
            options: The options used to obtain the geometry.  Note that ComputeReferences may not
        
             be set to true.
        """
        pass

    def GetSpatialElementCalculationPoint(self):
        """
        GetSpatialElementCalculationPoint(self: FamilyInstance) -> XYZ
        
            Gets the location of the calculation point for this instance.
            Returns: A 3d point.
        """
        pass

    def GetSpatialElementFromToCalculationPoints(self):
        """
        GetSpatialElementFromToCalculationPoints(self: FamilyInstance) -> IList[XYZ]
        
            Gets the locations for the calculation points for this instance.
            Returns: A list of 3d points.
        """
        pass

    def GetSubComponentIds(self):
        """
        GetSubComponentIds(self: FamilyInstance) -> ICollection[ElementId]
        
            Gets the sub component ElementIds of the current family instance.
            Returns: The subcomponent ElementIDs
        """
        pass

    def GetSweptProfile(self):
        """
        GetSweptProfile(self: FamilyInstance) -> SweptProfile
        
            Gets the object that describes the profile that is swept along the driving 
             curve for this instance.
        
            Returns: A swept profile.
        """
        pass

    def HasModifiedGeometry(self):
        """
        HasModifiedGeometry(self: FamilyInstance) -> bool
        
            Identifies if the geometry of this FamilyInstance 
        has been modified from the 
             automatically generated default.
        """
        pass

    def HasSweptProfile(self):
        """
        HasSweptProfile(self: FamilyInstance) -> bool
        
            Indicates if this instance can be represented as a swept profile.
            Returns: True if the instance can be represented as a swept profile, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveCoping(self, cutter):
        """
        RemoveCoping(self: FamilyInstance, cutter: FamilyInstance) -> bool
        
            Removes a coping (cut) from a steel beam.
        
            cutter: A steel beam or column for which this beam currently has a coping cut. May not 
             be ll or itself.
        """
        pass

    def rotate(self):
        """
        rotate(self: FamilyInstance) -> bool
        
            The family instance will be flipped by 180 degrees. If it can not be rotated, 
             return false, otherwise return true.
        """
        pass

    def SetCopingIds(self, cutters):
        """ SetCopingIds(self: FamilyInstance, cutters: ICollection[ElementId]) -> bool """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def Split(self, param):
        """
        Split(self: FamilyInstance, param: float) -> ElementId
        
            Splits the family instance element at a point on its defining curve.
        
            param: The normalized parameter value along the element (should be greater than 0 and 
             less than 1).
        
            Returns: The newly created family instance id.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CanFlipFacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to test whether the orientation of family instance facing can be flipped.

Get: CanFlipFacing(self: FamilyInstance) -> bool

"""

    CanFlipHand = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to test whether the orientation of family instance hand can be flipped.

Get: CanFlipHand(self: FamilyInstance) -> bool

"""

    CanFlipWorkPlane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the instance can flip its work plane.

Get: CanFlipWorkPlane(self: FamilyInstance) -> bool

"""

    CanRotate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to test whether the family instance can be rotated by 180 degrees.

Get: CanRotate(self: FamilyInstance) -> bool

"""

    CanSplit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether a particular family instance can be split at a point on it's defining curve (by Autodesk.Revit.DB.FamilyInstance.Split(System.Double)).

Get: CanSplit(self: FamilyInstance) -> bool

"""

    ExtensionUtility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to check whether the instance can be extended and return the interface for extension operation.

Get: ExtensionUtility(self: FamilyInstance) -> IExtension

"""

    FacingFlipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to test whether the orientation of family instance facing is flipped.

Get: FacingFlipped(self: FamilyInstance) -> bool

"""

    FacingOrientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to get the orientation of family instance facing.

Get: FacingOrientation(self: FamilyInstance) -> XYZ

"""

    HandFlipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to test whether the orientation of family instance hand is flipped.

Get: HandFlipped(self: FamilyInstance) -> bool

"""

    HandOrientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to get the orientation of family instance hand.

Get: HandOrientation(self: FamilyInstance) -> XYZ

"""

    HasSpatialElementCalculationPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if this instance has a single SpatialElementCalculationPoint used as the search point for Revit to identify if the instance is inside a room or space.

Get: HasSpatialElementCalculationPoint(self: FamilyInstance) -> bool

"""

    HasSpatialElementFromToCalculationPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if this instance has a pair of SpatialElementCalculationPoints used as the search points for Revit to identify if the instance lies between up to two rooms or spaces.

Get: HasSpatialElementFromToCalculationPoints(self: FamilyInstance) -> bool

"""

    Host = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """If the instance is contained within another element, this property returns the containing
element. An instance that is face hosted will return the element containing the face.

Get: Host(self: FamilyInstance) -> Element

"""

    HostFace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to get the reference to the host face of family instance.

Get: HostFace(self: FamilyInstance) -> Reference

"""

    HostParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """If the instance is hosted by a wall, this property returns the parameter value of the insertion
point of the instance along the wall's location curve, as long as the family of the instance isn't work plane based.

Get: HostParameter(self: FamilyInstance) -> float

"""

    Invisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to test whether the family instance is invisible.

Get: Invisible(self: FamilyInstance) -> bool

"""

    IsSlantedColumn = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the family instance is a slanted column.

Get: IsSlantedColumn(self: FamilyInstance) -> bool

"""

    IsWorkPlaneFlipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the instance's work plane is flipped.

Get: IsWorkPlaneFlipped(self: FamilyInstance) -> bool

Set: IsWorkPlaneFlipped(self: FamilyInstance) = value
"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property is used to find the physical location of an instance within project.

Get: Location(self: FamilyInstance) -> Location

"""

    MEPModel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the MEP model for the family instance.

Get: MEPModel(self: FamilyInstance) -> MEPModel

"""

    Mirrored = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to test whether the family instance is mirrored. (only one axis is flipped)

Get: Mirrored(self: FamilyInstance) -> bool

"""

    StructuralMaterialId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the material that defines the instance's structural analysis properties.

Get: StructuralMaterialId(self: FamilyInstance) -> ElementId

Set: StructuralMaterialId(self: FamilyInstance) = value
"""

    StructuralMaterialType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property returns the physical material from which the instance is made.

Get: StructuralMaterialType(self: FamilyInstance) -> StructuralMaterialType

"""

    StructuralType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provides the primary structural type of the instance, such as beam or column etc.

Get: StructuralType(self: FamilyInstance) -> StructuralType

"""

    StructuralUsage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provides the primary structural usage of the instance, such as brace, girder etc.

Get: StructuralUsage(self: FamilyInstance) -> StructuralInstanceUsage

Set: StructuralUsage(self: FamilyInstance) = value
"""

    SuperComponent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to get the super component of current family instance.

Get: SuperComponent(self: FamilyInstance) -> Element

"""

    Symbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns or changes the FamilySymbol object that represents the type of the instance.

Get: Symbol(self: FamilyInstance) -> FamilySymbol

Set: Symbol(self: FamilyInstance) = value
"""



class AnnotationSymbol(FamilyInstance, IDisposable):
    """ This object represents a symbol of the Generic Annotation. """
    def addLeader(self):
        """
        addLeader(self: AnnotationSymbol)
            add a leader to this annotation symbol.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def duplicate(self):
        """
        duplicate(self: AnnotationSymbol) -> AnnotationSymbol
        
            Duplicate this annotation symbol.
            Returns: Pointer to the new annotation symbol.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetLeaders(self):
        """
        GetLeaders(self: AnnotationSymbol) -> IList[Leader]
        
            Returns a collection of leaders currently attached to the annotation.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def removeLeader(self):
        """
        removeLeader(self: AnnotationSymbol)
            remove a leader of this annotation symbol.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AnnotationSymbolType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The AnnotationSymbol style of this AnnotationSymbol.

Get: AnnotationSymbolType(self: AnnotationSymbol) -> AnnotationSymbolType

Set: AnnotationSymbolType(self: AnnotationSymbol) = value
"""



class ElementType(Element, IDisposable):
    """ Base class for all Types within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def Duplicate(self, name):
        """
        Duplicate(self: ElementType, name: str) -> ElementType
        
            Duplicates an existing element type and assigns it a new name.
        
            name: The new name of the element type.
            Returns: The duplicated element type.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetPreviewImage(self, size):
        """
        GetPreviewImage(self: ElementType, size: Size) -> Bitmap
        
            Get the preview image of an element. This image is similar to what is seen in 
             the Revit UI when selecting the type of an element.
        
        
            size: The width and height of the preview image in pixels.
            Returns: System::Drawing::Bitmap represents the preview image. ll if there is no preview 
             image.
        """
        pass

    def GetSimilarTypes(self):
        """
        GetSimilarTypes(self: ElementType) -> ICollection[ElementId]
        
            Obtains a set of types that are similar to this type.
            Returns: A set of element IDs of types that are similar to this type.
        """
        pass

    def IsSimilarType(self, typeId):
        """
        IsSimilarType(self: ElementType, typeId: ElementId) -> bool
        
            Checks if given type is similar to this type.
        
            typeId: ElementId of the type to check.
            Returns: True if given type is similar to this type, false otherwise.
        """
        pass

    def IsValidDefaultFamilyType(self, familyCategoryId):
        """
        IsValidDefaultFamilyType(self: ElementType, familyCategoryId: ElementId) -> bool
        
            Identifies if this type is a valid default family type for the given family 
             category id.
        
        
            familyCategoryId: The family category id.
            Returns: True if this type is a valid default family type for the given family category 
             id.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CanBeCopied = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determine if this ElementType can create a copy

Get: CanBeCopied(self: ElementType) -> bool

"""

    CanBeDeleted = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determine if this ElementType can be deleted

Get: CanBeDeleted(self: ElementType) -> bool

"""

    CanBeRenamed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determine if this ElementType can be renamed

Get: CanBeRenamed(self: ElementType) -> bool

"""

    FamilyName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the family name of this element type.

Get: FamilyName(self: ElementType) -> str

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Set the name for the ElementType.

Set: Name(self: ElementType) = value
"""



class InsertableObject(ElementType, IDisposable):
    """ A base class you all types that are insertable. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FamilySymbol(InsertableObject, IDisposable):
    """ An element that represents a single type with a Family. """
    def Activate(self):
        """
        Activate(self: FamilySymbol)
            Activates the symbol to ensure that its geometry is accessible.
        """
        pass

    def CanHaveStructuralSection(self):
        """
        CanHaveStructuralSection(self: FamilySymbol) -> bool
        
            Identifies if this FamilySymbol can have a structural section.
            Returns: True if the FamilySymbol can have structural section, false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetFamilyPointLocations(self):
        """
        GetFamilyPointLocations(self: FamilySymbol) -> IList[FamilyPointLocation]
        
            Returns the Point Locations for the Family Symbol.
        """
        pass

    def GetStructuralSection(self):
        """
        GetStructuralSection(self: FamilySymbol) -> StructuralSection
        
            Gets the structural section from element.
            Returns: The structural section. ll if the family symbol does not contain a structural 
             section.
        """
        pass

    def GetThermalProperties(self):
        """
        GetThermalProperties(self: FamilySymbol) -> FamilyThermalProperties
        
            Gets the thermal properties for the given FamilySymbol.
            Returns: The thermal properties. ll if the family symbol does not contain thermal 
             properties.
        """
        pass

    def HasThermalProperties(self):
        """
        HasThermalProperties(self: FamilySymbol) -> bool
        
            Identifies if this FamilySymbol can include thermal properties.
            Returns: True if the FamilySymbol can include thermal properties, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetStructuralSection(self, structuralSection):
        """
        SetStructuralSection(self: FamilySymbol, structuralSection: StructuralSection)
            Sets the structural section in element.
        
            structuralSection: Structural section with values that will be set.
        """
        pass

    def SetThermalProperties(self, thermalProperties):
        """
        SetThermalProperties(self: FamilySymbol, thermalProperties: FamilyThermalProperties)
            Sets the thermal properties for the given FamilySymbol.
        
            thermalProperties: The new thermal properties. If ll, this unsets custom thermal properties for 
             this FamilySymbol.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Family = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Family object to which the symbol belongs.

Get: Family(self: FamilySymbol) -> Family

"""

    IsActive = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether the symbol is active.

Get: IsActive(self: FamilySymbol) -> bool

"""

    StructuralMaterialType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property returns the physical material from which the type is made.

Get: StructuralMaterialType(self: FamilySymbol) -> StructuralMaterialType

"""



class AnnotationSymbolType(FamilySymbol, IDisposable):
    """ An object that represents an annotation style. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class APIObject(object, IDisposable):
    """ Supports all objects in the Autodesk Revit API hierarchy. """
    def Dispose(self):
        """
        Dispose(self: APIObject)
            Causes the object to release immediately any resources it may be utilizing.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the object is read-only or modifiable.

Get: IsReadOnly(self: APIObject) -> bool

"""



class AppearanceAssetElement(Element, IDisposable):
    """ An element that represents an appearance asset for use in composing material definitions. """
    @staticmethod
    def Create(document, name, asset):
        """
        Create(document: Document, name: str, asset: Asset) -> AppearanceAssetElement
        
            Creates a new AppearancAssetElement.
        
            document: The document in which to create the AppearanceAssetElement.
            name: The name of the AppearanceAssetElement.
            asset: The rendering asset of the element.
            Returns: The new AppearanceAssetElement.
           Note that document will own this pointer, 
             you should access it without owning it.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    @staticmethod
    def GetAppearanceAssetElementByName(doc, name):
        """
        GetAppearanceAssetElementByName(doc: Document, name: str) -> AppearanceAssetElement
        
            Gets an AppearanceAssetElement by name.
        
            doc: Document containing the AppearanceAssetElement.
            name: Name of the AppearanceAssetElement.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetRenderingAsset(self):
        """
        GetRenderingAsset(self: AppearanceAssetElement) -> Asset
        
            Gets the rendering asset for the appearance asset element.
            Returns: The rendering asset held by this appearance asset element.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetRenderingAsset(self, asset):
        """
        SetRenderingAsset(self: AppearanceAssetElement, asset: Asset)
            Sets the rendering asset for the appearance asset element.
        
            asset: The new rendering asset.It should be an appearance asset.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class GeometryObject(APIObject, IDisposable):
    """ The common base class for all geometric primitives. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def Equals(self, obj):
        """
        Equals(self: GeometryObject, obj: object) -> bool
        
            Determines whether the specified System.Object is equal to the current 
             System.Object.
        
        
            obj: Another object.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: GeometryObject) -> int
        
            Gets the integer value of the geometry object as hash code
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    GraphicsStyleId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ElementId of the GeometryObject's GraphicsStyle

Get: GraphicsStyleId(self: GeometryObject) -> ElementId

"""

    IsElementGeometry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this geometry is obtained directly from an Element.

Get: IsElementGeometry(self: GeometryObject) -> bool

"""

    Visibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The visibility.

Get: Visibility(self: GeometryObject) -> Visibility

"""



class Curve(GeometryObject, IDisposable):
    """ A parametric curve. """
    def Clone(self):
        """
        Clone(self: Curve) -> Curve
        
            Returns a copy of this curve.
            Returns: A copy of this curve.
        """
        pass

    def ComputeDerivatives(self, parameter, normalized):
        """
        ComputeDerivatives(self: Curve, parameter: float, normalized: bool) -> Transform
        
            Returns the vectors describing the curve at the specified parameter.
        
            parameter: The parameter to be evaluated.
            normalized: If false, param is interpreted as natural parameterization of the curve.
           If 
             true, param is expected to be in [0,1] interval mapped to the bounds of the 
             curve. Setting to true is valid only if the curve is bound.
        
            Returns: The transformation containing the point on the curve, the tangent vector, 
             derivative of tangent vector, and bi-normal vector.
        """
        pass

    def ComputeNormalizedParameter(self, rawParameter):
        """
        ComputeNormalizedParameter(self: Curve, rawParameter: float) -> float
        
            Computes the normalized curve parameter from the raw parameter.
        
            rawParameter: The raw parameter.
            Returns: The real number equal to the normalized curve parameter.
        """
        pass

    def ComputeRawParameter(self, normalizedParameter):
        """
        ComputeRawParameter(self: Curve, normalizedParameter: float) -> float
        
            Computes the raw parameter from the normalized parameter.
        
            normalizedParameter: The normalized parameter.
            Returns: The real number equal to the raw curve parameter.
        """
        pass

    def CreateOffset(self, offsetDist, referenceVector):
        """
        CreateOffset(self: Curve, offsetDist: float, referenceVector: XYZ) -> Curve
        
            Creates a new curve that is an offset of the existing curve.
        
            offsetDist: The signed distance that controls the offset.
            referenceVector: A reference vector to define the offset direction.
            Returns: The new curve.
        """
        pass

    def CreateReversed(self):
        """
        CreateReversed(self: Curve) -> Curve
        
            Creates a new curve with the opposite orientation of the existing curve.
            Returns: The new curve.
        """
        pass

    def CreateTransformed(self, transform):
        """
        CreateTransformed(self: Curve, transform: Transform) -> Curve
        
            Crates a new instance of a curve as a transformation of this curve.
        
            transform: The transform to apply.
            Returns: The new curve.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def Distance(self, point):
        """
        Distance(self: Curve, point: XYZ) -> float
        
            Returns the shortest distance from the specified point to this curve.
        
            point: The specified point.
            Returns: The real number equal to the shortest distance.
        """
        pass

    def Evaluate(self, parameter, normalized):
        """
        Evaluate(self: Curve, parameter: float, normalized: bool) -> XYZ
        
            Evaluates and returns the point that matches a parameter along the curve.
        
            parameter: The parameter to be evaluated.
            normalized: If false, param is interpreted as natural parameterization of the curve.
           If 
             true, param is expected to be in [0,1] interval mapped to the bounds of the 
             curve. Setting to true is valid only if the curve is bound.
        
            Returns: The point evaluated along the curve.
        """
        pass

    def GetEndParameter(self, index):
        """
        GetEndParameter(self: Curve, index: int) -> float
        
            Returns the raw parameter value at the start or end of this curve.
        
            index: 0 for the start or 1 for end of the curve.
            Returns: The parameter.
        """
        pass

    def GetEndPoint(self, index):
        """
        GetEndPoint(self: Curve, index: int) -> XYZ
        
            Returns the 3D point at the start or end of this curve.
        
            index: 0 for the start or 1 for end of the curve.
            Returns: The curve endpoint.
        """
        pass

    def GetEndPointReference(self, index):
        """
        GetEndPointReference(self: Curve, index: int) -> Reference
        
            Returns a stable reference to the start point or the end point of the curve.
        
            index: Use 0 for the start point; 1 for the end point.
            Returns: Reference to the point or ll if reference cannot be obtained.
        """
        pass

    def Intersect(self, curve, resultArray=None):
        """
        Intersect(self: Curve, curve: Curve) -> SetComparisonResult
        
            Calculates the intersection of this curve with the specified curve.
        
            curve: The specified curve to intersect with this curve.
            Returns: SetComparisonResult.Overlap - One or more intersections were encountered. 
             SetComparisonResult.Subset - The inputs are parallel lines with only one common 
             intersection point, or 
        the curve used to invoke the intersection check is a 
             line entirely within the unbound line passed as argument 
             curve.SetComparisonResult.Superset - The input curve is entirely within the 
             unbound line used to invoke the intersection check.SetComparisonResult.Disjoint 
             - There is no intersection found between the two 
             curves.SetComparisonResult.Equal - The two curves are identical.
        
        Intersect(self: Curve, curve: Curve) -> (SetComparisonResult, IntersectionResultArray)
        
            Calculates the intersection of this curve with the specified curve and returns 
             the intersection results.
        
        
            curve: The specified curve to intersect with this curve.
            Returns: SetComparisonResult.Overlap - One or more intersections were encountered.  The 
             output argument has the details.SetComparisonResult.Subset - The inputs are 
             parallel lines with only one common intersection point, or 
        the curve used to 
             invoke the intersection check is a line entirely within the unbound line passed 
             as argument curve.
        If the former, the output argument has the details of the 
             intersection point.SetComparisonResult.Superset - The input curve is entirely 
             within the unbound line used to invoke the intersection 
             check.SetComparisonResult.Disjoint - There is no intersection found between the 
             two curves.SetComparisonResult.Equal - The two curves are identical.
        """
        pass

    def IsInside(self, parameter, end=None):
        """
        IsInside(self: Curve, parameter: float) -> bool
        
            Indicates whether the specified parameter value is within this curve's bounds.
        
            parameter: The raw curve parameter to be evaluated.
            Returns: True if the parameter is within the bounds, otherwise false.
        IsInside(self: Curve, parameter: float) -> (bool, int)
        
            Indicates whether the specified parameter value is within this curve's bounds 
             and outputs the end index.
        
        
            parameter: The raw curve parameter to be evaluated.
            Returns: True if the parameter is within the curve's bounds, otherwise false.
        """
        pass

    def MakeBound(self, startParameter, endParameter):
        """
        MakeBound(self: Curve, startParameter: float, endParameter: float)
            Changes the bounds of this curve to the specified values.
        
            startParameter: The new parameter of the start point.
            endParameter: The new parameter of the end point.
        """
        pass

    def MakeUnbound(self):
        """
        MakeUnbound(self: Curve)
            Makes this curve unbound.
        """
        pass

    def Project(self, point):
        """
        Project(self: Curve, point: XYZ) -> IntersectionResult
        
            Projects the specified point on this curve.
        
            point: The point to be projected.
            Returns: Geometric information if projection is successful.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def SetGraphicsStyleId(self, id):
        """
        SetGraphicsStyleId(self: Curve, id: ElementId)
            Sets the graphics style id for this curve.
        
            id: The id of the GraphicsStyle element from which to apply the curve properties.
        """
        pass

    def Tessellate(self):
        """
        Tessellate(self: Curve) -> IList[XYZ]
        
            Valid only if the curve is bound. Returns a polyline approximation to the curve.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ApproximateLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The approximate length of the curve.

Get: ApproximateLength(self: Curve) -> float

"""

    IsBound = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Describes whether the parameter of the curve is restricted to a particular interval.

Get: IsBound(self: Curve) -> bool

"""

    IsCyclic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The boolean value that indicates whether this curve is cyclic.

Get: IsCyclic(self: Curve) -> bool

"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The exact length of the curve.

Get: Length(self: Curve) -> float

"""

    Period = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The period of this curve.

Get: Period(self: Curve) -> float

"""

    Reference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns a stable reference to the curve.

Get: Reference(self: Curve) -> Reference

"""



class Arc(Curve, IDisposable):
    """ A circular arc. """
    @staticmethod
    def Create(*__args):
        """
        Create(center: XYZ, radius: float, startAngle: float, endAngle: float, xAxis: XYZ, yAxis: XYZ) -> Arc
        
            Creates a new geometric arc object based on center, radius, unit vectors, and 
             angles.
        
        
            center: The center of the arc.
            radius: The radius of the arc.
            startAngle: The start angle of the arc (in radians).
            endAngle: The end angle of the arc (in radians).
            xAxis: The x axis to define the arc plane. Must be normalized.
            yAxis: The y axis to define the arc plane. Must be normalized.
            Returns: The new arc.
        Create(plane: Plane, radius: float, startAngle: float, endAngle: float) -> Arc
        
            Creates a new geometric arc object based on plane, radius, and angles.
        
            plane: The plane which the arc resides. The plane's origin is the center of the arc.
            radius: The radius of the arc.
            startAngle: The start angle of the arc (in radians).
            endAngle: The end angle of the arc (in radians).
            Returns: The new arc.
        Create(end0: XYZ, end1: XYZ, pointOnArc: XYZ) -> Arc
        
            Creates a new geometric arc object based on three points.
        
            end0: The start point of the arc.
            end1: The end point of the arc.
            pointOnArc: A point on the arc.
            Returns: The new arc.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the center of the arc.

Get: Center(self: Arc) -> XYZ

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the normal to the plane in which the arc is defined.

Get: Normal(self: Arc) -> XYZ

"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the radius of the arc.

Get: Radius(self: Arc) -> float

"""

    XDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the X direction.

Get: XDirection(self: Arc) -> XYZ

"""

    YDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Y direction.

Get: YDirection(self: Arc) -> XYZ

"""



class SpatialElement(Element, IDisposable):
    """
    Represents an enclosed area or volume in the Revit model.  This is the parent class for 
    rooms, spaces and areas.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetBoundarySegments(self, options):
        """
        GetBoundarySegments(self: SpatialElement, options: SpatialElementBoundaryOptions) -> IList[IList[BoundarySegment]]
        
            Returns the boundary segments.
        
            options: The SpatialElementBoundaryOptions.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The area.

Get: Area(self: SpatialElement) -> float

"""

    Level = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the level of the room.

Get: Level(self: SpatialElement) -> Level

"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The location of the element.

Get: Location(self: SpatialElement) -> Location

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A human readable name for the Element.

Set: Name(self: SpatialElement) = value
"""

    Number = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number.

Get: Number(self: SpatialElement) -> str

Set: Number(self: SpatialElement) = value
"""

    Perimeter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The perimeter.

Get: Perimeter(self: SpatialElement) -> float

"""



class Area(SpatialElement, IDisposable):
    """ Provides access to the area topology in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AreaScheme = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The area scheme.

Get: AreaScheme(self: Area) -> AreaScheme

"""

    IsGrossInterior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The boolean value that indicates whether the area is gross interior.

Get: IsGrossInterior(self: Area) -> bool

"""



class AreaElemType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type to store type of AreaElement.
    
    enum AreaElemType, values: BOMAArea (1), GrossArea (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BOMAArea = None
    GrossArea = None
    value__ = None


class ElementFilter(object, IDisposable):
    """ A base class for a type of filter that accepts or rejects elements based upon criteria. """
    def Dispose(self):
        """ Dispose(self: ElementFilter) """
        pass

    def PassesFilter(self, *__args):
        """
        PassesFilter(self: ElementFilter, element: Element) -> bool
        
            Applies the filter to a given element.
        
            element: The element.
            Returns: True if the element is accepted by the filter.  False if the element is 
             rejected.
        
        PassesFilter(self: ElementFilter, document: Document, id: ElementId) -> bool
        
            Applies the filter to a given element.
        
            document: The document.
            id: The element id.
            Returns: True if the element is accepted by the filter.  False if the element is 
             rejected.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Inverted = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the results of the filter are inverted; elements that would normally be accepted by this filter will be rejected,
   and elements that would normally be rejected will be accepted.

Get: Inverted(self: ElementFilter) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ElementFilter) -> bool

"""



class ElementSlowFilter(ElementFilter, IDisposable):
    """ A base class for a type of filter that operates on expanded elements. """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AreaFilter(ElementSlowFilter, IDisposable):
    """
    A filter used to match areas.
    
    AreaFilter()
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AreaScheme(Element, IDisposable):
    """ The area scheme associated with a particular area plan. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsGrossBuildingArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the area scheme is a Gross Building Area scheme.

Get: IsGrossBuildingArea(self: AreaScheme) -> bool

"""



class SpatialElementTag(Element, IDisposable):
    """ A tag attached to an SpatialElement (room, space or area) in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    HasLeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if a leader is displayed for the tag or not.

Get: HasLeader(self: SpatialElementTag) -> bool

Set: HasLeader(self: SpatialElementTag) = value
"""

    IsOrphaned = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the tag is orphaned or not.

Get: IsOrphaned(self: SpatialElementTag) -> bool

"""

    IsTaggingLink = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the tag has reference to an object in a linked document or not.

Get: IsTaggingLink(self: SpatialElementTag) -> bool

"""

    LeaderElbow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position of the leader's elbow (middle point).

Get: LeaderElbow(self: SpatialElementTag) -> XYZ

Set: LeaderElbow(self: SpatialElementTag) = value
"""

    LeaderEnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position of the leader's end.

Get: LeaderEnd(self: SpatialElementTag) -> XYZ

Set: LeaderEnd(self: SpatialElementTag) = value
"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The location of the tag.

Get: Location(self: SpatialElementTag) -> Location

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name associated with the tag.

Set: Name(self: SpatialElementTag) = value
"""

    TagHeadPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position of the tag's head.

Get: TagHeadPosition(self: SpatialElementTag) -> XYZ

Set: TagHeadPosition(self: SpatialElementTag) = value
"""

    TagOrientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The orientation of the tag.

Get: TagOrientation(self: SpatialElementTag) -> SpatialElementTagOrientation

Set: TagOrientation(self: SpatialElementTag) = value
"""

    View = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The view in which the tag was placed.

Get: View(self: SpatialElementTag) -> View

"""



class AreaTag(SpatialElementTag, IDisposable):
    """ Provides access to the area topology in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The area that the tag is associated with.

Get: Area(self: AreaTag) -> Area

"""

    AreaTagType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The tag type.

Get: AreaTagType(self: AreaTag) -> AreaTagType

Set: AreaTagType(self: AreaTag) = value
"""



class AreaTagFilter(ElementSlowFilter, IDisposable):
    """
    A filter used to match area tags.
    
    AreaTagFilter()
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AreaTagType(FamilySymbol, IDisposable):
    """ An object that represents an Area Tag style. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AreaVolumeSettings(Element, IDisposable):
    """ This class provides access to settings related to volume and area computations. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    @staticmethod
    def GetAreaVolumeSettings(aDoc):
        """
        GetAreaVolumeSettings(aDoc: Document) -> AreaVolumeSettings
        
            Get the area and volume settings of the project.
        
            aDoc: The document.
            Returns: The area and volume settings of the project.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetSpatialElementBoundaryLocation(self, spType):
        """
        GetSpatialElementBoundaryLocation(self: AreaVolumeSettings, spType: SpatialElementType) -> SpatialElementBoundaryLocation
        
            Gets the spatial element boundary location based on spatial element type.
        
            spType: The spatial element type.
            Returns: The boundary location.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetSpatialElementBoundaryLocation(self, spatialElementBoundaryLocation, spType):
        """
        SetSpatialElementBoundaryLocation(self: AreaVolumeSettings, spatialElementBoundaryLocation: SpatialElementBoundaryLocation, spType: SpatialElementType)
            Sets the spatial element boundary location of a spatial element type.
        
            spatialElementBoundaryLocation: The boundary location.
            spType: The spatial element type.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ComputeVolumes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to enable volume computation.  False to disable it.

Get: ComputeVolumes(self: AreaVolumeSettings) -> bool

Set: ComputeVolumes(self: AreaVolumeSettings) = value
"""



class ArrayAnchorMember(Enum, IComparable, IFormattable, IConvertible):
    """
    Represents the possible choices for how the translation or rotation is used to place each member of the array.
    
    enum ArrayAnchorMember, values: Last (1), Second (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Last = None
    Second = None
    value__ = None


class KeyBasedTreeEntryTable(Element, IDisposable):
    """ KeyBasedTreeEntryTable represents the collection of key-based tree entries for a document. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetKeyBasedTreeEntries(self):
        """
        GetKeyBasedTreeEntries(self: KeyBasedTreeEntryTable) -> KeyBasedTreeEntries
        
            Gets the KeyBasedTreeEntries for this table.
            Returns: The KeyBasedTreeEntries for this table.
        """
        pass

    def LoadFrom(self, desiredResourceReference, loadResults):
        """
        LoadFrom(self: KeyBasedTreeEntryTable, desiredResourceReference: ExternalResourceReference, loadResults: KeyBasedTreeEntriesLoadResults) -> ExternalResourceLoadStatus
        
            Loads KeyBasedTreeEntries from the specified external resource into this 
             KeyBasedTreeEntryTable.
        
        
            desiredResourceReference: An external resource reference describing the source of the desired 
             KeyBasedTreeEntry data.
        
            loadResults: If provided, Revit will use this object to store any
           errors or warnings 
             that were encountered. This argument may be ll.
        
            Returns: Returns whether the operation succeeded or failed.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def Reload(self, loadResults):
        """
        Reload(self: KeyBasedTreeEntryTable, loadResults: KeyBasedTreeEntriesLoadResults) -> ExternalResourceLoadStatus
        
            Reloads KeyBasedTreeEntries from their currently-stored location into this 
             KeyBasedTreeEntryTable.
        
        
            loadResults: If provided, Revit will use this object to store any
           errors or warnings 
             that were encountered.  Note that if the KeyBasedTreeEntries in the model are
         
               already up to date, no errors or warnings will be added to this object. This 
             argument may be ll.
        
            Returns: Returns the outcome of the reload operation.
        """
        pass

    def ServerSupports(self, extRef):
        """
        ServerSupports(self: KeyBasedTreeEntryTable, extRef: ExternalResourceReference) -> bool
        
            Checks if the server referenced by the given ExternalResourceReference supports 
             the
           ExternalResourceReferenceType of this KeyBasedTreeEntryTable.
        
        
            extRef: The ExternalResourceReference to check.
            Returns: True if the ExternalResourceReference refers to a server that supports the 
             ExternalResourceReferenceType of this KeyBasedTreeEntryTable.
           False 
             otherwise.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AssemblyCodeTable(KeyBasedTreeEntryTable, IDisposable):
    """ AssemblyCodeTable represents the collection of ClassificationEntries for a document. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    @staticmethod
    def GetAssemblyCodeTable(doc):
        """
        GetAssemblyCodeTable(doc: Document) -> AssemblyCodeTable
        
            Returns the AssemblyCodeTable for the specified document.
        
            doc: The document owns the AssemblyCodeTable.
            Returns: The AssemblyCodeTable for the document.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AssemblyDetailViewOrientation(Enum, IComparable, IFormattable, IConvertible):
    """
    Orientation of the Assembly Detail View.
    
    enum AssemblyDetailViewOrientation, values: DetailSectionA (1), DetailSectionB (2), ElevationBack (8), ElevationBottom (4), ElevationFront (7), ElevationLeft (5), ElevationRight (6), ElevationTop (3), HorizontalDetail (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DetailSectionA = None
    DetailSectionB = None
    ElevationBack = None
    ElevationBottom = None
    ElevationFront = None
    ElevationLeft = None
    ElevationRight = None
    ElevationTop = None
    HorizontalDetail = None
    value__ = None


class AssemblyDifference(object, IDisposable):
    """ Class that describes difference between two assemblies. """
    def Dispose(self):
        """ Dispose(self: AssemblyDifference) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AssemblyDifference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: AssemblyDifference) -> bool

"""



class AssemblyDifferenceConfiguration(AssemblyDifference, IDisposable):
    """ The two assemblies being compared have different spatial configuration """
    def Dispose(self):
        """ Dispose(self: AssemblyDifference, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AssemblyDifference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AssemblyDifferenceMemberCount(AssemblyDifference, IDisposable):
    """ The two assemblies being compared have different number of members """
    def Dispose(self):
        """ Dispose(self: AssemblyDifference, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AssemblyDifference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Count1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Number of members in the first assembly

Get: Count1(self: AssemblyDifferenceMemberCount) -> int

"""

    Count2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Number of members in the second assembly

Get: Count2(self: AssemblyDifferenceMemberCount) -> int

"""



class AssemblyDifferenceMemberDifference(AssemblyDifference, IDisposable):
    """ The two assemblies being compared have different members """
    def Dispose(self):
        """ Dispose(self: AssemblyDifference, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AssemblyDifference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    MemberDifference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Difference between the assembly members

Get: MemberDifference(self: AssemblyDifferenceMemberDifference) -> AssemblyMemberDifference

"""

    MemberId1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the member in the first assembly

Get: MemberId1(self: AssemblyDifferenceMemberDifference) -> ElementId

"""

    MemberId2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the member in the second assembly

Get: MemberId2(self: AssemblyDifferenceMemberDifference) -> ElementId

"""



class AssemblyDifferenceNamingCategory(AssemblyDifference, IDisposable):
    """ The two assemblies being compared have different naming categories """
    def Dispose(self):
        """ Dispose(self: AssemblyDifference, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AssemblyDifference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    NamingCategoryId1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Naming category id of the first assembly

Get: NamingCategoryId1(self: AssemblyDifferenceNamingCategory) -> ElementId

"""

    NamingCategoryId2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Naming category id of the second assembly

Get: NamingCategoryId2(self: AssemblyDifferenceNamingCategory) -> ElementId

"""



class AssemblyDifferenceNone(AssemblyDifference, IDisposable):
    """ The two assemblies being compared are identical """
    def Dispose(self):
        """ Dispose(self: AssemblyDifference, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AssemblyDifference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AssemblyInstance(Element, IDisposable):
    """ Combines multiple elements for tagging, filtering, scheduling and creating isolated assembly views. """
    def AddMemberIds(self, memberIds):
        """ AddMemberIds(self: AssemblyInstance, memberIds: ICollection[ElementId]) """
        pass

    def AllowsAssemblyViewCreation(self):
        """
        AllowsAssemblyViewCreation(self: AssemblyInstance) -> bool
        
            Returns true if assembly views can be created for this Assembly Instance.
        """
        pass

    @staticmethod
    def AreElementsValidForAssembly(document, assemblyMemberIds, assemblyId):
        """ AreElementsValidForAssembly(document: Document, assemblyMemberIds: ICollection[ElementId], assemblyId: ElementId) -> bool """
        pass

    @staticmethod
    def CanRemoveElementsFromAssembly(assemblyInstance, memberIds):
        """ CanRemoveElementsFromAssembly(assemblyInstance: AssemblyInstance, memberIds: ICollection[ElementId]) -> bool """
        pass

    @staticmethod
    def CompareAssemblyInstances(instance1, instance2):
        """
        CompareAssemblyInstances(instance1: AssemblyInstance, instance2: AssemblyInstance) -> AssemblyDifference
        
            Compares two assembly instances and returns a result with details about the 
             differences
        
        
            instance1: The first assembly instance to compare
            instance2: the second assembly instance to compare
            Returns: An object describing the difference between the two instances
        """
        pass

    @staticmethod
    def Create(document, assemblyMemberIds, namingCategoryId):
        """ Create(document: Document, assemblyMemberIds: ICollection[ElementId], namingCategoryId: ElementId) -> AssemblyInstance """
        pass

    def Disassemble(self):
        """
        Disassemble(self: AssemblyInstance) -> ICollection[ElementId]
        
            Removes the assembly instance and releases the member elements.
            Returns: ids of elements previously under the assembly instance.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetCenter(self):
        """
        GetCenter(self: AssemblyInstance) -> XYZ
        
            Returns the center of the bounding box for the assembly instance.
           This is 
             the default position for placed assembly instances.
        
            Returns: The position for the center of the assembly instance.
        """
        pass

    def GetMemberIds(self):
        """
        GetMemberIds(self: AssemblyInstance) -> ICollection[ElementId]
        
            Gets member element ids for the assembly instance.
            Returns: Element ids for the members of the assembly instance.
        """
        pass

    def GetTransform(self):
        """
        GetTransform(self: AssemblyInstance) -> Transform
        
            Gets the origin of the assembly instance.
            Returns: The origin of the assembly instance.
        """
        pass

    @staticmethod
    def IsValidNamingCategory(document, namingCategoryId, assemblyMemberIds):
        """ IsValidNamingCategory(document: Document, namingCategoryId: ElementId, assemblyMemberIds: ICollection[ElementId]) -> bool """
        pass

    @staticmethod
    def PlaceInstance(document, assemblyTypeId, location):
        """
        PlaceInstance(document: Document, assemblyTypeId: ElementId, location: XYZ) -> AssemblyInstance
        
            Places an assembly instance of a given assembly type at the specified location.
        
            document: The document for the new assembly instance.
            assemblyTypeId: The id of the assembly type to be used for the instance.
            location: The placement location for the instance in project coordinates.
            Returns: The newly created assembly instance.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveMemberIds(self, memberIds):
        """ RemoveMemberIds(self: AssemblyInstance, memberIds: ICollection[ElementId]) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetMemberIds(self, memberIds):
        """ SetMemberIds(self: AssemblyInstance, memberIds: ICollection[ElementId]) """
        pass

    def SetTransform(self, trf):
        """
        SetTransform(self: AssemblyInstance, trf: Transform)
            Sets the origin of the assembly instance.
        
            trf: Transform to be set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AssemblyTypeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name for the assembly type.
   All matching assembly instances share this name.
   Unique assembly instances are named automatically based on their naming category.

Get: AssemblyTypeName(self: AssemblyInstance) -> str

Set: AssemblyTypeName(self: AssemblyInstance) = value
"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property is used to find the physical location of the assembly instance within project.

Get: Location(self: AssemblyInstance) -> Location

"""

    NamingCategoryId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the category that drives the default naming scheme for the assembly instance.

Get: NamingCategoryId(self: AssemblyInstance) -> ElementId

Set: NamingCategoryId(self: AssemblyInstance) = value
"""



class AssemblyMemberDifference(object, IDisposable):
    """ Class that describes difference between two assembly members """
    def Dispose(self):
        """ Dispose(self: AssemblyMemberDifference) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AssemblyMemberDifference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: AssemblyMemberDifference) -> bool

"""



class AssemblyMemberDifferentCategory(AssemblyMemberDifference, IDisposable):
    """ The two assembly members being compared have different category """
    def Dispose(self):
        """ Dispose(self: AssemblyMemberDifference, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AssemblyMemberDifference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CategoryId1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Category id of the first assembly member

Get: CategoryId1(self: AssemblyMemberDifferentCategory) -> ElementId

"""

    CategoryId2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Category id of the second assembly member

Get: CategoryId2(self: AssemblyMemberDifferentCategory) -> ElementId

"""



class AssemblyMemberDifferentGeometry(AssemblyMemberDifference, IDisposable):
    """ The two assembly members being compared have different geometry """
    def Dispose(self):
        """ Dispose(self: AssemblyMemberDifference, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AssemblyMemberDifference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AssemblyMemberDifferentParameters(AssemblyMemberDifference, IDisposable):
    """ The two assembly members being compared have different parameters """
    def Dispose(self):
        """ Dispose(self: AssemblyMemberDifference, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AssemblyMemberDifference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AssemblyMemberDifferentType(AssemblyMemberDifference, IDisposable):
    """ The two assembly members being compared have different type """
    def Dispose(self):
        """ Dispose(self: AssemblyMemberDifference, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: AssemblyMemberDifference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    TypeId1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Type id of the first assembly member

Get: TypeId1(self: AssemblyMemberDifferentType) -> ElementId

"""

    TypeId2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Type id of the second assembly member

Get: TypeId2(self: AssemblyMemberDifferentType) -> ElementId

"""



class AssemblyType(ElementType, IDisposable):
    """ Type for construction assembly elements. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class AssemblyViewUtils(object):
    """ Utilities that provide capabilities related to assembly view creation and validation. """
    @staticmethod
    def AcquireAssemblyViews(document, sourceAssemblyInstanceId, targetAssemblyInstanceId):
        """
        AcquireAssemblyViews(document: Document, sourceAssemblyInstanceId: ElementId, targetAssemblyInstanceId: ElementId)
            Transfers the assembly views owned by a source assembly instance to a target 
             sibling assembly instance of the same assembly type.
        
        
            document: The document in which the assembly instances live.
            sourceAssemblyInstanceId: Id of the assembly instance that currently owns the assembly views.
            targetAssemblyInstanceId: Id of the assembly instance which will become the new owner of the assembly 
             views.
        """
        pass

    @staticmethod
    def Create3DOrthographic(document, assemblyInstanceId, viewTemplateId=None, isAssigned=None):
        """
        Create3DOrthographic(document: Document, assemblyInstanceId: ElementId) -> View3D
        
            Creates a new orthographic 3D assembly view for the assembly instance.
        
            document: The document to which the view will be added.
            assemblyInstanceId: Id of the assembly instance that owns the new view.
            Returns: A new orthographic 3D assembly view.
        Create3DOrthographic(document: Document, assemblyInstanceId: ElementId, viewTemplateId: ElementId, isAssigned: bool) -> View3D
        
            Creates a new orthographic 3D assembly view for the assembly instance.
           The 
             view will have the same orientation as the Default 3D view.
           The document 
             must be regenerated before using the 3D view.
        
        
            document: The document to which the view will be added.
            assemblyInstanceId: Id of the assembly instance that owns the new view.
            viewTemplateId: Id of the view template that is used to create the view;
           if 
             invalidElementId, the view will be created with the default settings.
        
            isAssigned: If true, the template will be assigned, if false, the template will be applied.
            Returns: A new orthographic 3D assembly view.
        """
        pass

    @staticmethod
    def CreateDetailSection(document, assemblyInstanceId, direction, viewTemplateId=None, isAssigned=None):
        """
        CreateDetailSection(document: Document, assemblyInstanceId: ElementId, direction: AssemblyDetailViewOrientation) -> ViewSection
        
            Creates a new detail section assembly view for the assembly instance.
        
            document: The document to which the view will be added.
            assemblyInstanceId: Id of the assembly instance that owns the new view.
            direction: The direction for the new view.
            Returns: A new detail section assembly view.
        CreateDetailSection(document: Document, assemblyInstanceId: ElementId, direction: AssemblyDetailViewOrientation, viewTemplateId: ElementId, isAssigned: bool) -> ViewSection
        
            Creates a new detail section assembly view for the assembly instance.
        
            document: The document to which the view will be added.
            assemblyInstanceId: Id of the assembly instance that owns the new view.
            direction: The direction for the new view.
            viewTemplateId: Id of the view template that is used to create the view; if invalidElementId, 
             the view will be created with the default settings.
        
            isAssigned: If true, the template will be assigned; if false, the template will be applied.
            Returns: A new detail section assembly view.
        """
        pass

    @staticmethod
    def CreateMaterialTakeoff(document, assemblyInstanceId, viewTemplateId=None, isAssigned=None):
        """
        CreateMaterialTakeoff(document: Document, assemblyInstanceId: ElementId) -> ViewSchedule
        
            Creates a new material takeoff multicategory schedule assembly view for the 
             assembly instance.
        
        
            document: The document to which the view will be added.
            assemblyInstanceId: Id of the assembly instance that owns the new view.
            Returns: A new material takeoff multicategory schedule assembly view.
        CreateMaterialTakeoff(document: Document, assemblyInstanceId: ElementId, viewTemplateId: ElementId, isAssigned: bool) -> ViewSchedule
        
            Creates a new material takeoff multicategory schedule assembly view for the 
             assembly instance.
        
        
            document: The document to which the view will be added.
            assemblyInstanceId: Id of the assembly instance that owns the new view.
            viewTemplateId: Id of the view template that is used to create the view;
           if 
             invalidElementId, the view will be created with the default settings.
        
            isAssigned: If true, the template will be assigned, if false, the template will be applied.
            Returns: A new material takeoff multicategory schedule assembly view.
        """
        pass

    @staticmethod
    def CreatePartList(document, assemblyInstanceId, viewTemplateId=None, isAssigned=None):
        """
        CreatePartList(document: Document, assemblyInstanceId: ElementId) -> ViewSchedule
        
            Creates a new part list multicategory schedule assembly view for the assembly 
             instance.
        
        
            document: The document to which the view will be added.
            assemblyInstanceId: Id of the assembly instance that owns the new view.
            Returns: A new part list multicategory schedule assembly view.
        CreatePartList(document: Document, assemblyInstanceId: ElementId, viewTemplateId: ElementId, isAssigned: bool) -> ViewSchedule
        
            Creates a new part list multicategory schedule assembly view for the assembly 
             instance.
        
        
            document: The document to which the view will be added.
            assemblyInstanceId: Id of the assembly instance that owns the new view.
            viewTemplateId: Id of the view template that is used to create the view;
           if 
             invalidElementId, the view will be created with the default settings.
        
            isAssigned: If true, the template will be assigned, if false, the template will be applied.
            Returns: A new part list multicategory schedule assembly view.
        """
        pass

    @staticmethod
    def CreateSheet(document, assemblyInstanceId, titleBlockId):
        """
        CreateSheet(document: Document, assemblyInstanceId: ElementId, titleBlockId: ElementId) -> ViewSheet
        
            Creates a new sheet assembly view for the assembly instance.
        
            document: The document to which the view will be added.
            assemblyInstanceId: Id of the assembly instance that owns the new view.
            titleBlockId: Id of the titleblock family to use.  For no titleblock, pass invalidElementId.
            Returns: A new sheet assembly view.
        """
        pass

    @staticmethod
    def CreateSingleCategorySchedule(document, assemblyInstanceId, scheduleCategoryId, viewTemplateId=None, isAssigned=None):
        """
        CreateSingleCategorySchedule(document: Document, assemblyInstanceId: ElementId, scheduleCategoryId: ElementId) -> ViewSchedule
        
            Creates a new single-category schedule assembly view for the assembly instance.
        
            document: The document to which the view will be added.
            assemblyInstanceId: Id of the assembly instance that owns the new view.
            scheduleCategoryId: Id of the category for which the schedule will be created.
           Use 
             ViewSchedule.IsValidCategoryForSchedule() to check if a category can be 
             scheduled.
        
            Returns: A new single-category schedule assembly view.
        CreateSingleCategorySchedule(document: Document, assemblyInstanceId: ElementId, scheduleCategoryId: ElementId, viewTemplateId: ElementId, isAssigned: bool) -> ViewSchedule
        
            Creates a new single-category schedule assembly view for the assembly instance.
        
            document: The document to which the view will be added.
            assemblyInstanceId: Id of the assembly instance that owns the new view.
            scheduleCategoryId: Id of the category for which the schedule will be created.
           Use 
             ViewSchedule.IsValidCategoryForSchedule() to check if a category can be 
             scheduled.
        
            viewTemplateId: Id of the view template that is used to create the view;
           if 
             invalidElementId, the view will be created with the default settings.
        
            isAssigned: If true, the template will be assigned, if false, the template will be applied.
            Returns: A new single-category schedule assembly view.
        """
        pass

    __all__ = [
        'AcquireAssemblyViews',
        'Create3DOrthographic',
        'CreateDetailSection',
        'CreateMaterialTakeoff',
        'CreatePartList',
        'CreateSheet',
        'CreateSingleCategorySchedule',
    ]


class AttachmentType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum determining whether a link is an attachment or an overlay
    
    enum AttachmentType, values: Attachment (3), Overlay (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Attachment = None
    Overlay = None
    value__ = None


class AutomaticConnectionBehaviorType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enumeration of automatic connection behavior types
    
    enum AutomaticConnectionBehaviorType, values: Accepting (3), Active (1), Exclude (0), Forced (2), Full (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Accepting = None
    Active = None
    Exclude = None
    Forced = None
    Full = None
    value__ = None


class BackgroundImageFit(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the background image fit type in rendering settings.
    
    enum BackgroundImageFit, values: Horizontal (42), None (0), Stretch (43), Vertical (41)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Horizontal = None
    None = None
    Stretch = None
    value__ = None
    Vertical = None


class BackgroundSettings(object, IDisposable):
    """ Represents the rendering background settings. """
    def Dispose(self):
        """ Dispose(self: BackgroundSettings) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BackgroundSettings, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: BackgroundSettings) -> bool

"""



class BackgroundStyle(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the background style in rendering settings.
    
    enum BackgroundStyle, values: Color (5), Image (6), SkyCloudy (3), SkyFewClouds (2), SkyNoClouds (0), SkyVeryCloudy (4), SkyVeryFewClouds (1), Transparent (7)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Color = None
    Image = None
    SkyCloudy = None
    SkyFewClouds = None
    SkyNoClouds = None
    SkyVeryCloudy = None
    SkyVeryFewClouds = None
    Transparent = None
    value__ = None


class BaseArray(Element, IDisposable):
    """ An abstract base class that represents an array within the Revit project. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetCopiedMemberIds(self):
        """
        GetCopiedMemberIds(self: BaseArray) -> ICollection[ElementId]
        
            Retrieves the copied member Ids of the Array.
            Returns: The copied member Ids of the Array
        """
        pass

    def GetOriginalMemberIds(self):
        """
        GetOriginalMemberIds(self: BaseArray) -> ICollection[ElementId]
        
            Retrieves the original member Ids of the Array.
            Returns: The original member Ids of the Array
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Label = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The family parameter label of the BaseArray.

Get: Label(self: BaseArray) -> FamilyParameter

Set: Label(self: BaseArray) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get and Set the Name property

Set: Name(self: BaseArray) = value
"""

    NumMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the number of the arrayed members.

Get: NumMembers(self: BaseArray) -> int

Set: NumMembers(self: BaseArray) = value
"""



class BaseImportOptions(object, IDisposable):
    """ A base class containing import options used during import of several formats. """
    def Dispose(self):
        """ Dispose(self: BaseImportOptions) """
        pass

    def GetLayerSelection(self):
        """
        GetLayerSelection(self: BaseImportOptions) -> ICollection[str]
        
            Get all set layers name which user want to import into Revit.
            Returns: The layers' name.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BaseImportOptions, disposing: bool) """
        pass

    def SetLayerSelection(self, layerSelection):
        """ SetLayerSelection(self: BaseImportOptions, layerSelection: ICollection[str]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AutoCorrectAlmostVHLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Correct almost-vertical lines and almost-horizontal lines for import model
   if option is set to true, the almost-vertical lines would be vertical lines and almost-horizontal lines would be horizontal lines.

Get: AutoCorrectAlmostVHLines(self: BaseImportOptions) -> bool

Set: AutoCorrectAlmostVHLines(self: BaseImportOptions) = value
"""

    ColorMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Color mode for the import.
   Three modes are supported. Black and White, Preserve Colors, and Invert Colors.

Get: ColorMode(self: BaseImportOptions) -> ImportColorMode

Set: ColorMode(self: BaseImportOptions) = value
"""

    CustomScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Scaling the import.
   If this is defined and a valid value (> 0.0), it takes preference over units.

Get: CustomScale(self: BaseImportOptions) -> float

Set: CustomScale(self: BaseImportOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: BaseImportOptions) -> bool

"""

    OrientToView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Place the import at the same orientation as the view that was passed into the import method.
   This option can only be used when not importing into a single view.(i.e. ThisViewOnly is set to false)

Get: OrientToView(self: BaseImportOptions) -> bool

Set: OrientToView(self: BaseImportOptions) = value
"""

    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Where to place the import.
   Set this option to place the view at the origin or the center, or a shared coordinates.

Get: Placement(self: BaseImportOptions) -> ImportPlacement

Set: Placement(self: BaseImportOptions) = value
"""

    ReferencePoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The 3D point in the document where the imported instance will be inserted.
   If not explicitly set, the instance will be inserted at the document origin.

Get: ReferencePoint(self: BaseImportOptions) -> XYZ

Set: ReferencePoint(self: BaseImportOptions) = value
"""

    ThisViewOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Imports drawings into the view that was passed into the import method.
   This option is not available in 3D views.

Get: ThisViewOnly(self: BaseImportOptions) -> bool

Set: ThisViewOnly(self: BaseImportOptions) = value
"""

    Unit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The unit of measure for imported geometry.

Get: Unit(self: BaseImportOptions) -> ImportUnit

Set: Unit(self: BaseImportOptions) = value
"""

    VisibleLayersOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Only import the visible layers.

Get: VisibleLayersOnly(self: BaseImportOptions) -> bool

Set: VisibleLayersOnly(self: BaseImportOptions) = value
"""



class BaseLoadOn(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all the possible power load use types for a space object.
    
    enum BaseLoadOn, values: kNoOfBaseLoadOnMethods (3), kUseActualLoad (2), kUseCalculatedLoad (1), kUseDefaultLoad (-1), kUseEnteredLoad (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    kNoOfBaseLoadOnMethods = None
    kUseActualLoad = None
    kUseCalculatedLoad = None
    kUseDefaultLoad = None
    kUseEnteredLoad = None
    value__ = None


class BasePoint(Element, IDisposable):
    """ Represents kinds of BasePoints. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsShared = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the base point is shared.

Get: IsShared(self: BasePoint) -> bool

"""



class BasicFileInfo(object, IDisposable):
    """ Encapsulates basic information about a Revit file, including worksharing status, Revit version, username and central path. """
    def Dispose(self):
        """ Dispose(self: BasicFileInfo) """
        pass

    @staticmethod
    def Extract(file):
        """
        Extract(file: str) -> BasicFileInfo
        
            Returns an instance of BasicFileInfo filled with basic information about a 
             Revit file located at the given file-path
        
        
            file: The full path to the file to be queried, including project (.rvt) and family 
             (.rfa) files.
        
            Returns: If successful, basic file data.
        """
        pass

    def GetDocumentVersion(self):
        """
        GetDocumentVersion(self: BasicFileInfo) -> DocumentVersion
        
            Gets the DocumentVersion for the file.
            Returns: The DocumentVersion for the file.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BasicFileInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AllLocalChangesSavedToCentral = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Are all local changes saved to the central file?

Get: AllLocalChangesSavedToCentral(self: BasicFileInfo) -> bool

"""

    CentralPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the central model path.

Get: CentralPath(self: BasicFileInfo) -> str

"""

    IsCentral = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks if the file is workshared and Central.

Get: IsCentral(self: BasicFileInfo) -> bool

"""

    IsCreatedLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks if the file is created local.

Get: IsCreatedLocal(self: BasicFileInfo) -> bool

"""

    IsInProgress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks if the file is workshared and is in process of becoming Central.

Get: IsInProgress(self: BasicFileInfo) -> bool

"""

    IsLocal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks if the file is workshared and Local.

Get: IsLocal(self: BasicFileInfo) -> bool

"""

    IsSavedInCurrentVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks if the file is saved in the current version.

Get: IsSavedInCurrentVersion(self: BasicFileInfo) -> bool

"""

    IsSavedInLaterVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks if the file is saved in a later version of Revit than the running Revit.

Get: IsSavedInLaterVersion(self: BasicFileInfo) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: BasicFileInfo) -> bool

"""

    IsWorkshared = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks if the file is workshared.

Get: IsWorkshared(self: BasicFileInfo) -> bool

"""

    LanguageWhenSaved = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Return the language active for the last save

Get: LanguageWhenSaved(self: BasicFileInfo) -> LanguageType

"""

    LatestCentralEpisodeGUID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is the central model's episode GUID corresponding to the last reload latest
   done for this model.

Get: LatestCentralEpisodeGUID(self: BasicFileInfo) -> Guid

"""

    LatestCentralVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This is the central model's version number corresponding to the last reload latest
   done for this model.

Get: LatestCentralVersion(self: BasicFileInfo) -> int

"""

    SavedInVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the version in which file is saved.

Get: SavedInVersion(self: BasicFileInfo) -> str

"""

    Username = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the username.

Get: Username(self: BasicFileInfo) -> str

"""



class BeamSystem(Element, IDisposable):
    """ An object that represents a BeamSystem within the Autodesk Revit project. """
    @staticmethod
    def BeamBelongsTo(beam):
        """
        BeamBelongsTo(beam: FamilyInstance) -> BeamSystem
        
            Find out the BeamSystem to which the beam belongs.
        
            beam: The beam want to ask.
            Returns: The BeamSystem.
        """
        pass

    @staticmethod
    def Create(document, profile, *__args):
        """
        Create(document: Document, profile: IList[Curve], sketchPlane: SketchPlane, direction: XYZ, is3d: bool) -> BeamSystem
        Create(document: Document, profile: IList[Curve], sketchPlane: SketchPlane, curveIndexForDirection: int) -> BeamSystem
        Create(document: Document, profile: IList[Curve], level: Level, curveIndexForDirection: int, is3d: bool) -> BeamSystem
        Create(document: Document, profile: IList[Curve], level: Level, direction: XYZ, is3d: bool) -> BeamSystem
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    @staticmethod
    def DropBeamSystem(beamSystem):
        """
        DropBeamSystem(beamSystem: BeamSystem)
            Drop beam system, it will disassociate all members from the beam system and 
             delete the beam system.
        
        
            beamSystem: The beam system to be deleted.
        """
        pass

    def GetBeamIds(self):
        """
        GetBeamIds(self: BeamSystem) -> ICollection[ElementId]
        
            Gets all the beams of the BeamSystem.
            Returns: The beam Ids.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BeamSystemType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the type of the BeamSystem.

Get: BeamSystemType(self: BeamSystem) -> BeamSystemType

Set: BeamSystemType(self: BeamSystem) = value
"""

    BeamType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the Beam Type of the BeamSystem.

Get: BeamType(self: BeamSystem) -> FamilySymbol

Set: BeamType(self: BeamSystem) = value
"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Direction of the BeamSystem.

Get: Direction(self: BeamSystem) -> XYZ

"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the Elevation of the BeamSystem.

Get: Elevation(self: BeamSystem) -> float

Set: Elevation(self: BeamSystem) = value
"""

    LayoutRule = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the LayoutRule of the BeamSystem.

Get: LayoutRule(self: BeamSystem) -> LayoutRule

Set: LayoutRule(self: BeamSystem) = value
"""

    Level = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or change the level of the BeamSystem.
When the level is changed, the elevation is changed to make the 
the BeamSystem remain the location.

Get: Level(self: BeamSystem) -> Level

Set: Level(self: BeamSystem) = value
"""

    Profile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve or set the profile of the BeamSystem.

Get: Profile(self: BeamSystem) -> CurveArray

Set: Profile(self: BeamSystem) = value
"""



class BeamSystemJustifyType(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the justify method of beamsystem.
    
    enum BeamSystemJustifyType, values: Beginning (3), Center (1), DirectionLine (4), End (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Beginning = None
    Center = None
    DirectionLine = None
    End = None
    value__ = None


class BeamSystemType(ElementType, IDisposable):
    """ An object that specifies the type of a beam system in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class BehaviorType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all the behavior type for MEP Components.
    
    enum BehaviorType, values: BaseObject (1024), Bend (2), Branch (4), BreakInto (32), Coupling (2097152), ElectricalBaseObject (65536), EndCap (2048), Flange (8192), Flat_Tap (1048576), Flex (262144), Hanger (524288), Inline (16), Intersection (8), Invalid (0), MechanicalCoupling (16384), Normal (1), OrientToCenterLine (128), OrientToFace (256), OrientToObject (64), Oval_CentreLine_Tap (8388608), Round_CentreLine_Tap (4194304), Straight (131072), SystemMember (512), Valve (4096), VerticalBend (32768)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BaseObject = None
    Bend = None
    Branch = None
    BreakInto = None
    Coupling = None
    ElectricalBaseObject = None
    EndCap = None
    Flange = None
    Flat_Tap = None
    Flex = None
    Hanger = None
    Inline = None
    Intersection = None
    Invalid = None
    MechanicalCoupling = None
    Normal = None
    OrientToCenterLine = None
    OrientToFace = None
    OrientToObject = None
    Oval_CentreLine_Tap = None
    Round_CentreLine_Tap = None
    Straight = None
    SystemMember = None
    value__ = None
    Valve = None
    VerticalBend = None


class Binding(APIObject, IDisposable):
    """
    Binding objects are used to take a parameter definition and bind it to one or
    more categories.
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class DefinitionBindingMap(APIObject, IDisposable, IEnumerable):
    """
    A map that contains mappings of parameter definitions to parameter bindings.
    
    DefinitionBindingMap()
    """
    def Clear(self):
        """
        Clear(self: DefinitionBindingMap)
            Removes every binding from the map, rendering it empty.
        """
        pass

    def Contains(self, key):
        """ Contains(self: DefinitionBindingMap, key: Definition) -> bool """
        pass

    def Dispose(self):
        """ Dispose(self: DefinitionBindingMap, A_0: bool) """
        pass

    def Erase(self, key):
        """ Erase(self: DefinitionBindingMap, key: Definition) -> int """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: DefinitionBindingMap) -> DefinitionBindingMapIterator
        
            Retrieve a forward moving iterator to the map.
            Returns: Returns a forward moving iterator to the map.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: DefinitionBindingMap) -> IEnumerator
        
            Retrieve a forward moving iterator to the map.
            Returns: Returns a forward moving iterator to the map.
        """
        pass

    def Insert(self, key, item):
        """ Insert(self: DefinitionBindingMap, key: Definition, item: Binding) -> bool """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: DefinitionBindingMap) -> DefinitionBindingMapIterator
        
            Retrieve a backward moving iterator to the map.
            Returns: Returns a backward moving iterator to the map.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the map is empty.

Get: IsEmpty(self: DefinitionBindingMap) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of bindings that are in the map.

Get: Size(self: DefinitionBindingMap) -> int

"""



class BindingMap(DefinitionBindingMap, IDisposable, IEnumerable):
    """
    The parameters BindingMap contains all the parameter bindings that exist in the
    Autodesk Revit project.
    """
    def Clear(self):
        """
        Clear(self: BindingMap)
            This method is used to remove all the items in the map.
        """
        pass

    def Contains(self, key):
        """
        Contains(self: BindingMap, key: Definition) -> bool
        
            The Contains method is used to check if the parameter binding exists for one 
             definition.
        
        
            key: A parameter definition which can be an existing definition or one from a shared 
             parameters file.
        """
        pass

    def Dispose(self):
        """ Dispose(self: BindingMap, A_0: bool) """
        pass

    def Erase(self, key):
        """
        Erase(self: BindingMap, key: Definition) -> int
        
            This method is used to erase one item in the map.
        """
        pass

    def Insert(self, key, item, parameterGroup=None):
        """
        Insert(self: BindingMap, key: Definition, item: Binding) -> bool
        
            Creates a new parameter binding between a parameter and a set of categories.
        
            key: A parameter definition which can be an existing definition or one from a shared 
             parameters file.
        
            item: An InstanceBinding or TypeBinding object which contains the set of categories 
             to which the parameter should be bound.
        
        Insert(self: BindingMap, key: Definition, item: Binding, parameterGroup: BuiltInParameterGroup) -> bool
        
            Creates a new parameter binding between a parameter and a set of categories in 
             a specified group.
        
        
            key: A parameter definition which can be an existing definition or one from a shared 
             parameters file.
        
            item: An InstanceBinding or TypeBinding object which contains the set of categories 
             to which the parameter should be bound.
        
            parameterGroup: The GroupID of the parameter definition.
        """
        pass

    def ReInsert(self, key, item, parameterGroup=None):
        """
        ReInsert(self: BindingMap, key: Definition, item: Binding) -> bool
        
            Removes an existing parameter and creates a new binding for a given parameter.
        
            key: A parameter definition which can be an existing definition or one from a shared 
             parameters file.
        
            item: An InstanceBinding or TypeBinding object which contains the set of categories 
             to which the parameter should be bound.
        
        ReInsert(self: BindingMap, key: Definition, item: Binding, parameterGroup: BuiltInParameterGroup) -> bool
        
            Removes an existing parameter and creates a new binding for a given parameter 
             in a specified group.
        
        
            key: A parameter definition which can be an existing definition or one from a shared 
             parameters file.
        
            item: An InstanceBinding or TypeBinding object which contains the set of categories 
             to which the parameter should be bound.
        
            parameterGroup: The GroupID of the parameter definition.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Remove(self, key):
        """
        Remove(self: BindingMap, key: Definition) -> bool
        
            The Remove method is used to remove a parameter binding.
        
            key: A parameter definition which can be an existing definition or one from a shared 
             parameters file.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass


class CombinableElement(Element, IDisposable):
    """ An element that can be added to a geometry combination. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Combinations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The geometry combinations that this element belongs to.

Get: Combinations(self: CombinableElement) -> GeomCombinationSet

"""



class GenericForm(CombinableElement, IDisposable):
    """ Provides access to the Generic Form model in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetVisibility(self):
        """
        GetVisibility(self: GenericForm) -> FamilyElementVisibility
        
            Gets the visibility for the generic form.
            Returns: A copy of visibility settings for the generic form.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetVisibility(self, visibility):
        """
        SetVisibility(self: GenericForm, visibility: FamilyElementVisibility)
            Sets the visibility for the generic form.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsSolid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the GenericForm is a solid or a void element.

Get: IsSolid(self: GenericForm) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get and Set the Name property

Set: Name(self: GenericForm) = value
"""

    Subcategory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The subcategory.

Get: Subcategory(self: GenericForm) -> Category

Set: Subcategory(self: GenericForm) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The visibility of the GenericForm.

Get: Visible(self: GenericForm) -> bool

"""



class Blend(GenericForm, IDisposable):
    """ A blend solid or void form. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetVertexConnectionMap(self):
        """
        GetVertexConnectionMap(self: Blend) -> VertexIndexPairArray
        
            Gets the mapping between the vertices in the top and bottom profiles.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetVertexConnectionMap(self, vertexMap):
        """
        SetVertexConnectionMap(self: Blend, vertexMap: VertexIndexPairArray)
            Sets the mapping between the vertices in the top and bottom profiles.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BottomOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset of the bottom end of the blend relative to the sketch plane.

Get: BottomOffset(self: Blend) -> float

Set: BottomOffset(self: Blend) = value
"""

    BottomProfile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The curves which make up the bottom profile of the sketch.

Get: BottomProfile(self: Blend) -> CurveArrArray

"""

    BottomSketch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Bottom Sketch of the Blend.

Get: BottomSketch(self: Blend) -> Sketch

"""

    TopOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset of the top end of the blend relative to the sketch plane.

Get: TopOffset(self: Blend) -> float

Set: TopOffset(self: Blend) = value
"""

    TopProfile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The curves which make up the top profile of the sketch.

Get: TopProfile(self: Blend) -> CurveArrArray

"""

    TopSketch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Top Sketch of the Blend.

Get: TopSketch(self: Blend) -> Sketch

"""



class BooleanOperationsType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing boolean types that are supported for boolean operation.
    
    enum BooleanOperationsType, values: Difference (1), Intersect (2), Union (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Difference = None
    Intersect = None
    Union = None
    value__ = None


class BooleanOperationsUtils(object, IDisposable):
    """ These utilities are applicable for the geometry created by GeometryCreationUtilities and the geometry of Revit model. """
    @staticmethod
    def CutWithHalfSpace(solid, plane):
        """
        CutWithHalfSpace(solid: Solid, plane: Plane) -> Solid
        
            Creates a new Solid which is the intersection of the input Solid with the 
             half-space on the positive side of the given Plane. The positive side of the 
             plane is the side to which Plane.Normal points.
        
        
            solid: The input Solid to be cut.
            plane: The cut plane.  The space on the positive side of the normal of the plane will 
             be intersected with the input Solid.
        
            Returns: The newly created Solid.
        """
        pass

    @staticmethod
    def CutWithHalfSpaceModifyingOriginalSolid(solid, plane):
        """
        CutWithHalfSpaceModifyingOriginalSolid(solid: Solid, plane: Plane)
            Modifies the input Solid preserving only the volume on the positive side of the 
             given Plane. The positive side of the plane is the side to which Plane.Normal 
             points.
        
        
            solid: The input Solid to be cut. This object cannot be obtained directly from a Revit 
             element.
           This means that Autodesk.Revit.DB.GeometryObject.IsElementGeometry 
             cannot be true.
        
            plane: The cut plane.  The space on the positive side of the normal of the plane will 
             be intersected with the input Solid.
        """
        pass

    def Dispose(self):
        """ Dispose(self: BooleanOperationsUtils) """
        pass

    @staticmethod
    def ExecuteBooleanOperation(solid0, solid1, booleanType):
        """
        ExecuteBooleanOperation(solid0: Solid, solid1: Solid, booleanType: BooleanOperationsType) -> Solid
        
            Perform a boolean geometric operation between two solids, and return a new 
             solid to represent the result.
        
        
            solid0: The first solid object. A copy will be taken of the input object, so any solid 
             whether obtained from a Revit element or not would be accepted.
        
            solid1: The second solid object. A copy will be taken of the input object, so any solid 
             whether obtained from a Revit element or not would be accepted.
        
            booleanType: boolean operation type.
            Returns: The result geometry.
        """
        pass

    @staticmethod
    def ExecuteBooleanOperationModifyingOriginalSolid(solid0, solid1, booleanType):
        """
        ExecuteBooleanOperationModifyingOriginalSolid(solid0: Solid, solid1: Solid, booleanType: BooleanOperationsType)
            Perform a boolean geometric operation between two solids, and modify the 
             original solid to represent the result.
        
        
            solid0: The original solid object. This object cannot be obtained directly from a Revit 
             element.
           This means that Autodesk.Revit.DB.GeometryObject.IsElementGeometry 
             cannot be true.
        
            solid1: The second solid object. A copy will be taken of the input object, so any solid 
             whether obtained from a Revit element or not would be accepted.
        
            booleanType: boolean operation type.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BooleanOperationsUtils, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: BooleanOperationsUtils) -> bool

"""



class BorderTile(Enum, IComparable, IFormattable, IConvertible):
    """
    Options for controlling tiles that overlap the face boundary.
    See Autodesk.Revit.DB.DividedSurface.
    
    enum BorderTile, values: Empty (0), Overhanging (2), Partial (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Empty = None
    Overhanging = None
    Partial = None
    value__ = None


class BoundarySegment(object, IDisposable):
    """ An object that represents a segment of an area boundary. """
    def Dispose(self):
        """ Dispose(self: BoundarySegment) """
        pass

    def GetCurve(self):
        """
        GetCurve(self: BoundarySegment) -> Curve
        
            Get a copy of the curve that is formed along this boundary.
            Returns: A copy of the curve.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BoundarySegment, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the id of the element that produces this boundary segment.
   If the segment is created from an element in a link, this is the id of the RevitLinkInstance.

Get: ElementId(self: BoundarySegment) -> ElementId

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: BoundarySegment) -> bool

"""

    LinkElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the element id of the element in a link instance that forms this boundary.

Get: LinkElementId(self: BoundarySegment) -> ElementId

"""



class ElementQuickFilter(ElementFilter, IDisposable):
    """ A base class for a type of filter that operates on element records. """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class BoundingBoxContainsPointFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to match elements with a bounding box that contains the given point.
    
    BoundingBoxContainsPointFilter(point: XYZ, tolerance: float, inverted: bool)
    BoundingBoxContainsPointFilter(point: XYZ, tolerance: float)
    BoundingBoxContainsPointFilter(point: XYZ, inverted: bool)
    BoundingBoxContainsPointFilter(point: XYZ)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, point, *__args):
        """
        __new__(cls: type, point: XYZ, tolerance: float, inverted: bool)
        __new__(cls: type, point: XYZ, tolerance: float)
        __new__(cls: type, point: XYZ, inverted: bool)
        __new__(cls: type, point: XYZ)
        """
        pass

    Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The XYZ point to use when matching element bounding boxes.

Get: Point(self: BoundingBoxContainsPointFilter) -> XYZ

Set: Point(self: BoundingBoxContainsPointFilter) = value
"""

    Tolerance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Allows control over the match criteria by using a tolerance in the geometry comparison. It is suggested to use this in cases where trivial differences should be considered when matching elements.

Get: Tolerance(self: BoundingBoxContainsPointFilter) -> float

Set: Tolerance(self: BoundingBoxContainsPointFilter) = value
"""



class BoundingBoxIntersectsFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to match elements with a bounding box that intersects the given Outline.
    
    BoundingBoxIntersectsFilter(outline: Outline, tolerance: float, inverted: bool)
    BoundingBoxIntersectsFilter(outline: Outline, tolerance: float)
    BoundingBoxIntersectsFilter(outline: Outline, inverted: bool)
    BoundingBoxIntersectsFilter(outline: Outline)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def GetBoundingBox(self):
        """
        GetBoundingBox(self: BoundingBoxIntersectsFilter) -> Outline
        
            Gets the outline being used for this filter.
            Returns: The outline being used for this filter.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, outline, *__args):
        """
        __new__(cls: type, outline: Outline, tolerance: float, inverted: bool)
        __new__(cls: type, outline: Outline, tolerance: float)
        __new__(cls: type, outline: Outline, inverted: bool)
        __new__(cls: type, outline: Outline)
        """
        pass

    Tolerance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Allows control over the match criteria by using a tolerance in the geometry comparison. It is suggested to use this in cases where trivial differences should be considered when matching elements.

Get: Tolerance(self: BoundingBoxIntersectsFilter) -> float

Set: Tolerance(self: BoundingBoxIntersectsFilter) = value
"""



class BoundingBoxIsInsideFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to match elements with a bounding box that is contained by the given Outline.
    
    BoundingBoxIsInsideFilter(outline: Outline, tolerance: float, inverted: bool)
    BoundingBoxIsInsideFilter(outline: Outline, tolerance: float)
    BoundingBoxIsInsideFilter(outline: Outline, inverted: bool)
    BoundingBoxIsInsideFilter(outline: Outline)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def GetBoundingBox(self):
        """
        GetBoundingBox(self: BoundingBoxIsInsideFilter) -> Outline
        
            Gets the outline being used for this filter.
            Returns: The outline being used for this filter.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, outline, *__args):
        """
        __new__(cls: type, outline: Outline, tolerance: float, inverted: bool)
        __new__(cls: type, outline: Outline, tolerance: float)
        __new__(cls: type, outline: Outline, inverted: bool)
        __new__(cls: type, outline: Outline)
        """
        pass

    Tolerance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Allows control over the match criteria by using a tolerance in the geometry comparison. It is suggested to use this in cases where trivial differences should be considered when matching elements.

Get: Tolerance(self: BoundingBoxIsInsideFilter) -> float

Set: Tolerance(self: BoundingBoxIsInsideFilter) = value
"""



class BoundingBoxUV(object, IDisposable):
    """
    A two-dimensional rectangle, parallel to the coordinate axes.
    
    BoundingBoxUV(min_u: float, min_v: float, max_u: float, max_v: float)
    BoundingBoxUV()
    """
    def Dispose(self):
        """ Dispose(self: BoundingBoxUV) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BoundingBoxUV, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, min_u=None, min_v=None, max_u=None, max_v=None):
        """
        __new__(cls: type, min_u: float, min_v: float, max_u: float, max_v: float)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Maximum coordinates (upper-right corner of the box).

Get: Max(self: BoundingBoxUV) -> UV

Set: Max(self: BoundingBoxUV) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Minimum coordinates (lower-left corner of the box).

Get: Min(self: BoundingBoxUV) -> UV

Set: Min(self: BoundingBoxUV) = value
"""



class BoundingBoxXYZ(APIObject, IDisposable):
    """
    A three-dimensional rectangular box at an arbitrary location and orientation within the Revit model.
    
    BoundingBoxXYZ()
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BoundingBoxXYZ) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Enabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines whether the entire bounding box is enabled.

Get: Enabled(self: BoundingBoxXYZ) -> bool

Set: Enabled(self: BoundingBoxXYZ) = value
"""

    Max = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Maximum coordinates (upper-right-front corner of the box).

Get: Max(self: BoundingBoxXYZ) -> XYZ

Set: Max(self: BoundingBoxXYZ) = value
"""

    Min = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Minimum coordinates (lower-left-rear corner of the box).

Get: Min(self: BoundingBoxXYZ) -> XYZ

Set: Min(self: BoundingBoxXYZ) = value
"""

    Transform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The transform from the coordinate space of the box to the model coordinate space.

Get: Transform(self: BoundingBoxXYZ) -> Transform

Set: Transform(self: BoundingBoxXYZ) = value
"""



class BoxPlacement(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible placement of a box (an object of rectangular shape).
    
    enum BoxPlacement, values: BottomLeft (4), BottomRight (3), Center (0), TopLeft (1), TopRight (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BottomLeft = None
    BottomRight = None
    Center = None
    TopLeft = None
    TopRight = None
    value__ = None


class ShapeBuilder(object, IDisposable):
    """ The base class for geometry builder classes. """
    def Dispose(self):
        """ Dispose(self: ShapeBuilder) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ShapeBuilder, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ShapeBuilder) -> bool

"""



class BRepBuilder(ShapeBuilder, IDisposable):
    """
    A class that allows direct construction of geometry objects (solids, open shells, etc.).
    
    BRepBuilder(geomType: BRepType)
    """
    def AddCoEdge(self, loopId, edgeId, bCoEdgeIsReversed):
        """
        AddCoEdge(self: BRepBuilder, loopId: BRepBuilderGeometryId, edgeId: BRepBuilderGeometryId, bCoEdgeIsReversed: bool) -> BRepBuilderGeometryId
        
            Add a co-edge associated to a previously added edge. A co-edge represents the 
             use of an edge on one
           of the edge's faces. BrepBuilder allows at most two 
             faces per edge, hence at most two co-edges per edge,
           and the co-edges must 
             have opposite bCoEdgeIsReversed flags. The co-edges in a loop must be added in 
             the
           order in which they occur in loop (i.e., in their topological order).
        
        
            loopId: Id of the loop containing the new co-edge.
            edgeId: Id of the co-edge's edge, previously created by a call to addEdge().
            bCoEdgeIsReversed: True if the co-edge's topological direction in its face is opposite to the 
             edge's parametric direction, false otherwise.
           The topological directions of 
             the co-edges in a loop must be consistent with the direction in which the loop 
             co-edges
           appear in the loop, and the loop orientations so defined must 
             follow the convention that outer loops are oriented
           counter-clockwise and 
             inner loops are oriented clockwise, with respect to the face's orientation.
        
            Returns: Id of the edge, to be used in calls to other BRepBuilder methods such as 
             AddCoEdge().
        """
        pass

    def AddEdge(self, edgeGeom):
        """
        AddEdge(self: BRepBuilder, edgeGeom: BRepBuilderEdgeGeometry) -> BRepBuilderGeometryId
        
            Add a new edge to the geometry being built. The BRepBuilder uses edges only to 
             store edge geometry and to track
           pairs of co-edges that share an edge.
        
        
            edgeGeom: Information specifying the edge's geometry.
            Returns: Id of the edge, to be used in calls to other BRepBuilder methods such as 
             AddCoEdge().
        """
        pass

    def AddFace(self, surfaceGeom, bFaceIsReversed):
        """
        AddFace(self: BRepBuilder, surfaceGeom: BRepBuilderSurfaceGeometry, bFaceIsReversed: bool) -> BRepBuilderGeometryId
        
            Creates an empty face in the geometry being built. Other BRepBuilder methods 
             are used to add loops to the face.
        
        
            surfaceGeom: The face's support surface.
            bFaceIsReversed: True if the face's orientation is opposite to that of the surface, false if the 
             orientations agree.
           The faces of each shell must be consistently oriented. 
             For a solid (BRepType == Solid), the oriented face normals
           must point out 
             of the solid; for a void (BRepType == Void), the face normals must point into 
             the void.
           See the description of the bCoEdgeIsReversed input for 
             AddCoEdge() for a discussion of the loop and co-edge orientation conventions
          
              to use with the BRepBuilder.
        
            Returns: An id that can be used to identify the face while the BRepBuilder is actively 
             building geometry (e.g., to add a loop to a face).
        """
        pass

    def AddLoop(self, faceId):
        """
        AddLoop(self: BRepBuilder, faceId: BRepBuilderGeometryId) -> BRepBuilderGeometryId
        
            Creates an empty loop in a given face of the geometry being built. Other 
             BRepBuilder methods are used to add co-edges to the loop.
        
        
            faceId: Id of the face to which the loop should be added. faceId was returned by a call 
             to AddFace().
        
            Returns: An id that can be used to identify the loop while the BRepBuilder is actively 
             building geometry (e.g., to add co-edges to the loop).
        """
        pass

    def CanAddGeometry(self):
        """
        CanAddGeometry(self: BRepBuilder) -> bool
        
            A validator function that checks the state of this BRepBuilder object. Returns 
             true if this BRepBuilder object is accepting b-rep data, false otherwise.
        
            Returns: True if this BRepBuilder object is accepting b-rep data, false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ShapeBuilder, A_0: bool) """
        pass

    def Finish(self):
        """
        Finish(self: BRepBuilder) -> BRepBuilderOutcome
        
            Complete construction of the geometry. The geometry will be validated and, if 
             valid, stored in this Builder. Otherwise it will be deleted.
        
            Returns: BRepBuilderOutcome.Success if successful, BRepBuilderOutcome.Failure otherwise.
        """
        pass

    def FinishFace(self, faceId):
        """
        FinishFace(self: BRepBuilder, faceId: BRepBuilderGeometryId)
            Indicates that the caller has finished defining the given face.
        
            faceId: Id of the face.
        """
        pass

    def FinishLoop(self, loopId):
        """
        FinishLoop(self: BRepBuilder, loopId: BRepBuilderGeometryId)
            Indicates that the caller has finished defining the given loop.
        
            loopId: Id of the loop.
        """
        pass

    def GetResult(self):
        """
        GetResult(self: BRepBuilder) -> Solid
        
            Get the Geometry object built by this BRepBuilder. This will clear the built 
             Geometry stored in the BRepBuilder.
           This function will throw if this 
             BRepBuilder hasn't completed building the b-rep. Use IsResultAvailable() to 
             verify that this BRepBuilder contains a valid result.
        
            Returns: The Geometry object built by this BRepBuilder. This will clear the built 
             Geometry stored in the BRepBuilder.
        """
        pass

    @staticmethod
    def IsPermittedSurfaceType(surface):
        """
        IsPermittedSurfaceType(surface: Surface) -> bool
        
            A validator function that checks whether the surface object is of type 
             supported as face surface by BRepBuilder.
        
        
            surface: Surface object intended to be used as a face surface.
            Returns: True if surface of this type may be used as a face surface, false otherwise.
        """
        pass

    def IsResultAvailable(self):
        """
        IsResultAvailable(self: BRepBuilder) -> bool
        
            A validator function that checks the state of this BRepBuilder object. Returns 
             true if this BRepBuilder object has successfully built a b-rep.
        
            Returns: True if this BRepBuilder object has successfully built a b-rep.
        """
        pass

    def IsValidEdgeId(self, edgeId):
        """
        IsValidEdgeId(self: BRepBuilder, edgeId: BRepBuilderGeometryId) -> bool
        
            A validator function that checks whether the edge id corresponds to an edge 
             previously added to this BRepBuilder object.
        
        
            edgeId: Edge id to be validated.
            Returns: True if edgeId corresponds to an edge previously added to this BRepBuilder, 
             false otherwise.
        """
        pass

    def IsValidFaceId(self, faceId):
        """
        IsValidFaceId(self: BRepBuilder, faceId: BRepBuilderGeometryId) -> bool
        
            A validator function that checks whether the face id corresponds to a face 
             previously added to this BRepBuilder object.
        
        
            faceId: Face id to be validated.
            Returns: True if faceId corresponds to a face previously added to this BRepBuilder, 
             false otherwise.
        """
        pass

    def IsValidLoopId(self, loopId):
        """
        IsValidLoopId(self: BRepBuilder, loopId: BRepBuilderGeometryId) -> bool
        
            A validator function that checks whether the loop id corresponds to a loop 
             previously added to this BRepBuilder object.
        
        
            loopId: Loop id to be validated.
            Returns: True if loopId corresponds to a loop previously added to this BRepBuilder, 
             false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ShapeBuilder, disposing: bool) """
        pass

    def SetFaceMaterialId(self, faceId, materialId):
        """
        SetFaceMaterialId(self: BRepBuilder, faceId: BRepBuilderGeometryId, materialId: ElementId)
            Sets material id to a face.
        
            faceId: Id of the face to which material id will be added. faceId was returned by a 
             call to AddFace().
        
            materialId: The material id associated with the face, or invalidElementId if none.
           It 
             is not verified that materialId corresponds to a valid Material element.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, geomType):
        """ __new__(cls: type, geomType: BRepType) """
        pass


class BRepBuilderEdgeGeometry(object, IDisposable):
    """ An abstract class used by BRepBuilder to represent the geometry of an edge. Specific edge-geometry representations are represented by subclasses. """
    @staticmethod
    def Create(*__args):
        """
        Create(curve: Curve) -> BRepBuilderEdgeGeometry
        
            Construct BRepBuilderEdgeGeometry based on any GCurve, including GLine and 
             GArc.
           The curve will be simplified if possible, and the concrete type of 
             the returned value will reflect
           that simplification: 
             BRepBuilderLinearEdgeGeometry if the curve could be simplified to a line,
           
             BRepBuilderArcEdgeGeometry if it could be simplified to an arc, 
             BRepBuilderGenericCurveEdgeGeometry
           otherwise.
        
        
            curve: The 3D curve for this edge. This BRepBuilderEdgeGeometry stores a copy of the 
             input curve.
        
        Create(startPoint: XYZ, endPoint: XYZ) -> BRepBuilderEdgeGeometry
        
            Constructs a BRepBuilderEdgeGeometry representing a straight line between the 
             two given points.
        """
        pass

    def Dispose(self):
        """ Dispose(self: BRepBuilderEdgeGeometry) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BRepBuilderEdgeGeometry, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: BRepBuilderEdgeGeometry) -> bool

"""



class BRepBuilderGeometryId(object, IDisposable):
    """
    This class is used by the BRepBuilder class to identify objects it creates (faces, edges, etc.).
    
    BRepBuilderGeometryId(other: BRepBuilderGeometryId)
    """
    def Dispose(self):
        """ Dispose(self: BRepBuilderGeometryId) """
        pass

    @staticmethod
    def InvalidGeometryId():
        """
        InvalidGeometryId() -> BRepBuilderGeometryId
        
            Returns an invalid BRepBuilderGeometryId, used as a return value to indicate an 
             error.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BRepBuilderGeometryId, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, other):
        """ __new__(cls: type, other: BRepBuilderGeometryId) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: BRepBuilderGeometryId) -> bool

"""



class BRepBuilderOutcome(Enum, IComparable, IFormattable, IConvertible):
    """
    This enumerated type corresponds to  possible outcomes returned by BRepBuilder functions.
    
    enum BRepBuilderOutcome, values: Failure (1), Success (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Failure = None
    Success = None
    value__ = None


class BRepBuilderState(Enum, IComparable, IFormattable, IConvertible):
    """
    This enumerative type corresponds to the possible states of a BRepBuilder object.
    
    enum BRepBuilderState, values: AcceptingData (1), Completed (2), InvalidState (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AcceptingData = None
    Completed = None
    InvalidState = None
    value__ = None


class BRepBuilderSurfaceGeometry(object, IDisposable):
    """ An abstract class used by BRepBuilder to represent the geometry of a surface. Specific surface-geometry representations are represented by subclasses. """
    @staticmethod
    def Create(surface, surfaceEnvelope):
        """
        Create(surface: Surface, surfaceEnvelope: BoundingBoxUV) -> BRepBuilderSurfaceGeometry
        
            Construct BRepBuilderSurfaceGeometry based on a permitted Revit Surface, 
             including Plane and CylSurf.
        
        
            surface: The Revit surface defining the geometry.
           This BRepBuilderSurfaceGeometry 
             stores a copy of the input surface.
        
            surfaceEnvelope: Envelope of the surface in the uv parametric domain. Defines the domain of 
             interest for the created surface.
           This is typically used to identify the 
             domain of the face that references the surface in question.
           Expected to 
             either be null or define a valid domain.
        """
        pass

    @staticmethod
    def CreateNURBSSurface(degreeU, degreeV, knotsU, knotsV, controlPoints, *__args):
        """
        CreateNURBSSurface(degreeU: int, degreeV: int, knotsU: IList[float], knotsV: IList[float], controlPoints: IList[XYZ], weights: IList[float], bReverseOrientation: bool, surfaceEnvelope: BoundingBoxUV) -> BRepBuilderSurfaceGeometry
        CreateNURBSSurface(degreeU: int, degreeV: int, knotsU: IList[float], knotsV: IList[float], controlPoints: IList[XYZ], bReverseOrientation: bool, surfaceEnvelope: BoundingBoxUV) -> BRepBuilderSurfaceGeometry
        """
        pass

    def Dispose(self):
        """ Dispose(self: BRepBuilderSurfaceGeometry) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BRepBuilderSurfaceGeometry, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: BRepBuilderSurfaceGeometry) -> bool

"""



class BRepType(Enum, IComparable, IFormattable, IConvertible):
    """
    This class defines an enumerative type used to specify the type of output geometry expected from a BRepBuilder.
    
    enum BRepType, values: OpenShell (0), Solid (1), Void (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    OpenShell = None
    Solid = None
    value__ = None
    Void = None


class BrowserOrganization(ElementType, IDisposable):
    """ The organization settings for grouping, sorting, and filtering of items in the project browser. """
    def AreFiltersSatisfied(self, elementId):
        """
        AreFiltersSatisfied(self: BrowserOrganization, elementId: ElementId) -> bool
        
            Determines if the given element satisfies the filters defined by the browser 
             organization.
        
        
            elementId: The element to check.
            Returns: True if the given element satisfies the filter.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetCurrentBrowserOrganizationForSheets(document):
        """
        GetCurrentBrowserOrganizationForSheets(document: Document) -> BrowserOrganization
        
            Gets the Autodesk.Revit.DB.BrowserOrganization that applies to the Sheets 
             section of the project browser.
        
        
            document: Revit document from which to get the organization data.
            Returns: The BrowserOrganization for sheets, or null if no sheets exist.
        """
        pass

    @staticmethod
    def GetCurrentBrowserOrganizationForViews(document):
        """
        GetCurrentBrowserOrganizationForViews(document: Document) -> BrowserOrganization
        
            Gets the Autodesk.Revit.DB.BrowserOrganization  that applies to the Views 
             section of the project browser.
        
        
            document: Revit document from which to get the organization data.
            Returns: The BrowserOrganization for views, or null if no view sections exist
        """
        pass

    def GetFolderItems(self, elementId):
        """
        GetFolderItems(self: BrowserOrganization, elementId: ElementId) -> IList[FolderItemInfo]
        
            Returns a collection of leaf Autodesk.Revit.DB.FolderItemInfo objects each 
             containing the given element Id.
        
        
            elementId: Element id located at a leaf position in the project browser.
            Returns: An array of FolderItemInfo objects.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    SortingOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sorting order if sorting of items is applicable in the browser.

Get: SortingOrder(self: BrowserOrganization) -> SortingOrder

"""

    SortingParameterId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Id of the parameter used to determine the sorting order of items in the browser.

Get: SortingParameterId(self: BrowserOrganization) -> ElementId

"""



class BrowserOrganizationType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enumerated type representing the type of browser organization.
    
    enum BrowserOrganizationType, values: Families (2), Sheets (1), Views (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Families = None
    Sheets = None
    value__ = None
    Views = None


class HostObjAttributes(ElementType, IDisposable):
    """ An object that represents characteristics of several kinds of type. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetCompoundStructure(self):
        """
        GetCompoundStructure(self: HostObjAttributes) -> CompoundStructure
        
            Returns an object that represents the compound structure of the element.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def SetCompoundStructure(self, compoundStructure):
        """
        SetCompoundStructure(self: HostObjAttributes, compoundStructure: CompoundStructure)
            Sets the compound structure of the element.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class BuildingPadType(HostObjAttributes, IDisposable):
    """ Represents a specific type of Building Pad. """
    @staticmethod
    def CreateDefault(document):
        """
        CreateDefault(document: Document) -> BuildingPadType
        
            Creates a BuildingPadType element and adds it to the document.
        
            document: The document to be modified.
            Returns: The new BuildingPadType element.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ThermalProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The calculated and settable thermal properties of the BuildingPadType

Get: ThermalProperties(self: BuildingPadType) -> ThermalProperties

"""



class BuildingSiteExportOptions(object):
    """
    Building Site Export options.
    
    BuildingSiteExportOptions()
    """
    AreaPerPerson = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Custom value for Area Per Person value.

Get: AreaPerPerson(self: BuildingSiteExportOptions) -> float

Set: AreaPerPerson(self: BuildingSiteExportOptions) = value
"""

    PropertyLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Optional property Line to export; it may be ll.

Get: PropertyLine(self: BuildingSiteExportOptions) -> PropertyLine

Set: PropertyLine(self: BuildingSiteExportOptions) = value
"""

    PropertyLineOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property Line Offset. Default is 0.0.

Get: PropertyLineOffset(self: BuildingSiteExportOptions) -> float

Set: PropertyLineOffset(self: BuildingSiteExportOptions) = value
"""

    TotalGrossArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Custom value for the total area.

Get: TotalGrossArea(self: BuildingSiteExportOptions) -> float

Set: TotalGrossArea(self: BuildingSiteExportOptions) = value
"""

    TotalOccupancy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Custom value for the total occupancy.

Get: TotalOccupancy(self: BuildingSiteExportOptions) -> int

Set: TotalOccupancy(self: BuildingSiteExportOptions) = value
"""



class BuildingType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all of the built-in parameter groups supported by Autodesk
    Revit.
    
    enum BuildingType, values: kAutomotiveFacility (0), kConventionCenter (1), kCourthouse (2), kDiningBarLoungeOrLeisure (3), kDiningCafeteriaFastFood (4), kDiningFamily (5), kDormitory (6), kExerciseCenter (7), kFireStation (8), kGymnasium (9), kHospitalOrHealthcare (10), kHotel (11), kLibrary (12), kManufacturing (13), kMotel (14), kMotionPictureTheatre (15), kMultiFamily (16), kMuseum (17), kNoOfBuildingTypes (-1), kOffice (18), kParkingGarage (19), kPenitentiary (20), kPerformingArtsTheater (21), kPoliceStation (22), kPostOffice (23), kReligiousBuilding (24), kRetail (25), kSchoolOrUniversity (26), kSportsArena (27), kTownHall (28), kTransportation (29), kWarehouse (30), kWorkshop (31)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    kAutomotiveFacility = None
    kConventionCenter = None
    kCourthouse = None
    kDiningBarLoungeOrLeisure = None
    kDiningCafeteriaFastFood = None
    kDiningFamily = None
    kDormitory = None
    kExerciseCenter = None
    kFireStation = None
    kGymnasium = None
    kHospitalOrHealthcare = None
    kHotel = None
    kLibrary = None
    kManufacturing = None
    kMotel = None
    kMotionPictureTheatre = None
    kMultiFamily = None
    kMuseum = None
    kNoOfBuildingTypes = None
    kOffice = None
    kParkingGarage = None
    kPenitentiary = None
    kPerformingArtsTheater = None
    kPoliceStation = None
    kPostOffice = None
    kReligiousBuilding = None
    kRetail = None
    kSchoolOrUniversity = None
    kSportsArena = None
    kTownHall = None
    kTransportation = None
    kWarehouse = None
    kWorkshop = None
    value__ = None


class BuiltInCategory(Enum, IComparable, IFormattable, IConvertible):
    """
    A list of all the built in categories within Revit.
    
    enum BuiltInCategory, values: INVALID (-1), OST_AdaptivePoints (-2000900), OST_AdaptivePoints_HiddenLines (-2000904), OST_AdaptivePoints_Lines (-2000903), OST_AdaptivePoints_Planes (-2000902), OST_AdaptivePoints_Points (-2000901), OST_AlwaysExcludedInAllViews (-2003330), OST_Analemma (-2009618), OST_AnalysisDisplayStyle (-2000304), OST_AnalysisResults (-2000303), OST_AnalyticalNodes (-2009645), OST_AnalyticalNodes_Lines (-2009648), OST_AnalyticalNodes_Planes (-2009647), OST_AnalyticalNodes_Points (-2009646), OST_AnalyticalRigidLinks (-2001333), OST_AnalyticSpaces (-2008185), OST_AnalyticSurfaces (-2008186), OST_AnnotationCrop (-2000547), OST_AnnotationCropSpecial (-2000549), OST_AppearanceAsset (-2000923), OST_ArcWallRectOpening (-2000999), OST_AreaColorFill (-2000165), OST_AreaInteriorFill (-2000168), OST_AreaInteriorFillVisibility (-2000163), OST_AreaLoads (-2005203), OST_AreaLoadTags (-2005252), OST_AreaPolylines (-2000830), OST_AreaReference (-2000169), OST_AreaReferenceVisibility (-2000164), OST_AreaRein (-2009003), OST_AreaReinBoundary (-2009006), OST_AreaReinSketchOverride (-2009004), OST_AreaReinSpanSymbol (-2009005), OST_AreaReinTags (-2009021), OST_AreaReinXVisibility (-2009007), OST_AreaReport_Arc_Minus (-2000328), OST_AreaReport_Arc_Plus (-2000327), OST_AreaReport_Boundary (-2000326), OST_AreaReport_Triangle (-2000325), OST_Areas (-2003200), OST_AreaSchemeLines (-2000079), OST_AreaSchemes (-2003201), OST_AreaTags (-2005020), OST_Assemblies (-2000267), OST_AssemblyOrigin (-2009658), OST_AssemblyOrigin_Lines (-2009661), OST_AssemblyOrigin_Planes (-2009660), OST_AssemblyOrigin_Points (-2009659), OST_AssemblyTags (-2000268), OST_Automatic (-2001351), OST_AxisOfRotation (-2000065), OST_AxisX (-2000531), OST_AxisY (-2000532), OST_AxisZ (-2000533), OST_BasePointAxisX (-2001273), OST_BasePointAxisY (-2001274), OST_BasePointAxisZ (-2001275), OST_BeamAnalytical (-2009630), OST_BeamAnalyticalTags (-2009649), OST_BeamEndSegment (-2009632), OST_BeamLocalCoordSys (-2000971), OST_BeamStartSegment (-2009631), OST_BeamSystemTags (-2005130), OST_Blocks (-2001359), OST_BoundaryConditions (-2005301), OST_BraceAnalytical (-2009633), OST_BraceAnalyticalTags (-2009650), OST_BraceEndSegment (-2009635), OST_BraceLocalCoordSys (-2000973), OST_BraceStartSegment (-2009634), OST_BranchPanelScheduleTemplates (-2008145), OST_BrokenSectionLine (-2000202), OST_BuildingPad (-2001263), OST_CableTray (-2008130), OST_CableTrayCenterLine (-2008136), OST_CableTrayDrop (-2008135), OST_CableTrayFitting (-2008126), OST_CableTrayFittingCenterLine (-2008140), OST_CableTrayFittingTags (-2008127), OST_CableTrayRiseDrop (-2008134), OST_CableTrayRun (-2008150), OST_CableTrayTags (-2008131), OST_Cage (-2009008), OST_CalloutBoundary (-2000539), OST_CalloutHeads (-2000538), OST_CalloutLeaderLine (-2000544), OST_Callouts (-2000537), OST_Camera_Lines (-2000501), OST_Cameras (-2000500), OST_Casework (-2001000), OST_CaseworkHiddenLines (-2009515), OST_CaseworkTags (-2005001), OST_Catalogs (-2000290), OST_CeilingOpening (-2000899), OST_Ceilings (-2000038), OST_CeilingsCut (-2000039), OST_CeilingsCutPattern (-2000617), OST_CeilingsDefault (-2000616), OST_CeilingsFinish1 (-2000614), OST_CeilingsFinish2 (-2000615), OST_CeilingsHiddenLines (-2009503), OST_CeilingsInsulation (-2000612), OST_CeilingsMembrane (-2000610), OST_CeilingsProjection (-2000040), OST_CeilingsStructure (-2000611), OST_CeilingsSubstrate (-2000613), OST_CeilingsSurfacePattern (-2000543), OST_CeilingTags (-2005002), OST_CenterLines (-2000288), OST_CLines (-2000530), OST_CloudLines (-2000076), OST_ColorFillLegends (-2000550), OST_ColorFillSchema (-2000552), OST_ColumnAnalytical (-2009636), OST_ColumnAnalyticalGeometry (-2001332), OST_ColumnAnalyticalRigidLinks (-2001344), OST_ColumnAnalyticalTags (-2009651), OST_ColumnEndSegment (-2009638), OST_ColumnLocalCoordSys (-2000972), OST_ColumnOpening (-2000994), OST_Columns (-2000100), OST_ColumnsHiddenLines (-2009506), OST_ColumnStartSegment (-2009637), OST_CommunicationDevices (-2008081), OST_CommunicationDeviceTags (-2008082), OST_CompassInner (-2009613), OST_CompassOuter (-2009615), OST_CompassPrimaryMonth (-2009623), OST_CompassSecondaryMonth (-2009624), OST_CompassSection (-2009616), OST_CompassSectionFilled (-2009622), OST_ComponentRepeater (-2000927), OST_ComponentRepeaterSlot (-2000928), OST_Conduit (-2008132), OST_ConduitCenterLine (-2008139), OST_ConduitDrop (-2008138), OST_ConduitFitting (-2008128), OST_ConduitFittingCenterLine (-2008141), OST_ConduitFittingTags (-2008129), OST_ConduitRiseDrop (-2008137), OST_ConduitRun (-2008149), OST_ConduitStandards (-2008144), OST_ConduitTags (-2008133), OST_ConnectorElem (-2007000), OST_ConnectorElemXAxis (-2007001), OST_ConnectorElemYAxis (-2007002), OST_ConnectorElemZAxis (-2007003), OST_Constraints (-2000262), OST_ContourLabels (-2000350), OST_ControlAxisX (-2000721), OST_ControlAxisY (-2000772), OST_ControlAxisZ (-2000773), OST_ControlLocal (-2000774), OST_CoordinateSystem (-2000977), OST_Cornices (-2000181), OST_Coupler (-2009060), OST_CouplerHiddenLines (-2009062), OST_CouplerTags (-2009061), OST_CoverType (-2009014), OST_CropBoundary (-2000536), OST_CropBoundarySpecial (-2000548), OST_Curtain_Systems (-2000090), OST_CurtainGrids (-2000173), OST_CurtainGridsCurtaSystem (-2000323), OST_CurtainGridsRoof (-2000320), OST_CurtainGridsSystem (-2000322), OST_CurtainGridsWall (-2000321), OST_CurtainWallMullions (-2000171), OST_CurtainWallMullionsCut (-2000172), OST_CurtainWallMullionsHiddenLines (-2009511), OST_CurtainWallPanels (-2000170), OST_CurtainWallPanelsHiddenLines (-2009510), OST_CurtainWallPanelTags (-2005012), OST_CurtaSystem (-2000340), OST_CurtaSystemFaceManager (-2000341), OST_CurtaSystemHiddenLines (-2009531), OST_CurtaSystemTags (-2005025), OST_Curves (-2000041), OST_CurvesMediumLines (-2000043), OST_CurvesThinLines (-2000042), OST_CurvesWideLines (-2000044), OST_CutOutlines (-2000058), OST_DataDevices (-2008083), OST_DataDeviceTags (-2008084), OST_DataPanelScheduleTemplates (-2008147), OST_DecalElement (-2006001), OST_DecalType (-2006002), OST_DemolishedLines (-2000285), OST_DesignOptions (-2006114), OST_DesignOptionSets (-2006112), OST_DetailComponents (-2002000), OST_DetailComponentsHiddenLines (-2009514), OST_DetailComponentTags (-2005028), OST_Dimensions (-2000260), OST_DimLockControlLeader (-2000832), OST_DirectionEdgeLines (-2000289), OST_DisplacementElements (-2000222), OST_DisplacementPath (-2000223), OST_DividedPath (-2000926), OST_DividedSurface (-2003323), OST_DividedSurface_DiscardedDivisionLines (-2003333), OST_DividedSurface_Gridlines (-2003325), OST_DividedSurface_Nodes (-2003324), OST_DividedSurface_PatternFill (-2003327), OST_DividedSurface_PatternLines (-2003326), OST_DividedSurface_PreDividedSurface (-2003328), OST_DividedSurface_TransparentFace (-2003329), OST_DividedSurfaceBelt (-2003332), OST_DivisionProfile (-2008165), OST_DivisionRules (-2008190), OST_Divisions (-2000291), OST_Doors (-2000023), OST_DoorsFrameMullionCut (-2000028), OST_DoorsFrameMullionProjection (-2000029), OST_DoorsGlassCut (-2000030), OST_DoorsGlassProjection (-2000031), OST_DoorsHiddenLines (-2009501), OST_DoorsOpeningCut (-2000026), OST_DoorsOpeningProjection (-2000027), OST_DoorsPanelCut (-2000024), OST_DoorsPanelProjection (-2000025), OST_DoorTags (-2000460), OST_DormerOpeningIncomplete (-2000998), OST_DSR_ArrowHeadStyleId (-2000967), OST_DSR_CenterlinePatternCatId (-2000965), OST_DSR_CenterlineTickMarkStyleId (-2000966), OST_DSR_DimStyleHeavyEndCategoryId (-2000964), OST_DSR_DimStyleHeavyEndCatId (-2000963), OST_DSR_DimStyleTickCategoryId (-2000962), OST_DSR_InteriorTickMarkStyleId (-2000968), OST_DSR_LeaderTickMarkStyleId (-2000969), OST_DSR_LineAndTextAttrCategoryId (-2000960), OST_DSR_LineAndTextAttrFontId (-2000961), OST_DuctAccessory (-2008016), OST_DuctAccessoryTags (-2008017), OST_DuctColorFillLegends (-2007004), OST_DuctColorFills (-2008005), OST_DuctCurves (-2008000), OST_DuctCurvesCenterLine (-2008001), OST_DuctCurvesContour (-2008002), OST_DuctCurvesDrop (-2008062), OST_DuctCurvesInsulation (-2008063), OST_DuctCurvesLining (-2008064), OST_DuctCurvesRiseDrop (-2008036), OST_DuctFitting (-2008010), OST_DuctFittingCenterLine (-2008066), OST_DuctFittingInsulation (-2008067), OST_DuctFittingLining (-2008068), OST_DuctFittingTags (-2008061), OST_DuctInsulations (-2008123), OST_DuctInsulationsTags (-2008153), OST_DuctLinings (-2008124), OST_DuctLiningsTags (-2008154), OST_DuctSystem (-2008015), OST_DuctSystem_Reference (-2008156), OST_DuctSystem_Reference_Visibility (-2008157), OST_DuctTags (-2008003), OST_DuctTerminal (-2008013), OST_DuctTerminalTags (-2008014), OST_EAConstructions (-2008102), OST_EdgeSlab (-2001392), OST_EditCutProfile (-2006050), OST_ElecDistributionSys (-2008041), OST_ElectricalCircuit (-2008037), OST_ElectricalCircuitTags (-2008038), OST_ElectricalDemandFactor (-2008042), OST_ElectricalDemandFactorDefinitions (-2008142), OST_ElectricalEquipment (-2001040), OST_ElectricalEquipmentHiddenLines (-2009516), OST_ElectricalEquipmentTags (-2005003), OST_ElectricalFixtures (-2001060), OST_ElectricalFixturesHiddenLines (-2009517), OST_ElectricalFixtureTags (-2005004), OST_ElectricalInternalCircuits (-2008152), OST_ElectricalLoadClassifications (-2008143), OST_ElectricalVoltage (-2008040), OST_Elev (-2000535), OST_ElevationMarks (-2006045), OST_Entourage (-2001370), OST_EntourageHiddenLines (-2009529), OST_EPS_Demolished (-2000103), OST_EPS_Existing (-2000102), OST_EPS_Future (-2000106), OST_EPS_New (-2000104), OST_EPS_Temporary (-2000105), OST_Extrusions (-2000060), OST_FabricAreaBoundary (-2009029), OST_FabricAreas (-2009017), OST_FabricAreaSketchEnvelopeLines (-2009018), OST_FabricAreaSketchSheetsLines (-2009019), OST_FabricAreaTags (-2009023), OST_FabricationContainment (-2008212), OST_FabricationContainmentCenterLine (-2008214), OST_FabricationContainmentDrop (-2008219), OST_FabricationContainmentRise (-2008218), OST_FabricationContainmentSymbology (-2008215), OST_FabricationContainmentTags (-2008213), OST_FabricationDuctwork (-2008193), OST_FabricationDuctworkCenterLine (-2008196), OST_FabricationDuctworkDrop (-2008206), OST_FabricationDuctworkInsulation (-2008198), OST_FabricationDuctworkLining (-2008220), OST_FabricationDuctworkRise (-2008205), OST_FabricationDuctworkSymbology (-2008207), OST_FabricationDuctworkTags (-2008194), OST_FabricationHangers (-2008203), OST_FabricationHangerTags (-2008204), OST_FabricationPartsTmpGraphicDrag (-2008201), OST_FabricationPartsTmpGraphicEnd (-2008199), OST_FabricationPipework (-2008208), OST_FabricationPipeworkCenterLine (-2008210), OST_FabricationPipeworkDrop (-2008217), OST_FabricationPipeworkInsulation (-2008221), OST_FabricationPipeworkRise (-2008216), OST_FabricationPipeworkSymbology (-2008211), OST_FabricationPipeworkTags (-2008209), OST_FabricationServiceElements (-2008195), OST_FabricReinforcement (-2009016), OST_FabricReinforcementBoundary (-2009026), OST_FabricReinforcementTags (-2009022), OST_FabricReinforcementWire (-2009027), OST_FabricReinSpanSymbol (-2009028), OST_FaceSplitter (-2000192), OST_Fascia (-2001390), OST_FilledRegion (-2000190), OST_FillPatterns (-2000081), OST_FireAlarmDevices (-2008085), OST_FireAlarmDeviceTags (-2008086), OST_Fixtures (-2000140), OST_FlexDuctCurves (-2008020), OST_FlexDuctCurvesCenterLine (-2008021), OST_FlexDuctCurvesContour (-2008022), OST_FlexDuctCurvesInsulation (-2008065), OST_FlexDuctCurvesPattern (-2008023), OST_FlexDuctTags (-2008004), OST_FlexPipeCurves (-2008050), OST_FlexPipeCurvesCenterLine (-2008051), OST_FlexPipeCurvesContour (-2008052), OST_FlexPipeCurvesInsulation (-2008071), OST_FlexPipeCurvesPattern (-2008053), OST_FlexPipeTags (-2008048), OST_FloorAnalytical (-2009639), OST_FloorAnalyticalTags (-2009652), OST_FloorLocalCoordSys (-2000975), OST_FloorOpening (-2000898), OST_Floors (-2000032), OST_FloorsAnalyticalGeometry (-2000546), OST_FloorsCut (-2000033), OST_FloorsCutPattern (-2000608), OST_FloorsDefault (-2000606), OST_FloorsFinish1 (-2000604), OST_FloorsFinish2 (-2000605), OST_FloorsInsulation (-2000602), OST_FloorsInteriorEdges (-2000609), OST_FloorsMembrane (-2000600), OST_FloorsProjection (-2000034), OST_FloorsStructure (-2000601), OST_FloorsSubstrate (-2000603), OST_FloorsSurfacePattern (-2000541), OST_FloorTags (-2005026), OST_Fluids (-2008106), OST_FndSlabLocalCoordSys (-2000976), OST_FootingAnalyticalGeometry (-2001353), OST_FootingSpanDirectionSymbol (-2005111), OST_FoundationSlabAnalytical (-2009643), OST_FoundationSlabAnalyticalTags (-2009656), OST_FramingAnalyticalGeometry (-2001331), OST_Furniture (-2000080), OST_FurnitureHiddenLines (-2009505), OST_FurnitureSystems (-2001100), OST_FurnitureSystemsHiddenLines (-2009518), OST_FurnitureSystemTags (-2005007), OST_FurnitureTags (-2005006), OST_gbXML_Ceiling (-2008173), OST_gbXML_ExteriorWall (-2008167), OST_gbXML_FixedSkylight (-2008180), OST_gbXML_FixedWindow (-2008178), OST_gbXML_InteriorFloor (-2008172), OST_gbXML_InteriorWall (-2008171), OST_gbXML_NonSlidingDoor (-2008183), OST_GbXML_Opening (-2008095), OST_gbXML_OpeningAir (-2008184), OST_gbXML_OperableSkylight (-2008181), OST_gbXML_OperableWindow (-2008179), OST_gbXML_RaisedFloor (-2008169), OST_gbXML_Roof (-2008168), OST_gbXML_Shade (-2008187), OST_gbXML_SlabOnGrade (-2008170), OST_gbXML_SlidingDoor (-2008182), OST_GbXML_SType_Exterior (-2008092), OST_GbXML_SType_Interior (-2008091), OST_GbXML_SType_Shade (-2008093), OST_GbXML_SType_Underground (-2008094), OST_gbXML_SurfaceAir (-2008174), OST_gbXML_UndergroundCeiling (-2008177), OST_gbXML_UndergroundSlab (-2008176), OST_gbXML_UndergroundWall (-2008175), OST_GbXMLFaces (-2008090), OST_GenericAnnotation (-2000150), OST_GenericLines (-2000078), OST_GenericModel (-2000151), OST_GenericModelHiddenLines (-2009512), OST_GenericModelTags (-2005013), OST_Girder (-2001322), OST_GraphicalWarning_OpenConnector (-2008162), OST_GridChains (-2000221), OST_GridHeads (-2006040), OST_Grids (-2000220), OST_GuideGrid (-2000107), OST_Gutter (-2001391), OST_HiddenFloorLines (-2000607), OST_HiddenLines (-2000286), OST_HiddenStructuralColumnLines (-2001334), OST_HiddenStructuralConnectionLines_Deprecated (-2000979), OST_HiddenStructuralFoundationLines (-2001302), OST_HiddenStructuralFramingLines (-2001329), OST_HiddenWallLines (-2000587), OST_HorizontalBracing (-2001325), OST_HostFin (-2000310), OST_HostFinCeiling (-2000313), OST_HostFinFloor (-2000311), OST_HostFinHF (-2000315), OST_HostFinRoof (-2000312), OST_HostFinTags (-2005024), OST_HostFinWall (-2000314), OST_HostTemplate (-2003409), OST_HVAC_Load_Building_Types (-2008120), OST_HVAC_Load_Schedules (-2008121), OST_HVAC_Load_Space_Types (-2008119), OST_HVAC_Zones (-2008107), OST_HVAC_Zones_Boundary (-2008108), OST_HVAC_Zones_ColorFill (-2008116), OST_HVAC_Zones_InteriorFill (-2008109), OST_HVAC_Zones_InteriorFill_Visibility (-2008117), OST_HVAC_Zones_Reference (-2008110), OST_HVAC_Zones_Reference_Visibility (-2008118), OST_ImportObjectStyles (-2000196), OST_InstanceDrivenLineStyle (-2000828), OST_InsulationLines (-2000077), OST_InternalAreaLoads (-2005207), OST_InternalAreaLoadTags (-2005255), OST_InternalLineLoads (-2005206), OST_InternalLineLoadTags (-2005254), OST_InternalLoads (-2005204), OST_InternalPointLoads (-2005205), OST_InternalPointLoadTags (-2005253), OST_InvisibleLines (-2000064), OST_IOS (-2000059), OST_IOS_GeoLocations (-2000110), OST_IOS_GeoSite (-2000111), OST_IOSAligningLine (-2000048), OST_IOSAlignmentGraphics (-2000049), OST_IOSArrays (-2000091), OST_IOSAttachedDetailGroups (-2000097), OST_IOSBackedUpElements (-2000047), OST_IOSBBoxScreenSize (-2000089), OST_IOSConstructionLine (-2000050), OST_IOSCrashGraphics (-2000073), OST_IOSCuttingGeometry (-2000074), OST_IOSDatumPlane (-2000052), OST_IOSDetailGroups (-2000096), OST_IOSDragBox (-2000113), OST_IOSDragBoxInverted (-2000114), OST_IOSFabricReinSpanSymbolCtrl (-2000109), OST_IOSFlipControl (-2000056), OST_IOSFreeSnapLine (-2000053), OST_IOSGhost (-2000071), OST_IOSGroups (-2000072), OST_IOSMeasureLine (-2000092), OST_IOSMeasureLineScreenSize (-2000101), OST_IOSModelGroups (-2000095), OST_IOSNavWheelPivotBall (-2000117), OST_IOSNotSilhouette (-2000082), OST_IOSOpening (-2000810), OST_IOSRebarSystemSpanSymbolCtrl (-2000099), OST_IOSRegeneratedElements (-2000046), OST_IOSRegenerationFailure (-2000010), OST_IOSRoomCalculationPoint (-2000925), OST_IOSRoomComputationHeight (-2000116), OST_IOSRoomPerimeterLines (-2000075), OST_IOSRoomTagToRoomLines (-2000098), OST_IOSRoomUpperLowerLines (-2000115), OST_IOSSketchGrid (-2000055), OST_IOSSlabShapeEditorAutoCrease (-2000085), OST_IOSSlabShapeEditorBoundary (-2000086), OST_IOSSlabShapeEditorExplitCrease (-2000084), OST_IOSSlabShapeEditorPointBoundary (-2000087), OST_IOSSlabShapeEditorPointInterior (-2000088), OST_IOSSuspendedSketch (-2000094), OST_IOSSuspendedSketch_obsolete (-2000054), OST_IOSThinPixel (-2000057), OST_IOSThinPixel_Dash (-2000062), OST_IOSThinPixel_DashDot (-2000063), OST_IOSThinPixel_Dot (-2000061), OST_IOSTilePatternGrid (-2000800), OST_IOSWallCoreBoundary (-2000093), OST_IsolatedFoundationAnalytical (-2009641), OST_IsolatedFoundationAnalyticalTags (-2009654), OST_Joist (-2001323), OST_KeynoteTags (-2005029), OST_KickerBracing (-2001328), OST_LayoutNodes (-2008197), OST_LayoutPath_Bases (-2008114), OST_LayoutPathBase_Pipings (-2008192), OST_LegendComponents (-2000575), OST_LevelHeads (-2006020), OST_Levels (-2000240), OST_LightingDevices (-2008087), OST_LightingDeviceTags (-2008088), OST_LightingFixtures (-2001120), OST_LightingFixturesHiddenLines (-2009519), OST_LightingFixtureSource (-2001121), OST_LightingFixtureTags (-2005008), OST_LightLine (-2009621), OST_Lights (-2000520), OST_LineLoads (-2005202), OST_LineLoadTags (-2005251), OST_Lines (-2000051), OST_LinesBeyond (-2000287), OST_LinesHiddenLines (-2009504), OST_LinkAnalyticalTags (-2000955), OST_LinksAnalytical (-2009657), OST_LoadCases (-2005210), OST_LoadCasesAccidental (-2005216), OST_LoadCasesDead (-2005211), OST_LoadCasesLive (-2005212), OST_LoadCasesRoofLive (-2005215), OST_LoadCasesSeismic (-2005218), OST_LoadCasesSnow (-2005214), OST_LoadCasesTemperature (-2005217), OST_LoadCasesWind (-2005213), OST_Loads (-2005200), OST_MaskingRegion (-2000194), OST_Mass (-2003400), OST_Mass_Obsolete_IdInWrongRange (-20034000), OST_MassAreaFaceTags (-2003410), OST_MassCutter (-2003407), OST_MassExteriorWall (-2003413), OST_MassExteriorWallUnderground (-2003420), OST_MassFaceSplitter (-2003408), OST_MassFloor (-2003403), OST_MassFloor_Obsolete_IdInWrongRange (-20034003), OST_MassFloorsAll (-2003422), OST_MassForm (-2003404), OST_MassGlazing (-2003415), OST_MassGlazingAll (-2003423), OST_MassHiddenLines (-2009532), OST_Massing (-2000185), OST_MassingCutOutlines (-2000186), OST_MassingProjectionOutlines (-2000187), OST_MassInteriorWall (-2003412), OST_MassOpening (-2003417), OST_MassRoof (-2003414), OST_MassShade (-2003418), OST_MassSkylights (-2003416), OST_MassSlab (-2003419), OST_MassSurface_Obsolete_IdInWrongRange (-20034004), OST_MassTags (-2003405), OST_MassTags_Obsolete_IdInWrongRange (-20034005), OST_MassWallsAll (-2003421), OST_MassZone (-2003411), OST_MatchAll (-2000002), OST_MatchAnnotation (-2000004), OST_MatchDetail (-2000005), OST_Matchline (-2000193), OST_MatchModel (-2000003), OST_MatchProfile (-2000006), OST_MatchSiteComponent (-2000007), OST_Materials (-2000700), OST_MaterialTags (-2005027), OST_MechanicalEquipment (-2001140), OST_MechanicalEquipmentHiddenLines (-2009520), OST_MechanicalEquipmentTags (-2005009), OST_MEPSpaceColorFill (-2003605), OST_MEPSpaceInteriorFill (-2003603), OST_MEPSpaceInteriorFillVisibility (-2003601), OST_MEPSpaceReference (-2003604), OST_MEPSpaceReferenceVisibility (-2003602), OST_MEPSpaces (-2003600), OST_MEPSpaceSeparationLines (-2000831), OST_MEPSpaceTags (-2000485), OST_ModelText (-2000195), OST_MultiCategoryTags (-2005022), OST_MultiReferenceAnnotations (-2000970), OST_MultistoryStairs (-2000980), OST_MultiSurface (-2009620), OST_NodeAnalyticalTags (-2000956), OST_NumberingSchemas (-2008191), OST_NurseCallDevices (-2008077), OST_NurseCallDeviceTags (-2008078), OST_OBSOLETE_ElemArrayHiddenLines (-2009530), OST_OBSOLETE_FabricationPartsTmpGraphicDrop (-2008200), OST_OBSOLETE_FabricationPartsTmpGraphicDropDrag (-2008202), OST_OverheadLines (-2000284), OST_PanelScheduleGraphics (-2008151), OST_ParamElemElectricalLoadClassification (-2008148), OST_Parking (-2001180), OST_ParkingHiddenLines (-2009522), OST_ParkingTags (-2005017), OST_PartHiddenLines (-2000271), OST_Parts (-2000269), OST_PartTags (-2000270), OST_PathRein (-2009009), OST_PathReinBoundary (-2009012), OST_PathReinSpanSymbol (-2009010), OST_PathReinTags (-2009011), OST_Phases (-2000112), OST_PipeAccessory (-2008055), OST_PipeAccessoryTags (-2008056), OST_PipeColorFillLegends (-2008058), OST_PipeColorFills (-2008059), OST_PipeConnections (-2008103), OST_PipeCurves (-2008044), OST_PipeCurvesCenterLine (-2008045), OST_PipeCurvesContour (-2008046), OST_PipeCurvesDrop (-2008069), OST_PipeCurvesInsulation (-2008070), OST_PipeCurvesRiseDrop (-2008054), OST_PipeFitting (-2008049), OST_PipeFittingCenterLine (-2008072), OST_PipeFittingInsulation (-2008073), OST_PipeFittingTags (-2008060), OST_PipeInsulations (-2008122), OST_PipeInsulationsTags (-2008155), OST_PipeMaterials (-2008104), OST_PipeSchedules (-2008105), OST_PipeSegments (-2008163), OST_PipeTags (-2008047), OST_PipingSystem (-2008043), OST_PipingSystem_Reference (-2008158), OST_PipingSystem_Reference_Visibility (-2008159), OST_PlaceHolderDucts (-2008160), OST_PlaceHolderPipes (-2008161), OST_PlanRegion (-2000191), OST_Planting (-2001360), OST_PlantingHiddenLines (-2009528), OST_PlantingTags (-2005021), OST_PlumbingFixtures (-2001160), OST_PlumbingFixturesHiddenLines (-2009521), OST_PlumbingFixtureTags (-2005010), OST_PointClouds (-2010001), OST_PointLoads (-2005201), OST_PointLoadTags (-2005250), OST_PreviewLegendComponents (-2000576), OST_ProfileFamilies (-2003000), OST_ProjectBasePoint (-2001271), OST_ProjectInformation (-2003101), OST_Property (-2001200), OST_PropertySet (-2000924), OST_Purlin (-2001324), OST_RailingBalusterRail (-2000176), OST_RailingBalusterRailCut (-2000177), OST_RailingHandRail (-2000947), OST_RailingHandRailAboveCut (-2000951), OST_RailingRailPathExtensionLines (-2000954), OST_RailingRailPathLines (-2000953), OST_Railings (-2000175), OST_RailingSupport (-2000948), OST_RailingSystem (-2000905), OST_RailingSystemBaluster (-2000908), OST_RailingSystemBalusterHiddenLines_Deprecated (-2009541), OST_RailingSystemHandRail (-2000911), OST_RailingSystemHandRailBracket (-2000912), OST_RailingSystemHandRailBracketHiddenLines_Deprecated (-2009545), OST_RailingSystemHandRailHiddenLines_Deprecated (-2009544), OST_RailingSystemHardware (-2000910), OST_RailingSystemHiddenLines_Deprecated (-2009538), OST_RailingSystemPanel (-2000909), OST_RailingSystemPanelBracketHiddenLines_Deprecated (-2009543), OST_RailingSystemPanelHiddenLines_Deprecated (-2009542), OST_RailingSystemPost (-2000907), OST_RailingSystemPostHiddenLines_Deprecated (-2009540), OST_RailingSystemRail (-2000914), OST_RailingSystemRailHiddenLines_Deprecated (-2009547), OST_RailingSystemSegment (-2000906), OST_RailingSystemSegmentHiddenLines_Deprecated (-2009539), OST_RailingSystemTags (-2000917), OST_RailingSystemTermination (-2000915), OST_RailingSystemTerminationHiddenLines_Deprecated (-2009548), OST_RailingSystemTopRail (-2000913), OST_RailingSystemTopRailHiddenLines_Deprecated (-2009546), OST_RailingSystemTransition (-2000916), OST_RailingSystemTransitionHiddenLines_Deprecated (-2009549), OST_RailingTermination (-2000949), OST_RailingTopRail (-2000946), OST_RailingTopRailAboveCut (-2000950), OST_Ramps (-2000180), OST_RampsAboveCut (-2003302), OST_RampsDownArrow (-2003308), OST_RampsDownText (-2003306), OST_RampsHiddenLines (-2009509), OST_RampsIncomplete (-2003301), OST_RampsStringer (-2003303), OST_RampsStringerAboveCut (-2003304), OST_RampsUpArrow (-2003307), OST_RampsUpText (-2003305), OST_RasterImages (-2000560), OST_Rebar (-2009000), OST_RebarCover (-2009015), OST_RebarHiddenLines (-2009050), OST_RebarLines (-2009002), OST_RebarSetToggle (-2009025), OST_RebarShape (-2009013), OST_RebarSketchLines (-2009001), OST_RebarTags (-2009020), OST_ReferenceLines (-2000083), OST_ReferencePoints (-2000710), OST_ReferencePoints_HiddenLines (-2000714), OST_ReferencePoints_Lines (-2000713), OST_ReferencePoints_Planes (-2000712), OST_ReferencePoints_Points (-2000711), OST_ReferenceViewer (-2000198), OST_ReferenceViewerSymbol (-2000197), OST_RemovedGridSeg (-2000827), OST_RemovedGridSeg_Obsolete_IdInWrongRange (-20000827), OST_RenderRegions (-2000302), OST_RepeatingDetailLines (-2003321), OST_Reveals (-2000182), OST_RevisionClouds (-2006060), OST_RevisionCloudTags (-2006080), OST_Revisions (-2006070), OST_RigidLinksAnalytical (-2009644), OST_Roads (-2001220), OST_RoadsHiddenLines (-2009523), OST_RoofOpening (-2000897), OST_Roofs (-2000035), OST_RoofsCut (-2000036), OST_RoofsCutPattern (-2000597), OST_RoofsDefault (-2000596), OST_RoofsFinish1 (-2000594), OST_RoofsFinish2 (-2000595), OST_RoofsHiddenLines (-2009502), OST_RoofsInsulation (-2000592), OST_RoofsInteriorEdges (-2000598), OST_RoofsMembrane (-2000590), OST_RoofSoffit (-2001393), OST_RoofsProjection (-2000037), OST_RoofsStructure (-2000591), OST_RoofsSubstrate (-2000593), OST_RoofsSurfacePattern (-2000542), OST_RoofTags (-2000266), OST_RoomColorFill (-2000551), OST_RoomInteriorFill (-2000166), OST_RoomInteriorFillVisibility (-2000161), OST_RoomPolylines (-2000829), OST_RoomReference (-2000167), OST_RoomReferenceVisibility (-2000162), OST_Rooms (-2000160), OST_RoomSeparationLines (-2000066), OST_RoomTags (-2000480), OST_RouteCurve (-2008096), OST_RouteCurveBranch (-2008098), OST_RouteCurveMain (-2008097), OST_RoutingPreferences (-2008125), OST_RvtLinks (-2001352), OST_ScheduleGraphics (-2000570), OST_ScheduleViewParamGroup (-2000008), OST_SecondaryTopographyContours (-2001343), OST_SectionBox (-2000301), OST_SectionHeadMediumLines (-2000403), OST_SectionHeads (-2000400), OST_SectionHeadThinLines (-2000401), OST_SectionHeadWideLines (-2000404), OST_SectionLine (-2000201), OST_Sections (-2000200), OST_SecurityDevices (-2008079), OST_SecurityDeviceTags (-2008080), OST_Sewer (-2001240), OST_ShaftOpening (-2000996), OST_ShaftOpeningHiddenLines (-2009513), OST_SharedBasePoint (-2001272), OST_Sheets (-2003100), OST_Site (-2001260), OST_SiteHiddenLines (-2009524), OST_SitePoint (-2001262), OST_SitePointBoundary (-2001266), OST_SiteProperty (-2001265), OST_SitePropertyLineSegment (-2001268), OST_SitePropertyLineSegmentTags (-2001269), OST_SitePropertyTags (-2001267), OST_SiteRegion (-2001270), OST_SiteSurface (-2001261), OST_SiteTags (-2005016), OST_SketchLines (-2000045), OST_SpanDirectionSymbol (-2005110), OST_SpecialityEquipment (-2001350), OST_SpecialityEquipmentHiddenLines (-2009527), OST_SpecialityEquipmentTags (-2005014), OST_SplitterProfile (-2008164), OST_SpotCoordinates (-2000264), OST_SpotCoordinateSymbols (-2005101), OST_SpotElevations (-2000263), OST_SpotElevSymbols (-2005100), OST_SpotSlopes (-2000265), OST_SpotSlopesSymbols (-2005102), OST_Sprinklers (-2008099), OST_SprinklerTags (-2008100), OST_StackedWalls (-2003500), OST_StackedWalls_Obsolete_IdInWrongRange (-20034100), OST_Stair2012_Deprecated (-2000918), OST_StairLanding2012HiddenLines_Deprecated (-2009535), OST_StairRun2012HiddenLines_Deprecated (-2009534), OST_Stairs (-2000120), OST_Stairs2012HiddenLines_Deprecated (-2009533), OST_StairsAboveCut_ToBeDeprecated (-2000122), OST_StairsCutMarks (-2000930), OST_StairsCutMarksAboveCut (-2000931), OST_StairsDownArrows (-2000131), OST_StairsDownText (-2000129), OST_StairsHiddenLines (-2009507), OST_StairsIncomplete_Deprecated (-2000121), OST_StairsLandings (-2000920), OST_StairsLandingTags (-2000941), OST_StairsNosingLines (-2000932), OST_StairsNosingLinesAboveCut (-2000933), OST_StairsOutlines (-2000934), OST_StairsOutlinesAboveCut (-2000935), OST_StairsPaths (-2000938), OST_StairsPathsAboveCut (-2000939), OST_StairsRailing (-2000126), OST_StairsRailingAboveCut (-2000132), OST_StairsRailingBaluster (-2000127), OST_StairsRailingHiddenLines (-2009508), OST_StairsRailingRail (-2000128), OST_StairsRailingTags (-2000133), OST_StairsRiserLines (-2000936), OST_StairsRiserLinesAboveCut (-2000937), OST_StairsRuns (-2000919), OST_StairsRunTags (-2000940), OST_StairsSketchBoundaryLines (-2000067), OST_StairsSketchLandingCenterLines (-2000070), OST_StairsSketchPathLines (-2000945), OST_StairsSketchRiserLines (-2000068), OST_StairsSketchRunLines (-2000069), OST_StairsStringerCarriage (-2000123), OST_StairsSupports (-2000952), OST_StairsSupportsAboveCut (-2000124), OST_StairsSupportTags (-2000942), OST_StairsTags (-2005023), OST_StairStringer2012_Deprecated (-2000922), OST_StairStringer2012HiddenLines_Deprecated (-2009537), OST_StairsTriserNumbers (-2000944), OST_StairsTrisers (-2000921), OST_StairsTriserTags (-2000943), OST_StairsUpArrows (-2000130), OST_StairsUpText (-2000125), OST_StairTread2012HiddenLines_Deprecated (-2009536), OST_StickSymbols_Obsolete_IdInWrongRange (-20000828), OST_StructConnectionAnchors (-2009039), OST_StructConnectionBolts (-2009041), OST_StructConnectionFailed (-2009035), OST_StructConnectionHiddenLines (-2009032), OST_StructConnectionOthers (-2009042), OST_StructConnectionPlates (-2009038), OST_StructConnectionProfiles (-2009037), OST_StructConnectionReference (-2009036), OST_StructConnections (-2009030), OST_StructConnectionStale (-2009034), OST_StructConnectionSymbol (-2009033), OST_StructConnectionSymbols (-2006100), OST_StructConnectionTags (-2009040), OST_StructLocationLineControl (-2000880), OST_StructuralAnnotations (-2006090), OST_StructuralBracePlanReps (-2006110), OST_StructuralColumnLocationLine (-2001357), OST_StructuralColumns (-2001330), OST_StructuralColumnStickSymbols (-2001335), OST_StructuralColumnTags (-2005018), OST_StructuralConnectionHandler_Deprecated (-2000978), OST_StructuralConnectionHandlerTags_Deprecated (-2005031), OST_StructuralFoundation (-2001300), OST_StructuralFoundationTags (-2005019), OST_StructuralFraming (-2001320), OST_StructuralFramingLocationLine (-2001356), OST_StructuralFramingOpening (-2000995), OST_StructuralFramingOther (-2001321), OST_StructuralFramingSystem (-2001327), OST_StructuralFramingSystemHiddenLines_Obsolete (-2009525), OST_StructuralFramingTags (-2005015), OST_StructuralStiffener (-2001354), OST_StructuralStiffenerHiddenLines (-2001358), OST_StructuralStiffenerTags (-2001355), OST_StructuralTruss (-2001336), OST_StructuralTrussHiddenLines (-2009607), OST_StructuralTrussStickSymbols (-2009608), OST_StructWeldLines (-2009031), OST_Sun (-2009610), OST_SunPath1 (-2009611), OST_SunPath2 (-2009612), OST_SunriseText (-2009614), OST_SunsetText (-2009617), OST_SunStudy (-2009609), OST_SunSurface (-2009619), OST_SWallRectOpening (-2000997), OST_SwitchboardScheduleTemplates (-2008146), OST_SwitchSystem (-2008101), OST_Tags (-2005000), OST_TelephoneDevices (-2008075), OST_TelephoneDeviceTags (-2008076), OST_TextNotes (-2000300), OST_TilePatterns (-2003331), OST_TitleBlockMediumLines (-2000282), OST_TitleBlocks (-2000280), OST_TitleBlockThinLines (-2000281), OST_TitleBlockWideLines (-2000283), OST_Topography (-2001340), OST_TopographyContours (-2001342), OST_TopographyHiddenLines (-2009526), OST_TopographySurface (-2001341), OST_Truss (-2009600), OST_TrussBottomChordCurve (-2009604), OST_TrussChord (-2009606), OST_TrussDiagWebCurve (-2009601), OST_TrussDummy (-2003300), OST_TrussTags (-2005030), OST_TrussTopChordCurve (-2009603), OST_TrussVertWebCurve (-2009602), OST_TrussWeb (-2009605), OST_VerticalBracing (-2001326), OST_Viewers (-2000278), OST_ViewportLabel (-2000515), OST_Viewports (-2000510), OST_Views (-2000279), OST_VolumeOfInterest (-2006000), OST_WallAnalytical (-2009640), OST_WallAnalyticalTags (-2009653), OST_WallFoundationAnalytical (-2009642), OST_WallFoundationAnalyticalTags (-2009655), OST_WallLocalCoordSys (-2000974), OST_WallRefPlanes (-2000896), OST_WallRefPlanes_Obsolete_IdInWrongRange (-20000896), OST_Walls (-2000011), OST_WallsAnalyticalGeometry (-2000545), OST_WallsCutOutlines (-2000012), OST_WallsCutPattern (-2000588), OST_WallsDefault (-2000586), OST_WallsFinish1 (-2000584), OST_WallsFinish2 (-2000585), OST_WallsInsulation (-2000582), OST_WallsMembrane (-2000580), OST_WallsProjectionOutlines (-2000013), OST_WallsStructure (-2000581), OST_WallsSubstrate (-2000583), OST_WallsSurfacePattern (-2000540), OST_WallTags (-2005011), OST_WeakDims (-2000261), OST_Windows (-2000014), OST_WindowsFrameMullionCut (-2000017), OST_WindowsFrameMullionProjection (-2000018), OST_WindowsGlassCut (-2000015), OST_WindowsGlassProjection (-2000016), OST_WindowsHiddenLines (-2009500), OST_WindowsOpeningCut (-2000021), OST_WindowsOpeningProjection (-2000022), OST_WindowsSillHeadCut (-2000019), OST_WindowsSillHeadProjection (-2000020), OST_WindowTags (-2000450), OST_Wire (-2008039), OST_WireHomeRunArrows (-2008089), OST_WireInsulations (-2008112), OST_WireMaterials (-2008111), OST_WireTags (-2008057), OST_WireTemperatureRatings (-2008113), OST_WireTickMarks (-2008074), OST_XRayConstrainedProfileEdge (-2000720), OST_XRayImplicitPathCurve (-2000719), OST_XRayPathCurve (-2000717), OST_XRayPathPoint (-2000718), OST_XRayProfileEdge (-2000715), OST_XRaySideEdge (-2000716), OST_ZoneSchemes (-2003225), OST_ZoneTags (-2008115), OST_ZoningEnvelope (-2003406)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    INVALID = None
    OST_AdaptivePoints = None
    OST_AdaptivePoints_HiddenLines = None
    OST_AdaptivePoints_Lines = None
    OST_AdaptivePoints_Planes = None
    OST_AdaptivePoints_Points = None
    OST_AlwaysExcludedInAllViews = None
    OST_Analemma = None
    OST_AnalysisDisplayStyle = None
    OST_AnalysisResults = None
    OST_AnalyticalNodes = None
    OST_AnalyticalNodes_Lines = None
    OST_AnalyticalNodes_Planes = None
    OST_AnalyticalNodes_Points = None
    OST_AnalyticalRigidLinks = None
    OST_AnalyticSpaces = None
    OST_AnalyticSurfaces = None
    OST_AnnotationCrop = None
    OST_AnnotationCropSpecial = None
    OST_AppearanceAsset = None
    OST_ArcWallRectOpening = None
    OST_AreaColorFill = None
    OST_AreaInteriorFill = None
    OST_AreaInteriorFillVisibility = None
    OST_AreaLoads = None
    OST_AreaLoadTags = None
    OST_AreaPolylines = None
    OST_AreaReference = None
    OST_AreaReferenceVisibility = None
    OST_AreaRein = None
    OST_AreaReinBoundary = None
    OST_AreaReinSketchOverride = None
    OST_AreaReinSpanSymbol = None
    OST_AreaReinTags = None
    OST_AreaReinXVisibility = None
    OST_AreaReport_Arc_Minus = None
    OST_AreaReport_Arc_Plus = None
    OST_AreaReport_Boundary = None
    OST_AreaReport_Triangle = None
    OST_Areas = None
    OST_AreaSchemeLines = None
    OST_AreaSchemes = None
    OST_AreaTags = None
    OST_Assemblies = None
    OST_AssemblyOrigin = None
    OST_AssemblyOrigin_Lines = None
    OST_AssemblyOrigin_Planes = None
    OST_AssemblyOrigin_Points = None
    OST_AssemblyTags = None
    OST_Automatic = None
    OST_AxisOfRotation = None
    OST_AxisX = None
    OST_AxisY = None
    OST_AxisZ = None
    OST_BasePointAxisX = None
    OST_BasePointAxisY = None
    OST_BasePointAxisZ = None
    OST_BeamAnalytical = None
    OST_BeamAnalyticalTags = None
    OST_BeamEndSegment = None
    OST_BeamLocalCoordSys = None
    OST_BeamStartSegment = None
    OST_BeamSystemTags = None
    OST_Blocks = None
    OST_BoundaryConditions = None
    OST_BraceAnalytical = None
    OST_BraceAnalyticalTags = None
    OST_BraceEndSegment = None
    OST_BraceLocalCoordSys = None
    OST_BraceStartSegment = None
    OST_BranchPanelScheduleTemplates = None
    OST_BrokenSectionLine = None
    OST_BuildingPad = None
    OST_CableTray = None
    OST_CableTrayCenterLine = None
    OST_CableTrayDrop = None
    OST_CableTrayFitting = None
    OST_CableTrayFittingCenterLine = None
    OST_CableTrayFittingTags = None
    OST_CableTrayRiseDrop = None
    OST_CableTrayRun = None
    OST_CableTrayTags = None
    OST_Cage = None
    OST_CalloutBoundary = None
    OST_CalloutHeads = None
    OST_CalloutLeaderLine = None
    OST_Callouts = None
    OST_Cameras = None
    OST_Camera_Lines = None
    OST_Casework = None
    OST_CaseworkHiddenLines = None
    OST_CaseworkTags = None
    OST_Catalogs = None
    OST_CeilingOpening = None
    OST_Ceilings = None
    OST_CeilingsCut = None
    OST_CeilingsCutPattern = None
    OST_CeilingsDefault = None
    OST_CeilingsFinish1 = None
    OST_CeilingsFinish2 = None
    OST_CeilingsHiddenLines = None
    OST_CeilingsInsulation = None
    OST_CeilingsMembrane = None
    OST_CeilingsProjection = None
    OST_CeilingsStructure = None
    OST_CeilingsSubstrate = None
    OST_CeilingsSurfacePattern = None
    OST_CeilingTags = None
    OST_CenterLines = None
    OST_CLines = None
    OST_CloudLines = None
    OST_ColorFillLegends = None
    OST_ColorFillSchema = None
    OST_ColumnAnalytical = None
    OST_ColumnAnalyticalGeometry = None
    OST_ColumnAnalyticalRigidLinks = None
    OST_ColumnAnalyticalTags = None
    OST_ColumnEndSegment = None
    OST_ColumnLocalCoordSys = None
    OST_ColumnOpening = None
    OST_Columns = None
    OST_ColumnsHiddenLines = None
    OST_ColumnStartSegment = None
    OST_CommunicationDevices = None
    OST_CommunicationDeviceTags = None
    OST_CompassInner = None
    OST_CompassOuter = None
    OST_CompassPrimaryMonth = None
    OST_CompassSecondaryMonth = None
    OST_CompassSection = None
    OST_CompassSectionFilled = None
    OST_ComponentRepeater = None
    OST_ComponentRepeaterSlot = None
    OST_Conduit = None
    OST_ConduitCenterLine = None
    OST_ConduitDrop = None
    OST_ConduitFitting = None
    OST_ConduitFittingCenterLine = None
    OST_ConduitFittingTags = None
    OST_ConduitRiseDrop = None
    OST_ConduitRun = None
    OST_ConduitStandards = None
    OST_ConduitTags = None
    OST_ConnectorElem = None
    OST_ConnectorElemXAxis = None
    OST_ConnectorElemYAxis = None
    OST_ConnectorElemZAxis = None
    OST_Constraints = None
    OST_ContourLabels = None
    OST_ControlAxisX = None
    OST_ControlAxisY = None
    OST_ControlAxisZ = None
    OST_ControlLocal = None
    OST_CoordinateSystem = None
    OST_Cornices = None
    OST_Coupler = None
    OST_CouplerHiddenLines = None
    OST_CouplerTags = None
    OST_CoverType = None
    OST_CropBoundary = None
    OST_CropBoundarySpecial = None
    OST_CurtainGrids = None
    OST_CurtainGridsCurtaSystem = None
    OST_CurtainGridsRoof = None
    OST_CurtainGridsSystem = None
    OST_CurtainGridsWall = None
    OST_CurtainWallMullions = None
    OST_CurtainWallMullionsCut = None
    OST_CurtainWallMullionsHiddenLines = None
    OST_CurtainWallPanels = None
    OST_CurtainWallPanelsHiddenLines = None
    OST_CurtainWallPanelTags = None
    OST_Curtain_Systems = None
    OST_CurtaSystem = None
    OST_CurtaSystemFaceManager = None
    OST_CurtaSystemHiddenLines = None
    OST_CurtaSystemTags = None
    OST_Curves = None
    OST_CurvesMediumLines = None
    OST_CurvesThinLines = None
    OST_CurvesWideLines = None
    OST_CutOutlines = None
    OST_DataDevices = None
    OST_DataDeviceTags = None
    OST_DataPanelScheduleTemplates = None
    OST_DecalElement = None
    OST_DecalType = None
    OST_DemolishedLines = None
    OST_DesignOptions = None
    OST_DesignOptionSets = None
    OST_DetailComponents = None
    OST_DetailComponentsHiddenLines = None
    OST_DetailComponentTags = None
    OST_Dimensions = None
    OST_DimLockControlLeader = None
    OST_DirectionEdgeLines = None
    OST_DisplacementElements = None
    OST_DisplacementPath = None
    OST_DividedPath = None
    OST_DividedSurface = None
    OST_DividedSurfaceBelt = None
    OST_DividedSurface_DiscardedDivisionLines = None
    OST_DividedSurface_Gridlines = None
    OST_DividedSurface_Nodes = None
    OST_DividedSurface_PatternFill = None
    OST_DividedSurface_PatternLines = None
    OST_DividedSurface_PreDividedSurface = None
    OST_DividedSurface_TransparentFace = None
    OST_DivisionProfile = None
    OST_DivisionRules = None
    OST_Divisions = None
    OST_Doors = None
    OST_DoorsFrameMullionCut = None
    OST_DoorsFrameMullionProjection = None
    OST_DoorsGlassCut = None
    OST_DoorsGlassProjection = None
    OST_DoorsHiddenLines = None
    OST_DoorsOpeningCut = None
    OST_DoorsOpeningProjection = None
    OST_DoorsPanelCut = None
    OST_DoorsPanelProjection = None
    OST_DoorTags = None
    OST_DormerOpeningIncomplete = None
    OST_DSR_ArrowHeadStyleId = None
    OST_DSR_CenterlinePatternCatId = None
    OST_DSR_CenterlineTickMarkStyleId = None
    OST_DSR_DimStyleHeavyEndCategoryId = None
    OST_DSR_DimStyleHeavyEndCatId = None
    OST_DSR_DimStyleTickCategoryId = None
    OST_DSR_InteriorTickMarkStyleId = None
    OST_DSR_LeaderTickMarkStyleId = None
    OST_DSR_LineAndTextAttrCategoryId = None
    OST_DSR_LineAndTextAttrFontId = None
    OST_DuctAccessory = None
    OST_DuctAccessoryTags = None
    OST_DuctColorFillLegends = None
    OST_DuctColorFills = None
    OST_DuctCurves = None
    OST_DuctCurvesCenterLine = None
    OST_DuctCurvesContour = None
    OST_DuctCurvesDrop = None
    OST_DuctCurvesInsulation = None
    OST_DuctCurvesLining = None
    OST_DuctCurvesRiseDrop = None
    OST_DuctFitting = None
    OST_DuctFittingCenterLine = None
    OST_DuctFittingInsulation = None
    OST_DuctFittingLining = None
    OST_DuctFittingTags = None
    OST_DuctInsulations = None
    OST_DuctInsulationsTags = None
    OST_DuctLinings = None
    OST_DuctLiningsTags = None
    OST_DuctSystem = None
    OST_DuctSystem_Reference = None
    OST_DuctSystem_Reference_Visibility = None
    OST_DuctTags = None
    OST_DuctTerminal = None
    OST_DuctTerminalTags = None
    OST_EAConstructions = None
    OST_EdgeSlab = None
    OST_EditCutProfile = None
    OST_ElecDistributionSys = None
    OST_ElectricalCircuit = None
    OST_ElectricalCircuitTags = None
    OST_ElectricalDemandFactor = None
    OST_ElectricalDemandFactorDefinitions = None
    OST_ElectricalEquipment = None
    OST_ElectricalEquipmentHiddenLines = None
    OST_ElectricalEquipmentTags = None
    OST_ElectricalFixtures = None
    OST_ElectricalFixturesHiddenLines = None
    OST_ElectricalFixtureTags = None
    OST_ElectricalInternalCircuits = None
    OST_ElectricalLoadClassifications = None
    OST_ElectricalVoltage = None
    OST_Elev = None
    OST_ElevationMarks = None
    OST_Entourage = None
    OST_EntourageHiddenLines = None
    OST_EPS_Demolished = None
    OST_EPS_Existing = None
    OST_EPS_Future = None
    OST_EPS_New = None
    OST_EPS_Temporary = None
    OST_Extrusions = None
    OST_FabricAreaBoundary = None
    OST_FabricAreas = None
    OST_FabricAreaSketchEnvelopeLines = None
    OST_FabricAreaSketchSheetsLines = None
    OST_FabricAreaTags = None
    OST_FabricationContainment = None
    OST_FabricationContainmentCenterLine = None
    OST_FabricationContainmentDrop = None
    OST_FabricationContainmentRise = None
    OST_FabricationContainmentSymbology = None
    OST_FabricationContainmentTags = None
    OST_FabricationDuctwork = None
    OST_FabricationDuctworkCenterLine = None
    OST_FabricationDuctworkDrop = None
    OST_FabricationDuctworkInsulation = None
    OST_FabricationDuctworkLining = None
    OST_FabricationDuctworkRise = None
    OST_FabricationDuctworkSymbology = None
    OST_FabricationDuctworkTags = None
    OST_FabricationHangers = None
    OST_FabricationHangerTags = None
    OST_FabricationPartsTmpGraphicDrag = None
    OST_FabricationPartsTmpGraphicEnd = None
    OST_FabricationPipework = None
    OST_FabricationPipeworkCenterLine = None
    OST_FabricationPipeworkDrop = None
    OST_FabricationPipeworkInsulation = None
    OST_FabricationPipeworkRise = None
    OST_FabricationPipeworkSymbology = None
    OST_FabricationPipeworkTags = None
    OST_FabricationServiceElements = None
    OST_FabricReinforcement = None
    OST_FabricReinforcementBoundary = None
    OST_FabricReinforcementTags = None
    OST_FabricReinforcementWire = None
    OST_FabricReinSpanSymbol = None
    OST_FaceSplitter = None
    OST_Fascia = None
    OST_FilledRegion = None
    OST_FillPatterns = None
    OST_FireAlarmDevices = None
    OST_FireAlarmDeviceTags = None
    OST_Fixtures = None
    OST_FlexDuctCurves = None
    OST_FlexDuctCurvesCenterLine = None
    OST_FlexDuctCurvesContour = None
    OST_FlexDuctCurvesInsulation = None
    OST_FlexDuctCurvesPattern = None
    OST_FlexDuctTags = None
    OST_FlexPipeCurves = None
    OST_FlexPipeCurvesCenterLine = None
    OST_FlexPipeCurvesContour = None
    OST_FlexPipeCurvesInsulation = None
    OST_FlexPipeCurvesPattern = None
    OST_FlexPipeTags = None
    OST_FloorAnalytical = None
    OST_FloorAnalyticalTags = None
    OST_FloorLocalCoordSys = None
    OST_FloorOpening = None
    OST_Floors = None
    OST_FloorsAnalyticalGeometry = None
    OST_FloorsCut = None
    OST_FloorsCutPattern = None
    OST_FloorsDefault = None
    OST_FloorsFinish1 = None
    OST_FloorsFinish2 = None
    OST_FloorsInsulation = None
    OST_FloorsInteriorEdges = None
    OST_FloorsMembrane = None
    OST_FloorsProjection = None
    OST_FloorsStructure = None
    OST_FloorsSubstrate = None
    OST_FloorsSurfacePattern = None
    OST_FloorTags = None
    OST_Fluids = None
    OST_FndSlabLocalCoordSys = None
    OST_FootingAnalyticalGeometry = None
    OST_FootingSpanDirectionSymbol = None
    OST_FoundationSlabAnalytical = None
    OST_FoundationSlabAnalyticalTags = None
    OST_FramingAnalyticalGeometry = None
    OST_Furniture = None
    OST_FurnitureHiddenLines = None
    OST_FurnitureSystems = None
    OST_FurnitureSystemsHiddenLines = None
    OST_FurnitureSystemTags = None
    OST_FurnitureTags = None
    OST_GbXMLFaces = None
    OST_gbXML_Ceiling = None
    OST_gbXML_ExteriorWall = None
    OST_gbXML_FixedSkylight = None
    OST_gbXML_FixedWindow = None
    OST_gbXML_InteriorFloor = None
    OST_gbXML_InteriorWall = None
    OST_gbXML_NonSlidingDoor = None
    OST_GbXML_Opening = None
    OST_gbXML_OpeningAir = None
    OST_gbXML_OperableSkylight = None
    OST_gbXML_OperableWindow = None
    OST_gbXML_RaisedFloor = None
    OST_gbXML_Roof = None
    OST_gbXML_Shade = None
    OST_gbXML_SlabOnGrade = None
    OST_gbXML_SlidingDoor = None
    OST_GbXML_SType_Exterior = None
    OST_GbXML_SType_Interior = None
    OST_GbXML_SType_Shade = None
    OST_GbXML_SType_Underground = None
    OST_gbXML_SurfaceAir = None
    OST_gbXML_UndergroundCeiling = None
    OST_gbXML_UndergroundSlab = None
    OST_gbXML_UndergroundWall = None
    OST_GenericAnnotation = None
    OST_GenericLines = None
    OST_GenericModel = None
    OST_GenericModelHiddenLines = None
    OST_GenericModelTags = None
    OST_Girder = None
    OST_GraphicalWarning_OpenConnector = None
    OST_GridChains = None
    OST_GridHeads = None
    OST_Grids = None
    OST_GuideGrid = None
    OST_Gutter = None
    OST_HiddenFloorLines = None
    OST_HiddenLines = None
    OST_HiddenStructuralColumnLines = None
    OST_HiddenStructuralConnectionLines_Deprecated = None
    OST_HiddenStructuralFoundationLines = None
    OST_HiddenStructuralFramingLines = None
    OST_HiddenWallLines = None
    OST_HorizontalBracing = None
    OST_HostFin = None
    OST_HostFinCeiling = None
    OST_HostFinFloor = None
    OST_HostFinHF = None
    OST_HostFinRoof = None
    OST_HostFinTags = None
    OST_HostFinWall = None
    OST_HostTemplate = None
    OST_HVAC_Load_Building_Types = None
    OST_HVAC_Load_Schedules = None
    OST_HVAC_Load_Space_Types = None
    OST_HVAC_Zones = None
    OST_HVAC_Zones_Boundary = None
    OST_HVAC_Zones_ColorFill = None
    OST_HVAC_Zones_InteriorFill = None
    OST_HVAC_Zones_InteriorFill_Visibility = None
    OST_HVAC_Zones_Reference = None
    OST_HVAC_Zones_Reference_Visibility = None
    OST_ImportObjectStyles = None
    OST_InstanceDrivenLineStyle = None
    OST_InsulationLines = None
    OST_InternalAreaLoads = None
    OST_InternalAreaLoadTags = None
    OST_InternalLineLoads = None
    OST_InternalLineLoadTags = None
    OST_InternalLoads = None
    OST_InternalPointLoads = None
    OST_InternalPointLoadTags = None
    OST_InvisibleLines = None
    OST_IOS = None
    OST_IOSAligningLine = None
    OST_IOSAlignmentGraphics = None
    OST_IOSArrays = None
    OST_IOSAttachedDetailGroups = None
    OST_IOSBackedUpElements = None
    OST_IOSBBoxScreenSize = None
    OST_IOSConstructionLine = None
    OST_IOSCrashGraphics = None
    OST_IOSCuttingGeometry = None
    OST_IOSDatumPlane = None
    OST_IOSDetailGroups = None
    OST_IOSDragBox = None
    OST_IOSDragBoxInverted = None
    OST_IOSFabricReinSpanSymbolCtrl = None
    OST_IOSFlipControl = None
    OST_IOSFreeSnapLine = None
    OST_IOSGhost = None
    OST_IOSGroups = None
    OST_IOSMeasureLine = None
    OST_IOSMeasureLineScreenSize = None
    OST_IOSModelGroups = None
    OST_IOSNavWheelPivotBall = None
    OST_IOSNotSilhouette = None
    OST_IOSOpening = None
    OST_IOSRebarSystemSpanSymbolCtrl = None
    OST_IOSRegeneratedElements = None
    OST_IOSRegenerationFailure = None
    OST_IOSRoomCalculationPoint = None
    OST_IOSRoomComputationHeight = None
    OST_IOSRoomPerimeterLines = None
    OST_IOSRoomTagToRoomLines = None
    OST_IOSRoomUpperLowerLines = None
    OST_IOSSketchGrid = None
    OST_IOSSlabShapeEditorAutoCrease = None
    OST_IOSSlabShapeEditorBoundary = None
    OST_IOSSlabShapeEditorExplitCrease = None
    OST_IOSSlabShapeEditorPointBoundary = None
    OST_IOSSlabShapeEditorPointInterior = None
    OST_IOSSuspendedSketch = None
    OST_IOSSuspendedSketch_obsolete = None
    OST_IOSThinPixel = None
    OST_IOSThinPixel_Dash = None
    OST_IOSThinPixel_DashDot = None
    OST_IOSThinPixel_Dot = None
    OST_IOSTilePatternGrid = None
    OST_IOSWallCoreBoundary = None
    OST_IOS_GeoLocations = None
    OST_IOS_GeoSite = None
    OST_IsolatedFoundationAnalytical = None
    OST_IsolatedFoundationAnalyticalTags = None
    OST_Joist = None
    OST_KeynoteTags = None
    OST_KickerBracing = None
    OST_LayoutNodes = None
    OST_LayoutPathBase_Pipings = None
    OST_LayoutPath_Bases = None
    OST_LegendComponents = None
    OST_LevelHeads = None
    OST_Levels = None
    OST_LightingDevices = None
    OST_LightingDeviceTags = None
    OST_LightingFixtures = None
    OST_LightingFixturesHiddenLines = None
    OST_LightingFixtureSource = None
    OST_LightingFixtureTags = None
    OST_LightLine = None
    OST_Lights = None
    OST_LineLoads = None
    OST_LineLoadTags = None
    OST_Lines = None
    OST_LinesBeyond = None
    OST_LinesHiddenLines = None
    OST_LinkAnalyticalTags = None
    OST_LinksAnalytical = None
    OST_LoadCases = None
    OST_LoadCasesAccidental = None
    OST_LoadCasesDead = None
    OST_LoadCasesLive = None
    OST_LoadCasesRoofLive = None
    OST_LoadCasesSeismic = None
    OST_LoadCasesSnow = None
    OST_LoadCasesTemperature = None
    OST_LoadCasesWind = None
    OST_Loads = None
    OST_MaskingRegion = None
    OST_Mass = None
    OST_MassAreaFaceTags = None
    OST_MassCutter = None
    OST_MassExteriorWall = None
    OST_MassExteriorWallUnderground = None
    OST_MassFaceSplitter = None
    OST_MassFloor = None
    OST_MassFloorsAll = None
    OST_MassFloor_Obsolete_IdInWrongRange = None
    OST_MassForm = None
    OST_MassGlazing = None
    OST_MassGlazingAll = None
    OST_MassHiddenLines = None
    OST_Massing = None
    OST_MassingCutOutlines = None
    OST_MassingProjectionOutlines = None
    OST_MassInteriorWall = None
    OST_MassOpening = None
    OST_MassRoof = None
    OST_MassShade = None
    OST_MassSkylights = None
    OST_MassSlab = None
    OST_MassSurface_Obsolete_IdInWrongRange = None
    OST_MassTags = None
    OST_MassTags_Obsolete_IdInWrongRange = None
    OST_MassWallsAll = None
    OST_MassZone = None
    OST_Mass_Obsolete_IdInWrongRange = None
    OST_MatchAll = None
    OST_MatchAnnotation = None
    OST_MatchDetail = None
    OST_Matchline = None
    OST_MatchModel = None
    OST_MatchProfile = None
    OST_MatchSiteComponent = None
    OST_Materials = None
    OST_MaterialTags = None
    OST_MechanicalEquipment = None
    OST_MechanicalEquipmentHiddenLines = None
    OST_MechanicalEquipmentTags = None
    OST_MEPSpaceColorFill = None
    OST_MEPSpaceInteriorFill = None
    OST_MEPSpaceInteriorFillVisibility = None
    OST_MEPSpaceReference = None
    OST_MEPSpaceReferenceVisibility = None
    OST_MEPSpaces = None
    OST_MEPSpaceSeparationLines = None
    OST_MEPSpaceTags = None
    OST_ModelText = None
    OST_MultiCategoryTags = None
    OST_MultiReferenceAnnotations = None
    OST_MultistoryStairs = None
    OST_MultiSurface = None
    OST_NodeAnalyticalTags = None
    OST_NumberingSchemas = None
    OST_NurseCallDevices = None
    OST_NurseCallDeviceTags = None
    OST_OBSOLETE_ElemArrayHiddenLines = None
    OST_OBSOLETE_FabricationPartsTmpGraphicDrop = None
    OST_OBSOLETE_FabricationPartsTmpGraphicDropDrag = None
    OST_OverheadLines = None
    OST_PanelScheduleGraphics = None
    OST_ParamElemElectricalLoadClassification = None
    OST_Parking = None
    OST_ParkingHiddenLines = None
    OST_ParkingTags = None
    OST_PartHiddenLines = None
    OST_Parts = None
    OST_PartTags = None
    OST_PathRein = None
    OST_PathReinBoundary = None
    OST_PathReinSpanSymbol = None
    OST_PathReinTags = None
    OST_Phases = None
    OST_PipeAccessory = None
    OST_PipeAccessoryTags = None
    OST_PipeColorFillLegends = None
    OST_PipeColorFills = None
    OST_PipeConnections = None
    OST_PipeCurves = None
    OST_PipeCurvesCenterLine = None
    OST_PipeCurvesContour = None
    OST_PipeCurvesDrop = None
    OST_PipeCurvesInsulation = None
    OST_PipeCurvesRiseDrop = None
    OST_PipeFitting = None
    OST_PipeFittingCenterLine = None
    OST_PipeFittingInsulation = None
    OST_PipeFittingTags = None
    OST_PipeInsulations = None
    OST_PipeInsulationsTags = None
    OST_PipeMaterials = None
    OST_PipeSchedules = None
    OST_PipeSegments = None
    OST_PipeTags = None
    OST_PipingSystem = None
    OST_PipingSystem_Reference = None
    OST_PipingSystem_Reference_Visibility = None
    OST_PlaceHolderDucts = None
    OST_PlaceHolderPipes = None
    OST_PlanRegion = None
    OST_Planting = None
    OST_PlantingHiddenLines = None
    OST_PlantingTags = None
    OST_PlumbingFixtures = None
    OST_PlumbingFixturesHiddenLines = None
    OST_PlumbingFixtureTags = None
    OST_PointClouds = None
    OST_PointLoads = None
    OST_PointLoadTags = None
    OST_PreviewLegendComponents = None
    OST_ProfileFamilies = None
    OST_ProjectBasePoint = None
    OST_ProjectInformation = None
    OST_Property = None
    OST_PropertySet = None
    OST_Purlin = None
    OST_RailingBalusterRail = None
    OST_RailingBalusterRailCut = None
    OST_RailingHandRail = None
    OST_RailingHandRailAboveCut = None
    OST_RailingRailPathExtensionLines = None
    OST_RailingRailPathLines = None
    OST_Railings = None
    OST_RailingSupport = None
    OST_RailingSystem = None
    OST_RailingSystemBaluster = None
    OST_RailingSystemBalusterHiddenLines_Deprecated = None
    OST_RailingSystemHandRail = None
    OST_RailingSystemHandRailBracket = None
    OST_RailingSystemHandRailBracketHiddenLines_Deprecated = None
    OST_RailingSystemHandRailHiddenLines_Deprecated = None
    OST_RailingSystemHardware = None
    OST_RailingSystemHiddenLines_Deprecated = None
    OST_RailingSystemPanel = None
    OST_RailingSystemPanelBracketHiddenLines_Deprecated = None
    OST_RailingSystemPanelHiddenLines_Deprecated = None
    OST_RailingSystemPost = None
    OST_RailingSystemPostHiddenLines_Deprecated = None
    OST_RailingSystemRail = None
    OST_RailingSystemRailHiddenLines_Deprecated = None
    OST_RailingSystemSegment = None
    OST_RailingSystemSegmentHiddenLines_Deprecated = None
    OST_RailingSystemTags = None
    OST_RailingSystemTermination = None
    OST_RailingSystemTerminationHiddenLines_Deprecated = None
    OST_RailingSystemTopRail = None
    OST_RailingSystemTopRailHiddenLines_Deprecated = None
    OST_RailingSystemTransition = None
    OST_RailingSystemTransitionHiddenLines_Deprecated = None
    OST_RailingTermination = None
    OST_RailingTopRail = None
    OST_RailingTopRailAboveCut = None
    OST_Ramps = None
    OST_RampsAboveCut = None
    OST_RampsDownArrow = None
    OST_RampsDownText = None
    OST_RampsHiddenLines = None
    OST_RampsIncomplete = None
    OST_RampsStringer = None
    OST_RampsStringerAboveCut = None
    OST_RampsUpArrow = None
    OST_RampsUpText = None
    OST_RasterImages = None
    OST_Rebar = None
    OST_RebarCover = None
    OST_RebarHiddenLines = None
    OST_RebarLines = None
    OST_RebarSetToggle = None
    OST_RebarShape = None
    OST_RebarSketchLines = None
    OST_RebarTags = None
    OST_ReferenceLines = None
    OST_ReferencePoints = None
    OST_ReferencePoints_HiddenLines = None
    OST_ReferencePoints_Lines = None
    OST_ReferencePoints_Planes = None
    OST_ReferencePoints_Points = None
    OST_ReferenceViewer = None
    OST_ReferenceViewerSymbol = None
    OST_RemovedGridSeg = None
    OST_RemovedGridSeg_Obsolete_IdInWrongRange = None
    OST_RenderRegions = None
    OST_RepeatingDetailLines = None
    OST_Reveals = None
    OST_RevisionClouds = None
    OST_RevisionCloudTags = None
    OST_Revisions = None
    OST_RigidLinksAnalytical = None
    OST_Roads = None
    OST_RoadsHiddenLines = None
    OST_RoofOpening = None
    OST_Roofs = None
    OST_RoofsCut = None
    OST_RoofsCutPattern = None
    OST_RoofsDefault = None
    OST_RoofsFinish1 = None
    OST_RoofsFinish2 = None
    OST_RoofsHiddenLines = None
    OST_RoofsInsulation = None
    OST_RoofsInteriorEdges = None
    OST_RoofsMembrane = None
    OST_RoofSoffit = None
    OST_RoofsProjection = None
    OST_RoofsStructure = None
    OST_RoofsSubstrate = None
    OST_RoofsSurfacePattern = None
    OST_RoofTags = None
    OST_RoomColorFill = None
    OST_RoomInteriorFill = None
    OST_RoomInteriorFillVisibility = None
    OST_RoomPolylines = None
    OST_RoomReference = None
    OST_RoomReferenceVisibility = None
    OST_Rooms = None
    OST_RoomSeparationLines = None
    OST_RoomTags = None
    OST_RouteCurve = None
    OST_RouteCurveBranch = None
    OST_RouteCurveMain = None
    OST_RoutingPreferences = None
    OST_RvtLinks = None
    OST_ScheduleGraphics = None
    OST_ScheduleViewParamGroup = None
    OST_SecondaryTopographyContours = None
    OST_SectionBox = None
    OST_SectionHeadMediumLines = None
    OST_SectionHeads = None
    OST_SectionHeadThinLines = None
    OST_SectionHeadWideLines = None
    OST_SectionLine = None
    OST_Sections = None
    OST_SecurityDevices = None
    OST_SecurityDeviceTags = None
    OST_Sewer = None
    OST_ShaftOpening = None
    OST_ShaftOpeningHiddenLines = None
    OST_SharedBasePoint = None
    OST_Sheets = None
    OST_Site = None
    OST_SiteHiddenLines = None
    OST_SitePoint = None
    OST_SitePointBoundary = None
    OST_SiteProperty = None
    OST_SitePropertyLineSegment = None
    OST_SitePropertyLineSegmentTags = None
    OST_SitePropertyTags = None
    OST_SiteRegion = None
    OST_SiteSurface = None
    OST_SiteTags = None
    OST_SketchLines = None
    OST_SpanDirectionSymbol = None
    OST_SpecialityEquipment = None
    OST_SpecialityEquipmentHiddenLines = None
    OST_SpecialityEquipmentTags = None
    OST_SplitterProfile = None
    OST_SpotCoordinates = None
    OST_SpotCoordinateSymbols = None
    OST_SpotElevations = None
    OST_SpotElevSymbols = None
    OST_SpotSlopes = None
    OST_SpotSlopesSymbols = None
    OST_Sprinklers = None
    OST_SprinklerTags = None
    OST_StackedWalls = None
    OST_StackedWalls_Obsolete_IdInWrongRange = None
    OST_Stair2012_Deprecated = None
    OST_StairLanding2012HiddenLines_Deprecated = None
    OST_StairRun2012HiddenLines_Deprecated = None
    OST_Stairs = None
    OST_Stairs2012HiddenLines_Deprecated = None
    OST_StairsAboveCut_ToBeDeprecated = None
    OST_StairsCutMarks = None
    OST_StairsCutMarksAboveCut = None
    OST_StairsDownArrows = None
    OST_StairsDownText = None
    OST_StairsHiddenLines = None
    OST_StairsIncomplete_Deprecated = None
    OST_StairsLandings = None
    OST_StairsLandingTags = None
    OST_StairsNosingLines = None
    OST_StairsNosingLinesAboveCut = None
    OST_StairsOutlines = None
    OST_StairsOutlinesAboveCut = None
    OST_StairsPaths = None
    OST_StairsPathsAboveCut = None
    OST_StairsRailing = None
    OST_StairsRailingAboveCut = None
    OST_StairsRailingBaluster = None
    OST_StairsRailingHiddenLines = None
    OST_StairsRailingRail = None
    OST_StairsRailingTags = None
    OST_StairsRiserLines = None
    OST_StairsRiserLinesAboveCut = None
    OST_StairsRuns = None
    OST_StairsRunTags = None
    OST_StairsSketchBoundaryLines = None
    OST_StairsSketchLandingCenterLines = None
    OST_StairsSketchPathLines = None
    OST_StairsSketchRiserLines = None
    OST_StairsSketchRunLines = None
    OST_StairsStringerCarriage = None
    OST_StairsSupports = None
    OST_StairsSupportsAboveCut = None
    OST_StairsSupportTags = None
    OST_StairsTags = None
    OST_StairStringer2012HiddenLines_Deprecated = None
    OST_StairStringer2012_Deprecated = None
    OST_StairsTriserNumbers = None
    OST_StairsTrisers = None
    OST_StairsTriserTags = None
    OST_StairsUpArrows = None
    OST_StairsUpText = None
    OST_StairTread2012HiddenLines_Deprecated = None
    OST_StickSymbols_Obsolete_IdInWrongRange = None
    OST_StructConnectionAnchors = None
    OST_StructConnectionBolts = None
    OST_StructConnectionFailed = None
    OST_StructConnectionHiddenLines = None
    OST_StructConnectionOthers = None
    OST_StructConnectionPlates = None
    OST_StructConnectionProfiles = None
    OST_StructConnectionReference = None
    OST_StructConnections = None
    OST_StructConnectionStale = None
    OST_StructConnectionSymbol = None
    OST_StructConnectionSymbols = None
    OST_StructConnectionTags = None
    OST_StructLocationLineControl = None
    OST_StructuralAnnotations = None
    OST_StructuralBracePlanReps = None
    OST_StructuralColumnLocationLine = None
    OST_StructuralColumns = None
    OST_StructuralColumnStickSymbols = None
    OST_StructuralColumnTags = None
    OST_StructuralConnectionHandlerTags_Deprecated = None
    OST_StructuralConnectionHandler_Deprecated = None
    OST_StructuralFoundation = None
    OST_StructuralFoundationTags = None
    OST_StructuralFraming = None
    OST_StructuralFramingLocationLine = None
    OST_StructuralFramingOpening = None
    OST_StructuralFramingOther = None
    OST_StructuralFramingSystem = None
    OST_StructuralFramingSystemHiddenLines_Obsolete = None
    OST_StructuralFramingTags = None
    OST_StructuralStiffener = None
    OST_StructuralStiffenerHiddenLines = None
    OST_StructuralStiffenerTags = None
    OST_StructuralTruss = None
    OST_StructuralTrussHiddenLines = None
    OST_StructuralTrussStickSymbols = None
    OST_StructWeldLines = None
    OST_Sun = None
    OST_SunPath1 = None
    OST_SunPath2 = None
    OST_SunriseText = None
    OST_SunsetText = None
    OST_SunStudy = None
    OST_SunSurface = None
    OST_SWallRectOpening = None
    OST_SwitchboardScheduleTemplates = None
    OST_SwitchSystem = None
    OST_Tags = None
    OST_TelephoneDevices = None
    OST_TelephoneDeviceTags = None
    OST_TextNotes = None
    OST_TilePatterns = None
    OST_TitleBlockMediumLines = None
    OST_TitleBlocks = None
    OST_TitleBlockThinLines = None
    OST_TitleBlockWideLines = None
    OST_Topography = None
    OST_TopographyContours = None
    OST_TopographyHiddenLines = None
    OST_TopographySurface = None
    OST_Truss = None
    OST_TrussBottomChordCurve = None
    OST_TrussChord = None
    OST_TrussDiagWebCurve = None
    OST_TrussDummy = None
    OST_TrussTags = None
    OST_TrussTopChordCurve = None
    OST_TrussVertWebCurve = None
    OST_TrussWeb = None
    OST_VerticalBracing = None
    OST_Viewers = None
    OST_ViewportLabel = None
    OST_Viewports = None
    OST_Views = None
    OST_VolumeOfInterest = None
    OST_WallAnalytical = None
    OST_WallAnalyticalTags = None
    OST_WallFoundationAnalytical = None
    OST_WallFoundationAnalyticalTags = None
    OST_WallLocalCoordSys = None
    OST_WallRefPlanes = None
    OST_WallRefPlanes_Obsolete_IdInWrongRange = None
    OST_Walls = None
    OST_WallsAnalyticalGeometry = None
    OST_WallsCutOutlines = None
    OST_WallsCutPattern = None
    OST_WallsDefault = None
    OST_WallsFinish1 = None
    OST_WallsFinish2 = None
    OST_WallsInsulation = None
    OST_WallsMembrane = None
    OST_WallsProjectionOutlines = None
    OST_WallsStructure = None
    OST_WallsSubstrate = None
    OST_WallsSurfacePattern = None
    OST_WallTags = None
    OST_WeakDims = None
    OST_Windows = None
    OST_WindowsFrameMullionCut = None
    OST_WindowsFrameMullionProjection = None
    OST_WindowsGlassCut = None
    OST_WindowsGlassProjection = None
    OST_WindowsHiddenLines = None
    OST_WindowsOpeningCut = None
    OST_WindowsOpeningProjection = None
    OST_WindowsSillHeadCut = None
    OST_WindowsSillHeadProjection = None
    OST_WindowTags = None
    OST_Wire = None
    OST_WireHomeRunArrows = None
    OST_WireInsulations = None
    OST_WireMaterials = None
    OST_WireTags = None
    OST_WireTemperatureRatings = None
    OST_WireTickMarks = None
    OST_XRayConstrainedProfileEdge = None
    OST_XRayImplicitPathCurve = None
    OST_XRayPathCurve = None
    OST_XRayPathPoint = None
    OST_XRayProfileEdge = None
    OST_XRaySideEdge = None
    OST_ZoneSchemes = None
    OST_ZoneTags = None
    OST_ZoningEnvelope = None
    value__ = None


class BuiltInFailures(object):
    """ Provides a container of all Revit built-in FailureDefinitionId instances. """
    AnalyticalModelFailures = None
    ArrayFailures = None
    AssemblyFailures = None
    AutoJoinFailures = None
    AutoRouteFailures = None
    BeamFailures = None
    BeamSystemFailures = None
    BendFailures = None
    BlendFailures = None
    ColorFillFailures = None
    ColumnFailures = None
    ColumnInsideWallFailures = None
    ComponentRepeaterFailures = None
    ComponentRepeaterSlotFailures = None
    ConnectorFailures = None
    ConstraintFailures = None
    ConversionFailures = None
    CopyMonitorFailures = None
    CopyPasteFailures = None
    CreationFailures = None
    CurtainGridFamilyFailures = None
    CurtainWallFailures = None
    CurveByPointFailures = None
    CurveFailures = None
    CutFailures = None
    CutterFailures = None
    CuttingFailures = None
    DatumPlaneFailures = None
    DebugTabBindingFailures = None
    DecalFailures = None
    DesignOptionFailures = None
    DetailFailures = None
    DimensionFailures = None
    DisplacementElementFailures = None
    DividedPathFailures = None
    DividedSurfaceFailures = None
    DocumentFailures = None
    DPartFailures = None
    DuctFailures = None
    EditingFailures = None
    ElectricalFailures = None
    ElectricityFailures = None
    ElementFailures = None
    ElementTypeFailures = None
    ElevationFailures = None
    EnergyAnalysisFailures = None
    EnergyAnalysisUtilitiesDBFailures = None
    ExportFailures = None
    ExtrusionFailures = None
    FabricAreaFailures = None
    FabricationShapeFailures = None
    FabricFailures = None
    FabricSheetFailures = None
    FaceSplitterFailures = None
    FamilyFailures = None
    FilledRegionFailures = None
    FloorFailures = None
    FluidFailures = None
    FormFailures = None
    GeneralFailures = None
    GenericFailures = None
    GenericMEPFailures = None
    GeometryFailures = None
    GlobalParameterFailures = None
    GridChainSketchFailures = None
    GridFailures = None
    GroupFailures = None
    HostObjFailures = None
    HvacFailures = None
    IlluminationFailures = None
    ImageFailures = None
    ImportExportFailures = None
    ImportFailures = None
    InaccurateFailures = None
    InfillFailures = None
    InterferenceFailures = None
    JoinElementsFailures = None
    KeyBasedTreeEntryFailures = None
    KeyBasedTreeFileFailures = None
    KeynoteFailures = None
    KeynoteTagFailures = None
    LegendFailures = None
    LevelFailures = None
    LinkFailures = None
    LoadFailures = None
    LooseDimensionFailures = None
    MassFailures = None
    MatchlineFailures = None
    MechanicalFailures = None
    MEPCalculationFailures = None
    MEPFabricationFailures = None
    MirrorFailures = None
    MultiReferenceAnnotationFailures = None
    NumberingFailures = None
    OffsetFacesCellLegacyFailures = None
    OpeningFailures = None
    OverlapFailures = None
    ParameterFailures = None
    PartMakerMethodForFamilyInstanceFailures = None
    PartMakerMethodForMergePartFailures = None
    PartMakerMethodForWallFailures = None
    PathFailures = None
    PerformanceFailures = None
    PipingFailures = None
    PlanRegionFailures = None
    PointFailures = None
    ProfileFailures = None
    PropertySetElementFailures = None
    RebarCouplerFailures = None
    RebarFailures = None
    RebarShapeFailures = None
    RebarSystemFailures = None
    RefPlaneFailures = None
    RegenFailures = None
    RenderFailures = None
    RevisionCloudFailures = None
    RevisionFailures = None
    RevolutionFailures = None
    RoofFailures = None
    RoomFailures = None
    ScheduleViewFailures = None
    SculptingFailures = None
    SectionViewFailures = None
    SelectionFailures = None
    SheetFailures = None
    SiteFailures = None
    SiteImportFailures = None
    SketchFailures = None
    SkylightFailures = None
    SlabFailures = None
    SlabShapeFailures = None
    SlantedColumnFailures = None
    SpanDirectionSymbolFailures = None
    SplineFailures = None
    StairRampFailures = None
    StructuralAssetFailures = None
    StructuralConnectionFailures = None
    StructuralLoadFailures = None
    SweepFailures = None
    SweptBlendFailures = None
    SystemNavigatorFailures = None
    SystemsFailures = None
    TagFailures = None
    TextFailures = None
    TilePatternTileFailures = None
    ToggleViewFailures = None
    TrussFailures = None
    UniqueElementFailures = None
    ViewFailures = None
    WallFailures = None
    WallJoinFailures = None
    WallJoinRoofFailures = None
    WorksharingFailures = None
    __all__ = [
        'AnalyticalModelFailures',
        'ArrayFailures',
        'AssemblyFailures',
        'AutoJoinFailures',
        'AutoRouteFailures',
        'BeamFailures',
        'BeamSystemFailures',
        'BendFailures',
        'BlendFailures',
        'ColorFillFailures',
        'ColumnFailures',
        'ColumnInsideWallFailures',
        'ComponentRepeaterFailures',
        'ComponentRepeaterSlotFailures',
        'ConnectorFailures',
        'ConstraintFailures',
        'ConversionFailures',
        'CopyMonitorFailures',
        'CopyPasteFailures',
        'CreationFailures',
        'CurtainGridFamilyFailures',
        'CurtainWallFailures',
        'CurveByPointFailures',
        'CurveFailures',
        'CutFailures',
        'CutterFailures',
        'CuttingFailures',
        'DatumPlaneFailures',
        'DebugTabBindingFailures',
        'DecalFailures',
        'DesignOptionFailures',
        'DetailFailures',
        'DimensionFailures',
        'DisplacementElementFailures',
        'DividedPathFailures',
        'DividedSurfaceFailures',
        'DocumentFailures',
        'DPartFailures',
        'DuctFailures',
        'EditingFailures',
        'ElectricalFailures',
        'ElectricityFailures',
        'ElementFailures',
        'ElementTypeFailures',
        'ElevationFailures',
        'EnergyAnalysisFailures',
        'EnergyAnalysisUtilitiesDBFailures',
        'ExportFailures',
        'ExtrusionFailures',
        'FabricAreaFailures',
        'FabricationShapeFailures',
        'FabricFailures',
        'FabricSheetFailures',
        'FaceSplitterFailures',
        'FamilyFailures',
        'FilledRegionFailures',
        'FloorFailures',
        'FluidFailures',
        'FormFailures',
        'GeneralFailures',
        'GenericFailures',
        'GenericMEPFailures',
        'GeometryFailures',
        'GlobalParameterFailures',
        'GridChainSketchFailures',
        'GridFailures',
        'GroupFailures',
        'HostObjFailures',
        'HvacFailures',
        'IlluminationFailures',
        'ImageFailures',
        'ImportExportFailures',
        'ImportFailures',
        'InaccurateFailures',
        'InfillFailures',
        'InterferenceFailures',
        'JoinElementsFailures',
        'KeyBasedTreeEntryFailures',
        'KeyBasedTreeFileFailures',
        'KeynoteFailures',
        'KeynoteTagFailures',
        'LegendFailures',
        'LevelFailures',
        'LinkFailures',
        'LoadFailures',
        'LooseDimensionFailures',
        'MassFailures',
        'MatchlineFailures',
        'MechanicalFailures',
        'MEPCalculationFailures',
        'MEPFabricationFailures',
        'MirrorFailures',
        'MultiReferenceAnnotationFailures',
        'NumberingFailures',
        'OffsetFacesCellLegacyFailures',
        'OpeningFailures',
        'OverlapFailures',
        'ParameterFailures',
        'PartMakerMethodForFamilyInstanceFailures',
        'PartMakerMethodForMergePartFailures',
        'PartMakerMethodForWallFailures',
        'PathFailures',
        'PerformanceFailures',
        'PipingFailures',
        'PlanRegionFailures',
        'PointFailures',
        'ProfileFailures',
        'PropertySetElementFailures',
        'RebarCouplerFailures',
        'RebarFailures',
        'RebarShapeFailures',
        'RebarSystemFailures',
        'RefPlaneFailures',
        'RegenFailures',
        'RenderFailures',
        'RevisionCloudFailures',
        'RevisionFailures',
        'RevolutionFailures',
        'RoofFailures',
        'RoomFailures',
        'ScheduleViewFailures',
        'SculptingFailures',
        'SectionViewFailures',
        'SelectionFailures',
        'SheetFailures',
        'SiteFailures',
        'SiteImportFailures',
        'SketchFailures',
        'SkylightFailures',
        'SlabFailures',
        'SlabShapeFailures',
        'SlantedColumnFailures',
        'SpanDirectionSymbolFailures',
        'SplineFailures',
        'StairRampFailures',
        'StructuralAssetFailures',
        'StructuralConnectionFailures',
        'StructuralLoadFailures',
        'SweepFailures',
        'SweptBlendFailures',
        'SystemNavigatorFailures',
        'SystemsFailures',
        'TagFailures',
        'TextFailures',
        'TilePatternTileFailures',
        'ToggleViewFailures',
        'TrussFailures',
        'UniqueElementFailures',
        'ViewFailures',
        'WallFailures',
        'WallJoinFailures',
        'WallJoinRoofFailures',
        'WorksharingFailures',
    ]


class BuiltInParameter(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all of the built-in parameter IDs supported by Autodesk
    Revit.
    
    enum BuiltInParameter, values: ACTUAL_MAX_RIDGE_HEIGHT_PARAM (-1001705), ALL_GRID_ROTATION_FOR_DIVISION_RULE (-1152349), ALL_MODEL_COST (-1001205), ALL_MODEL_DESCRIPTION (-1010103), ALL_MODEL_FAMILY_NAME (-1002002), ALL_MODEL_IMAGE (-1152385), ALL_MODEL_INSTANCE_COMMENTS (-1010106), ALL_MODEL_MANUFACTURER (-1010108), ALL_MODEL_MARK (-1001203), ALL_MODEL_MODEL (-1010109), ALL_MODEL_TYPE_COMMENTS (-1010105), ALL_MODEL_TYPE_IMAGE (-1152384), ALL_MODEL_TYPE_MARK (-1001405), ALL_MODEL_TYPE_NAME (-1002001), ALL_MODEL_URL (-1010104), ALLOW_AUTO_EMBED (-1001009), ALTERNATE_UNITS (-1006456), ALTERNATE_UNITS_PREFIX (-1006518), ALTERNATE_UNITS_SUFFIX (-1006519), ALWAYS_ZERO_LENGTH (-1006927), ANALYTIC_CONSTRUCTION_GBXML_TYPEID (-1005438), ANALYTIC_CONSTRUCTION_LOOKUP_TABLE (-1005437), ANALYTICAL_ABSORPTANCE (-1005435), ANALYTICAL_GEOMETRY_IS_VALID (-1013451), ANALYTICAL_HEAT_TRANSFER_COEFFICIENT (-1005430), ANALYTICAL_LINK_RELEASE_ROTATION_X (-1009528), ANALYTICAL_LINK_RELEASE_ROTATION_Y (-1009529), ANALYTICAL_LINK_RELEASE_ROTATION_Z (-1009530), ANALYTICAL_LINK_RELEASE_TRANSLATION_X (-1009525), ANALYTICAL_LINK_RELEASE_TRANSLATION_Y (-1009526), ANALYTICAL_LINK_RELEASE_TRANSLATION_Z (-1009527), ANALYTICAL_MEMBER_FORCE_END_ALL_NON_ZERO (-1060014), ANALYTICAL_MEMBER_FORCE_END_FX (-1060006), ANALYTICAL_MEMBER_FORCE_END_FY (-1060007), ANALYTICAL_MEMBER_FORCE_END_FZ (-1060008), ANALYTICAL_MEMBER_FORCE_END_MX (-1060009), ANALYTICAL_MEMBER_FORCE_END_MY (-1060010), ANALYTICAL_MEMBER_FORCE_END_MZ (-1060011), ANALYTICAL_MEMBER_FORCE_START_ALL_NON_ZERO (-1060013), ANALYTICAL_MEMBER_FORCE_START_FX (-1060000), ANALYTICAL_MEMBER_FORCE_START_FY (-1060001), ANALYTICAL_MEMBER_FORCE_START_FZ (-1060002), ANALYTICAL_MEMBER_FORCE_START_MX (-1060003), ANALYTICAL_MEMBER_FORCE_START_MY (-1060004), ANALYTICAL_MEMBER_FORCE_START_MZ (-1060005), ANALYTICAL_MODEL_AREA (-1150462), ANALYTICAL_MODEL_BASE_ALIGNMENT_METHOD (-1009506), ANALYTICAL_MODEL_BASE_EXTENSION_METHOD (-1009514), ANALYTICAL_MODEL_BASE_Y_PROJECTION (-1009508), ANALYTICAL_MODEL_BASE_Z_PROJECTION (-1009507), ANALYTICAL_MODEL_CODE_CHECKING (-1013447), ANALYTICAL_MODEL_COLUMN_BASE_EXTENSION (-1009515), ANALYTICAL_MODEL_COLUMN_TOP_EXTENSION (-1009513), ANALYTICAL_MODEL_END_ALIGNMENT_METHOD (-1009503), ANALYTICAL_MODEL_END_Y_PROJECTION (-1009504), ANALYTICAL_MODEL_END_Z_PROJECTION (-1009505), ANALYTICAL_MODEL_FLOOR_ALIGNMENT_METHOD (-1009516), ANALYTICAL_MODEL_FLOOR_PROJECTION (-1009517), ANALYTICAL_MODEL_FOUNDATIONS_MARK (-1013445), ANALYTICAL_MODEL_LENGTH (-1150461), ANALYTICAL_MODEL_MANUALLY_ADJUSTED (-1152343), ANALYTICAL_MODEL_NODES_MARK (-1013446), ANALYTICAL_MODEL_PERIMETER (-1150463), ANALYTICAL_MODEL_PHYSICAL_TYPE (-1009524), ANALYTICAL_MODEL_ROTATION (-1150501), ANALYTICAL_MODEL_SKETCH_ALIGNMENT_METHOD (-1009522), ANALYTICAL_MODEL_SKETCH_PROJECTION (-1009523), ANALYTICAL_MODEL_START_ALIGNMENT_METHOD (-1009500), ANALYTICAL_MODEL_START_Y_PROJECTION (-1009501), ANALYTICAL_MODEL_START_Z_PROJECTION (-1009502), ANALYTICAL_MODEL_STICK_ELEMENTS_MARK (-1013443), ANALYTICAL_MODEL_SURFACE_ELEMENTS_MARK (-1013444), ANALYTICAL_MODEL_TOP_ALIGNMENT_METHOD (-1009509), ANALYTICAL_MODEL_TOP_EXTENSION_METHOD (-1009512), ANALYTICAL_MODEL_TOP_Y_PROJECTION (-1009511), ANALYTICAL_MODEL_TOP_Z_PROJECTION (-1009510), ANALYTICAL_MODEL_WALL_ALIGNMENT_METHOD (-1009518), ANALYTICAL_MODEL_WALL_BASE_PROJECTION (-1009521), ANALYTICAL_MODEL_WALL_PROJECTION (-1009519), ANALYTICAL_MODEL_WALL_TOP_PROJECTION (-1009520), ANALYTICAL_ROUGHNESS (-1005436), ANALYTICAL_SOLAR_HEAT_GAIN_COEFFICIENT (-1005432), ANALYTICAL_THERMAL_MASS (-1005434), ANALYTICAL_THERMAL_RESISTANCE (-1005431), ANALYTICAL_VISUAL_LIGHT_TRANSMITTANCE (-1005433), ANY_PATTERN_ID_PARAM (-1002105), ANY_PATTERN_ID_PARAM_NO_NO (-1002115), ARC_CENTER_MARK (-1006406), ARC_CURVE_CNTR_MRK_VISIBLE (-1007900), ARC_LEADER_PARAM (-1006325), ARC_WALL_CNTR_MRK_VISIBLE (-1007900), AREA_SCHEME_ID (-1012704), AREA_SCHEME_NAME (-1012705), AREA_TYPE (-1012701), AREA_TYPE_TEXT (-1012703), ARROW_CLOSED (-1006449), ARROW_FILLED (-1006425), ARROW_SIZE (-1006414), ARROW_TYPE (-1006413), ARROWHEAD_END_AT_RISER (-1006627), ARROWHEAD_TYPE (-1006623), ASSEMBLY_NAME (-1150420), ASSEMBLY_NAMING_CATEGORY (-1150403), ASSIGN_TEMPLATE_ON_VIEW_CREATION (-1008211), AUTO_JOIN_CONDITION (-1007387), AUTO_JOIN_CONDITION_WALL (-1007395), AUTO_MULLION_BORDER1_GRID1 (-1007382), AUTO_MULLION_BORDER1_GRID2 (-1007384), AUTO_MULLION_BORDER1_HORIZ (-1007393), AUTO_MULLION_BORDER1_VERT (-1007391), AUTO_MULLION_BORDER2_GRID1 (-1007383), AUTO_MULLION_BORDER2_GRID2 (-1007385), AUTO_MULLION_BORDER2_HORIZ (-1007394), AUTO_MULLION_BORDER2_VERT (-1007392), AUTO_MULLION_INTERIOR_GRID1 (-1007380), AUTO_MULLION_INTERIOR_GRID2 (-1007381), AUTO_MULLION_INTERIOR_HORIZ (-1007390), AUTO_MULLION_INTERIOR_VERT (-1007389), AUTO_PANEL (-1007386), AUTO_PANEL_WALL (-1007388), BASELINE_DIM_OFFSET (-1006477), BASEPOINT_ANGLETON_PARAM (-1150194), BASEPOINT_EASTWEST_PARAM (-1150192), BASEPOINT_ELEVATION_PARAM (-1150193), BASEPOINT_NORTHSOUTH_PARAM (-1150191), BEAM_H_JUSTIFICATION (-1013414), BEAM_SYSTEM_3D_PARAM (-1013427), BEAM_SYSTEM_TAG_INST_PARAM_ANGLE (-1013418), BEAM_SYSTEM_TAG_PARAM_LEFT (-1013416), BEAM_SYSTEM_TAG_PARAM_RIGHT (-1013417), BEAM_V_JUSTIFICATION (-1013413), BEAM_V_JUSTIFICATION_OTHER_VALUE (-1001574), BENT_FABRIC_PARAM_BEND_DIRECTION (-1017729), BENT_FABRIC_PARAM_LONGITUDINAL_CUT_LENGTH (-1017734), BENT_FABRIC_PARAM_STRAIGHT_WIRES_LOCATION (-1017731), BLEND_END_PARAM (-1001805), BLEND_START_PARAM (-1001804), BOUNDARY_AREA_RESTRAINT_X (-1140518), BOUNDARY_AREA_RESTRAINT_Y (-1140519), BOUNDARY_AREA_RESTRAINT_Z (-1140520), BOUNDARY_BEARING (-1012404), BOUNDARY_CONDITIONS_IS_EXT (-1140501), BOUNDARY_CONDITIONS_TYPE (-1140500), BOUNDARY_DIRECTION_ROT_X (-1140505), BOUNDARY_DIRECTION_ROT_Y (-1140506), BOUNDARY_DIRECTION_ROT_Z (-1140507), BOUNDARY_DIRECTION_X (-1140502), BOUNDARY_DIRECTION_Y (-1140503), BOUNDARY_DIRECTION_Z (-1140504), BOUNDARY_DISTANCE (-1012403), BOUNDARY_LINEAR_RESTRAINT_ROT_X (-1140517), BOUNDARY_LINEAR_RESTRAINT_X (-1140514), BOUNDARY_LINEAR_RESTRAINT_Y (-1140515), BOUNDARY_LINEAR_RESTRAINT_Z (-1140516), BOUNDARY_PARAM_PRESET (-1140633), BOUNDARY_PARAM_PRESET_AREA (-1140635), BOUNDARY_PARAM_PRESET_LINEAR (-1140634), BOUNDARY_RADIUS (-1012407), BOUNDARY_RESTRAINT_ROT_X (-1140511), BOUNDARY_RESTRAINT_ROT_Y (-1140512), BOUNDARY_RESTRAINT_ROT_Z (-1140513), BOUNDARY_RESTRAINT_X (-1140508), BOUNDARY_RESTRAINT_Y (-1140509), BOUNDARY_RESTRAINT_Z (-1140510), BOUNDARY_X_ROTATION_FIXED (-1140521), BOUNDARY_X_ROTATION_SPRING (-1140522), BOUNDARY_X_TRANSLATION_FIXED (-1140523), BOUNDARY_X_TRANSLATION_SPRING (-1140524), BOUNDARY_Y_ROTATION_FIXED (-1140525), BOUNDARY_Y_ROTATION_SPRING (-1140526), BOUNDARY_Y_TRANSLATION_FIXED (-1140527), BOUNDARY_Y_TRANSLATION_SPRING (-1140528), BOUNDARY_Z_ROTATION_FIXED (-1140529), BOUNDARY_Z_ROTATION_SPRING (-1140530), BOUNDARY_Z_TRANSLATION_FIXED (-1140531), BOUNDARY_Z_TRANSLATION_SPRING (-1140532), BR_ORG_FILTER (-1002007), BR_ORG_FOLDERS (-1002006), BUILDING_CLOSING_TIME_PARAM (-1114356), BUILDING_CURVE_GSTYLE (-1006210), BUILDING_CURVE_GSTYLE_PLUS_INVISIBLE (-1006211), BUILDING_OPENING_TIME_PARAM (-1114355), BUILDING_UNOCCUPIED_COOLING_SET_POINT_PARAM (-1114357), BUILDINGPAD_HEIGHTABOVELEVEL_PARAM (-1012502), BUILDINGPAD_THICKNESS (-1012501), BUILIDING_PAD_STRUCTURE_ID_PARAM (-1002119), CABLETRAY_MINBENDMULTIPLIER_PARAM (-1140119), CALLOUT_ATTR_HEAD_TAG (-1008200), CALLOUT_CORNER_SHEET_RADIUS (-1008201), CALLOUT_SYNCRONIZE_BOUND_OFFSET_FAR (-1008203), CALLOUT_TAG (-1008206), CASEWORK_CONSTRUCTION_TYPE (-1001207), CASEWORK_DEPTH (-1010003), CASEWORK_FINISH (-1001208), CASEWORK_HEIGHT (-1001300), CASEWORK_WIDTH (-1001301), CEILING_ATTR_DEFAULT_HEIGHT_PARAM (-1002200), CEILING_ATTR_PATTERN_PARAM (-1002201), CEILING_ATTR_SPACING1_PARAM (-1002202), CEILING_ATTR_SPACING2_PARAM (-1002203), CEILING_ATTR_SYSTEMNAME_PARAM (-1002204), CEILING_HAS_THICKNESS_PARAM (-1002302), CEILING_HEIGHTABOVELEVEL_PARAM (-1002300), CEILING_STRUCTURE_ID_PARAM (-1002118), CEILING_THICKNESS (-1002206), CEILING_THICKNESS_PARAM (-1002301), CENTER_MARK_SIZE (-1006407), CIRC_MULLION_RADIUS (-1007350), CIRCUIT_LOAD_CLASSIFICATION_PARAM (-1140120), CLEAR_COVER (-1013440), CLEAR_COVER_BOTTOM (-1013439), CLEAR_COVER_EXTERIOR (-1013435), CLEAR_COVER_INTERIOR (-1013436), CLEAR_COVER_OTHER (-1013437), CLEAR_COVER_TOP (-1013438), CLIENT_NAME (-1006319), CLINE_SUBCATEGORY (-1006220), COARSE_SCALE_FILL_PATTERN_COLOR (-1002110), COARSE_SCALE_FILL_PATTERN_ID_PARAM (-1002106), COLOR_FILL_FILTERED_PARAM (-1007502), COLOR_FILL_SWATCH_HEIGHT_PARAM (-1007504), COLOR_FILL_SWATCH_WIDTH_PARAM (-1007503), COLOR_SCHEME_LOCATION (-1005183), COLUMN_BASE_ATTACH_CUT_PARAM (-1002561), COLUMN_BASE_ATTACH_JUSTIFICATION_PARAM (-1002556), COLUMN_BASE_ATTACHED_PARAM (-1002560), COLUMN_BASE_ATTACHMENT_OFFSET_PARAM (-1002558), COLUMN_LOCATION_MARK (-1002563), COLUMN_TOP_ATTACH_CUT_PARAM (-1002562), COLUMN_TOP_ATTACH_JUSTIFICATION_PARAM (-1002555), COLUMN_TOP_ATTACHED_PARAM (-1002559), COLUMN_TOP_ATTACHMENT_OFFSET_PARAM (-1002557), CONCEPTUAL_CONSTRUCTION_MATERIAL (-1012024), CONDUIT_STANDARD_TYPE_PARAM (-1140118), CONNECTOR_ANGLE (-1133409), CONNECTOR_ANGLE_OF_DEFLECTION (-1140338), CONNECTOR_DIAMETER (-1133415), CONNECTOR_ENGAGEMENT_LENGTH (-1140329), CONNECTOR_GENDER_TYPE (-1140172), CONNECTOR_HEIGHT (-1133404), CONNECTOR_INDEX (-1133406), CONNECTOR_INSIDE_DIAMETER (-1133416), CONNECTOR_JOINT_TYPE (-1140171), CONNECTOR_LENGTH (-1140337), CONNECTOR_PROFILE_TYPE (-1133400), CONNECTOR_RADIUS (-1133401), CONNECTOR_REFERENCE_INDEX (-1133411), CONNECTOR_UTILITY_PARAM (-1150159), CONNECTOR_VISIBLE_SIZE (-1133405), CONNECTOR_WIDTH (-1133403), CONSTRAINT_FIXED_OFFSET (-1017730), CONTINUOUS_FOOTING_BEARING_WIDTH (-1001562), CONTINUOUS_FOOTING_BOTTOM_HEEL (-1001556), CONTINUOUS_FOOTING_BOTTOM_TOE (-1001554), CONTINUOUS_FOOTING_BREAK_AT_INSERTS_DISABLE (-1001592), CONTINUOUS_FOOTING_DEFAULT_END_EXTENSION_LENGTH (-1001591), CONTINUOUS_FOOTING_ECCENTRICITY (-1001564), CONTINUOUS_FOOTING_LENGTH (-1001567), CONTINUOUS_FOOTING_STRUCTURAL_USAGE (-1001563), CONTINUOUS_FOOTING_TOP_HEEL (-1001555), CONTINUOUS_FOOTING_TOP_TOE (-1001553), CONTINUOUS_FOOTING_WIDTH (-1001558), CONTINUOUSRAIL_BEGINNING_TERMINATION_ATTACHMENT_PARAM (-1150347), CONTINUOUSRAIL_BEGINNING_TERMINATION_TYPE_PARAM (-1150345), CONTINUOUSRAIL_DEFAULT_JOIN_TYPE_PARAM (-1150337), CONTINUOUSRAIL_END_EXTENSION_LENGTH_PARAM (-1150350), CONTINUOUSRAIL_END_TERMINATION_ATTACHMENT_PARAM (-1150349), CONTINUOUSRAIL_END_TERMINATION_TYPE_PARAM (-1150346), CONTINUOUSRAIL_EXTENSION_LENGTH_PARAM (-1150348), CONTINUOUSRAIL_FILLET_RADIUS_PARAM (-1150338), CONTINUOUSRAIL_JOIN_TYPE_PARAM (-1150373), CONTINUOUSRAIL_LENGTH_PARAM (-1150360), CONTINUOUSRAIL_MATERIALS_PARAM (-1150344), CONTINUOUSRAIL_PLUS_TREAD_DEPTH_PARAM (-1150361), CONTINUOUSRAIL_PROFILE_TYPE_PARAM (-1150339), CONTINUOUSRAIL_TRANSITION_TYPE_PARAM (-1150343), CONTOUR_ELEVATION (-1012401), CONTOUR_ELEVATION_STEP (-1012402), CONTOUR_LABELS_ELEV_BASE_TYPE (-1012621), CONTOUR_LABELS_LINEAR_UNITS (-1012609), CONTOUR_LABELS_PRIMARY_ONLY (-1012608), CONTOUR_LABELS_RELATIVE_BASE (-1012622), CONTOUR_SUBCATEGORY_ID (-1012405), COUPLER_CODE (-1154638), COUPLER_COUPLED_BAR_SIZE (-1154640), COUPLER_COUPLED_ENDTREATMENT (-1154653), COUPLER_COUPLED_ENGAGEMENT (-1154646), COUPLER_LENGTH (-1154644), COUPLER_MAIN_BAR_SIZE (-1154639), COUPLER_MAIN_ENDTREATMENT (-1154652), COUPLER_MAIN_ENGAGEMENT (-1154645), COUPLER_MARK (-1154649), COUPLER_NUMBER (-1154642), COUPLER_QUANTITY (-1154641), COUPLER_WEIGHT (-1154643), COUPLER_WIDTH (-1154651), COVER_TYPE_LENGTH (-1013434), COVER_TYPE_NAME (-1013433), CURTAIN_GRID_BASE_ORIENTATION (-1007364), CURTAIN_VERSION_PARAM (-1013367), CURTAIN_WALL_PANEL_HOST_ID (-1010303), CURTAIN_WALL_PANELS_CONSTRUCTION_TYPE (-1001207), CURTAIN_WALL_PANELS_FINISH (-1001208), CURTAIN_WALL_PANELS_HEIGHT (-1010300), CURTAIN_WALL_PANELS_WIDTH (-1010301), CURTAIN_WALL_SYSPANEL_OFFSET (-1010302), CURTAIN_WALL_SYSPANEL_THICKNESS (-1010304), CURTAINGRID_ADJUST_BORDER_1 (-1013346), CURTAINGRID_ADJUST_BORDER_2 (-1013347), CURTAINGRID_ADJUST_BORDER_HORIZ (-1013317), CURTAINGRID_ADJUST_BORDER_U (-1013386), CURTAINGRID_ADJUST_BORDER_V (-1013387), CURTAINGRID_ADJUST_BORDER_VERT (-1013316), CURTAINGRID_ANGLE_1 (-1013339), CURTAINGRID_ANGLE_2 (-1013340), CURTAINGRID_ANGLE_HORIZ (-1013310), CURTAINGRID_ANGLE_U (-1013379), CURTAINGRID_ANGLE_V (-1013380), CURTAINGRID_ANGLE_VERT (-1013309), CURTAINGRID_BELT_1 (-1013344), CURTAINGRID_BELT_2 (-1013345), CURTAINGRID_BELT_HORIZ (-1013315), CURTAINGRID_BELT_RATIO_1 (-1013368), CURTAINGRID_BELT_RATIO_2 (-1013369), CURTAINGRID_BELT_RATIO_U (-1013390), CURTAINGRID_BELT_RATIO_V (-1013391), CURTAINGRID_BELT_U (-1013384), CURTAINGRID_BELT_V (-1013385), CURTAINGRID_BELT_VERT (-1013314), CURTAINGRID_ORIGIN_1 (-1013342), CURTAINGRID_ORIGIN_2 (-1013343), CURTAINGRID_ORIGIN_HORIZ (-1013313), CURTAINGRID_ORIGIN_U (-1013382), CURTAINGRID_ORIGIN_V (-1013383), CURTAINGRID_ORIGIN_VERT (-1013312), CURTAINGRID_USE_CURVE_DIST (-1013354), CURTAINGRID_USE_CURVE_DIST_1 (-1013348), CURTAINGRID_USE_CURVE_DIST_2 (-1013349), CURTAINGRID_USE_CURVE_DIST_HORIZ (-1013319), CURTAINGRID_USE_CURVE_DIST_U (-1013388), CURTAINGRID_USE_CURVE_DIST_V (-1013389), CURTAINGRID_USE_CURVE_DIST_VERT (-1013318), CURVE_BY_POINTS_PROJECTION_TYPE (-1150212), CURVE_DETERMINES_ORIENTATION (-1004013), CURVE_EDGE_OFFSET (-1013429), CURVE_ELEM_ARC_END_ANGLE (-1004008), CURVE_ELEM_ARC_RADIUS (-1004010), CURVE_ELEM_ARC_RANGE (-1004009), CURVE_ELEM_ARC_START_ANGLE (-1004007), CURVE_ELEM_DEFINES_SLOPE (-1004015), CURVE_ELEM_LENGTH (-1004005), CURVE_ELEM_LINE_ANGLE (-1004006), CURVE_HEIGHT_OFFSET (-1006008), CURVE_IS_DETAIL (-1004011), CURVE_IS_FILLED (-1006310), CURVE_IS_REFERENCE_LINE (-1150147), CURVE_IS_SLOPE_DEFINING (-1006007), CURVE_LEVEL (-1006009), CURVE_NUMBER_OF_SEGMENTS (-1006013), CURVE_PARAM_CONCRETE_CANTILEVER (-1006014), CURVE_PARAM_STEEL_CANTILEVER (-1006015), CURVE_SUPPORT_OFFSET (-1013412), CURVE_VISIBILITY_PARAM (-1001809), CURVE_WALL_OFFSET (-1001706), CURVE_WALL_OFFSET_ROOFS (-1001707), CUST_MULLION_THICK (-1007322), CUST_MULLION_WIDTH1 (-1007320), CUST_MULLION_WIDTH2 (-1007321), CUT_LINE_ANGLE (-1006619), CUT_LINE_DISTANCE (-1006617), CUT_LINE_EXTENSION (-1006618), CUT_LINE_TYPE (-1006620), CUT_MARK_SYMBOL (-1006616), CUT_MARK_SYMBOL_SIZE (-1006621), CWP_ADD_GRID_PREFIX (-1016002), CWP_ADD_GRID_SUFFIX (-1016003), CWP_ADD_LEVEL_PREFIX (-1016004), CWP_ADD_LEVEL_SUFFIX (-1016005), CWP_COPY_FLOOR_INSERTS (-1016018), CWP_COPY_ROOF_INSERTS (-1016019), CWP_COPY_WALL_INSERTS (-1016017), CWP_LEVEL_OFFSET (-1016006), CWP_LINKED_ROOM_PARAMS (-1016016), CWP_LINKED_ROOM_PHASES (-1016015), CWP_REUSE_EXISTING_GRIDS (-1016008), CWP_REUSE_EXISTING_LEVELS (-1016007), CWP_REUSE_GRIDS_SAME_NAME (-1016011), CWP_REUSE_LEVELS_SAME_NAME (-1016010), CWP_SPLIT_COLUMNS_AT_LEVELS (-1016009), DATUM_BUBBLE_END_1 (-1008002), DATUM_BUBBLE_END_2 (-1008001), DATUM_BUBBLE_LOCATION_IN_ELEV (-1008003), DATUM_PLANE_DEFINES_ORIGIN (-1004002), DATUM_PLANE_DEFINES_WALL_CLOSURE (-1004012), DATUM_TEXT (-1008000), DATUM_VOLUME_OF_INTEREST (-1012201), DEBUGTAB_DATABOUNDCONTROLSDEMO_BOOLEAN (-1010011), DEBUGTAB_DATABOUNDCONTROLSDEMO_DOUBLE (-1010013), DEBUGTAB_DATABOUNDCONTROLSDEMO_ENUM (-1010010), DEBUGTAB_DATABOUNDCONTROLSDEMO_INTEGER (-1010012), DECAL_ATTRIBUTES (-1012812), DECAL_HEIGHT (-1012815), DECAL_LOCK_PROPORTIONS (-1012813), DECAL_SUBCATEGORY_ID (-1012818), DECAL_WIDTH (-1012814), DEFAULT_CONSTRUCTION_EXT_WALL_UNDERGROUND (-1150305), DEFAULT_CONSTRUCTION_MASS_EXTERIOR_WALL (-1150300), DEFAULT_CONSTRUCTION_MASS_FLOOR (-1150310), DEFAULT_CONSTRUCTION_MASS_GLAZING (-1150306), DEFAULT_CONSTRUCTION_MASS_INTERIOR_WALL (-1150301), DEFAULT_CONSTRUCTION_MASS_OPENING (-1150309), DEFAULT_CONSTRUCTION_MASS_ROOF (-1150302), DEFAULT_CONSTRUCTION_MASS_SHADE (-1150303), DEFAULT_CONSTRUCTION_MASS_SKYLIGHT (-1150307), DEFAULT_CONSTRUCTION_MASS_SLAB (-1150304), DEFAULT_VIEW_TEMPLATE (-1008210), DEFINES_CONSTANT_HEIGHT (-1006006), DESIGN_OPTION_ID (-1013201), DESIGN_OPTION_PARAM (-1013200), DIAMETER_SYMBOL_LOCATION (-1006998), DIAMETER_SYMBOL_TEXT (-1006999), DIM_DISPLAY_EQ (-1004514), DIM_ISREPORTING (-1004516), DIM_LABEL (-1004510), DIM_LABEL_GP_SHOW (-1004502), DIM_LABEL_IS_INSTANCE (-1004518), DIM_LEADER (-1004515), DIM_LEADER_ARROWHEAD (-1006323), DIM_LEADER_DISPLAY_CONDITION (-1006510), DIM_LEADER_SHOULDER_LENGTH (-1006509), DIM_LEADER_TYPE (-1006508), DIM_LINE_EXTENSION (-1006431), DIM_NOT_MODIFIABLE (-1004513), DIM_REFERENCE_COUNT (-1006520), DIM_STYLE_ANGULAR_UNITS (-1006428), DIM_STYLE_ANGULAR_UNITS_ALT (-1006460), DIM_STYLE_CENTERLINE_PATTERN (-1006434), DIM_STYLE_CENTERLINE_SYMBOL (-1006430), DIM_STYLE_CENTERLINE_TICK_MARK (-1006445), DIM_STYLE_DIM_LINE_SNAP_DIST (-1006446), DIM_STYLE_FLIPPED_DIM_LINE_EXTENSION (-1006465), DIM_STYLE_INTERIOR_TICK_MARK (-1006464), DIM_STYLE_LEADER_TICK_MARK (-1006514), DIM_STYLE_LINEAR_UNITS (-1006427), DIM_STYLE_LINEAR_UNITS_ALT (-1006454), DIM_STYLE_READ_CONVENTION (-1006448), DIM_STYLE_SHOW_OPENING_HT (-1006435), DIM_STYLE_SUPPRESS_SPACES (-1006516), DIM_TEXT_BACKGROUND (-1006429), DIM_TEXT_LOCATION_FOR_LEADER (-1006511), DIM_TO_INSERT_TYPE (-1006505), DIM_TO_INSERTS (-1006500), DIM_TO_INTERSECTING_GRIDS (-1006507), DIM_TO_INTERSECTING_WALLS (-1006506), DIM_TOTAL_LENGTH (-1006521), DIM_VALUE_ANGLE (-1004501), DIM_VALUE_LENGTH (-1004500), DIM_WITNS_LINE_CNTRL (-1006432), DIM_WITNS_LINE_EXTENSION_BELOW (-1006433), DISPLACED_ELEMENT_DISPLACEMENT_X (-1141004), DISPLACED_ELEMENT_DISPLACEMENT_Y (-1141005), DISPLACED_ELEMENT_DISPLACEMENT_Z (-1141006), DISPLACEMENT_PATH_DEPTH (-1141002), DISPLACEMENT_PATH_STYLE (-1141003), DISTANCE_TO_CUT_MARK (-1006625), DIVIDED_SURFACE_ALL_GRID_ROTATION (-1150068), DIVIDED_SURFACE_ALL_POINTS (-1150062), DIVIDED_SURFACE_COMPONENT_TRIM_TYPE (-1150083), DIVIDED_SURFACE_COVER_FACE_COMPLETELY (-1150056), DIVIDED_SURFACE_DISPLAY_COMPONENTS (-1150079), DIVIDED_SURFACE_DISPLAY_DISCARDEDDIVISIONLINES (-1150084), DIVIDED_SURFACE_DISPLAY_GRIDLINES (-1150073), DIVIDED_SURFACE_DISPLAY_NODES (-1150072), DIVIDED_SURFACE_DISPLAY_ORIGINAL_SURFACE (-1150070), DIVIDED_SURFACE_DISPLAY_PATTERN_FILL (-1150077), DIVIDED_SURFACE_DISPLAY_PATTERN_LINES (-1150075), DIVIDED_SURFACE_DISPLAY_SURFACE_OPTION (-1150069), DIVIDED_SURFACE_EDGE_NUMBER (-1150053), DIVIDED_SURFACE_FACET_NUMBER (-1150051), DIVIDED_SURFACE_GRID_OPTION_PARAM_1 (-1150085), DIVIDED_SURFACE_GRID_OPTION_PARAM_2 (-1150086), DIVIDED_SURFACE_GRIDLINES_STYLE (-1150074), DIVIDED_SURFACE_OFFSET_FROM_SURFACE (-1150055), DIVIDED_SURFACE_ORIGINAL_SURFACE_MATERIAL (-1150071), DIVIDED_SURFACE_PATTERN (-1150061), DIVIDED_SURFACE_PATTERN_FILL_MATERIAL (-1150078), DIVIDED_SURFACE_PATTERN_FLIP (-1150060), DIVIDED_SURFACE_PATTERN_INDENT_1 (-1150057), DIVIDED_SURFACE_PATTERN_INDENT_2 (-1150058), DIVIDED_SURFACE_PATTERN_LINES_STYLE (-1150076), DIVIDED_SURFACE_PATTERN_MIRROR (-1150082), DIVIDED_SURFACE_PATTERN_ROTATION_ANGLE (-1150059), DIVIDED_SURFACE_POINT_NUMBER (-1150052), DIVIDED_SURFACE_RULE_1_SUSPENSION (-1150080), DIVIDED_SURFACE_RULE_2_SUSPENSION (-1150081), DIVIDED_SURFACE_SURFACE_AREA (-1150050), DIVIDED_SURFACE_TILE_BORDER (-1150067), DIVIDED_SURFACE_TOTAL_EDGE_LENGTH (-1150054), DIVIDEDPATH_BEGINNING_INDENT (-1050428), DIVIDEDPATH_DISPLAY_NODE_NUMBERS (-1050440), DIVIDEDPATH_DISPLAY_NODES (-1050437), DIVIDEDPATH_DISPLAY_REFERENCE_CURVES (-1050436), DIVIDEDPATH_DISTANCE (-1050427), DIVIDEDPATH_END_INDENT (-1050429), DIVIDEDPATH_FLIP_DIRECTION (-1050433), DIVIDEDPATH_JUSTIFICATION (-1050435), DIVIDEDPATH_LAYOUT (-1050426), DIVIDEDPATH_LAYOUT_FIXED_NUM_POINT (-1050434), DIVIDEDPATH_MAX_DISTANCE (-1050431), DIVIDEDPATH_MEASUREMENT_TYPE (-1050432), DIVIDEDPATH_MERGED_POINT_NUM (-1050439), DIVIDEDPATH_MIN_DISTANCE (-1050430), DIVIDEDPATH_TOTAL_PATH_LENGTH (-1050441), DIVISION_PATTERN (-1152346), DIVISION_PROFILE_WIDTH (-1150623), DIVISION_RULE_PARAM (-1152351), DIVISION_SKETCH_CURVE_DIVISION_PARAMS_OVERRIDE_PARAM (-1152356), DIVISION_SKETCH_CURVE_EXTENTD_TO_SILH_PARAM (-1152352), DOOR_CONSTRUCTION_TYPE (-1001207), DOOR_COST (-1001205), DOOR_FINISH (-1001208), DOOR_FIRE_RATING (-1001206), DOOR_FRAME_MATERIAL (-1001210), DOOR_FRAME_TYPE (-1001209), DOOR_HEIGHT (-1001300), DOOR_NUMBER (-1001203), DOOR_OPERATION_TYPE (-1001211), DOOR_THICKNESS (-1001302), DOOR_WIDTH (-1001301), DPART_AREA_COMPUTED (-1001133), DPART_BASE_LEVEL (-1152335), DPART_BASE_LEVEL_BY_ORIGINAL (-1152336), DPART_CAN_HOST_REBAR (-1017056), DPART_EXCLUDED (-1152344), DPART_HEIGHT_COMPUTED (-1001135), DPART_LAYER_CONSTRUCTION (-1001139), DPART_LAYER_FUNCTION (-1001130), DPART_LAYER_WIDTH (-1001134), DPART_LENGTH_COMPUTED (-1001136), DPART_MATERIAL_BY_ORIGINAL (-1001128), DPART_MATERIAL_ID_PARAM (-1001127), DPART_ORIGINAL_CATEGORY (-1001125), DPART_ORIGINAL_CATEGORY_ID (-1001140), DPART_ORIGINAL_FAMILY (-1001126), DPART_ORIGINAL_TYPE (-1001132), DPART_PHASE_CREATED_BY_ORIGINAL (-1001137), DPART_PHASE_DEMOLISHED_BY_ORIGINAL (-1001138), DPART_SHAPE_MODIFIED (-1152345), DPART_VOLUME_COMPUTED (-1001129), DRAW_FOR_EACH_RUN (-1006628), DUCT_TERMINAL_ENGAGEMENT_LENGTH (-1133417), EDGE_LINEWORK (-1006212), EDITED_BY (-1002067), ELECTICAL_EQUIP_VOLTAGE (-1010401), ELECTICAL_EQUIP_WATTAGE (-1010400), ELEM_CATEGORY_PARAM (-1140362), ELEM_CATEGORY_PARAM_MT (-1140363), ELEM_DELETABLE_IN_FAMILY (-1004004), ELEM_FAMILY_AND_TYPE_PARAM (-1002052), ELEM_FAMILY_PARAM (-1002051), ELEM_IS_REFERENCE (-1004001), ELEM_PARTITION_PARAM (-1002053), ELEM_REFERENCE_NAME (-1004003), ELEM_REFERENCE_NAME_2D_XZ (-1004016), ELEM_ROOM_ID (-1002061), ELEM_ROOM_NAME (-1002060), ELEM_ROOM_NUMBER (-1002059), ELEM_TYPE_LABEL (-1002008), ELEM_TYPE_PARAM (-1002050), ELEMENT_IS_CUTTING (-1001807), ELEMENT_LOCKED_PARAM (-1009000), ELEV_ARROW_ANGLE (-1007602), ELEV_ARROW_FILLED (-1007603), ELEV_ASSOC_DATUM (-1007608), ELEV_REFERENCE_LABEL_POS (-1007609), ELEV_SHAPE (-1007601), ELEV_SHOW_VIEW_NAME (-1007605), ELEV_SYMBOL_ID (-1007610), ELEV_TEXT_POS (-1007604), ELEV_VIEW_NAME_POS (-1007607), ELEV_WIDTH (-1007600), ELEVATN_TAG (-1008207), ELLIPSE_FOCUS_MRK_VISIBLE (-1007905), ELLIPSE_X_PARAM (-1010020), ELLIPSE_Y_PARAM (-1010021), END_EXTENSION (-1152358), END_JOIN_CUTBACK (-1152360), END_TREATMENT (-1154654), END_Y_JUSTIFICATION (-1152370), END_Y_OFFSET_VALUE (-1152371), END_Z_JUSTIFICATION (-1152372), END_Z_OFFSET_VALUE (-1152373), ENERGY_ANALYSIS_ADVANCED_OPTIONS (-1152379), ENERGY_ANALYSIS_BUILDING_OPERATING_SCHEDULE (-1012047), ENERGY_ANALYSIS_CONCEPTUAL_CONSTRUCTION (-1012056), ENERGY_ANALYSIS_CREATE_ANALYTICAL_MODEL (-1012046), ENERGY_ANALYSIS_GLAZING_IS_SHADED (-1012053), ENERGY_ANALYSIS_HVAC_SYSTEM (-1012062), ENERGY_ANALYSIS_MASS_ZONING (-1012050), ENERGY_ANALYSIS_MASSZONE_COREOFFSET (-1012058), ENERGY_ANALYSIS_MASSZONE_DIVIDEPERIMETER (-1012059), ENERGY_ANALYSIS_MASSZONE_USEENERGYDATASETTINGS (-1012060), ENERGY_ANALYSIS_OUTDOOR_AIR_INFORMATION_PARAM (-1012061), ENERGY_ANALYSIS_PERCENTAGE_GLAZING (-1012051), ENERGY_ANALYSIS_PERCENTAGE_SKYLIGHTS (-1012054), ENERGY_ANALYSIS_SHADE_DEPTH (-1012057), ENERGY_ANALYSIS_SILL_HEIGHT (-1012052), ENERGY_ANALYSIS_SKYLIGHT_WIDTH (-1012055), EQUALITY_FORMULA (-1006515), EQUALITY_TEXT_FOR_ANGULAR_DIM (-1006513), EQUALITY_TEXT_FOR_CONTINUOUS_LINEAR_DIM (-1006512), EQUALITY_WITNESS_DISPLAY (-1006517), EXTRUSION_AUTO_PARAMS (-1001806), EXTRUSION_END_PARAM (-1001801), EXTRUSION_LENGTH (-1001812), EXTRUSION_START_PARAM (-1001800), FABRIC_BEND_DIAMETER (-1017625), FABRIC_NUMBER (-1154617), FABRIC_PARAM_COVER_OFFSET (-1017708), FABRIC_PARAM_CUT_BY_HOST (-1017732), FABRIC_PARAM_CUT_OVERALL_LENGTH (-1017709), FABRIC_PARAM_CUT_OVERALL_WIDTH (-1017710), FABRIC_PARAM_CUT_SHEET_MASS (-1017712), FABRIC_PARAM_LAPSPLICE_POSITION (-1017704), FABRIC_PARAM_LOCATION_GENERIC (-1017705), FABRIC_PARAM_LOCATION_SLAB (-1017702), FABRIC_PARAM_LOCATION_WALL (-1017703), FABRIC_PARAM_MAJOR_LAPSPLICE_LENGTH (-1017706), FABRIC_PARAM_MINOR_LAPSPLICE_LENGTH (-1017707), FABRIC_PARAM_ROUNDING (-1017028), FABRIC_PARAM_SHARED_FAMILY_KEY (-1017733), FABRIC_PARAM_SHEET_TYPE (-1017701), FABRIC_PARAM_SPAN_SYM_BOTTOM (-1017721), FABRIC_PARAM_SPAN_SYM_D_BOTTOM (-1017725), FABRIC_PARAM_SPAN_SYM_D_LEFT (-1017726), FABRIC_PARAM_SPAN_SYM_D_RIGHT (-1017727), FABRIC_PARAM_SPAN_SYM_D_TOP (-1017724), FABRIC_PARAM_SPAN_SYM_LEFT (-1017722), FABRIC_PARAM_SPAN_SYM_RIGHT (-1017723), FABRIC_PARAM_SPAN_SYM_TOP (-1017720), FABRIC_PARAM_SPAN_TAG_COMPONENT_REFERENCE (-1017728), FABRIC_PARAM_TAG_VIEW (-1017713), FABRIC_PARAM_TOTAL_SHEET_MASS (-1017711), FABRIC_SHEET_DEFAULT_MAJOR_LAPSPLICE_LENGTH (-1017605), FABRIC_SHEET_DEFAULT_MINOR_LAPSPLICE_LENGTH (-1017606), FABRIC_SHEET_LENGTH (-1017608), FABRIC_SHEET_MAJOR_DIRECTION_WIRE_TYPE (-1017603), FABRIC_SHEET_MAJOR_END_OVERHANG (-1017610), FABRIC_SHEET_MAJOR_LAYOUT_PATTERN (-1017611), FABRIC_SHEET_MAJOR_NUMBER_OF_WIRES (-1017612), FABRIC_SHEET_MAJOR_REINFORCEMENT_AREA (-1017622), FABRIC_SHEET_MAJOR_SPACING (-1017613), FABRIC_SHEET_MAJOR_START_OVERHANG (-1017609), FABRIC_SHEET_MASS (-1017621), FABRIC_SHEET_MASSUNIT (-1017624), FABRIC_SHEET_MINOR_DIRECTION_WIRE_TYPE (-1017604), FABRIC_SHEET_MINOR_END_OVERHANG (-1017617), FABRIC_SHEET_MINOR_LAYOUT_PATTERN (-1017618), FABRIC_SHEET_MINOR_NUMBER_OF_WIRES (-1017619), FABRIC_SHEET_MINOR_REINFORCEMENT_AREA (-1017623), FABRIC_SHEET_MINOR_SPACING (-1017620), FABRIC_SHEET_MINOR_START_OVERHANG (-1017616), FABRIC_SHEET_OVERALL_LENGTH (-1017607), FABRIC_SHEET_OVERALL_WIDTH (-1017614), FABRIC_SHEET_PHYSICAL_MATERIAL_ASSET (-1017602), FABRIC_SHEET_WIDTH (-1017615), FABRIC_WIRE_DIAMETER (-1017601), FABRIC_WIRE_DISTANCE (-1017738), FABRIC_WIRE_LENGTH (-1017737), FABRIC_WIRE_TYPE (-1017736), FABRICATION_BOTTOM_ELEVATION_INCLUDE_INSULATION_OF_PART (-1140992), FABRICATION_BOTTOM_ELEVATION_OF_PART (-1140991), FABRICATION_BOTTOM_OF_PART (-1140919), FABRICATION_CENTERLINE_ELEVATION_OF_PART (-1140988), FABRICATION_DOUBLEWALL_MATERIAL_ABBREVIATION (-1140998), FABRICATION_END_OFFSET_PARAM (-1140925), FABRICATION_FITTING_DESCRIPTION (-1140999), FABRICATION_INSULATION_ABBREVIATION (-1140995), FABRICATION_INSULATION_SPEC (-1140947), FABRICATION_INSULATION_SPECIFICATION_ABBREVIATION (-1140996), FABRICATION_LEVEL_PARAM (-1140916), FABRICATION_MATERIAL_ABBREVIATION (-1140997), FABRICATION_OFFSET_PARAM (-1140917), FABRICATION_PART_ALIAS (-1140968), FABRICATION_PART_ANGLE (-1140911), FABRICATION_PART_ANGLE_OPTION (-1140949), FABRICATION_PART_BOUGHT_OUT (-1140969), FABRICATION_PART_CUT_TYPE (-1140970), FABRICATION_PART_DEPTH_IN (-1140930), FABRICATION_PART_DEPTH_IN_OPTION (-1140951), FABRICATION_PART_DEPTH_OUT (-1140935), FABRICATION_PART_DEPTH_OUT_OPTION (-1140957), FABRICATION_PART_DIAMETER_IN (-1140912), FABRICATION_PART_DIAMETER_IN_OPTION (-1140952), FABRICATION_PART_DIAMETER_OUT (-1140933), FABRICATION_PART_DIAMETER_OUT_OPTION (-1140955), FABRICATION_PART_DOUBLEWALL_MATERIAL (-1140971), FABRICATION_PART_DOUBLEWALL_MATERIAL_AREA (-1140983), FABRICATION_PART_DOUBLEWALL_MATERIAL_THICKNESS (-1140972), FABRICATION_PART_INSULATION_AREA (-1140974), FABRICATION_PART_ITEM_NUMBER (-1140975), FABRICATION_PART_LENGTH (-1140944), FABRICATION_PART_LENGTH_OPTION (-1140948), FABRICATION_PART_LINING_AREA (-1140976), FABRICATION_PART_MATERIAL (-1140909), FABRICATION_PART_MATERIAL_THICKNESS (-1140978), FABRICATION_PART_NOTES (-1140977), FABRICATION_PART_SHEETMETAL_AREA (-1140981), FABRICATION_PART_TAKEOFF_DIALOG_PARAM (-1140965), FABRICATION_PART_WEIGHT (-1140913), FABRICATION_PART_WIDTH_IN (-1140929), FABRICATION_PART_WIDTH_IN_OPTION (-1140950), FABRICATION_PART_WIDTH_OUT (-1140934), FABRICATION_PART_WIDTH_OUT_OPTION (-1140956), FABRICATION_PIPE_INVERT_ELEVATION (-1140993), FABRICATION_PRODUCT_CODE (-1140966), FABRICATION_PRODUCT_DATA_FINISH_DESCRIPTION (-1140900), FABRICATION_PRODUCT_DATA_INSTALL_TYPE (-1140910), FABRICATION_PRODUCT_DATA_ITEM_DESCRIPTION (-1140906), FABRICATION_PRODUCT_DATA_LONG_DESCRIPTION (-1140902), FABRICATION_PRODUCT_DATA_MATERIAL_DESCRIPTION (-1140904), FABRICATION_PRODUCT_DATA_OEM (-1140908), FABRICATION_PRODUCT_DATA_PRODUCT (-1140907), FABRICATION_PRODUCT_DATA_RANGE (-1140901), FABRICATION_PRODUCT_DATA_SIZE_DESCRIPTION (-1140905), FABRICATION_PRODUCT_DATA_SPECIFICATION (-1140903), FABRICATION_PRODUCT_ENTRY (-1140943), FABRICATION_RELATIVE_FILENAME (-1140921), FABRICATION_ROUTING_SOLUTIONS_UI_PARAM (-1140967), FABRICATION_SERVICE_ABBREVIATION (-1140979), FABRICATION_SERVICE_NAME (-1140973), FABRICATION_SERVICE_PARAM (-1140339), FABRICATION_SET_UP_DOWN_TAG (-1140982), FABRICATION_SLOPE_PARAM (-1140923), FABRICATION_SPECIFICATION (-1140915), FABRICATION_SPECIFICATION_ABBREVIATION (-1140994), FABRICATION_SPOT_BOTTOM_ELEVATION_INCLUDE_INSULATION_OF_PART (-1140987), FABRICATION_SPOT_BOTTOM_ELEVATION_OF_PART (-1140986), FABRICATION_SPOT_TOP_ELEVATION_INCLUDE_INSULATION_OF_PART (-1140985), FABRICATION_SPOT_TOP_ELEVATION_OF_PART (-1140984), FABRICATION_START_OFFSET_PARAM (-1140924), FABRICATION_TOP_ELEVATION_INCLUDE_INSULATION_OF_PART (-1140990), FABRICATION_TOP_ELEVATION_OF_PART (-1140989), FABRICATION_TOP_OF_PART (-1140918), FABRICATION_VENDOR (-1140920), FABRICATION_VENDOR_CODE (-1140914), FACEROOF_LEVEL_PARAM (-1001715), FACEROOF_OFFSET_PARAM (-1001716), FAM_PROFILE_DEFINITION (-1152374), FAM_PROFILE_USAGE (-1001821), FAMILY_ALLOW_CUT_WITH_VOIDS (-1012811), FAMILY_ALWAYS_VERTICAL (-1012808), FAMILY_AUTOJOIN (-1012832), FAMILY_BASE_LEVEL_OFFSET_PARAM (-1001357), FAMILY_BASE_LEVEL_PARAM (-1001350), FAMILY_CAN_HOST_REBAR (-1013441), FAMILY_CATEGORY_PSEUDO_PARAM (-1001337), FAMILY_CONTENT_PART_TYPE (-1114206), FAMILY_CURVE_ATTACHMENT_PROPORTION (-1150140), FAMILY_CURVE_GSTYLE_FOR_2010_MASS (-1006207), FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE (-1006201), FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_MINUS_ANALYTICAL (-1006203), FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_PLUS_STICK_SYM (-1006202), FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_PLUS_STICK_SYM_MINUS_ANALYTICAL (-1006204), FAMILY_ELECTRICAL_MAINTAIN_ANNOTATION_ORIENTATION (-1114243), FAMILY_ELEM_SUBCATEGORY (-1006200), FAMILY_ENABLE_CUTTING_IN_VIEWS (-1013442), FAMILY_EXPORT_AS_GEOMETRY (-1001570), FAMILY_HEIGHT_PARAM (-1001300), FAMILY_HOSTING_BEHAVIOR (-1012843), FAMILY_IS_ELEVATION_MARK_BODY (-1012842), FAMILY_IS_PARAMETRIC (-1012831), FAMILY_KEEP_TEXT_READABLE (-1012830), FAMILY_KEY_EXT_PARAM (-1012810), FAMILY_KEYWORD_PROTECTED (-1150602), FAMILY_LEVEL_PARAM (-1001352), FAMILY_LINE_LENGTH_PARAM (-1001306), FAMILY_NAME_PSEUDO_PARAM (-1001336), FAMILY_RENDERING_TYPE (-1005196), FAMILY_RFA_PATH_PSEUDO_PARAM (-1001338), FAMILY_ROTATE_WITH_COMPONENT (-1012807), FAMILY_ROUGH_HEIGHT_PARAM (-1001304), FAMILY_ROUGH_WIDTH_PARAM (-1001305), FAMILY_ROUNDCONNECTOR_DIMENSIONTYPE (-1152375), FAMILY_SHARED (-1012834), FAMILY_STRUCT_FOOTING_USE_CAP_TOP (-1001560), FAMILY_STRUCT_MATERIAL_TYPE (-1001550), FAMILY_SYMBOLIC_REP (-1005197), FAMILY_THICKNESS_PARAM (-1001302), FAMILY_TOP_LEVEL_OFFSET_PARAM (-1001358), FAMILY_TOP_LEVEL_PARAM (-1001351), FAMILY_USAGE_PSEUDO_PARAM (-1001335), FAMILY_USE_PRECUT_SHAPE (-1012841), FAMILY_WIDTH_PARAM (-1001301), FAMILY_WINDOW_INSET_PARAM (-1001303), FAMILY_WORK_PLANE_BASED (-1012833), FAMILY_WPB_DEFAULT_ELEVATION (-1001320), FASCIA_DEPTH_PARAM (-1001711), FASCIA_MATERIAL_PARAM (-1012822), FASCIA_PROFILE_PARAM (-1012819), FBX_ASSET_TYPE (-1150100), FBX_LIGHT_AT_A_DISTANCE (-1150133), FBX_LIGHT_BALLAST_LOSS (-1114218), FBX_LIGHT_COLOR_FILTER (-1150108), FBX_LIGHT_DIMMING_LIGHT_COLOR (-1150117), FBX_LIGHT_EFFICACY (-1150104), FBX_LIGHT_EMIT_CIRCLE_DIAMETER (-1150129), FBX_LIGHT_EMIT_LINE_LENGTH (-1150126), FBX_LIGHT_EMIT_RECTANGLE_LENGTH (-1150128), FBX_LIGHT_EMIT_RECTANGLE_WIDTH (-1150127), FBX_LIGHT_EMIT_SHAPE_VISIBLE (-1150118), FBX_LIGHT_ILLUMINANCE (-1150106), FBX_LIGHT_INITIAL_COLOR_CTRL (-1150138), FBX_LIGHT_INITIAL_COLOR_NAME (-1150134), FBX_LIGHT_INITIAL_COLOR_TEMPERATURE (-1150107), FBX_LIGHT_INITIAL_INTENSITY (-1150102), FBX_LIGHT_INITIAL_INTENSITY_INPUT_METHOD (-1150132), FBX_LIGHT_LAMP_LUMEN_DEPR (-1150114), FBX_LIGHT_LAMP_TILT_LOSS (-1150112), FBX_LIGHT_LIMUNOUS_FLUX (-1010503), FBX_LIGHT_LIMUNOUS_INTENSITY (-1150105), FBX_LIGHT_LOSS_FACTOR_CTRL (-1150139), FBX_LIGHT_LOSS_FACTOR_METHOD (-1150137), FBX_LIGHT_LUMENAIRE_DIRT (-1150115), FBX_LIGHT_PHOTOMETRIC_FILE (-1140034), FBX_LIGHT_PHOTOMETRIC_FILE_CACHE (-1150142), FBX_LIGHT_PHOTOMETRICS (-1150101), FBX_LIGHT_PHOTOMETRICS_FAM (-1150141), FBX_LIGHT_SOURCE_DIAMETER (-1150130), FBX_LIGHT_SOURCE_LENGTH (-1150131), FBX_LIGHT_SPOT_BEAM_ANGLE (-1010506), FBX_LIGHT_SPOT_FIELD_ANGLE (-1010507), FBX_LIGHT_SPOT_TILT_ANGLE (-1010505), FBX_LIGHT_SURFACE_LOSS (-1150113), FBX_LIGHT_TEMPERATURE_LOSS (-1150109), FBX_LIGHT_TOTAL_LIGHT_LOSS (-1114217), FBX_LIGHT_VOLTAGE_LOSS (-1150110), FBX_LIGHT_WATTAGE (-1150103), FILL_PATTERN_ID_PARAM (-1002101), FILL_PATTERN_ID_PARAM_NO_NO (-1002114), FILLED_REGION_BACKGROUND (-1006800), FIRE_RATING (-1001206), FIXED_ROTATION (-1006504), FLEXIBLE_INSTANCE_FLIP (-1150321), FLOOR_ATTR_DEFAULT_HEIGHT_PARAM (-1001903), FLOOR_ATTR_DEFAULT_THICKNESS_PARAM (-1001902), FLOOR_ATTR_THICKNESS_PARAM (-1001900), FLOOR_HEIGHTABOVELEVEL_PARAM (-1001951), FLOOR_PARAM_IS_STRUCTURAL (-1001954), FLOOR_PARAM_SPAN_DIRECTION (-1001955), FLOOR_STRUCTURE_ID_PARAM (-1002116), FOLLOW_SURFACE (-1150211), FRAMING_LENGTH_ROUNDOFF (-1150208), FUNCTION_PARAM (-1001006), FURNITURE_HEIGHT (-1001300), FURNITURE_THICKNESS (-1001302), FURNITURE_WIDTH (-1001301), GBXML_EDIT_DATA_PARAM (-1114197), GENERIC_CONSTRUCTION_TYPE (-1001207), GENERIC_DEPTH (-1010003), GENERIC_FINISH (-1001208), GENERIC_HEIGHT (-1001300), GENERIC_THICKNESS (-1001302), GENERIC_WIDTH (-1001301), GEO_LOCATION (-1007720), GEOM_VISIBILITY_PARAM (-1001808), GRAPHIC_DISPLAY_OPTIONS (-1005173), GRAPHIC_DISPLAY_OPTIONS_BACKGROUND (-1005135), GRAPHIC_DISPLAY_OPTIONS_FOG (-1005136), GRAPHIC_DISPLAY_OPTIONS_LIGHTING (-1005133), GRAPHIC_DISPLAY_OPTIONS_MODEL (-1005131), GRAPHIC_DISPLAY_OPTIONS_PHOTO_EXPOSURE (-1005137), GRAPHIC_DISPLAY_OPTIONS_SHADOWS (-1005132), GRAPHIC_DISPLAY_OPTIONS_SKETCHY_LINES (-1154615), GRAPHIC_DISPLAY_OPTIONS_SS_INTENSITY (-1005134), GRID_BANK_COL_NUM (-1114396), GRID_BANK_COL_WIDTH (-1114398), GRID_BANK_ROW_HEIGHT (-1114397), GRID_BANK_ROW_NUM (-1114395), GRID_BUBBLE_END_1 (-1008004), GRID_BUBBLE_END_2 (-1008005), GRID_BUBBLE_LINE_PEN (-1006703), GRID_CENTER_SEGMENT_COLOR (-1006706), GRID_CENTER_SEGMENT_PATTERN (-1006707), GRID_CENTER_SEGMENT_STYLE (-1006704), GRID_CENTER_SEGMENT_WEIGHT (-1006705), GRID_END_SEGMENT_COLOR (-1006709), GRID_END_SEGMENT_PATTERN (-1006710), GRID_END_SEGMENT_WEIGHT (-1006708), GRID_END_SEGMENTS_LENGTH (-1006711), GRID_HEAD_TAG (-1006700), GRIDLINE_SPEC_STATUS (-1013308), GROUP_ALLOWED_VIEW_TYPES (-1133502), GROUP_ATTACHED_PARENT_NAME (-1133503), GROUP_LEVEL (-1133500), GROUP_OFFSET_FROM_LEVEL (-1133501), GROUPNAME_PARAM (-1010018), GUIDE_GRID_NAME_PARAM (-1013002), GUIDE_GRID_SPACING_PARAM (-1013001), GUTTER_MATERIAL_PARAM (-1012823), GUTTER_PROFILE_PARAM (-1012836), HANDRAIL_HAND_CLEARANCE_PARAM (-1150342), HANDRAIL_HEIGHT_PARAM (-1150340), HANDRAIL_PROJECTION_PARAM (-1150341), HANDRAIL_SUPPORTS_JUSTIFICATION_PARAM (-1150355), HANDRAIL_SUPPORTS_LAYOUT_PARAM (-1150352), HANDRAIL_SUPPORTS_NUMBER_PARAM (-1150354), HANDRAIL_SUPPORTS_SPACING_PARAM (-1150353), HANDRAIL_SUPPORTS_TYPE_PARAM (-1150351), HEAD_ON_PLACEMENT_METHOD (-1006206), HEAVY_END_PEN (-1006447), HEAVY_TICK_MARK_PEN (-1006420), HOST_AREA_COMPUTED (-1012805), HOST_ID_PARAM (-1002108), HOST_PANEL_SCHEDULE_AS_PANEL_PARAM (-1001124), HOST_PERIMETER_COMPUTED (-1001953), HOST_SSE_CURVED_EDGE_CONDITION_PARAM (-1001603), HOST_VOLUME_COMPUTED (-1012806), ICON_INDEX_PARAM (-1010017), ID_PARAM (-1002100), IFC_BUILDING_GUID (-1019003), IFC_GUID (-1019000), IFC_PROJECT_GUID (-1019002), IFC_SITE_GUID (-1019004), IFC_TYPE_GUID (-1019001), IMPORT_ADT_COMPONENTS_DESC (-1007733), IMPORT_ADT_ENTITY_HEIGHT (-1007734), IMPORT_ADT_ENTITY_LENGTH (-1007736), IMPORT_ADT_ENTITY_ROLL (-1007738), IMPORT_ADT_ENTITY_STRUCT_TYPE (-1007731), IMPORT_ADT_ENTITY_STYLE (-1007732), IMPORT_ADT_ENTITY_THICKNESS (-1007737), IMPORT_ADT_ENTITY_TYPE (-1007730), IMPORT_ADT_ENTITY_WIDTH (-1007735), IMPORT_BACKGROUND (-1007705), IMPORT_BASE_LEVEL (-1007702), IMPORT_BASE_LEVEL_OFFSET (-1007703), IMPORT_DISPLAY_UNITS (-1007704), IMPORT_INSTANCE_SCALE (-1007706), IMPORT_SCALE (-1007701), IMPORT_SYMBOL_NAME (-1007700), INSTANCE_ELEVATION_PARAM (-1001360), INSTANCE_FREE_HOST_OFFSET_PARAM (-1001364), INSTANCE_FREE_HOST_PARAM (-1001363), INSTANCE_HEAD_HEIGHT_PARAM (-1001362), INSTANCE_LENGTH_PARAM (-1001375), INSTANCE_MOVE_BASE_WITH_GRIDS (-1150173), INSTANCE_MOVE_TOP_WITH_GRIDS (-1150172), INSTANCE_MOVES_WITH_GRID_PARAM (-1001371), INSTANCE_OFFSET_POS_PARAM (-1001370), INSTANCE_REFERENCE_LEVEL_PARAM (-1001383), INSTANCE_SCHEDULE_ONLY_LEVEL_PARAM (-1001365), INSTANCE_SILL_HEIGHT_PARAM (-1001361), INSTANCE_STRUCT_USAGE_PARAM (-1001381), INSULATION_SCALE (-1011101), INSULATION_WIDTH (-1011100), INTERIOR_TICK_DISPLAY (-1006523), INVALID (-1), IS_VISIBLE_PARAM (-1006205), JOIN_STRENGTH_ORDER (-1012870), JOIST_SYSTEM_CLEAR_SPACING_PARAM (-1013432), JOIST_SYSTEM_ELEM_TAG_NEW_MEMBERS_VIEW (-1140757), JOIST_SYSTEM_FIXED_SPACING_PARAM (-1013431), JOIST_SYSTEM_JUSTIFICATION_PARAM (-1013409), JOIST_SYSTEM_LAYOUT_RULE_PARAM (-1013410), JOIST_SYSTEM_MAXIMUM_SPACING_PARAM (-1013430), JOIST_SYSTEM_NEW_BEAM_TYPE_NO_FAM_NAME_PARAM (-1013419), JOIST_SYSTEM_NEW_BEAM_TYPE_PARAM (-1013411), JOIST_SYSTEM_NUM_BEAMS_SAME_TYPE (-1013415), JOIST_SYSTEM_NUMBER_OF_LINES_PARAM (-1013407), JOIST_SYSTEM_SPACING_PARAM (-1013408), KEEP_READABLE (-1006503), KEY_SOURCE_PARAM (-1140423), KEY_VALUE (-1140418), KEYNOTE_NUMBER (-1140421), KEYNOTE_PARAM (-1140422), KEYNOTE_TEXT (-1140419), LAYOUTNODE_CURVETYPE_PARAM (-1142000), LEADER_ARROW_WIDTH (-1006426), LEADER_ARROWHEAD (-1006315), LEADER_LEFT_ATTACHMENT (-1150230), LEADER_LINE (-1006502), LEADER_OFFSET_SHEET (-1006501), LEADER_RIGHT_ATTACHMENT (-1150231), LEGEND_COMPONENT (-1133750), LEGEND_COMPONENT_DETAIL_LEVEL (-1133753), LEGEND_COMPONENT_LENGTH (-1133752), LEGEND_COMPONENT_VIEW (-1133751), LEVEL_ATTR_ROOM_COMPUTATION_AUTOMATIC (-1006941), LEVEL_ATTR_ROOM_COMPUTATION_HEIGHT (-1006940), LEVEL_DATA_FLOOR_AREA (-1012010), LEVEL_DATA_FLOOR_PERIMETER (-1012009), LEVEL_DATA_MASS_FAMILY_AND_TYPE_PARAM (-1012017), LEVEL_DATA_MASS_FAMILY_PARAM (-1012016), LEVEL_DATA_MASS_INSTANCE_COMMENTS (-1012019), LEVEL_DATA_MASS_TYPE_COMMENTS (-1012018), LEVEL_DATA_MASS_TYPE_DESCRIPTION (-1012020), LEVEL_DATA_MASS_TYPE_PARAM (-1012013), LEVEL_DATA_OWNING_LEVEL (-1012014), LEVEL_DATA_SPACE_USAGE (-1012015), LEVEL_DATA_SURFACE_AREA (-1012011), LEVEL_DATA_VOLUME (-1012012), LEVEL_ELEV (-1007102), LEVEL_HEAD_TAG (-1007100), LEVEL_IS_BUILDING_STORY (-1007111), LEVEL_IS_GROUND_PLANE (-1150195), LEVEL_IS_STRUCTURAL (-1007112), LEVEL_NAME (-1007101), LEVEL_PARAM (-1001952), LEVEL_RELATIVE_BASE_TYPE (-1007109), LEVEL_ROOM_COMPUTATION_HEIGHT (-1006939), LEVEL_UP_TO_LEVEL (-1007110), LIGHTING_FIXTURE_LAMP (-1010501), LIGHTING_FIXTURE_LIGHT_EMITTER (-1010508), LIGHTING_FIXTURE_WATTAGE (-1010500), LINE_COLOR (-1006304), LINE_PATTERN (-1006305), LINE_PEN (-1006303), LINE_SHAPE_AT_CORNER (-1006624), LINEAR_DIM_TYPE (-1006467), LOAD_ALL_NON_0_LOADS (-1015080), LOAD_AREA_AREA (-1015069), LOAD_AREA_FORCE_FX1 (-1015060), LOAD_AREA_FORCE_FX2 (-1015063), LOAD_AREA_FORCE_FX3 (-1015066), LOAD_AREA_FORCE_FY1 (-1015061), LOAD_AREA_FORCE_FY2 (-1015064), LOAD_AREA_FORCE_FY3 (-1015067), LOAD_AREA_FORCE_FZ1 (-1015062), LOAD_AREA_FORCE_FZ2 (-1015065), LOAD_AREA_FORCE_FZ3 (-1015068), LOAD_AREA_IS_PROJECTED (-1015070), LOAD_ARROW_SEPARATION (-1015205), LOAD_ATTR_AREA_FORCE_SCALE_FACTOR (-1015207), LOAD_ATTR_FORCE_ARROW_TYPE (-1015200), LOAD_ATTR_FORCE_SCALE_FACTOR (-1015201), LOAD_ATTR_LINEAR_FORCE_SCALE_FACTOR (-1015206), LOAD_ATTR_MOMENT_ARROW_ARC (-1015202), LOAD_ATTR_MOMENT_ARROW_LINE (-1015203), LOAD_ATTR_MOMENT_SCALE_FACTOR (-1015204), LOAD_CASE_ID (-1015000), LOAD_CASE_NAME (-1015250), LOAD_CASE_NATURE (-1015252), LOAD_CASE_NATURE_TEXT (-1015082), LOAD_CASE_NUMBER (-1015251), LOAD_CASE_SUBCATEGORY (-1015253), LOAD_COMBINATION_FACTOR (-1015256), LOAD_COMBINATION_NAME (-1015255), LOAD_COMMENTS (-1015083), LOAD_DESCRIPTION (-1015084), LOAD_FORCE_FX (-1015010), LOAD_FORCE_FY (-1015011), LOAD_FORCE_FZ (-1015012), LOAD_IS_CREATED_BY_API (-1015004), LOAD_IS_HOSTED (-1015006), LOAD_IS_PROJECTED (-1015042), LOAD_IS_REACTION (-1015005), LOAD_IS_UNIFORM (-1015003), LOAD_LINEAR_FORCE_FX1 (-1015030), LOAD_LINEAR_FORCE_FX2 (-1015033), LOAD_LINEAR_FORCE_FY1 (-1015031), LOAD_LINEAR_FORCE_FY2 (-1015034), LOAD_LINEAR_FORCE_FZ1 (-1015032), LOAD_LINEAR_FORCE_FZ2 (-1015035), LOAD_LINEAR_LENGTH (-1015043), LOAD_MOMENT_MX (-1015013), LOAD_MOMENT_MX1 (-1015036), LOAD_MOMENT_MX2 (-1015039), LOAD_MOMENT_MY (-1015014), LOAD_MOMENT_MY1 (-1015037), LOAD_MOMENT_MY2 (-1015040), LOAD_MOMENT_MZ (-1015015), LOAD_MOMENT_MZ1 (-1015038), LOAD_MOMENT_MZ2 (-1015041), LOAD_NATURE_NAME (-1015254), LOAD_USAGE_NAME (-1015259), LOAD_USE_LOCAL_COORDINATE_SYSTEM (-1015001), LOCKED_BASE_OFFSET (-1150163), LOCKED_END_OFFSET (-1150165), LOCKED_START_OFFSET (-1150164), LOCKED_TOP_OFFSET (-1150162), LV_MULLION_LEG1 (-1007354), LV_MULLION_LEG2 (-1007355), MARKUPS_CREATED (-1133902), MARKUPS_CREATOR (-1133903), MARKUPS_HISTORY (-1133906), MARKUPS_LABEL (-1133904), MARKUPS_MODIFIED (-1133901), MARKUPS_NOTES (-1133907), MARKUPS_PRIVATE (-1133908), MARKUPS_STATUS (-1133905), MASS_DATA_CONCEPTUAL_CONSTRUCTION (-1012030), MASS_DATA_GLAZING_IS_SHADED (-1012040), MASS_DATA_MASS_EXTERIOR_WALL_AREA (-1012032), MASS_DATA_MASS_INTERIOR_WALL_AREA (-1012033), MASS_DATA_MASS_OPENING_AREA (-1012037), MASS_DATA_MASS_ROOF_AREA (-1012034), MASS_DATA_MASS_SKYLIGHT_AREA (-1012036), MASS_DATA_MASS_WINDOW_AREA (-1012035), MASS_DATA_PERCENTAGE_GLAZING (-1012039), MASS_DATA_PERCENTAGE_SKYLIGHTS (-1012043), MASS_DATA_SHADE_DEPTH (-1012041), MASS_DATA_SILL_HEIGHT (-1012042), MASS_DATA_SKYLIGHT_WIDTH (-1012044), MASS_DATA_SLAB (-1012098), MASS_DATA_SUBCATEGORY (-1012031), MASS_DATA_SURFACE_DATA_SOURCE (-1012045), MASS_DATA_UNDERGROUND (-1012038), MASS_FLOOR_AREA_LEVELS (-1012005), MASS_GROSS_AREA (-1012004), MASS_GROSS_SURFACE_AREA (-1012006), MASS_GROSS_VOLUME (-1012007), MASS_SURFACEDATA_MATERIAL (-1012023), MASS_ZONE_CONDITION_TYPE_PARAM (-1012027), MASS_ZONE_FLOOR_AREA (-1012025), MASS_ZONE_MATERIAL (-1012022), MASS_ZONE_SPACE_TYPE_PARAM (-1012026), MASS_ZONE_VOLUME (-1012021), MASSING_INTEGRATION_LEVEL (-1012000), MATCHLINE_BOTTOM_OFFSET (-1140752), MATCHLINE_BOTTOM_PLANE (-1140754), MATCHLINE_TOP_OFFSET (-1140751), MATCHLINE_TOP_PLANE (-1140753), MATERIAL_AREA (-1140360), MATERIAL_ASPAINT (-1140359), MATERIAL_ASSET_PARAM_ASSET_LIB_ID (-1152337), MATERIAL_ASSET_PARAM_COMMON_SHARED_ASSET (-1152338), MATERIAL_ASSET_PARAM_EXTERNAL_MATERIAL_ID (-1152339), MATERIAL_ASSET_PARAM_SOURCE (-1152340), MATERIAL_ASSET_PARAM_SOURCE_URL (-1152341), MATERIAL_ID_PARAM (-1002107), MATERIAL_NAME (-1140355), MATERIAL_PARAM_COLOR (-1002550), MATERIAL_PARAM_GLOW (-1002552), MATERIAL_PARAM_SHININESS (-1002554), MATERIAL_PARAM_SMOOTHNESS (-1002553), MATERIAL_PARAM_TRANSPARENCY (-1002551), MATERIAL_VOLUME (-1140361), MEASURE_FROM_STRUCTURE (-1001120), MEP_PROFILE_TYPE_PARAM (-1140259), MODEL_CATEGORY_ID_PARAM (-1002109), MODEL_GRAPHICS_STYLE (-1005165), MODEL_GRAPHICS_STYLE_ANON_DRAFT (-1005172), MODEL_OR_SYMBOLIC (-1001818), MODEL_TEXT_SIZE (-1006336), MULLION_ANGLE (-1007363), MULLION_CORNER_TYPE (-1007353), MULLION_DEPTH (-1007356), MULLION_DEPTH1 (-1007357), MULLION_DEPTH2 (-1007358), MULLION_FAM_TYPE (-1007352), MULLION_OFFSET (-1007351), MULLION_POSITION (-1007362), MULLION_PROFILE (-1007361), MULTI_REFERENCE_ANNOTATION_DIMENSION_STYLE (-1007053), MULTI_REFERENCE_ANNOTATION_GROUP_TAG_HEADS (-1007052), MULTI_REFERENCE_ANNOTATION_REFERENCE_CATEGORY (-1007050), MULTI_REFERENCE_ANNOTATION_SHOW_DIMENSION_TEXT (-1007054), MULTI_REFERENCE_ANNOTATION_TAG_TYPE (-1007051), MULTISTORY_STAIRS_ACTUAL_TREAD_DEPTH (-1154634), MULTISTORY_STAIRS_REF_LEVEL (-1154630), MULTISTORY_STAIRS_RUN_BEGIN_WITH_RISER (-1154635), MULTISTORY_STAIRS_RUN_END_WITH_RISER (-1154636), NODE_CONNECTION_STATUS (-1001597), NUMBER_PARTITION_PARAM (-1154614), NUMBER_SYSTEM_DISPLAY_RULE (-1006643), NUMBER_SYSTEM_JUSTIFY (-1006641), NUMBER_SYSTEM_JUSTIFY_OFFSET (-1006637), NUMBER_SYSTEM_ORIENTATION (-1006639), NUMBER_SYSTEM_REFERENCE (-1006642), NUMBER_SYSTEM_REFERENCE_OFFSET (-1006638), NUMBER_SYSTEM_TAG_TYPE (-1006644), NUMBER_SYSTEM_TEXT_SIZE (-1006645), OBJECT_STYLE_MATERIAL_ID_PARAM (-1002113), OFFSETFACES_SHOW_SHAPE_HANDLES (-1001131), OMNICLASS_CODE (-1002502), OMNICLASS_DESCRIPTION (-1002503), OPTION_NAME (-1133602), OPTION_SET_ID (-1133603), OPTION_SET_NAME (-1133600), ORDINATE_DIM_SETTING (-1006468), ORIENT_BY_VIEW (-1012200), PADDING_LENGTH (-1013366), PANEL_SCHEDULE_NAME (-1140168), PART_MAKER_DIVISION_PROFILE_OFFSET (-1150624), PART_MAKER_SPLITTER_PROFILE (-1150603), PART_MAKER_SPLITTER_PROFILE_EDGE_MATCH (-1150622), PART_MAKER_SPLITTER_PROFILE_FLIP_ACROSS (-1150604), PART_MAKER_SPLITTER_PROFILE_FLIP_ALONG (-1150605), PARTMAKER_PARAM_DIVISION_GAP (-1150601), PATH_REIN_ADDL_OFFSET (-1018322), PATH_REIN_ALT_OFFSET (-1018321), PATH_REIN_ALTERNATING (-1018304), PATH_REIN_END_HOOK_ORIENT_1_SLAB (-1018317), PATH_REIN_END_HOOK_ORIENT_1_WALL (-1018319), PATH_REIN_END_HOOK_ORIENT_2_SLAB (-1018318), PATH_REIN_END_HOOK_ORIENT_2_WALL (-1018320), PATH_REIN_END_HOOK_TYPE_1 (-1018315), PATH_REIN_END_HOOK_TYPE_2 (-1018316), PATH_REIN_END_SPANHOOK_ALT (-1018356), PATH_REIN_END_SPANHOOK_PRIM (-1018355), PATH_REIN_FACE_SLAB (-1018300), PATH_REIN_FACE_WALL (-1018301), PATH_REIN_HOOK_ORIENT_1_SLAB (-1018311), PATH_REIN_HOOK_ORIENT_1_WALL (-1018313), PATH_REIN_HOOK_ORIENT_2_SLAB (-1018312), PATH_REIN_HOOK_ORIENT_2_WALL (-1018314), PATH_REIN_HOOK_TYPE_1 (-1018309), PATH_REIN_HOOK_TYPE_2 (-1018310), PATH_REIN_LENGTH_1 (-1018307), PATH_REIN_LENGTH_2 (-1018308), PATH_REIN_NUMBER_OF_BARS (-1018303), PATH_REIN_SHAPE_1 (-1018361), PATH_REIN_SHAPE_2 (-1018362), PATH_REIN_SPACING (-1018302), PATH_REIN_SPANHOOK_ALT (-1018351), PATH_REIN_SPANHOOK_PRIM (-1018350), PATH_REIN_SPANLENGTH_ALT_OFFSET (-1018360), PATH_REIN_SPANLENGTH_BARLENGTH_ALT (-1018359), PATH_REIN_SPANLENGTH_BARLENGTH_PRIM (-1018358), PATH_REIN_SPANLENGTH_BOTTOM_ALT (-1018353), PATH_REIN_SPANLENGTH_BOTTOM_PRIM (-1018352), PATH_REIN_SPANLENGTH_TOP_ALT (-1018357), PATH_REIN_SUMMARY (-1018354), PATH_REIN_TYPE_1 (-1018305), PATH_REIN_TYPE_2 (-1018306), PATTERN_INDENT_1_FOR_DIVISION_RULE (-1152347), PATTERN_INDENT_2_FOR_DIVISION_RULE (-1152348), PATTERN_MIRROR_FOR_DIVISION_RULE (-1152350), PHASE_CREATED (-1012100), PHASE_DEMOLISHED (-1012101), PHASE_NAME (-1012110), PHASE_SEQUENCE_NUMBER (-1012111), PHY_MATERIAL_PARAM_AVERAGE_MODULUS (-1152317), PHY_MATERIAL_PARAM_BEHAVIOR (-1140322), PHY_MATERIAL_PARAM_BENDING (-1140414), PHY_MATERIAL_PARAM_BENDING_REINFORCEMENT (-1140315), PHY_MATERIAL_PARAM_CLASS (-1150464), PHY_MATERIAL_PARAM_COMPRESSION_PARALLEL (-1140407), PHY_MATERIAL_PARAM_COMPRESSION_PERPENDICULAR (-1140408), PHY_MATERIAL_PARAM_CONCRETE_COMPRESSION (-1140314), PHY_MATERIAL_PARAM_DAMPING_RATIO (-1140313), PHY_MATERIAL_PARAM_EXP_COEFF (-1140415), PHY_MATERIAL_PARAM_EXP_COEFF_1 (-1152306), PHY_MATERIAL_PARAM_EXP_COEFF_2 (-1152307), PHY_MATERIAL_PARAM_EXP_COEFF1 (-1140310), PHY_MATERIAL_PARAM_EXP_COEFF2 (-1140311), PHY_MATERIAL_PARAM_EXP_COEFF3 (-1140312), PHY_MATERIAL_PARAM_FIVEPERCENT_MODULUS_OF_ELACTICITY (-1152318), PHY_MATERIAL_PARAM_GRADE (-1140417), PHY_MATERIAL_PARAM_LIGHT_WEIGHT (-1140323), PHY_MATERIAL_PARAM_MINIMUM_TENSILE_STRENGTH (-1140319), PHY_MATERIAL_PARAM_MINIMUM_YIELD_STRESS (-1140318), PHY_MATERIAL_PARAM_POISSON_MOD (-1140412), PHY_MATERIAL_PARAM_POISSON_MOD_12 (-1152303), PHY_MATERIAL_PARAM_POISSON_MOD_23 (-1152304), PHY_MATERIAL_PARAM_POISSON_MOD1 (-1140303), PHY_MATERIAL_PARAM_POISSON_MOD2 (-1140304), PHY_MATERIAL_PARAM_POISSON_MOD3 (-1140305), PHY_MATERIAL_PARAM_REDUCTION_FACTOR (-1140320), PHY_MATERIAL_PARAM_RESISTANCE_CALC_STRENGTH (-1140321), PHY_MATERIAL_PARAM_SHEAR_MOD (-1140413), PHY_MATERIAL_PARAM_SHEAR_MOD_12 (-1152305), PHY_MATERIAL_PARAM_SHEAR_MOD1 (-1140306), PHY_MATERIAL_PARAM_SHEAR_MOD2 (-1140307), PHY_MATERIAL_PARAM_SHEAR_MOD3 (-1140308), PHY_MATERIAL_PARAM_SHEAR_PARALLEL (-1140409), PHY_MATERIAL_PARAM_SHEAR_PERPENDICULAR (-1140410), PHY_MATERIAL_PARAM_SHEAR_REINFORCEMENT (-1140316), PHY_MATERIAL_PARAM_SHEAR_STRENGTH_REDUCTION (-1140317), PHY_MATERIAL_PARAM_SPECIES (-1140416), PHY_MATERIAL_PARAM_STRUCTURAL_DENSITY (-1152313), PHY_MATERIAL_PARAM_STRUCTURAL_SPECIFIC_HEAT (-1152312), PHY_MATERIAL_PARAM_STRUCTURAL_THERMAL_TREATED (-1152314), PHY_MATERIAL_PARAM_SUBCLASS (-1150465), PHY_MATERIAL_PARAM_TENSION_PARALLEL (-1152315), PHY_MATERIAL_PARAM_TENSION_PERPENDICULAR (-1152316), PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY (-1152308), PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_X (-1152309), PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_Y (-1152310), PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_Z (-1152311), PHY_MATERIAL_PARAM_TYPE (-1140400), PHY_MATERIAL_PARAM_UNIT_WEIGHT (-1140309), PHY_MATERIAL_PARAM_WOOD_CONSTRUCTION (-1152319), PHY_MATERIAL_PARAM_YOUNG_MOD (-1140401), PHY_MATERIAL_PARAM_YOUNG_MOD_1 (-1152301), PHY_MATERIAL_PARAM_YOUNG_MOD_2 (-1152302), PHY_MATERIAL_PARAM_YOUNG_MOD1 (-1140300), PHY_MATERIAL_PARAM_YOUNG_MOD2 (-1140301), PHY_MATERIAL_PARAM_YOUNG_MOD3 (-1140302), PHY_MATERIAL_PROPERTIES (-1150467), PIPING_CONNECTION_TYPE (-1115973), PIPING_GENDER_TYPE (-1115974), PLAN_REGION_VIEW_RANGE (-1013103), PLAN_VIEW_CUT_PLANE_HEIGHT (-1005155), PLAN_VIEW_LEVEL (-1005166), PLAN_VIEW_NORTH (-1005168), PLAN_VIEW_RANGE (-1005162), PLAN_VIEW_TOP_CLIP_HEIGHT (-1005159), PLAN_VIEW_VIEW_DIR (-1008209), PLUMBING_FIXTURES_CW_CONNECTION (-1010705), PLUMBING_FIXTURES_DRAIN (-1010702), PLUMBING_FIXTURES_HW_CONNECTION (-1010704), PLUMBING_FIXTURES_SUPPLY_FITTING (-1010700), PLUMBING_FIXTURES_SUPPLY_PIPE (-1010701), PLUMBING_FIXTURES_TRAP (-1010703), PLUMBING_FIXTURES_VENT_CONNECTION (-1010707), PLUMBING_FIXTURES_WASTE_CONNECTION (-1010706), POCHE_MAT_ID (-1008208), POINT_ADAPTIVE_CONSTRAINED (-1152332), POINT_ADAPTIVE_NUM_PARAM (-1152334), POINT_ADAPTIVE_ORIENTATION_TYPE (-1152331), POINT_ADAPTIVE_SHOW_NUMBER (-1152333), POINT_ADAPTIVE_TYPE_PARAM (-1150155), POINT_ELEMENT_ANGLE (-1150226), POINT_ELEMENT_CHORD_LENGTH (-1150225), POINT_ELEMENT_DRIVEN (-1150145), POINT_ELEMENT_DRIVING (-1150153), POINT_ELEMENT_HOSTED_ON_FACE_U_PARAM (-1150166), POINT_ELEMENT_HOSTED_ON_FACE_V_PARAM (-1150167), POINT_ELEMENT_HOSTED_PARAM (-1150146), POINT_ELEMENT_MEASURE_FROM (-1150227), POINT_ELEMENT_MEASUREMENT_TYPE (-1150220), POINT_ELEMENT_MIRRORED (-1150169), POINT_ELEMENT_NON_NORMALIZED_CURVE_PARAMATER (-1150221), POINT_ELEMENT_NORMALIZED_CURVE_PARAMATER (-1150222), POINT_ELEMENT_NORMALIZED_SEGMENT_LENGTH (-1150224), POINT_ELEMENT_OFFSET (-1150144), POINT_ELEMENT_ROTATION_ANGLE (-1150322), POINT_ELEMENT_SEGMENT_LENGTH (-1150223), POINT_ELEMENT_SHOW_NORMAL_PLANE_ONLY (-1150197), POINT_ELEMENT_SHOW_PLANES (-1150148), POINT_ELEMENT_ZFLIPPED (-1150168), POINT_ELEVATION (-1012400), POINT_FLEXIBLE_CONSTRAINED (-1150157), POINT_FLEXIBLE_NUM_PARAM (-1150209), POINT_FLEXIBLE_ORIENTATION_TYPE (-1150320), POINT_FLEXIBLE_SHOW_NUMBER (-1150158), POINT_NAME_PARAM (-1150156), POINT_VISIBILITY_PARAM (-1150149), POINTCLOUDINSTANCE_NAME (-1150600), POINTCLOUDTYPE_SCALE (-1150500), PRIMARY_OPTION_ID (-1133601), PROFILE_ANGLE (-1001817), PROFILE_FAM_TYPE (-1001816), PROFILE_FAM_TYPE_PLUS_NONE (-1001832), PROFILE_FLIPPED_HOR (-1001815), PROFILE_OFFSET_X (-1001813), PROFILE_OFFSET_Y (-1001814), PROFILE_PARAM_ALONG_PATH (-1001833), PROFILE1_ANGLE (-1001826), PROFILE1_FAM_TYPE (-1001825), PROFILE1_FLIPPED_HOR (-1001824), PROFILE1_OFFSET_X (-1001822), PROFILE1_OFFSET_Y (-1001823), PROFILE2_ANGLE (-1001831), PROFILE2_FAM_TYPE (-1001830), PROFILE2_FLIPPED_HOR (-1001829), PROFILE2_OFFSET_X (-1001827), PROFILE2_OFFSET_Y (-1001828), PROJECT_ADDRESS (-1006318), PROJECT_AUTHOR (-1019005), PROJECT_BUILDING_NAME (-1019006), PROJECT_BUILDING_TYPE (-1114168), PROJECT_ISSUE_DATE (-1006321), PROJECT_NAME (-1006317), PROJECT_NUMBER (-1006316), PROJECT_ORGANIZATION_DESCRIPTION (-1019007), PROJECT_ORGANIZATION_NAME (-1019008), PROJECT_POSTAL_CODE (-1114169), PROJECT_REVISION_ENUMERATION (-1011956), PROJECT_REVISION_REVISION_DATE (-1011953), PROJECT_REVISION_REVISION_DESCRIPTION (-1011952), PROJECT_REVISION_REVISION_ISSUED (-1011957), PROJECT_REVISION_REVISION_ISSUED_BY (-1011955), PROJECT_REVISION_REVISION_ISSUED_TO (-1011954), PROJECT_REVISION_REVISION_NUM (-1011951), PROJECT_REVISION_SEQUENCE_NUM (-1011950), PROJECT_STATUS (-1006320), PROJECTED_SURFACE_AREA (-1012610), PROPERTY_AREA (-1012600), PROPERTY_AREA_OPEN (-1012606), PROPERTY_AREA_UNITS (-1012612), PROPERTY_LENGTH_UNITS (-1012613), PROPERTY_SEGMENT_BEARING (-1012616), PROPERTY_SEGMENT_DISTANCE (-1012614), PROPERTY_SEGMENT_E_W (-1012617), PROPERTY_SEGMENT_L_R (-1012619), PROPERTY_SEGMENT_N_S (-1012615), PROPERTY_SEGMENT_RADIUS (-1012618), PROPERTY_SEGMENT_SUBCATEGORY_ID (-1012620), PROPERTY_SET_DESCRIPTION (-1150481), PROPERTY_SET_KEYWORDS (-1152342), PROPERTY_SET_MATERIAL_ASPECT (-1150480), PROPERTY_SET_NAME (-1150466), PROPERTY_SUBCATEGORY_ID (-1012607), RADIAL_ARRAY_ARC_RADIUS (-1004014), RADIUS_SYMBOL_LOCATION (-1006408), RADIUS_SYMBOL_TEXT (-1006997), RAILING_SYSTEM_HANDRAILS_HEIGHT_PARAM (-1150331), RAILING_SYSTEM_HANDRAILS_LATTERAL_OFFSET (-1150332), RAILING_SYSTEM_HANDRAILS_POSITION_PARAM (-1150330), RAILING_SYSTEM_HANDRAILS_TYPES_PARAM (-1150329), RAILING_SYSTEM_SECONDARY_HANDRAILS_HEIGHT_PARAM (-1150335), RAILING_SYSTEM_SECONDARY_HANDRAILS_LATTERAL_OFFSET (-1150336), RAILING_SYSTEM_SECONDARY_HANDRAILS_POSITION_PARAM (-1150334), RAILING_SYSTEM_SECONDARY_HANDRAILS_TYPES_PARAM (-1150333), RAILING_SYSTEM_TOP_RAIL_HEIGHT_PARAM (-1150328), RAILING_SYSTEM_TOP_RAIL_TYPES_PARAM (-1150327), RAMP_ATTR_LEFT_BALUSTER_ATTACH_PT (-1008306), RAMP_ATTR_MATERIAL (-1008308), RAMP_ATTR_MIN_INV_SLOPE (-1008301), RAMP_ATTR_RIGHT_BALUSTER_ATTACH_PT (-1008307), RAMP_ATTR_SHAPE (-1008305), RAMP_ATTR_TEXT_FONT (-1008309), RAMP_ATTR_TEXT_SIZE (-1008310), RAMP_ATTR_THICKNESS (-1008304), RAMP_MAX_RUN_LENGTH (-1008303), RASTER_HORIZONTAL_SCALE (-1007768), RASTER_MAINTAIN_ASPECT_RATIO (-1007752), RASTER_SHEETHEIGHT (-1007751), RASTER_SHEETWIDTH (-1007750), RASTER_SYMBOL_FILENAME (-1007763), RASTER_SYMBOL_HEIGHT (-1007766), RASTER_SYMBOL_PIXELHEIGHT (-1007761), RASTER_SYMBOL_PIXELWIDTH (-1007760), RASTER_SYMBOL_RESOLUTION (-1007764), RASTER_SYMBOL_VIEWNAME (-1007762), RASTER_SYMBOL_WIDTH (-1007765), RASTER_VERTICAL_SCALE (-1007767), RBS_ADDITIONAL_FLOW (-1114166), RBS_ADJUSTABLE_CONNECTOR (-1140223), RBS_BUILDING_CONSTRUCTIONCLASS (-1150160), RBS_BUILDING_USELOADCREDITS (-1150203), RBS_CABLETRAY_BENDRADIUS (-1140115), RBS_CABLETRAY_HEIGHT_PARAM (-1140121), RBS_CABLETRAY_RUNGHEIGHT (-1140114), RBS_CABLETRAY_RUNGSPACE (-1140112), RBS_CABLETRAY_RUNGWIDTH (-1140113), RBS_CABLETRAY_SHAPETYPE (-1140130), RBS_CABLETRAY_THICKNESS (-1140111), RBS_CABLETRAY_WIDTH_PARAM (-1140122), RBS_CABLETRAYCONDUIT_BENDORFITTING (-1140129), RBS_CABLETRAYCONDUIT_CONNECTORELEM_TYPE (-1133414), RBS_CABLETRAYCONDUIT_SYSTEM_TYPE (-1133413), RBS_CABLETRAYCONDUITRUN_LENGTH_PARAM (-1140132), RBS_CABLETRAYRUN_HEIGHT_PARAM (-1140133), RBS_CABLETRAYRUN_WIDTH_PARAM (-1140134), RBS_CALCULATED_SIZE (-1114240), RBS_COMPONENT_CLASSIFICATION_PARAM (-1150412), RBS_CONDUIT_BENDRADIUS (-1140116), RBS_CONDUIT_DIAMETER_PARAM (-1140123), RBS_CONDUIT_INNER_DIAM_PARAM (-1140126), RBS_CONDUIT_OUTER_DIAM_PARAM (-1140127), RBS_CONDUIT_TRADESIZE (-1140117), RBS_CONDUITRUN_DIAMETER_PARAM (-1140135), RBS_CONDUITRUN_INNER_DIAM_PARAM (-1140136), RBS_CONDUITRUN_OUTER_DIAM_PARAM (-1140137), RBS_CONNECTOR_DESCRIPTION (-1140000), RBS_CONNECTOR_ISPRIMARY (-1133412), RBS_CONNECTOR_OFFSET_OBSOLETE (-1114237), RBS_CONSTRUCTION_SET_PARAM (-1114249), RBS_CONSTRUCTION_TYPE_SHADINGFACTOR_PARAM (-1114295), RBS_CTC_BOTTOM_ELEVATION (-1140125), RBS_CTC_SERVICE_TYPE (-1140128), RBS_CTC_TOP_ELEVATION (-1140124), RBS_CURVE_DIAMETER_PARAM (-1114103), RBS_CURVE_HEIGHT_PARAM (-1114102), RBS_CURVE_HOR_OFFSET_PARAM (-1114105), RBS_CURVE_SLOPE (-1140224), RBS_CURVE_SURFACE_AREA (-1114120), RBS_CURVE_UTSLOPE (-1140254), RBS_CURVE_VERT_OFFSET_PARAM (-1114106), RBS_CURVE_WIDTH_PARAM (-1114101), RBS_CURVETYPE_DEFAULT_BEND_PARAM (-1114394), RBS_CURVETYPE_DEFAULT_CAP_PARAM (-1114148), RBS_CURVETYPE_DEFAULT_CROSS_PARAM (-1114112), RBS_CURVETYPE_DEFAULT_ELBOW_PARAM (-1114110), RBS_CURVETYPE_DEFAULT_ELBOWDOWN_PARAM (-1114388), RBS_CURVETYPE_DEFAULT_ELBOWUP_PARAM (-1114387), RBS_CURVETYPE_DEFAULT_HORIZONTAL_BEND_PARAM (-1114393), RBS_CURVETYPE_DEFAULT_MECHJOINT_PARAM (-1114145), RBS_CURVETYPE_DEFAULT_TAKEOFF_PARAM (-1114133), RBS_CURVETYPE_DEFAULT_TEE_PARAM (-1114111), RBS_CURVETYPE_DEFAULT_TEEDOWN_PARAM (-1114390), RBS_CURVETYPE_DEFAULT_TEEUP_PARAM (-1114389), RBS_CURVETYPE_DEFAULT_TRANSITION_PARAM (-1114113), RBS_CURVETYPE_DEFAULT_UNION_PARAM (-1114131), RBS_CURVETYPE_MAX_HEIGHT_PARAM (-1114119), RBS_CURVETYPE_MAX_WIDTH_PARAM (-1114165), RBS_CURVETYPE_MULTISHAPE_TRANSITION_OVALROUND_PARAM (-1114392), RBS_CURVETYPE_MULTISHAPE_TRANSITION_PARAM (-1114126), RBS_CURVETYPE_MULTISHAPE_TRANSITION_RECTOVAL_PARAM (-1114391), RBS_CURVETYPE_PREFERRED_BRANCH_PARAM (-1114134), RBS_CURVETYPE_ROUGHNESS_PARAM (-1114114), RBS_DISTRIBUTIONSYS_CONFIG_PARAM (-1140060), RBS_DISTRIBUTIONSYS_NUMWIRES_PARAM (-1140059), RBS_DISTRIBUTIONSYS_PHASE_PARAM (-1140061), RBS_DISTRIBUTIONSYS_VLG_PARAM (-1140062), RBS_DISTRIBUTIONSYS_VLL_PARAM (-1140063), RBS_DUCT_BOTTOM_ELEVATION (-1140240), RBS_DUCT_CALCULATED_SIZE (-1150426), RBS_DUCT_CONNECTOR_SYSTEM_CLASSIFICATION_PARAM (-1133408), RBS_DUCT_FITTING_LOSS_METHOD_PARAM (-1114136), RBS_DUCT_FITTING_LOSS_METHOD_SERVER_PARAM (-1114146), RBS_DUCT_FITTING_LOSS_METHOD_SETTINGS (-1114149), RBS_DUCT_FITTING_LOSS_TABLE_PARAM (-1114137), RBS_DUCT_FLOW_CONFIGURATION_PARAM (-1140221), RBS_DUCT_FLOW_DIRECTION_PARAM (-1140219), RBS_DUCT_FLOW_PARAM (-1013405), RBS_DUCT_PIPE_SYSTEM_ABBREVIATION_PARAM (-1150468), RBS_DUCT_PRESSURE_DROP (-1140282), RBS_DUCT_ROUTING_PREFERENCE_PARAM (-1140280), RBS_DUCT_SIZE_FORMATTED_PARAM (-1114143), RBS_DUCT_SLOPE (-1140255), RBS_DUCT_STATIC_PRESSURE (-1114142), RBS_DUCT_SYSTEM_CALCULATION_PARAM (-1140336), RBS_DUCT_SYSTEM_TYPE_PARAM (-1140333), RBS_DUCT_TOP_ELEVATION (-1140239), RBS_DUCT_TYPE_PARAM (-1114138), RBS_ELEC_AMBIENT_TEMPERATURE (-1140020), RBS_ELEC_APPARENT_CURRENT_PARAM (-1140045), RBS_ELEC_APPARENT_CURRENT_PHASEA_PARAM (-1140044), RBS_ELEC_APPARENT_CURRENT_PHASEB_PARAM (-1140043), RBS_ELEC_APPARENT_CURRENT_PHASEC_PARAM (-1140042), RBS_ELEC_APPARENT_LOAD (-1140004), RBS_ELEC_APPARENT_LOAD_PHASE1 (-1140005), RBS_ELEC_APPARENT_LOAD_PHASE2 (-1140006), RBS_ELEC_APPARENT_LOAD_PHASE3 (-1140007), RBS_ELEC_APPARENT_LOAD_PHASEA (-1140053), RBS_ELEC_APPARENT_LOAD_PHASEB (-1140054), RBS_ELEC_APPARENT_LOAD_PHASEC (-1140055), RBS_ELEC_BALANCED_LOAD (-1140003), RBS_ELEC_CALC_COEFFICIENT_UTILIZATION (-1140040), RBS_ELEC_CIRCUIT_FRAME_PARAM (-1140154), RBS_ELEC_CIRCUIT_LENGTH_PARAM (-1140039), RBS_ELEC_CIRCUIT_NAME (-1140089), RBS_ELEC_CIRCUIT_NAMING (-1140087), RBS_ELEC_CIRCUIT_NOTES_PARAM (-1140156), RBS_ELEC_CIRCUIT_NUMBER (-1140103), RBS_ELEC_CIRCUIT_NUMBER_OF_ELEMENTS_PARAM (-1140155), RBS_ELEC_CIRCUIT_PANEL_PARAM (-1140104), RBS_ELEC_CIRCUIT_PREFIX (-1140085), RBS_ELEC_CIRCUIT_PREFIX_SEPARATOR (-1140086), RBS_ELEC_CIRCUIT_RATING_PARAM (-1140038), RBS_ELEC_CIRCUIT_START_SLOT (-1140173), RBS_ELEC_CIRCUIT_TYPE (-1140018), RBS_ELEC_CIRCUIT_WIRE_NUM_GROUNDS_PARAM (-1140098), RBS_ELEC_CIRCUIT_WIRE_NUM_HOTS_PARAM (-1140100), RBS_ELEC_CIRCUIT_WIRE_NUM_NEUTRALS_PARAM (-1140099), RBS_ELEC_CIRCUIT_WIRE_NUM_RUNS_PARAM (-1140101), RBS_ELEC_CIRCUIT_WIRE_SIZE_PARAM (-1140037), RBS_ELEC_CIRCUIT_WIRE_TYPE_PARAM (-1140036), RBS_ELEC_DEMANDFACTOR_DEMANDLOAD_PARAM (-1140065), RBS_ELEC_DEMANDFACTOR_LOAD_PARAM (-1140066), RBS_ELEC_DEMANDFACTOR_LOADCLASSIFICATION_PARAM (-1140067), RBS_ELEC_ENCLOSURE (-1140083), RBS_ELEC_LOAD_CLASSIFICATION (-1140014), RBS_ELEC_LOADSUMMARY_CONNECTED_CURRENT_PARAM (-1140161), RBS_ELEC_LOADSUMMARY_CONNECTED_LOAD_PARAM (-1140158), RBS_ELEC_LOADSUMMARY_DEMAND_CURRENT_PARAM (-1140162), RBS_ELEC_LOADSUMMARY_DEMAND_FACTOR_PARAM (-1140159), RBS_ELEC_LOADSUMMARY_DEMAND_FACTOR_RULE_PARAM (-1140163), RBS_ELEC_LOADSUMMARY_DEMAND_LOAD_PARAM (-1140160), RBS_ELEC_LOADSUMMARY_LOADCLASSIFICATION_PARAM (-1140157), RBS_ELEC_MAINS (-1140082), RBS_ELEC_MAX_POLE_BREAKERS (-1140079), RBS_ELEC_MODIFICATIONS (-1140084), RBS_ELEC_MOUNTING (-1140081), RBS_ELEC_NUMBER_OF_POLES (-1140001), RBS_ELEC_PANEL_BUSSING_PARAM (-1140143), RBS_ELEC_PANEL_CONFIGURATION_PARAM (-1140170), RBS_ELEC_PANEL_CURRENT_PHASEA_PARAM (-1140164), RBS_ELEC_PANEL_CURRENT_PHASEB_PARAM (-1140165), RBS_ELEC_PANEL_CURRENT_PHASEC_PARAM (-1140166), RBS_ELEC_PANEL_FEED_PARAM (-1140138), RBS_ELEC_PANEL_GROUND_BUS_PARAM (-1140144), RBS_ELEC_PANEL_LOCATION_PARAM (-1140169), RBS_ELEC_PANEL_MAINSTYPE_PARAM (-1140139), RBS_ELEC_PANEL_MCB_RATING_PARAM (-1140140), RBS_ELEC_PANEL_NAME (-1140078), RBS_ELEC_PANEL_NEUTRAL_BUS_PARAM (-1140145), RBS_ELEC_PANEL_NEUTRAL_RATING_PARAM (-1140146), RBS_ELEC_PANEL_NUMPHASES_PARAM (-1140147), RBS_ELEC_PANEL_NUMWIRES_PARAM (-1140148), RBS_ELEC_PANEL_SCHEDULE_FOOTER_NOTES_PARAM (-1140150), RBS_ELEC_PANEL_SCHEDULE_HEADER_NOTES_PARAM (-1140149), RBS_ELEC_PANEL_SUBFEED_LUGS_PARAM (-1140142), RBS_ELEC_PANEL_SUPPLY_FROM_PARAM (-1140141), RBS_ELEC_PANEL_TOTAL_CONNECTED_CURRENT_PARAM (-1140152), RBS_ELEC_PANEL_TOTAL_DEMAND_CURRENT_PARAM (-1140153), RBS_ELEC_PANEL_TOTAL_DEMAND_FACTOR_PARAM (-1140151), RBS_ELEC_PANEL_TOTALESTLOAD_HVAC_PARAM (-1140077), RBS_ELEC_PANEL_TOTALESTLOAD_LIGHT_PARAM (-1140075), RBS_ELEC_PANEL_TOTALESTLOAD_OTHER_PARAM (-1140071), RBS_ELEC_PANEL_TOTALESTLOAD_PARAM (-1140069), RBS_ELEC_PANEL_TOTALESTLOAD_POWER_PARAM (-1140073), RBS_ELEC_PANEL_TOTALLOAD_HVAC_PARAM (-1140076), RBS_ELEC_PANEL_TOTALLOAD_LIGHT_PARAM (-1140074), RBS_ELEC_PANEL_TOTALLOAD_OTHER_PARAM (-1140070), RBS_ELEC_PANEL_TOTALLOAD_PARAM (-1140068), RBS_ELEC_PANEL_TOTALLOAD_POWER_PARAM (-1140072), RBS_ELEC_POWER_FACTOR (-1140008), RBS_ELEC_POWER_FACTOR_STATE (-1140009), RBS_ELEC_ROOM_AVERAGE_ILLUMINATION (-1140033), RBS_ELEC_ROOM_CAVITY_RATIO (-1140035), RBS_ELEC_ROOM_LIGHTING_CALC_LUMINAIREPLANE (-1144331), RBS_ELEC_ROOM_LIGHTING_CALC_WORKPLANE (-1140029), RBS_ELEC_ROOM_REFLECTIVITY_CEILING (-1140030), RBS_ELEC_ROOM_REFLECTIVITY_FLOOR (-1140032), RBS_ELEC_ROOM_REFLECTIVITY_WALLS (-1140031), RBS_ELEC_SHORT_CIRCUIT_RATING (-1140080), RBS_ELEC_SWITCH_ID_PARAM (-1140110), RBS_ELEC_TRUE_CURRENT_PARAM (-1140049), RBS_ELEC_TRUE_CURRENT_PHASEA_PARAM (-1140048), RBS_ELEC_TRUE_CURRENT_PHASEB_PARAM (-1140047), RBS_ELEC_TRUE_CURRENT_PHASEC_PARAM (-1140046), RBS_ELEC_TRUE_LOAD (-1140010), RBS_ELEC_TRUE_LOAD_PHASE1 (-1140011), RBS_ELEC_TRUE_LOAD_PHASE2 (-1140012), RBS_ELEC_TRUE_LOAD_PHASE3 (-1140013), RBS_ELEC_TRUE_LOAD_PHASEA (-1140050), RBS_ELEC_TRUE_LOAD_PHASEB (-1140051), RBS_ELEC_TRUE_LOAD_PHASEC (-1140052), RBS_ELEC_VOLTAGE (-1140002), RBS_ELEC_VOLTAGE_DROP_PARAM (-1140041), RBS_ELEC_WIRE_CIRCUITS (-1140102), RBS_ELEC_WIRE_ELEVATION (-1140096), RBS_ELEC_WIRE_GROUND_ADJUSTMENT (-1140092), RBS_ELEC_WIRE_HOT_ADJUSTMENT (-1140094), RBS_ELEC_WIRE_NEUTRAL_ADJUSTMENT (-1140093), RBS_ELEC_WIRE_SHARE_GROUND (-1140090), RBS_ELEC_WIRE_SHARE_NEUTRAL (-1140091), RBS_ELEC_WIRE_TICKMARK_STATE (-1140106), RBS_ELEC_WIRE_TYPE (-1140097), RBS_ELECTRICAL_DATA (-1114241), RBS_END_LEVEL_PARAM (-1114001), RBS_END_OFFSET_PARAM (-1114003), RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_GRID_CELL_SIZE (-1150233), RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SPACE_INDENTIFICATION_RESOLUTION (-1152376), RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SURFACE_INDENTIFICATION_RESOLUTION (-1152377), RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_DETERMINATION_PARAM (-1150232), RBS_ENERGY_ANALYSIS_EXPORT_CATEGORY_PARAM (-1114386), RBS_ENERGY_ANALYSIS_EXPORT_COMPLEXITY_PARAM (-1114385), RBS_ENERGY_ANALYSIS_EXPORT_GBXML_DEFAULTS_PARAM (-1114383), RBS_ENERGY_ANALYSIS_GROUND_PLANE_PARAM (-1114293), RBS_ENERGY_ANALYSIS_INCLUDE_THERMAL_PROPERTIES (-1150210), RBS_ENERGY_ANALYSIS_MODE (-1152378), RBS_ENERGY_ANALYSIS_PROJECT_PHASE_PARAM (-1114324), RBS_ENERGY_ANALYSIS_SLIVER_SPACE_TOLERANCE (-1114333), RBS_ENERGY_ANALYSIS_SURFACE_ADJACENT_SPACE_ID1 (-1114285), RBS_ENERGY_ANALYSIS_SURFACE_ADJACENT_SPACE_ID2 (-1114286), RBS_ENERGY_ANALYSIS_SURFACE_AZIMUTH (-1114289), RBS_ENERGY_ANALYSIS_SURFACE_CADOBJECTID (-1114287), RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_X (-1114290), RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_Y (-1114291), RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_Z (-1114292), RBS_ENERGY_ANALYSIS_SURFACE_TILT (-1114288), RBS_ENERGY_ANALYSIS_VIEW_BUILDING_SHELL_MODE (-1114361), RBS_ENERGY_ANALYSIS_VIEW_COORD_AXIS_MODE (-1114368), RBS_ENERGY_ANALYSIS_VIEW_INNER_SHELL_MODE (-1114363), RBS_ENERGY_ANALYSIS_VIEW_OUTER_SHELL_MODE (-1114362), RBS_ENERGY_ANALYSIS_VIEW_RBE_MODE (-1114367), RBS_ENERGY_ANALYSIS_VIEW_SHADING_SURFACES_MODE (-1114366), RBS_ENERGY_ANALYSIS_VIEW_SURFACES_MODE (-1114364), RBS_ENERGY_ANALYSIS_VIEW_TRANSPARENT_MODE (-1114365), RBS_ENERGY_ANALYSIS_VIEW_UPDATE_SURFACES (-1114299), RBS_EQ_DIAMETER_PARAM (-1114127), RBS_FAMILY_CONTENT_ANNOTATION_DISPLAY (-1114242), RBS_FAMILY_CONTENT_DISTRIBUTION_SYSTEM (-1140064), RBS_FAMILY_CONTENT_OFFSET_HEIGHT (-1114212), RBS_FAMILY_CONTENT_OFFSET_WIDTH (-1114211), RBS_FAMILY_CONTENT_SECONDARY_DISTRIBSYS (-1140088), RBS_FAMILY_CONTENT_TAKEOFF_FIXED_LENGTH (-1114215), RBS_FAMILY_CONTENT_TAKEOFF_LENGTH (-1114213), RBS_FAMILY_CONTENT_TAKEOFF_PROJLENGTH (-1114214), RBS_FLEX_DUCT_TYPE_PARAM (-1114139), RBS_FLEX_PATTERN_PARAM (-1114005), RBS_FLEX_PIPE_TYPE_PARAM (-1114141), RBS_FLEXDUCT_ROUNDTYPE_PARAM (-1114135), RBS_FLOW_FACTOR_PARAM (-1140222), RBS_FLOW_OBSOLETE (-1114104), RBS_FP_SPRINKLER_COVERAGE_PARAM (-1140261), RBS_FP_SPRINKLER_K_FACTOR_PARAM (-1140264), RBS_FP_SPRINKLER_ORIFICE_PARAM (-1140262), RBS_FP_SPRINKLER_ORIFICE_SIZE_PARAM (-1140266), RBS_FP_SPRINKLER_PRESSURE_CLASS_PARAM (-1140263), RBS_FP_SPRINKLER_RESPONSE_PARAM (-1140260), RBS_FP_SPRINKLER_TEMPERATURE_RATING_PARAM (-1140265), RBS_FRICTION (-1114116), RBS_GBXML_OPENING_TYPE (-1114400), RBS_GBXML_SURFACE_AREA (-1114247), RBS_GBXML_SURFACE_NAME (-1114245), RBS_GBXML_SURFACE_TYPE (-1114246), RBS_HVACLOAD_DOOR_AREA_PARAM (-1114372), RBS_HVACLOAD_DOOR_COOLING_LOAD_PARAM (-1114379), RBS_HVACLOAD_FLOOR_AREA_PARAM (-1114373), RBS_HVACLOAD_PARTITION_AREA_PARAM (-1114374), RBS_HVACLOAD_PARTITION_COOLING_LOAD_PARAM (-1114380), RBS_HVACLOAD_PLENUM_COOLING_LOAD_PARAM (-1114382), RBS_HVACLOAD_ROOF_AREA_PARAM (-1114369), RBS_HVACLOAD_ROOF_COOLING_LOAD_PARAM (-1114376), RBS_HVACLOAD_SKYLIGHT_AREA_PARAM (-1114375), RBS_HVACLOAD_SKYLIGHT_COOLING_LOAD_PARAM (-1114381), RBS_HVACLOAD_WALL_AREA_PARAM (-1114370), RBS_HVACLOAD_WALL_COOLING_LOAD_PARAM (-1114377), RBS_HVACLOAD_WINDOW_AREA_PARAM (-1114371), RBS_HVACLOAD_WINDOW_COOLING_LOAD_PARAM (-1114378), RBS_HYDRAULIC_DIAMETER_PARAM (-1114129), RBS_INSULATION_LINING_VOLUME (-1150425), RBS_INSULATION_THICKNESS (-1114117), RBS_INSULATION_THICKNESS_FOR_DUCT (-1114358), RBS_INSULATION_THICKNESS_FOR_PIPE (-1114359), RBS_IS_CUSTOM_FITTING (-1114238), RBS_LINING_THICKNESS (-1114118), RBS_LINING_THICKNESS_FOR_DUCT (-1114360), RBS_LOAD_SUB_CLASSIFICATION_MOTOR (-1140131), RBS_LOOKUP_TABLE_NAME (-1114236), RBS_LOSS_COEFFICIENT (-1114124), RBS_MAX_FLOW (-1114123), RBS_MIN_FLOW (-1114122), RBS_OFFSET_PARAM (-1114132), RBS_PANEL_SCHEDULE_SHEET_APPEARANCE_INST_PARAM (-1007808), RBS_PANEL_SCHEDULE_SHEET_APPEARANCE_PARAM (-1007807), RBS_PARALLELCONDUITS_HORIZONTAL_NUMBER (-1140268), RBS_PARALLELCONDUITS_HORIZONTAL_OFFSET_VALUE (-1140270), RBS_PARALLELCONDUITS_VERTICAL_NUMBER (-1140269), RBS_PARALLELCONDUITS_VERTICAL_OFFSET_VALUE (-1140271), RBS_PARALLELPIPES_HORIZONTAL_NUMBER (-1140272), RBS_PARALLELPIPES_HORIZONTAL_OFFSET_VALUE (-1140274), RBS_PARALLELPIPES_VERTICAL_NUMBER (-1140273), RBS_PARALLELPIPES_VERTICAL_OFFSET_VALUE (-1140275), RBS_PART_TYPE (-1115958), RBS_PIPE_ADDITIONAL_FLOW_PARAM (-1140226), RBS_PIPE_CALCULATED_SIZE (-1150427), RBS_PIPE_CLASS_PARAM (-1140200), RBS_PIPE_CONNECTIONTYPE_PARAM (-1140201), RBS_PIPE_CONNECTOR_SYSTEM_CLASSIFICATION_PARAM (-1133410), RBS_PIPE_CWFU_PARAM (-1140250), RBS_PIPE_DIAMETER_PARAM (-1140225), RBS_PIPE_FITTING_LOSS_KFACTOR_PARAM (-1140228), RBS_PIPE_FITTING_LOSS_METHOD_PARAM (-1140230), RBS_PIPE_FITTING_LOSS_METHOD_SERVER_PARAM (-1114147), RBS_PIPE_FITTING_LOSS_METHOD_SETTINGS (-1114150), RBS_PIPE_FITTING_LOSS_TABLE_PARAM (-1140229), RBS_PIPE_FIXTURE_UNITS_PARAM (-1140246), RBS_PIPE_FLOW_CONFIGURATION_PARAM (-1140249), RBS_PIPE_FLOW_DIRECTION_PARAM (-1140248), RBS_PIPE_FLOW_PARAM (-1140213), RBS_PIPE_FLOW_STATE_PARAM (-1140209), RBS_PIPE_FLUID_DENSITY_PARAM (-1140214), RBS_PIPE_FLUID_TEMPERATURE_PARAM (-1140217), RBS_PIPE_FLUID_TYPE_PARAM (-1140218), RBS_PIPE_FLUID_VISCOSITY_PARAM (-1140215), RBS_PIPE_FRICTION_FACTOR_PARAM (-1140208), RBS_PIPE_FRICTION_PARAM (-1140206), RBS_PIPE_HWFU_PARAM (-1140251), RBS_PIPE_INNER_DIAM_PARAM (-1140212), RBS_PIPE_INSULATION_THICKNESS (-1140241), RBS_PIPE_INVERT_ELEVATION (-1140237), RBS_PIPE_JOINTTYPE_PARAM (-1140278), RBS_PIPE_MATERIAL_PARAM (-1140202), RBS_PIPE_OUTER_DIAMETER (-1140238), RBS_PIPE_PRESSUREDROP_PARAM (-1140205), RBS_PIPE_RELATIVE_ROUGHNESS_PARAM (-1140210), RBS_PIPE_REYNOLDS_NUMBER_PARAM (-1140211), RBS_PIPE_ROUGHNESS_PARAM (-1140204), RBS_PIPE_SEGMENT_PARAM (-1140277), RBS_PIPE_SIZE_FORMATTED_PARAM (-1114144), RBS_PIPE_SIZE_MAXIMUM (-1140284), RBS_PIPE_SIZE_MINIMUM (-1140283), RBS_PIPE_SLOPE (-1140256), RBS_PIPE_SLOPE_DEF_PARAM (-1140330), RBS_PIPE_STATIC_PRESSURE (-1140242), RBS_PIPE_SYSTEM_CALCULATION_PARAM (-1140335), RBS_PIPE_SYSTEM_FIXTURE_UNIT_PARAM (-1140257), RBS_PIPE_TYPE_FITTING_LOSS_KFACTOR_PARAM (-1140232), RBS_PIPE_TYPE_FITTING_LOSS_METHOD_PARAM (-1140234), RBS_PIPE_TYPE_FITTING_LOSS_TABLE_PARAM (-1140233), RBS_PIPE_TYPE_PARAM (-1114140), RBS_PIPE_TYPE_VALVE_LOSS_CVFACTOR_PARAM (-1140231), RBS_PIPE_VALVE_LOSS_CVFACTOR_PARAM (-1140227), RBS_PIPE_VELOCITY_PARAM (-1140207), RBS_PIPE_VOLUME_PARAM (-1140253), RBS_PIPE_WFU_PARAM (-1140252), RBS_PIPING_SYSTEM_TYPE_PARAM (-1140334), RBS_PRESSURE_DROP (-1114108), RBS_PROJECT_CONSTRUCTION_TYPE_SHADINGFACTOR_PARAM (-1114296), RBS_PROJECT_LOCATION_PARAM (-1114282), RBS_PROJECT_REPORTTYPE_PARAM (-1150161), RBS_REFERENCE_FREESIZE (-1150435), RBS_REFERENCE_INSULATION_THICKNESS (-1150431), RBS_REFERENCE_INSULATION_TYPE (-1150430), RBS_REFERENCE_LINING_THICKNESS (-1150433), RBS_REFERENCE_LINING_TYPE (-1150432), RBS_REFERENCE_OVERALLSIZE (-1150434), RBS_REYNOLDSNUMBER_PARAM (-1114128), RBS_ROOM_COEFFICIENT_UTILIZATION (-1114216), RBS_ROUTING_PREFERENCE_PARAM (-1140276), RBS_SECTION (-1114125), RBS_SEGMENT_DESCRIPTION_PARAM (-1140279), RBS_SERVICE_TYPE_PARAM (-1114248), RBS_SHOW_PROFILE_TYPE (-1140258), RBS_SIZE_LOCK (-1114167), RBS_START_LEVEL_PARAM (-1114000), RBS_START_OFFSET_PARAM (-1114002), RBS_SYSTEM_ABBREVIATION_PARAM (-1140332), RBS_SYSTEM_BASE_ELEMENT_PARAM (-1140326), RBS_SYSTEM_CLASSIFICATION_PARAM (-1140325), RBS_SYSTEM_FLOW_CONVERSION_METHOD_PARAM (-1140328), RBS_SYSTEM_NAME_PARAM (-1140324), RBS_SYSTEM_NUM_ELEMENTS_PARAM (-1140327), RBS_SYSTEM_OVERRIDE_GRAPHICS_PARAM (-1140331), RBS_SYSTEM_RISEDROP_1LINEDROPSYMBOL_PARAM (-1150408), RBS_SYSTEM_RISEDROP_1LINERISESYMBOL_PARAM (-1150407), RBS_SYSTEM_RISEDROP_1LINETEEDOWNSYMBOL_PARAM (-1150405), RBS_SYSTEM_RISEDROP_1LINETEEUPSYMBOL_PARAM (-1150406), RBS_SYSTEM_RISEDROP_2LINEDROPSYMBOL_PARAM (-1150410), RBS_SYSTEM_RISEDROP_2LINERISESYMBOL_PARAM (-1150409), RBS_SYSTEM_RISEDROP_PARAM (-1150411), RBS_VELOCITY (-1114107), RBS_VELOCITY_PRESSURE (-1114121), RBS_VOLTAGETYPE_MAXVOLTAGE_PARAM (-1140056), RBS_VOLTAGETYPE_MINVOLTAGE_PARAM (-1140057), RBS_VOLTAGETYPE_VOLTAGE_PARAM (-1140058), RBS_WIRE_CIRCUIT_DESCRIPTION (-1140109), RBS_WIRE_CIRCUIT_LOAD_NAME (-1140108), RBS_WIRE_CONDUIT_TYPE_PARAM (-1140021), RBS_WIRE_INSULATION_PARAM (-1140026), RBS_WIRE_MATERIAL_PARAM (-1140028), RBS_WIRE_MAX_CONDUCTOR_SIZE_PARAM (-1140025), RBS_WIRE_NEUTRAL_INCLUDED_IN_BALANCED_LOAD_PARAM (-1140023), RBS_WIRE_NEUTRAL_MODE_PARAM (-1140022), RBS_WIRE_NEUTRAL_MULTIPLIER_PARAM (-1140024), RBS_WIRE_NUM_CONDUCTORS_PARAM (-1140107), RBS_WIRE_TEMPERATURE_RATING_PARAM (-1140027), REBAR_BAR_ALLOWED_BAR_TYPES (-1017021), REBAR_BAR_DEFORMATION_TYPE (-1018274), REBAR_BAR_DIAMETER (-1017000), REBAR_BAR_HOOK_LENGTHS (-1017018), REBAR_BAR_MAXIMUM_BEND_RADIUS (-1017020), REBAR_BAR_STIRRUP_BEND_DIAMETER (-1017019), REBAR_BAR_STYLE (-1017002), REBAR_CONTAINER_BAR_TYPE (-1018505), REBAR_DISTRIBUTION_TYPE (-1017057), REBAR_ELEM_BAR_SPACING (-1017013), REBAR_ELEM_ENDTREATMENT_END (-1154656), REBAR_ELEM_ENDTREATMENT_START (-1154655), REBAR_ELEM_HOOK_END_ORIENT (-1017009), REBAR_ELEM_HOOK_END_TYPE (-1017008), REBAR_ELEM_HOOK_START_ORIENT (-1017007), REBAR_ELEM_HOOK_START_TYPE (-1017006), REBAR_ELEM_HOOK_STYLE (-1017026), REBAR_ELEM_HOST_MARK (-1154619), REBAR_ELEM_LAYOUT_RULE (-1017011), REBAR_ELEM_LENGTH (-1017016), REBAR_ELEM_QUANTITY_OF_BARS (-1017012), REBAR_ELEM_SCHEDULE_MARK (-1017032), REBAR_ELEM_TOTAL_LENGTH (-1017005), REBAR_ELEMENT_ROUNDING (-1017027), REBAR_ELEMENT_VISIBILITY (-1017014), REBAR_HOOK_ANGLE (-1017003), REBAR_HOOK_LINE_LEN_FACTOR (-1017004), REBAR_HOOK_STYLE (-1017017), REBAR_HOST_CATEGORY (-1017055), REBAR_INCLUDE_FIRST_BAR (-1017039), REBAR_INCLUDE_LAST_BAR (-1017040), REBAR_INSTANCE_BAR_DIAMETER (-1017037), REBAR_INSTANCE_BEND_DIAMETER (-1017038), REBAR_INSTANCE_STIRRUP_TIE_ATTACHMENT (-1017047), REBAR_INTERNAL_MULTIPLANAR (-1017049), REBAR_INTERNAL_MULTIPLANAR_DUPLICATE (-1017050), REBAR_INTERNAL_MULTIPLANAR_END_CONNECTOR (-1017052), REBAR_INTERNAL_MULTIPLANAR_START_CONNECTOR (-1017051), REBAR_MAX_LENGTH (-1017063), REBAR_MAXIM_SUFFIX (-1017062), REBAR_MIN_LENGTH (-1017064), REBAR_MINIM_SUFFIX (-1017061), REBAR_NUMBER (-1154616), REBAR_NUMBER_SUFFIX (-1017060), REBAR_QUANITY_BY_DISTRIB (-1017065), REBAR_SHAPE (-1017015), REBAR_SHAPE_ALLOWED_BAR_TYPES (-1017021), REBAR_SHAPE_END_HOOK_LENGTH (-1017035), REBAR_SHAPE_END_HOOK_OFFSET (-1017036), REBAR_SHAPE_ENDTREATMENT_END_TYPE (-1154658), REBAR_SHAPE_ENDTREATMENT_START_TYPE (-1154657), REBAR_SHAPE_HOOK_END_TYPE (-1017024), REBAR_SHAPE_HOOK_START_TYPE (-1017023), REBAR_SHAPE_HOOK_STYLE (-1017022), REBAR_SHAPE_IMAGE (-1154618), REBAR_SHAPE_OUT_OF_PLANE_BEND_DIAMETER (-1017048), REBAR_SHAPE_PARAM_END_HOOK_TAN_LEN (-1017054), REBAR_SHAPE_PARAM_START_HOOK_TAN_LEN (-1017053), REBAR_SHAPE_SPIRAL_BASE_FINISHING_TURNS (-1017045), REBAR_SHAPE_SPIRAL_HEIGHT (-1017043), REBAR_SHAPE_SPIRAL_PITCH (-1017042), REBAR_SHAPE_SPIRAL_TOP_FINISHING_TURNS (-1017044), REBAR_SHAPE_START_HOOK_LENGTH (-1017033), REBAR_SHAPE_START_HOOK_OFFSET (-1017034), REBAR_SHAPE_STIRRUP_TIE_ATTACHMENT (-1017046), REBAR_STANDARD_BEND_DIAMETER (-1017010), REBAR_STANDARD_HOOK_BEND_DIAMETER (-1017041), REBAR_SYSTEM_ACTIVE_BACK_DIR_1 (-1018204), REBAR_SYSTEM_ACTIVE_BACK_DIR_2 (-1018205), REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_1 (-1018103), REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_1_GENERIC (-1018252), REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_2 (-1018104), REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_2_GENERIC (-1018253), REBAR_SYSTEM_ACTIVE_FRONT_DIR_1 (-1018200), REBAR_SYSTEM_ACTIVE_FRONT_DIR_2 (-1018203), REBAR_SYSTEM_ACTIVE_TOP_DIR_1 (-1018100), REBAR_SYSTEM_ACTIVE_TOP_DIR_1_GENERIC (-1018250), REBAR_SYSTEM_ACTIVE_TOP_DIR_2 (-1018102), REBAR_SYSTEM_ACTIVE_TOP_DIR_2_GENERIC (-1018251), REBAR_SYSTEM_ADDL_BOTTOM_OFFSET (-1018025), REBAR_SYSTEM_ADDL_EXTERIOR_OFFSET (-1018026), REBAR_SYSTEM_ADDL_INTERIOR_OFFSET (-1018027), REBAR_SYSTEM_ADDL_TOP_OFFSET (-1018024), REBAR_SYSTEM_BAR_TYPE_BACK_DIR_1 (-1018208), REBAR_SYSTEM_BAR_TYPE_BACK_DIR_2 (-1018209), REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_1 (-1018107), REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_1_GENERIC (-1018256), REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_2 (-1018108), REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_2_GENERIC (-1018257), REBAR_SYSTEM_BAR_TYPE_FRONT_DIR_1 (-1018206), REBAR_SYSTEM_BAR_TYPE_FRONT_DIR_2 (-1018207), REBAR_SYSTEM_BAR_TYPE_TOP_DIR_1 (-1018105), REBAR_SYSTEM_BAR_TYPE_TOP_DIR_1_GENERIC (-1018254), REBAR_SYSTEM_BAR_TYPE_TOP_DIR_2 (-1018106), REBAR_SYSTEM_BAR_TYPE_TOP_DIR_2_GENERIC (-1018255), REBAR_SYSTEM_BOTTOM_MAJOR_MATCHES_BOTTOM_MINOR (-1018021), REBAR_SYSTEM_COVER_BOTTOM (-1018007), REBAR_SYSTEM_COVER_SIDE (-1018000), REBAR_SYSTEM_COVER_TOP (-1018006), REBAR_SYSTEM_HOOK_ORIENT_BACK_DIR_1 (-1018212), REBAR_SYSTEM_HOOK_ORIENT_BACK_DIR_2 (-1018213), REBAR_SYSTEM_HOOK_ORIENT_BOTTOM_DIR_1 (-1018111), REBAR_SYSTEM_HOOK_ORIENT_BOTTOM_DIR_2 (-1018112), REBAR_SYSTEM_HOOK_ORIENT_FRONT_DIR_1 (-1018210), REBAR_SYSTEM_HOOK_ORIENT_FRONT_DIR_2 (-1018211), REBAR_SYSTEM_HOOK_ORIENT_TOP_DIR_1 (-1018109), REBAR_SYSTEM_HOOK_ORIENT_TOP_DIR_2 (-1018110), REBAR_SYSTEM_HOOK_TYPE_BACK_DIR_1 (-1018216), REBAR_SYSTEM_HOOK_TYPE_BACK_DIR_2 (-1018217), REBAR_SYSTEM_HOOK_TYPE_BOTTOM_DIR_1 (-1018115), REBAR_SYSTEM_HOOK_TYPE_BOTTOM_DIR_2 (-1018116), REBAR_SYSTEM_HOOK_TYPE_FRONT_DIR_1 (-1018214), REBAR_SYSTEM_HOOK_TYPE_FRONT_DIR_2 (-1018215), REBAR_SYSTEM_HOOK_TYPE_TOP_DIR_1 (-1018113), REBAR_SYSTEM_HOOK_TYPE_TOP_DIR_2 (-1018114), REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_1_NO_SPACING (-1018013), REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_1_WITH_SPACING (-1018012), REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_2_NO_SPACING (-1018015), REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_2_WITH_SPACING (-1018014), REBAR_SYSTEM_LAYER_SUMMARY_DIR_1_NO_SPACING (-1018017), REBAR_SYSTEM_LAYER_SUMMARY_DIR_1_WITH_SPACING (-1018016), REBAR_SYSTEM_LAYER_SUMMARY_DIR_2_NO_SPACING (-1018019), REBAR_SYSTEM_LAYER_SUMMARY_DIR_2_WITH_SPACING (-1018018), REBAR_SYSTEM_LAYER_SUMMARY_NO_SPACING (-1018003), REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_1_NO_SPACING (-1018009), REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_1_WITH_SPACING (-1018008), REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_2_NO_SPACING (-1018011), REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_2_WITH_SPACING (-1018010), REBAR_SYSTEM_LAYER_SUMMARY_WITH_SPACING (-1018002), REBAR_SYSTEM_LAYOUT_RULE (-1018001), REBAR_SYSTEM_NUMBER_OF_LINES_BACK_DIR_1 (-1018220), REBAR_SYSTEM_NUMBER_OF_LINES_BACK_DIR_2 (-1018221), REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_1 (-1018119), REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_1_GENERIC (-1018268), REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_2 (-1018120), REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_2_GENERIC (-1018269), REBAR_SYSTEM_NUMBER_OF_LINES_FRONT_DIR_1 (-1018218), REBAR_SYSTEM_NUMBER_OF_LINES_FRONT_DIR_2 (-1018219), REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_1 (-1018117), REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_1_GENERIC (-1018266), REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_2 (-1018118), REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_2_GENERIC (-1018267), REBAR_SYSTEM_OVERRIDE (-1018005), REBAR_SYSTEM_SPACING_BACK_DIR_1 (-1018224), REBAR_SYSTEM_SPACING_BACK_DIR_2 (-1018225), REBAR_SYSTEM_SPACING_BOTTOM_DIR_1 (-1018123), REBAR_SYSTEM_SPACING_BOTTOM_DIR_1_GENERIC (-1018272), REBAR_SYSTEM_SPACING_BOTTOM_DIR_2 (-1018124), REBAR_SYSTEM_SPACING_BOTTOM_DIR_2_GENERIC (-1018273), REBAR_SYSTEM_SPACING_FRONT_DIR_1 (-1018222), REBAR_SYSTEM_SPACING_FRONT_DIR_2 (-1018223), REBAR_SYSTEM_SPACING_TOP_DIR_1 (-1018121), REBAR_SYSTEM_SPACING_TOP_DIR_1_GENERIC (-1018270), REBAR_SYSTEM_SPACING_TOP_DIR_2 (-1018122), REBAR_SYSTEM_SPACING_TOP_DIR_2_GENERIC (-1018271), REBAR_SYSTEM_SPANACTIVE_DIR_1 (-1018050), REBAR_SYSTEM_SPANACTIVE_DIR_2 (-1018051), REBAR_SYSTEM_SPANHOOK_BOTTOM_DIR_2 (-1018054), REBAR_SYSTEM_SPANHOOK_LEFT_DIR_1 (-1018052), REBAR_SYSTEM_SPANHOOK_RIGHT_DIR_1 (-1018053), REBAR_SYSTEM_SPANHOOK_TOP_DIR_2 (-1018055), REBAR_SYSTEM_TOP_MAJOR_MATCHES_BOTTOM_MAJOR (-1018022), REBAR_SYSTEM_TOP_MAJOR_MATCHES_TOP_MINOR (-1018020), REBAR_SYSTEM_TOP_MINOR_MATCHES_BOTTOM_MINOR (-1018023), RECT_MULLION_THICK (-1007304), RECT_MULLION_WIDTH1 (-1007300), RECT_MULLION_WIDTH2 (-1007301), REF_TABLE_ELEM_NAME (-1007850), REF_TABLE_PARAM_NAME (-1007851), REFERENCE_OTHER_VIEW_UI_REF_VIEW (-1140759), REFERENCE_OTHER_VIEW_UI_TOGGLE (-1140758), REFERENCE_VIEWER_ATTR_TAG (-1140756), REFERENCE_VIEWER_TARGET_VIEW (-1140755), REFERENCE_VIEWER_UI_TARGET_FILTER (-1141000), REFERENCE_VIEWER_UI_TARGET_VIEW (-1141001), REFERENCED_VIEW (-1152380), REIN_EST_BAR_LENGTH (-1018501), REIN_EST_BAR_VOLUME (-1018502), REIN_EST_NUMBER_OF_BARS (-1018500), REINFORCEMENT_VOLUME (-1018503), RELATED_TO_MASS (-1001713), RENDER_PLANT_HEIGHT (-1005193), RENDER_PLANT_NAME (-1005192), RENDER_PLANT_TRIM_HEIGHT (-1005194), RENDER_RPC_FILENAME (-1005195), RENDER_RPC_PROPERTIES (-1005198), REPEATING_DETAIL_ELEMENT (-1011106), REPEATING_DETAIL_INSIDE (-1011107), REPEATING_DETAIL_LAYOUT (-1011105), REPEATING_DETAIL_NUMBER (-1011103), REPEATING_DETAIL_ROTATION (-1011109), REPEATING_DETAIL_SPACING (-1011104), REVEAL_PROFILE_PARAM (-1012835), REVISION_CLOUD_REVISION (-1011900), REVISION_CLOUD_REVISION_DATE (-1011903), REVISION_CLOUD_REVISION_DESCRIPTION (-1011902), REVISION_CLOUD_REVISION_ISSUED_BY (-1011906), REVISION_CLOUD_REVISION_ISSUED_TO (-1011904), REVISION_CLOUD_REVISION_NUM (-1011901), REVOLUTION_END_ANGLE (-1001803), REVOLUTION_START_ANGLE (-1001802), RGB_B_PARAM (-1010024), RGB_G_PARAM (-1010023), RGB_R_PARAM (-1010022), ROOF_ATTR_DEFAULT_THICKNESS_PARAM (-1001600), ROOF_ATTR_THICKNESS_PARAM (-1001601), ROOF_BASE_LEVEL_PARAM (-1001708), ROOF_CONSTRAINT_LEVEL_PARAM (-1001651), ROOF_CONSTRAINT_OFFSET_PARAM (-1001652), ROOF_CURVE_HEIGHT_AT_WALL (-1006005), ROOF_CURVE_HEIGHT_OFFSET (-1006001), ROOF_CURVE_IS_SLOPE_DEFINING (-1006000), ROOF_EAVE_CUT_PARAM (-1001710), ROOF_FACES_LOCATION (-1001714), ROOF_LEVEL_OFFSET_PARAM (-1001701), ROOF_RAFTER_OR_TRUSS_PARAM (-1001709), ROOF_SLOPE (-1006016), ROOF_STRUCTURE_ID_PARAM (-1002117), ROOF_UPTO_LEVEL_OFFSET_PARAM (-1001703), ROOF_UPTO_LEVEL_PARAM (-1001702), ROOM_ACTUAL_EXHAUST_AIRFLOW_PARAM (-1114196), ROOM_ACTUAL_LIGHTING_LOAD_PARAM (-1114226), ROOM_ACTUAL_LIGHTING_LOAD_PER_AREA_PARAM (-1114261), ROOM_ACTUAL_POWER_LOAD_PARAM (-1114225), ROOM_ACTUAL_POWER_LOAD_PER_AREA_PARAM (-1114260), ROOM_ACTUAL_RETURN_AIRFLOW_PARAM (-1114195), ROOM_ACTUAL_SUPPLY_AIRFLOW_PARAM (-1114194), ROOM_AREA (-1006902), ROOM_AREA_PER_PERSON_PARAM (-1114175), ROOM_BASE_HEAT_LOAD_ON_PARAM (-1114259), ROOM_BASE_LIGHTING_LOAD_ON_PARAM (-1114224), ROOM_BASE_POWER_LOAD_ON_PARAM (-1114223), ROOM_BASE_RETURN_AIRFLOW_ON_PARAM (-1114252), ROOM_CALCULATED_COOLING_LOAD_PARAM (-1114255), ROOM_CALCULATED_COOLING_LOAD_PER_AREA_PARAM (-1114322), ROOM_CALCULATED_HEATING_LOAD_PARAM (-1114253), ROOM_CALCULATED_HEATING_LOAD_PER_AREA_PARAM (-1114321), ROOM_CALCULATED_SUPPLY_AIRFLOW_PARAM (-1114180), ROOM_CALCULATED_SUPPLY_AIRFLOW_PER_AREA_PARAM (-1114323), ROOM_CALCULATION_POINT (-1114399), ROOM_COMPUTATION_HEIGHT (-1006928), ROOM_COMPUTATION_METHOD (-1006926), ROOM_CONDITION_TYPE_PARAM (-1114171), ROOM_CONSTRUCTION_SET_PARAM (-1114251), ROOM_DEPARTMENT (-1006907), ROOM_DESIGN_COOLING_LOAD_PARAM (-1114256), ROOM_DESIGN_EXHAUST_AIRFLOW_PARAM (-1114178), ROOM_DESIGN_HEATING_LOAD_PARAM (-1114254), ROOM_DESIGN_LIGHTING_LOAD_PARAM (-1114230), ROOM_DESIGN_LIGHTING_LOAD_PER_AREA_PARAM (-1114220), ROOM_DESIGN_MECHANICAL_LOAD_PER_AREA_PARAM (-1114221), ROOM_DESIGN_OTHER_LOAD_PER_AREA_PARAM (-1114222), ROOM_DESIGN_POWER_LOAD_PARAM (-1114229), ROOM_DESIGN_POWER_LOAD_PER_AREA_PARAM (-1114219), ROOM_DESIGN_RETURN_AIRFLOW_PARAM (-1114177), ROOM_DESIGN_SUPPLY_AIRFLOW_PARAM (-1114176), ROOM_EDIT_ELECTRICAL_LOADS_PARAM (-1114284), ROOM_EDIT_PEOPLE_LOADS_PARAM (-1114283), ROOM_FINISH_BASE (-1006906), ROOM_FINISH_CEILING (-1006905), ROOM_FINISH_FLOOR (-1006903), ROOM_FINISH_WALL (-1006904), ROOM_HEIGHT (-1006920), ROOM_LEVEL_ID (-1006916), ROOM_LIGHTING_LOAD_UNITS_PARAM (-1114258), ROOM_LOWER_OFFSET (-1006925), ROOM_NAME (-1006900), ROOM_NUMBER (-1006901), ROOM_NUMBER_OF_PEOPLE_PARAM (-1114174), ROOM_OCCUPANCY (-1006909), ROOM_OCCUPANCY_UNIT_PARAM (-1114173), ROOM_PEOPLE_LATENT_HEAT_GAIN_PER_PERSON_PARAM (-1114189), ROOM_PEOPLE_SENSIBLE_HEAT_GAIN_PER_PERSON_PARAM (-1114239), ROOM_PEOPLE_TOTAL_HEAT_GAIN_PER_PERSON_PARAM (-1114188), ROOM_PERIMETER (-1006917), ROOM_PHASE (-1012113), ROOM_PHASE_ID (-1012112), ROOM_PLENUM_LIGHTING_PARAM (-1150188), ROOM_POWER_LOAD_UNITS_PARAM (-1114257), ROOM_SPACE_TYPE_PARAM (-1114172), ROOM_TAG_ORIENTATION_PARAM (-1007004), ROOM_UPPER_LEVEL (-1006922), ROOM_UPPER_OFFSET (-1006924), ROOM_VOLUME (-1006921), ROUTING_PREFERENCE_PARAM (-1140281), RVT_HOST_LEVEL (-1007724), RVT_LEVEL_OFFSET (-1007725), RVT_LINK_FILE_NAME_WITHOUT_EXT (-1007726), RVT_LINK_INSTANCE_NAME (-1007721), RVT_LINK_PHASE_MAP (-1007728), RVT_LINK_REFERENCE_TYPE (-1007727), RVT_SOURCE_LEVEL (-1007723), SCHEDULE_BASE_LEVEL_OFFSET_PARAM (-1002065), SCHEDULE_BASE_LEVEL_PARAM (-1002063), SCHEDULE_EMBEDDED_PARAM (-1007806), SCHEDULE_FIELDS_PARAM (-1007800), SCHEDULE_FILTER_PARAM (-1007801), SCHEDULE_FORMAT_PARAM (-1007804), SCHEDULE_GROUP_PARAM (-1007803), SCHEDULE_LEVEL_PARAM (-1002062), SCHEDULE_SHEET_APPEARANCE_PARAM (-1007805), SCHEDULE_TOP_LEVEL_OFFSET_PARAM (-1002066), SCHEDULE_TOP_LEVEL_PARAM (-1002064), SECTION_ATTR_HEAD_TAG (-1006600), SECTION_ATTR_TAIL_LENGTH (-1006603), SECTION_ATTR_TAIL_TAG (-1006608), SECTION_ATTR_TAIL_WIDTH (-1006604), SECTION_BROKEN_DISPLAY_STYLE (-1006615), SECTION_COARSER_SCALE_PULLDOWN_IMPERIAL (-1006614), SECTION_COARSER_SCALE_PULLDOWN_METRIC (-1006613), SECTION_PARENT_VIEW_NAME (-1006612), SECTION_SHOW_IN_ONE_VIEW_ONLY (-1006609), SECTION_TAG (-1008205), SEEK_ITEM_ID (-1002504), SHEET_APPROVED_BY (-1007408), SHEET_ASSEMBLY_ASSEMBLY_CODE (-1150456), SHEET_ASSEMBLY_ASSEMBLY_DESCRIPTION (-1150459), SHEET_ASSEMBLY_COST (-1150458), SHEET_ASSEMBLY_DESCRIPTION (-1150455), SHEET_ASSEMBLY_KEYNOTE (-1150460), SHEET_ASSEMBLY_MANUFACTURER (-1150452), SHEET_ASSEMBLY_MODEL (-1150451), SHEET_ASSEMBLY_NAME (-1150450), SHEET_ASSEMBLY_TYPE_COMMENTS (-1150453), SHEET_ASSEMBLY_TYPE_MARK (-1150457), SHEET_ASSEMBLY_URL (-1150454), SHEET_CHECKED_BY (-1007405), SHEET_CURRENT_REVISION (-1007412), SHEET_CURRENT_REVISION_DATE (-1007415), SHEET_CURRENT_REVISION_DESCRIPTION (-1007414), SHEET_CURRENT_REVISION_ISSUED (-1007418), SHEET_CURRENT_REVISION_ISSUED_BY (-1007417), SHEET_CURRENT_REVISION_ISSUED_TO (-1007416), SHEET_DATE (-1007403), SHEET_DESIGNED_BY (-1007407), SHEET_DRAWN_BY (-1007404), SHEET_FILE_PATH (-1007409), SHEET_GUIDE_GRID (-1007419), SHEET_HEIGHT (-1007411), SHEET_ISSUE_DATE (-1006322), SHEET_KEY_NUMBER (-1140420), SHEET_NAME (-1007400), SHEET_NUMBER (-1007401), SHEET_REVISIONS_ON_SHEET (-1007413), SHEET_SCALE (-1007402), SHEET_SCHEDULED (-1007406), SHEET_WIDTH (-1007410), SHOW_ARROWHEAD_TO_CUT_MARK (-1006630), SHOW_ICON_PARAM (-1010016), SHOW_TITLE (-1006333), SKETCH_GRID_SPACING_PARAM (-1013000), SKETCH_PLANE_PARAM (-1001380), SLAB_EDGE_MATERIAL_PARAM (-1012824), SLAB_EDGE_PROFILE_PARAM (-1012837), SLANTED_COLUMN_BASE_CUT_STYLE (-1150205), SLANTED_COLUMN_BASE_EXTENSION (-1150207), SLANTED_COLUMN_GEOMETRY_TREATMENT_BASE (-1150190), SLANTED_COLUMN_GEOMETRY_TREATMENT_TOP (-1150189), SLANTED_COLUMN_TOP_CUT_STYLE (-1150204), SLANTED_COLUMN_TOP_EXTENSION (-1150206), SLANTED_COLUMN_TYPE_PARAM (-1150171), SLOPE_ARROW_LEVEL_END (-1006011), SLOPE_ARROW_LEVEL_START (-1006010), SLOPE_END_HEIGHT (-1002401), SLOPE_START_HEIGHT (-1002400), SPACE_ASSOC_ROOM_NAME (-1114327), SPACE_ASSOC_ROOM_NUMBER (-1114328), SPACE_CARPETING_PARAM (-1114347), SPACE_ELEC_EQUIPMENT_RADIANT_PERCENTAGE_PARAM (-1114353), SPACE_INFILTRATION_PARAM (-1114348), SPACE_IS_OCCUPIABLE (-1114329), SPACE_IS_PLENUM (-1114330), SPACE_LIGHTING_SCHEDULE_PARAM (-1114350), SPACE_OCCUPANCY_SCHEDULE_PARAM (-1114349), SPACE_PEOPLE_ACTIVITY_LEVEL_PARAM (-1114354), SPACE_POWER_SCHEDULE_PARAM (-1114351), SPACE_ZONE_NAME (-1114384), SPACING_APPEND (-1007398), SPACING_JUSTIFICATION (-1013353), SPACING_JUSTIFICATION_1 (-1013334), SPACING_JUSTIFICATION_2 (-1013335), SPACING_JUSTIFICATION_HORIZ (-1013305), SPACING_JUSTIFICATION_U (-1013374), SPACING_JUSTIFICATION_V (-1013375), SPACING_JUSTIFICATION_VERT (-1013304), SPACING_LAYOUT (-1013350), SPACING_LAYOUT_1 (-1013330), SPACING_LAYOUT_2 (-1013331), SPACING_LAYOUT_HORIZ (-1013301), SPACING_LAYOUT_U (-1013370), SPACING_LAYOUT_V (-1013371), SPACING_LAYOUT_VERT (-1013300), SPACING_LENGTH (-1013351), SPACING_LENGTH_1 (-1013332), SPACING_LENGTH_2 (-1013333), SPACING_LENGTH_HORIZ (-1013303), SPACING_LENGTH_U (-1013372), SPACING_LENGTH_V (-1013373), SPACING_LENGTH_VERT (-1013302), SPACING_NUM_DIVISIONS (-1013352), SPACING_NUM_DIVISIONS_1 (-1013336), SPACING_NUM_DIVISIONS_2 (-1013337), SPACING_NUM_DIVISIONS_HORIZ (-1013307), SPACING_NUM_DIVISIONS_U (-1013376), SPACING_NUM_DIVISIONS_V (-1013377), SPACING_NUM_DIVISIONS_VERT (-1013306), SPAN_DIR_INST_PARAM_ANGLE (-1014000), SPAN_DIR_SYM_PARAM_BOTTOM (-1014002), SPAN_DIR_SYM_PARAM_LEFT (-1014003), SPAN_DIR_SYM_PARAM_RIGHT (-1014004), SPAN_DIR_SYM_PARAM_TOP (-1014001), SPATIAL_FIELD_MGR_CURRENT_NAME (-1006851), SPATIAL_FIELD_MGR_DESCRIPTION (-1006852), SPATIAL_FIELD_MGR_LEGEND_HEIGHT (-1006858), SPATIAL_FIELD_MGR_LEGEND_HOR_ORIGIN_GAP (-1006861), SPATIAL_FIELD_MGR_LEGEND_SHOW_CONFIG_NAME (-1006853), SPATIAL_FIELD_MGR_LEGEND_SHOW_DESCRIPTION (-1006854), SPATIAL_FIELD_MGR_LEGEND_TEXT_TYPE (-1006856), SPATIAL_FIELD_MGR_LEGEND_VERT_ORIGIN_GAP (-1006860), SPATIAL_FIELD_MGR_LEGEND_WIDTH (-1006859), SPATIAL_FIELD_MGR_RANGE (-1006850), SPATIAL_FIELD_MGR_RESULTS_VISIBILITY (-1006855), SPECIFY_SLOPE_OR_OFFSET (-1006012), SPOT_COORDINATE_BASE (-1006461), SPOT_COORDINATE_BOTTOM_PREFIX (-1006484), SPOT_COORDINATE_BOTTOM_SUFFIX (-1006485), SPOT_COORDINATE_ELEVATION_PREFIX (-1006486), SPOT_COORDINATE_ELEVATION_SUFFIX (-1006487), SPOT_COORDINATE_INCLUDE_ELEVATION (-1006488), SPOT_COORDINATE_TOP_PREFIX (-1006482), SPOT_COORDINATE_TOP_SUFFIX (-1006483), SPOT_DIM_LEADER (-1006466), SPOT_DIM_STYLE_SLOPE_UNITS (-1150154), SPOT_DIM_STYLE_SLOPE_UNITS_ALT (-1150143), SPOT_ELEV_BASE (-1006437), SPOT_ELEV_BEND_LEADER (-1006476), SPOT_ELEV_BOT_VALUE (-1006457), SPOT_ELEV_DISPLAY_ELEVATIONS (-1006469), SPOT_ELEV_FLIP_TEXT_VERT (-1006440), SPOT_ELEV_IND_BOTTOM (-1006473), SPOT_ELEV_IND_ELEVATION (-1006452), SPOT_ELEV_IND_EW (-1006451), SPOT_ELEV_IND_NS (-1006450), SPOT_ELEV_IND_TOP (-1006472), SPOT_ELEV_IND_TYPE (-1006458), SPOT_ELEV_IND_TYPE_BOTTOM (-1006475), SPOT_ELEV_IND_TYPE_ELEVATION (-1006489), SPOT_ELEV_IND_TYPE_TOP (-1006474), SPOT_ELEV_LEADER_ARROWHEAD (-1006442), SPOT_ELEV_LINE_PEN (-1006444), SPOT_ELEV_LOWER_PREFIX (-1006480), SPOT_ELEV_LOWER_SUFFIX (-1006481), SPOT_ELEV_LOWER_VALUE (-1006491), SPOT_ELEV_RELATIVE_BASE (-1006441), SPOT_ELEV_ROTATE_WITH_COMPONENT (-1006470), SPOT_ELEV_SINGLE_OR_UPPER_PREFIX (-1006478), SPOT_ELEV_SINGLE_OR_UPPER_SUFFIX (-1006479), SPOT_ELEV_SINGLE_OR_UPPER_VALUE (-1006490), SPOT_ELEV_SYMBOL (-1006436), SPOT_ELEV_TEXT_HORIZ_OFFSET (-1006439), SPOT_ELEV_TEXT_LOCATION (-1006471), SPOT_ELEV_TEXT_ORIENTATION (-1006453), SPOT_ELEV_TICK_MARK_PEN (-1006443), SPOT_ELEV_TOP_VALUE (-1006455), SPOT_SLOPE_LEADER_LENGTH (-1150152), SPOT_SLOPE_OFFSET_FROM_REFERENCE (-1006494), SPOT_SLOPE_PREFIX (-1150150), SPOT_SLOPE_SLOPE_DIRECTION (-1006492), SPOT_SLOPE_SLOPE_REPRESENTATION (-1006493), SPOT_SLOPE_SUFFIX (-1150151), SPOT_TEXT_FROM_LEADER (-1006462), STAIRS_ACTUAL_NUM_RISERS (-1007246), STAIRS_ACTUAL_NUMBER_OF_RISERS (-1151111), STAIRS_ACTUAL_RISER_HEIGHT (-1007206), STAIRS_ACTUAL_TREAD_DEPTH (-1007250), STAIRS_ATTR_BODY_MATERIAL (-1007268), STAIRS_ATTR_BREAK_SYM_IN_CUTLINE (-1007245), STAIRS_ATTR_CALC_ENABLED (-1007254), STAIRS_ATTR_CALC_MAX (-1007253), STAIRS_ATTR_CALC_MIN (-1007252), STAIRS_ATTR_EQ_RESULT (-1007251), STAIRS_ATTR_FIRST_RISER (-1007257), STAIRS_ATTR_LANDING_CARRIAGE (-1007267), STAIRS_ATTR_LANDINGS_OVERLAPPING (-1007266), STAIRS_ATTR_LAST_RISER (-1007258), STAIRS_ATTR_LEFT_SIDE_STRINGER (-1007264), STAIRS_ATTR_MAX_RISER_HEIGHT (-1007202), STAIRS_ATTR_MINIMUM_TREAD_DEPTH (-1007203), STAIRS_ATTR_MONOLITHIC_STAIRS (-1007255), STAIRS_ATTR_NOSING_LENGTH (-1007241), STAIRS_ATTR_NOSING_PLACEMENT (-1007263), STAIRS_ATTR_NUM_MID_STRINGERS (-1007260), STAIRS_ATTR_RIGHT_SIDE_STRINGER (-1007265), STAIRS_ATTR_RISER_ANGLE (-1007212), STAIRS_ATTR_RISER_MATERIAL (-1007244), STAIRS_ATTR_RISER_MULT (-1007248), STAIRS_ATTR_RISER_THICKNESS (-1007261), STAIRS_ATTR_RISER_TREAD_CONNECT (-1007262), STAIRS_ATTR_RISER_TYPE (-1007243), STAIRS_ATTR_RISERS_PRESENT (-1007208), STAIRS_ATTR_SIDE_STRINGER_TYPE_PARAM (-1007236), STAIRS_ATTR_STAIR_CALCULATOR (-1007247), STAIRS_ATTR_STAIRS_BOTTOM (-1007256), STAIRS_ATTR_STAIRS_CUT_OFFSET (-1007259), STAIRS_ATTR_STRINGER_CARRIAGE (-1007237), STAIRS_ATTR_STRINGER_HEIGHT (-1007209), STAIRS_ATTR_STRINGER_MATERIAL (-1007239), STAIRS_ATTR_STRINGER_OFFSET (-1007238), STAIRS_ATTR_STRINGER_THICKNESS (-1007210), STAIRS_ATTR_TEXT_FONT (-1007269), STAIRS_ATTR_TEXT_SIZE (-1007270), STAIRS_ATTR_TREAD_FRONT_PROFILE (-1007240), STAIRS_ATTR_TREAD_MATERIAL (-1007242), STAIRS_ATTR_TREAD_MULT (-1007249), STAIRS_ATTR_TREAD_THICKNESS (-1007211), STAIRS_ATTR_TREAD_WIDTH (-1007204), STAIRS_ATTR_TRIM_TOP (-1007277), STAIRS_BASE_LEVEL (-1151101), STAIRS_BASE_LEVEL_PARAM (-1007200), STAIRS_BASE_OFFSET (-1007218), STAIRS_CURVE_TYPE (-1006100), STAIRS_DBG_SHOW_ANNOTATION_CUT_MARK (-1151153), STAIRS_DBG_SHOW_BOUNDARY_2D (-1151144), STAIRS_DBG_SHOW_BOUNDARY_3D (-1151145), STAIRS_DBG_SHOW_LANDING_BOUNDARY (-1151142), STAIRS_DBG_SHOW_LANDING_FACES (-1151132), STAIRS_DBG_SHOW_LANDING_PATH (-1151143), STAIRS_DBG_SHOW_LEFT_RUN_BOUNDARY_2D (-1151133), STAIRS_DBG_SHOW_LEFT_RUN_BOUNDARY_3D (-1151135), STAIRS_DBG_SHOW_MONOLITHIC_SUPPORT_CORSE_GEOM (-1151152), STAIRS_DBG_SHOW_MONOLITHIC_SUPPORT_GEOM (-1151149), STAIRS_DBG_SHOW_RIGHT_RUN_BOUNDARY_2D (-1151134), STAIRS_DBG_SHOW_RIGHT_RUN_BOUNDARY_3D (-1151136), STAIRS_DBG_SHOW_RUN_CORSE_GEOM (-1151150), STAIRS_DBG_SHOW_RUN_GEOM (-1151147), STAIRS_DBG_SHOW_RUN_NOSING (-1151140), STAIRS_DBG_SHOW_RUN_OUTLINE_FOR_PLAN (-1151141), STAIRS_DBG_SHOW_RUN_PATH_2D (-1151137), STAIRS_DBG_SHOW_RUN_PATH_3D (-1151138), STAIRS_DBG_SHOW_RUN_RISER (-1151139), STAIRS_DBG_SHOW_SUPPORT_PATH (-1151146), STAIRS_DBG_SHOW_TREAD_FACES (-1151131), STAIRS_DBG_SHOW_TRISER_CORSE_GEOM (-1151151), STAIRS_DBG_SHOW_TRISER_GEOM (-1151148), STAIRS_DESIRED_NUM_RISERS (-1007205), STAIRS_DESIRED_NUMBER_OF_RISERS (-1151110), STAIRS_DOWN_TEXT (-1006634), STAIRS_ENABLE_CALCULATION_RULE_CHECKING (-1151118), STAIRS_INST_ALWAYS_UP (-1007278), STAIRS_INST_DOWN_ARROW_ON (-1007276), STAIRS_INST_DOWN_LABEL_ON (-1007274), STAIRS_INST_DOWN_LABEL_TEXT (-1007275), STAIRS_INST_UP_ARROW_ON (-1007273), STAIRS_INST_UP_LABEL_ON (-1007271), STAIRS_INST_UP_LABEL_TEXT (-1007272), STAIRS_LANDING_BASE_ELEVATION (-1151501), STAIRS_LANDING_OVERRIDDEN (-1151508), STAIRS_LANDING_STRUCTURAL (-1151502), STAIRS_LANDING_THICKNESS (-1151507), STAIRS_LANDINGTYPE_HAS_MONOLITHIC_SUPPORT (-1151601), STAIRS_LANDINGTYPE_LANDING_MATERIAL (-1151606), STAIRS_LANDINGTYPE_STRUCTURE (-1151602), STAIRS_LANDINGTYPE_THICKNESS (-1151603), STAIRS_LANDINGTYPE_TREADRISER_TYPE (-1151605), STAIRS_LANDINGTYPE_USE_SAME_TRISER_AS_RUN (-1151604), STAIRS_MIN_AUTOMATIC_LANDING_DEPTH (-1151117), STAIRS_MULTISTORY_TOP_LEVEL_PARAM (-1007235), STAIRS_MULTISTORY_UP_TO_LEVEL (-1151106), STAIRS_PATH_FULL_STEP_ARROW (-1006661), STAIRS_PATH_START_EXTENSION (-1006660), STAIRS_PATH_START_FROM_RISER (-1006626), STAIRS_RAILING_ANGLED_CONNECTION (-1008631), STAIRS_RAILING_BALUSTER_BOTTOM_ANGLE (-1008624), STAIRS_RAILING_BALUSTER_FAMILY (-1008618), STAIRS_RAILING_BALUSTER_HEIGHT (-1008622), STAIRS_RAILING_BALUSTER_IS_POST (-1008633), STAIRS_RAILING_BALUSTER_LENGTH (-1008612), STAIRS_RAILING_BALUSTER_OFFSET (-1008619), STAIRS_RAILING_BALUSTER_PLACEMENT (-1008626), STAIRS_RAILING_BALUSTER_SHAPE (-1008605), STAIRS_RAILING_BALUSTER_SLOPE_ANGLE (-1008625), STAIRS_RAILING_BALUSTER_SPACING (-1008609), STAIRS_RAILING_BALUSTER_SPACING_TYPE (-1008608), STAIRS_RAILING_BALUSTER_TOP_ANGLE (-1008623), STAIRS_RAILING_BALUSTER_WIDTH (-1008611), STAIRS_RAILING_BALUSTERS_PER_TREAD (-1008610), STAIRS_RAILING_BASE_LEVEL_PARAM (-1008620), STAIRS_RAILING_CONNECTION (-1008632), STAIRS_RAILING_HEIGHT (-1008602), STAIRS_RAILING_HEIGHT_OFFSET (-1008621), STAIRS_RAILING_HEIGHT_SHIFT_TYPE (-1008628), STAIRS_RAILING_HEIGHT_SHIFT_VAL (-1008629), STAIRS_RAILING_PLACEMENT_OFFSET (-1152300), STAIRS_RAILING_RAIL_HEIGHT (-1008616), STAIRS_RAILING_RAIL_NAME (-1008627), STAIRS_RAILING_RAIL_OFFSET (-1008617), STAIRS_RAILING_RAIL_STRUCTURE (-1008615), STAIRS_RAILING_SHAPE (-1008614), STAIRS_RAILING_TANGENT_CONNECTION (-1008630), STAIRS_RAILING_THICKNESS (-1008604), STAIRS_RAILING_WIDTH (-1008603), STAIRS_RUN_ACTUAL_NUMBER_OF_RISERS (-1151305), STAIRS_RUN_ACTUAL_NUMBER_OF_TREADS (-1151306), STAIRS_RUN_ACTUAL_RISER_HEIGHT (-1151307), STAIRS_RUN_ACTUAL_RUN_WIDTH (-1151309), STAIRS_RUN_ACTUAL_TREAD_DEPTH (-1151308), STAIRS_RUN_BEGIN_WITH_RISER (-1151316), STAIRS_RUN_BOTTOM_ELEVATION (-1151301), STAIRS_RUN_CCW (-1151322), STAIRS_RUN_CENTER_MARK_VISIBLE (-1151313), STAIRS_RUN_CREATE_AUTO_LANDING (-1151321), STAIRS_RUN_END_WITH_RISER (-1151317), STAIRS_RUN_EXTEND_BELOW_RISER_BASE (-1151304), STAIRS_RUN_EXTEND_BELOW_TREAD_BASE (-1151323), STAIRS_RUN_HEIGHT (-1151303), STAIRS_RUN_LOCATIONPATH_JUSTFICATION (-1151318), STAIRS_RUN_OVERRIDDEN (-1151315), STAIRS_RUN_STRUCTURAL (-1151314), STAIRS_RUN_TOP_ELEVATION (-1151302), STAIRS_RUN_WIDTH_MEASUREMENT (-1151116), STAIRS_RUN_WINDER_BEGIN_WITH_STRAIGHT (-1151319), STAIRS_RUN_WINDER_END_WITH_STRAIGHT (-1151320), STAIRS_RUNTYPE_HAS_MONOLITHIC_SUPPORT (-1151401), STAIRS_RUNTYPE_RUN_MATERIAL (-1151406), STAIRS_RUNTYPE_STRUCTURAL_DEPTH (-1151404), STAIRS_RUNTYPE_STRUCTURE (-1151403), STAIRS_RUNTYPE_TOTAL_DEPTH (-1151405), STAIRS_RUNTYPE_UNDERSIDE_SURFACE_TYPE (-1151402), STAIRS_SHOW_DOWN_TEXT (-1006633), STAIRS_SHOW_UP_TEXT (-1006631), STAIRS_STAIRS_HEIGHT (-1151105), STAIRS_STRINGERS_PRESENT (-1007234), STAIRS_SUPPORT_HORIZONTAL_OFFSET (-1151701), STAIRS_SUPPORT_LANDINGSUPPORT_TYPE (-1151710), STAIRS_SUPPORT_LOWER_END_CUT (-1151705), STAIRS_SUPPORT_OVERRIDDEN (-1151709), STAIRS_SUPPORT_TRIM_SUPPORT_UPPER (-1151708), STAIRS_SUPPORT_UPPER_END_CUT (-1151706), STAIRS_SUPPORT_VERTICAL_OFFSET (-1151702), STAIRS_SUPPORTTYPE_FLIP_SECTION_PROFILE (-1151811), STAIRS_SUPPORTTYPE_MATERIAL (-1151808), STAIRS_SUPPORTTYPE_SECTION_PROFILE (-1151801), STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH (-1151805), STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH_ON_LANDING (-1151810), STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH_ON_RUN (-1151809), STAIRS_SUPPORTTYPE_TOPSIDE_SURFACE (-1151803), STAIRS_SUPPORTTYPE_TOTAL_DEPTH (-1151806), STAIRS_SUPPORTTYPE_UNDERSIDE_SURFACE (-1151804), STAIRS_SUPPORTTYPE_WIDTH (-1151807), STAIRS_TEXT_ORIENTATION (-1006636), STAIRS_TEXT_TYPE (-1006635), STAIRS_TOP_LEVEL (-1151103), STAIRS_TOP_LEVEL_PARAM (-1007201), STAIRS_TOP_OFFSET (-1007219), STAIRS_TOTAL_NUMBER_OF_RISERS (-1151112), STAIRS_TOTAL_NUMBER_OF_TREADS (-1151113), STAIRS_TRISER_IS_TYPE_OVERRIDDEN (-1152101), STAIRS_TRISER_NUMBER_BASE_INDEX (-1151154), STAIRS_TRISER_RISER_MARK (-1152105), STAIRS_TRISER_RISER_NUMBER (-1152103), STAIRS_TRISER_TREAD_MARK (-1152104), STAIRS_TRISER_TREAD_NUMBER (-1152102), STAIRS_TRISERTYPE_BACK_NOSING (-1152158), STAIRS_TRISERTYPE_FRONT_NOSING (-1152155), STAIRS_TRISERTYPE_LEFT_NOSING (-1152157), STAIRS_TRISERTYPE_NOSING_LENGTH (-1152154), STAIRS_TRISERTYPE_NOSING_PLACEMENT (-1152175), STAIRS_TRISERTYPE_NOSING_PROFILE (-1152153), STAIRS_TRISERTYPE_RIGHT_NOSING (-1152156), STAIRS_TRISERTYPE_RISER (-1152176), STAIRS_TRISERTYPE_RISER_IS_SLANTED (-1152177), STAIRS_TRISERTYPE_RISER_MATERIAL (-1152163), STAIRS_TRISERTYPE_RISER_PROFILE (-1152174), STAIRS_TRISERTYPE_RISER_STYLE (-1152159), STAIRS_TRISERTYPE_RISER_THICKNESS (-1152160), STAIRS_TRISERTYPE_RISER_TREAD_CONNECTION (-1152161), STAIRS_TRISERTYPE_TREAD (-1152151), STAIRS_TRISERTYPE_TREAD_MATERIAL (-1152162), STAIRS_TRISERTYPE_TREAD_PROFILE (-1152164), STAIRS_TRISERTYPE_TREAD_THICKNESS (-1152152), STAIRS_UP_TEXT (-1006632), STAIRS_WINDERPATTERN_FILLET_INSIDE_CORNER (-1151905), STAIRS_WINDERPATTERN_MINIMUM_WIDTH_CORNER (-1151902), STAIRS_WINDERPATTERN_MINIMUM_WIDTH_INSIDE_WALKLINE (-1151903), STAIRS_WINDERPATTERN_NUMBER_OF_STRAIGHT_STEPS_AT_BEGIN (-1151907), STAIRS_WINDERPATTERN_NUMBER_OF_STRAIGHT_STEPS_AT_END (-1151908), STAIRS_WINDERPATTERN_RADIUS_INTERIOR (-1151906), STAIRS_WINDERPATTERN_STAIR_PATH_OFFSET (-1151904), STAIRS_WINDERPATTERN_WINDER_STYLE (-1151901), STAIRSTYPE_CALC_RULE_MAX_RESULT (-1151221), STAIRSTYPE_CALC_RULE_MIN_RESULT (-1151222), STAIRSTYPE_CALC_RULE_RISER_MULTIPLIER (-1151219), STAIRSTYPE_CALC_RULE_TARGET_RESULT (-1151223), STAIRSTYPE_CALC_RULE_TREAD_MULTIPLIER (-1151220), STAIRSTYPE_CALCULATION_RULES (-1151206), STAIRSTYPE_CONSTRUCTION_METHOD (-1151233), STAIRSTYPE_CUTMARK_TYPE (-1151234), STAIRSTYPE_GEOMUNJOINED_END_CUT_STYLE (-1151224), STAIRSTYPE_HAS_INTERMEDIATE_SUPPORT (-1151237), STAIRSTYPE_HAS_LEFT_SUPPORT (-1151231), STAIRSTYPE_HAS_RIGHT_SUPPORT (-1151232), STAIRSTYPE_INTERMEDIATE_SUPPORT_TYPE (-1151211), STAIRSTYPE_IS_ASSEMBLED_STAIRS (-1151218), STAIRSTYPE_LANDING_TYPE (-1151208), STAIRSTYPE_LEFT_SIDE_SUPPORT_TYPE (-1151210), STAIRSTYPE_LEFT_SUPPORT_LATERAL_OFFSET (-1151236), STAIRSTYPE_MAXIMUM_RISER_HEIGHT (-1151203), STAIRSTYPE_MINIMUM_RUN_WIDTH (-1151216), STAIRSTYPE_MINIMUM_TREAD_DEPTH (-1151204), STAIRSTYPE_MINIMUM_TREAD_WIDTH_INSIDE_BOUNDARY (-1151205), STAIRSTYPE_NOTCH_CUSTOM_WIDTH (-1151227), STAIRSTYPE_NOTCH_EXTENSION (-1151225), STAIRSTYPE_NOTCH_HORIZONTAL_GAP (-1151228), STAIRSTYPE_NOTCH_THICKNESS (-1151226), STAIRSTYPE_NOTCH_VERTICAL_GAP (-1151229), STAIRSTYPE_NOTCH_WIDTH (-1151230), STAIRSTYPE_NUMBER_OF_INTERMEDIATE_SUPPORTS (-1151217), STAIRSTYPE_RIGHT_SIDE_SUPPORT_TYPE (-1151209), STAIRSTYPE_RIGHT_SUPPORT_LATERAL_OFFSET (-1151235), STAIRSTYPE_RUN_TYPE (-1151207), STAIRSTYPE_SHOW_CUTLINE (-1151212), STAIRSTYPE_SHOW_STAIR_PATH (-1151213), STAIRSTYPE_SHOW_UPDOWN (-1151214), STAIRSTYPE_WINDER_STEP_FRONT_MEASUREMENT (-1151215), START_EXTENSION (-1152357), START_JOIN_CUTBACK (-1152359), START_SYMBOL_TYPE (-1006622), START_Y_JUSTIFICATION (-1152366), START_Y_OFFSET_VALUE (-1152367), START_Z_JUSTIFICATION (-1152368), START_Z_OFFSET_VALUE (-1152369), STRUCT_CONNECTION_APPLY_TO (-1018800), STRUCT_CONNECTION_BEAM_END (-1018802), STRUCT_CONNECTION_BEAM_START (-1018801), STRUCT_CONNECTION_COLUMN_BASE (-1018804), STRUCT_CONNECTION_COLUMN_TOP (-1018803), STRUCT_CONNECTION_CUTBACK (-1018805), STRUCT_CONNECTION_TYPE_NAME (-1018850), STRUCT_FRAM_JOIN_STATUS (-1152383), STRUCTURAL_ANALYTICAL_BEAM_HORIZONTAL_PROJECTION_PLANE (-1001593), STRUCTURAL_ANALYTICAL_BEAM_RIGID_LINK (-1001595), STRUCTURAL_ANALYTICAL_COLUMN_HORIZONTAL_PROJECTION_PLANE (-1001594), STRUCTURAL_ANALYTICAL_COLUMN_RIGID_LINK (-1001551), STRUCTURAL_ANALYTICAL_HARD_POINTS (-1001587), STRUCTURAL_ANALYTICAL_MODEL (-1001552), STRUCTURAL_ANALYTICAL_PROJECT_FLOOR_PLANE (-1001510), STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE (-1001508), STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE_COLUMN_BOTTOM (-1001535), STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE_COLUMN_TOP (-1001534), STRUCTURAL_ANALYTICAL_TESS_DEVIATION (-1001588), STRUCTURAL_ANALYTICAL_TESSELLATE (-1001589), STRUCTURAL_ANALYZES_AS (-1001576), STRUCTURAL_ASSET_PARAM (-1013450), STRUCTURAL_ATTACHMENT_BASE_DISTANCE (-1150177), STRUCTURAL_ATTACHMENT_BASE_RATIO (-1150178), STRUCTURAL_ATTACHMENT_BASE_REFERENCEDEND (-1150179), STRUCTURAL_ATTACHMENT_BASE_TYPE (-1150176), STRUCTURAL_ATTACHMENT_END_LEVEL_REFERENCE (-1001396), STRUCTURAL_ATTACHMENT_END_REFELEMENT_END (-1001391), STRUCTURAL_ATTACHMENT_END_TYPE (-1001386), STRUCTURAL_ATTACHMENT_END_VALUE_DISTANCE (-1001388), STRUCTURAL_ATTACHMENT_END_VALUE_ELEVATION (-1001398), STRUCTURAL_ATTACHMENT_END_VALUE_RATIO (-1001393), STRUCTURAL_ATTACHMENT_START_LEVEL_REFERENCE (-1001395), STRUCTURAL_ATTACHMENT_START_REFELEMENT_END (-1001389), STRUCTURAL_ATTACHMENT_START_TYPE (-1001385), STRUCTURAL_ATTACHMENT_START_VALUE_DISTANCE (-1001387), STRUCTURAL_ATTACHMENT_START_VALUE_ELEVATION (-1001397), STRUCTURAL_ATTACHMENT_START_VALUE_RATIO (-1001392), STRUCTURAL_ATTACHMENT_TOP_DISTANCE (-1150181), STRUCTURAL_ATTACHMENT_TOP_RATIO (-1150182), STRUCTURAL_ATTACHMENT_TOP_REFERENCEDEND (-1150183), STRUCTURAL_ATTACHMENT_TOP_TYPE (-1150180), STRUCTURAL_BEAM_CUTBACK_FOR_COLUMN (-1001575), STRUCTURAL_BEAM_END_ATTACHMENT_DISTANCE (-1150217), STRUCTURAL_BEAM_END_ATTACHMENT_REFCOLUMN_END (-1150219), STRUCTURAL_BEAM_END_ATTACHMENT_TYPE (-1150215), STRUCTURAL_BEAM_END_SUPPORT (-1001502), STRUCTURAL_BEAM_END0_ELEVATION (-1001571), STRUCTURAL_BEAM_END1_ELEVATION (-1001572), STRUCTURAL_BEAM_ORIENTATION (-1001573), STRUCTURAL_BEAM_START_ATTACHMENT_DISTANCE (-1150216), STRUCTURAL_BEAM_START_ATTACHMENT_REFCOLUMN_END (-1150218), STRUCTURAL_BEAM_START_ATTACHMENT_TYPE (-1150214), STRUCTURAL_BEAM_START_SUPPORT (-1001501), STRUCTURAL_BEND_DIR_ANGLE (-1001586), STRUCTURAL_BOTTOM_RELEASE_FX (-1001544), STRUCTURAL_BOTTOM_RELEASE_FY (-1001545), STRUCTURAL_BOTTOM_RELEASE_FZ (-1001546), STRUCTURAL_BOTTOM_RELEASE_MX (-1001547), STRUCTURAL_BOTTOM_RELEASE_MY (-1001548), STRUCTURAL_BOTTOM_RELEASE_MZ (-1001549), STRUCTURAL_BOTTOM_RELEASE_TYPE (-1001537), STRUCTURAL_BRACE_REPRESENTATION (-1001507), STRUCTURAL_CAMBER (-1001530), STRUCTURAL_CONNECTION_APPROVAL_STATUS (-1153001), STRUCTURAL_CONNECTION_CODE_CHECKING_STATUS (-1153002), STRUCTURAL_CONNECTION_MODIFY_CONNECTION_PARAMETERS (-1153000), STRUCTURAL_CONNECTION_NOBLE_STATUS (-1153003), STRUCTURAL_CONNECTION_SYMBOL (-1152999), STRUCTURAL_COPING_DISTANCE (-1001559), STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS (-1001956), STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS_COLUMN (-1001585), STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS_FRAMING (-1001584), STRUCTURAL_ELEVATION_AT_BOTTOM (-1001561), STRUCTURAL_ELEVATION_AT_BOTTOM_CORE (-1001655), STRUCTURAL_ELEVATION_AT_BOTTOM_SURVEY (-1001658), STRUCTURAL_ELEVATION_AT_TOP (-1001598), STRUCTURAL_ELEVATION_AT_TOP_CORE (-1001654), STRUCTURAL_ELEVATION_AT_TOP_SURVEY (-1001657), STRUCTURAL_END_RELEASE_FX (-1001523), STRUCTURAL_END_RELEASE_FY (-1001524), STRUCTURAL_END_RELEASE_FZ (-1001525), STRUCTURAL_END_RELEASE_MX (-1001526), STRUCTURAL_END_RELEASE_MY (-1001527), STRUCTURAL_END_RELEASE_MZ (-1001528), STRUCTURAL_END_RELEASE_TYPE (-1001516), STRUCTURAL_FAMILY_CODE_NAME (-1005556), STRUCTURAL_FAMILY_NAME_KEY (-1005555), STRUCTURAL_FLOOR_ANALYZES_AS (-1001577), STRUCTURAL_FLOOR_CORE_THICKNESS (-1001656), STRUCTURAL_FOUNDATION_LENGTH (-1001569), STRUCTURAL_FOUNDATION_THICKNESS (-1001557), STRUCTURAL_FOUNDATION_WIDTH (-1001568), STRUCTURAL_FRAME_CUT_LENGTH (-1001384), STRUCTURAL_MATERIAL_PARAM (-1005500), STRUCTURAL_MATERIAL_TYPE (-1001531), STRUCTURAL_MEMBER_FORCES (-1060012), STRUCTURAL_NUMBER_OF_STUDS (-1001529), STRUCTURAL_REFERENCE_LEVEL_ELEVATION (-1001653), STRUCTURAL_SECTION_AREA (-1005507), STRUCTURAL_SECTION_BOTTOM_CUT_HEIGHT (-1005560), STRUCTURAL_SECTION_BOTTOM_CUT_WIDTH (-1005559), STRUCTURAL_SECTION_CANTILEVER_HEIGHT (-1005562), STRUCTURAL_SECTION_CANTILEVER_LENGTH (-1005561), STRUCTURAL_SECTION_COMMON_ALPHA (-1005510), STRUCTURAL_SECTION_COMMON_CENTROID_HORIZ (-1005508), STRUCTURAL_SECTION_COMMON_CENTROID_VERTICAL (-1005509), STRUCTURAL_SECTION_COMMON_DIAMETER (-1005504), STRUCTURAL_SECTION_COMMON_ELASTIC_MODULUS_STRONG_AXIS (-1005515), STRUCTURAL_SECTION_COMMON_ELASTIC_MODULUS_WEAK_AXIS (-1005516), STRUCTURAL_SECTION_COMMON_HEIGHT (-1005503), STRUCTURAL_SECTION_COMMON_MOMENT_OF_INERTIA_STRONG_AXIS (-1005513), STRUCTURAL_SECTION_COMMON_MOMENT_OF_INERTIA_WEAK_AXIS (-1005514), STRUCTURAL_SECTION_COMMON_NOMINAL_WEIGHT (-1005512), STRUCTURAL_SECTION_COMMON_PERIMETER (-1005511), STRUCTURAL_SECTION_COMMON_PLASTIC_MODULUS_STRONG_AXIS (-1005517), STRUCTURAL_SECTION_COMMON_PLASTIC_MODULUS_WEAK_AXIS (-1005518), STRUCTURAL_SECTION_COMMON_SHEAR_AREA_STRONG_AXIS (-1005522), STRUCTURAL_SECTION_COMMON_SHEAR_AREA_WEAK_AXIS (-1005523), STRUCTURAL_SECTION_COMMON_TORSIONAL_MODULUS (-1005520), STRUCTURAL_SECTION_COMMON_TORSIONAL_MOMENT_OF_INERTIA (-1005519), STRUCTURAL_SECTION_COMMON_WARPING_CONSTANT (-1005521), STRUCTURAL_SECTION_COMMON_WIDTH (-1005502), STRUCTURAL_SECTION_CPROFILE_FOLD_LENGTH (-1005549), STRUCTURAL_SECTION_HSS_INNERFILLET (-1005529), STRUCTURAL_SECTION_HSS_OUTERFILLET (-1005530), STRUCTURAL_SECTION_ISHAPE_BOLT_DIAMETER (-1005539), STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING (-1005538), STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_BETWEEN_ROWS (-1005541), STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_TWO_ROWS (-1005540), STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_WEB (-1005542), STRUCTURAL_SECTION_ISHAPE_CLEAR_WEB_HEIGHT (-1005535), STRUCTURAL_SECTION_ISHAPE_FLANGE_TOE_OF_FILLET (-1005536), STRUCTURAL_SECTION_ISHAPE_FLANGEFILLET (-1005527), STRUCTURAL_SECTION_ISHAPE_FLANGETHICKNESS (-1005524), STRUCTURAL_SECTION_ISHAPE_WEB_TOE_OF_FILLET (-1005537), STRUCTURAL_SECTION_ISHAPE_WEBFILLET (-1005528), STRUCTURAL_SECTION_ISHAPE_WEBHEIGHT (-1005526), STRUCTURAL_SECTION_ISHAPE_WEBTHICKNESS (-1005525), STRUCTURAL_SECTION_IWELDED_BOTTOMFLANGETHICKNESS (-1005533), STRUCTURAL_SECTION_IWELDED_BOTTOMFLANGEWIDTH (-1005534), STRUCTURAL_SECTION_IWELDED_TOPFLANGETHICKNESS (-1005531), STRUCTURAL_SECTION_IWELDED_TOPFLANGEWIDTH (-1005532), STRUCTURAL_SECTION_LANGLE_BOLT_DIAMETER_LONGER_FLANGE (-1005546), STRUCTURAL_SECTION_LANGLE_BOLT_DIAMETER_SHORTER_FLANGE (-1005547), STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_1_LONGER_FLANGE (-1005543), STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_2_LONGER_FLANGE (-1005544), STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_SHORTER_FLANGE (-1005545), STRUCTURAL_SECTION_LPROFILE_LIP_LENGTH (-1005548), STRUCTURAL_SECTION_NAME_KEY (-1005554), STRUCTURAL_SECTION_PIPESTANDARD_WALLDESIGNTHICKNESS (-1005506), STRUCTURAL_SECTION_PIPESTANDARD_WALLNOMINALTHICKNESS (-1005505), STRUCTURAL_SECTION_SHAPE (-1005501), STRUCTURAL_SECTION_SIGMA_PROFILE_BEND_WIDTH (-1005551), STRUCTURAL_SECTION_SIGMA_PROFILE_MIDDLE_BEND_WIDTH (-1005552), STRUCTURAL_SECTION_SIGMA_PROFILE_TOP_BEND_WIDTH (-1005553), STRUCTURAL_SECTION_TOP_CUT_HEIGHT (-1005558), STRUCTURAL_SECTION_TOP_CUT_WIDTH (-1005557), STRUCTURAL_SECTION_ZPROFILE_BOTTOM_FLANGE_LENGTH (-1005550), STRUCTURAL_START_RELEASE_FX (-1001517), STRUCTURAL_START_RELEASE_FY (-1001518), STRUCTURAL_START_RELEASE_FZ (-1001519), STRUCTURAL_START_RELEASE_MX (-1001520), STRUCTURAL_START_RELEASE_MY (-1001521), STRUCTURAL_START_RELEASE_MZ (-1001522), STRUCTURAL_START_RELEASE_TYPE (-1001515), STRUCTURAL_STICK_SYMBOL_LOCATION (-1001503), STRUCTURAL_TOP_RELEASE_FX (-1001538), STRUCTURAL_TOP_RELEASE_FY (-1001539), STRUCTURAL_TOP_RELEASE_FZ (-1001540), STRUCTURAL_TOP_RELEASE_MX (-1001541), STRUCTURAL_TOP_RELEASE_MY (-1001542), STRUCTURAL_TOP_RELEASE_MZ (-1001543), STRUCTURAL_TOP_RELEASE_TYPE (-1001536), STRUCTURAL_WALL_BOTTOM_PROJECTION_PLANE (-1001514), STRUCTURAL_WALL_PROJECTION_SURFACE (-1001512), STRUCTURAL_WALL_TOP_PROJECTION_PLANE (-1001513), SUPPORT_HAND_CLEARANCE (-1152165), SUPPORT_HEIGHT (-1152166), SURFACE_AREA (-1012601), SURFACE_PATTERN_ID_PARAM (-1002102), SURFACE_PERIMETER (-1012602), SWEEP_BASE_FLOOR_SUBCATEGORY_ID (-1012821), SWEEP_BASE_OFFSET (-1012825), SWEEP_BASE_ROOF_SUBCATEGORY_ID (-1012820), SWEEP_BASE_VERT_OFFSET (-1012827), SWEEP_MAX_SEG_ANGLE (-1001819), SWEEP_TRAJ_SEGMENTED (-1001820), SYMBOL_FAMILY_AND_TYPE_NAMES_PARAM (-1002003), SYMBOL_FAMILY_NAME_PARAM (-1002002), SYMBOL_ID_PARAM (-1002000), SYMBOL_NAME_PARAM (-1002001), TAG_LEADER_TYPE (-1007006), TAG_NO_BREAK_PARAM_STRINGS (-1007005), TAG_ORIENTATION_PARAM (-1007003), TAG_SAMPLE_TEXT (-1007001), TAG_TAG (-1007000), TEMPLATE_NAME (-1140167), TERMINATION_EXTENSION_LENGTH (-1152167), TEXT_ALIGN_HORZ (-1006308), TEXT_ALIGN_VERT (-1006309), TEXT_ALIGNMENT (-1006400), TEXT_BACKGROUND (-1006314), TEXT_BOX_VISIBILITY (-1150213), TEXT_COLOR (-1006302), TEXT_DIST_TO_LINE (-1006401), TEXT_FONT (-1006300), TEXT_POSITION (-1006411), TEXT_SIZE (-1006301), TEXT_STYLE_BOLD (-1006311), TEXT_STYLE_FONT (-1006334), TEXT_STYLE_ITALIC (-1006312), TEXT_STYLE_SIZE (-1006335), TEXT_STYLE_UNDERLINE (-1006313), TEXT_TAB_SIZE (-1006326), TEXT_TEXT (-1006307), TEXT_WIDTH_SCALE (-1006327), THERMAL_MATERIAL_PARAM_COMPRESSIBILITY (-1152322), THERMAL_MATERIAL_PARAM_ELECTRICAL_RESISTIVITY (-1152330), THERMAL_MATERIAL_PARAM_EMISSIVITY (-1152320), THERMAL_MATERIAL_PARAM_GAS_VISCOSITY (-1152321), THERMAL_MATERIAL_PARAM_LIQUID_VISCOSITY (-1152323), THERMAL_MATERIAL_PARAM_PERMEABILITY (-1152327), THERMAL_MATERIAL_PARAM_POROSITY (-1152328), THERMAL_MATERIAL_PARAM_REFLECTIVITY (-1152329), THERMAL_MATERIAL_PARAM_SPECIFIC_HEAT_OF_VAPORIZATION (-1152324), THERMAL_MATERIAL_PARAM_TRANSMITS_LIGHT (-1152326), THERMAL_MATERIAL_PARAM_VAPOR_PRESSURE (-1152325), TICK_MARK_PEN (-1006412), TILE_PATTERN_FAMREF_COMPONENT_EXTENTS (-1150202), TILE_PATTERN_GRID_CELLS_X (-1150200), TILE_PATTERN_GRID_CELLS_Y (-1150201), TILE_PATTERN_GRID_UNIT_X (-1150198), TILE_PATTERN_GRID_UNIT_Y (-1150199), TITLE_FONT (-1006328), TITLE_SIZE (-1006329), TITLE_STYLE_BOLD (-1006330), TITLE_STYLE_ITALIC (-1006331), TITLE_STYLE_UNDERLINE (-1006332), TRAP_MULL_WIDTH (-1007359), TRUSS_BEARING_CHORD_TOP_BOTTOM_PARAM (-1140716), TRUSS_ELEMENT_ANGLE_PARAM (-1140703), TRUSS_ELEMENT_BEARING_JUST_PARAM (-1140706), TRUSS_ELEMENT_CLASS_PARAM (-1140702), TRUSS_ELEMENT_CREATE_BOTTOM_PARAM (-1140705), TRUSS_ELEMENT_CREATE_TOP_PARAM (-1140704), TRUSS_ELEMENT_END0_ELEVATION (-1140707), TRUSS_ELEMENT_END1_ELEVATION (-1140708), TRUSS_ELEMENT_REFERENCE_LEVEL_PARAM (-1140709), TRUSS_ELEMENT_ROTATE_CHORDS_WITH_TRUSS (-1140710), TRUSS_ELEMENT_SPAN_PARAM (-1140715), TRUSS_ELEMENT_STICK_JUST_PARAM (-1140714), TRUSS_ELEMENT_TAG_NEW_MEMBERS_VIEW (-1140718), TRUSS_FAMILY_BOTTOM_CHORD_ANGLE_PARAM (-1140764), TRUSS_FAMILY_BOTTOM_CHORD_END_RELEASE_TYPE (-1140761), TRUSS_FAMILY_BOTTOM_CHORD_START_RELEASE_TYPE (-1140762), TRUSS_FAMILY_BOTTOM_CHORD_STRUCTURAL_TYPES_PARAM (-1140766), TRUSS_FAMILY_BOTTOM_CHORD_VERTICAL_PROJECTION_PARAM (-1140763), TRUSS_FAMILY_DIAG_WEB_ANGLE_PARAM (-1140734), TRUSS_FAMILY_DIAG_WEB_END_RELEASE_TYPE (-1140731), TRUSS_FAMILY_DIAG_WEB_START_RELEASE_TYPE (-1140732), TRUSS_FAMILY_DIAG_WEB_STRUCTURAL_TYPES_PARAM (-1140736), TRUSS_FAMILY_TOP_CHORD_ANGLE_PARAM (-1140744), TRUSS_FAMILY_TOP_CHORD_END_RELEASE_TYPE (-1140741), TRUSS_FAMILY_TOP_CHORD_START_RELEASE_TYPE (-1140742), TRUSS_FAMILY_TOP_CHORD_STRUCTURAL_TYPES_PARAM (-1140746), TRUSS_FAMILY_TOP_CHORD_VERTICAL_PROJECTION_PARAM (-1140743), TRUSS_FAMILY_TRANSFORMATION_PARAM (-1140711), TRUSS_FAMILY_VERT_WEB_ANGLE_PARAM (-1140724), TRUSS_FAMILY_VERT_WEB_END_RELEASE_TYPE (-1140721), TRUSS_FAMILY_VERT_WEB_START_RELEASE_TYPE (-1140722), TRUSS_FAMILY_VERT_WEB_STRUCTURAL_TYPES_PARAM (-1140726), TRUSS_FAMILY_WEBS_HAVE_SYMBOLIC_CUTBACK_PARAM (-1140713), TRUSS_HEIGHT (-1140712), TRUSS_LENGTH (-1140700), TRUSS_NON_BEARING_OFFSET_PARAM (-1140717), TYPE_WALL_CLOSURE (-1001390), UNIFORMAT_CODE (-1002500), UNIFORMAT_DESCRIPTION (-1002501), VIEW_ANALYSIS_DISPLAY_STYLE (-1005332), VIEW_ANALYSIS_RESULTS_VISIBILITY (-1006857), VIEW_ASSOCIATED_ASSEMBLY_INSTANCE_ID (-1005179), VIEW_BACK_CLIPPING (-1005181), VIEW_CAMERA_ORIENTATION (-1005184), VIEW_CAMERA_POSITION (-1005169), VIEW_CLEAN_JOINS (-1005158), VIEW_DEPENDENCY (-1005182), VIEW_DEPTH (-1005154), VIEW_DESCRIPTION (-1005114), VIEW_DESIGN_OPTIONS_CONFIG (-1005400), VIEW_DETAIL_LEVEL (-1011002), VIEW_DISCIPLINE (-1005163), VIEW_FAMILY (-1012109), VIEW_FAMILY_AND_TYPE_SCHEDULES (-1139998), VIEW_FAMILY_SCHEDULES (-1139999), VIEW_FIXED_SKETCH_PLANE (-1005147), VIEW_GRAPH_SCHED_BOTTOM_LEVEL (-1005314), VIEW_GRAPH_SCHED_GRID_APPEARANCE (-1005327), VIEW_GRAPH_SCHED_GROUP_SIMILAR (-1005318), VIEW_GRAPH_SCHED_HIDDEN_LEVELS (-1005330), VIEW_GRAPH_SCHED_LEVEL_RELATIVE_BASE_TYPE (-1005331), VIEW_GRAPH_SCHED_LOCATIONS_HIGH (-1005316), VIEW_GRAPH_SCHED_LOCATIONS_LOW (-1005315), VIEW_GRAPH_SCHED_MATERIAL_TYPES (-1005317), VIEW_GRAPH_SCHED_NUMBER_COLUMNS (-1005175), VIEW_GRAPH_SCHED_OFF_GRID (-1005209), VIEW_GRAPH_SCHED_ROWS_COUNT (-1005328), VIEW_GRAPH_SCHED_ROWS_FROM (-1005319), VIEW_GRAPH_SCHED_TEXT_APPEARANCE (-1005326), VIEW_GRAPH_SCHED_TITLE (-1005325), VIEW_GRAPH_SCHED_TOP_LEVEL (-1005313), VIEW_GRAPH_SCHED_TOTAL_COLUMNS (-1005178), VIEW_GRAPH_SCHED_TOTAL_ROWS (-1005329), VIEW_GRAPH_SCHED_UNITS_FORMAT (-1005208), VIEW_GRAPH_SUN_PATH (-1005333), VIEW_GRAPH_SUN_PATH_SIZE (-1005334), VIEW_MODEL_DISPLAY_MODE (-1005161), VIEW_NAME (-1005112), VIEW_PARTS_VISIBILITY (-1011003), VIEW_PHASE (-1012102), VIEW_PHASE_FILTER (-1012103), VIEW_REFERENCING_DETAIL (-1005171), VIEW_REFERENCING_SHEET (-1005170), VIEW_SCALE (-1005150), VIEW_SCALE_CUSTOMNAME (-1005230), VIEW_SCALE_HAVENAME (-1005231), VIEW_SCALE_PULLDOWN_IMPERIAL (-1005152), VIEW_SCALE_PULLDOWN_METRIC (-1005151), VIEW_SCHEMA_SETTING_FOR_BUILDING (-1005148), VIEW_SCHEMA_SETTING_FOR_SYSTEM (-1005149), VIEW_SCHEMA_SETTING_FOR_SYSTEM_TEMPLATE (-1133900), VIEW_SHEET_VIEWPORT_INFO (-1005157), VIEW_SHOW_HIDDEN_LINES (-1154613), VIEW_SHOW_MASSING (-1005160), VIEW_SLANTED_COLUMN_SYMBOL_OFFSET (-1150170), VIEW_TEMPLATE (-1005176), VIEW_TEMPLATE_FOR_SCHEDULE (-1005199), VIEW_TYPE (-1012106), VIEW_TYPE_SCHEDULES (-1139997), VIEW_UNDERLAY_BOTTOM_ID (-1005153), VIEW_UNDERLAY_ORIENTATION (-1005177), VIEW_UNDERLAY_TOP_ID (-1005335), VIEW_VISIBLE_CATEGORIES (-1005164), VIEWER_ANNOTATION_CROP_ACTIVE (-1005094), VIEWER_BOUND_ACTIVE_BOTTOM (-1005109), VIEWER_BOUND_ACTIVE_FAR (-1005110), VIEWER_BOUND_ACTIVE_LEFT (-1005107), VIEWER_BOUND_ACTIVE_NEAR (-1005111), VIEWER_BOUND_ACTIVE_RIGHT (-1005106), VIEWER_BOUND_ACTIVE_TOP (-1005108), VIEWER_BOUND_FAR_CLIPPING (-1005123), VIEWER_BOUND_OFFSET_BOTTOM (-1005103), VIEWER_BOUND_OFFSET_FAR (-1005104), VIEWER_BOUND_OFFSET_LEFT (-1005101), VIEWER_BOUND_OFFSET_NEAR (-1005105), VIEWER_BOUND_OFFSET_RIGHT (-1005100), VIEWER_BOUND_OFFSET_TOP (-1005102), VIEWER_CROP_REGION (-1005090), VIEWER_CROP_REGION_DISABLED (-1005092), VIEWER_CROP_REGION_VISIBLE (-1005091), VIEWER_DETAIL_NUMBER (-1006602), VIEWER_EYE_ELEVATION (-1005000), VIEWER_IS_REFERENCE (-1005121), VIEWER_MODEL_CLIP_BOX_ACTIVE (-1005113), VIEWER_OPTION_VISIBILITY (-1005001), VIEWER_PERSPECTIVE (-1005050), VIEWER_PERSPECTIVE_DISABLED (-1005051), VIEWER_REFERENCE_LABEL (-1005120), VIEWER_REFERENCE_LABEL_TEXT (-1005122), VIEWER_SHEET_NUMBER (-1006601), VIEWER_SHOW_UNCROPPED (-1005093), VIEWER_TARGET_ELEVATION (-1005002), VIEWER_VOLUME_OF_INTEREST_CROP (-1012202), VIEWER3D_RENDER_SETTINGS (-1005124), VIEWPORT_ATTR_LABEL_TAG (-1005250), VIEWPORT_ATTR_ORIENTATION_ON_SHEET (-1005254), VIEWPORT_ATTR_SHOW_BOX (-1005253), VIEWPORT_ATTR_SHOW_EXTENSION_LINE (-1005252), VIEWPORT_ATTR_SHOW_LABEL (-1005251), VIEWPORT_DETAIL_NUMBER (-1005201), VIEWPORT_SCALE (-1005204), VIEWPORT_SHEET_NAME (-1005207), VIEWPORT_SHEET_NUMBER (-1005206), VIEWPORT_VIEW_NAME (-1005203), VIS_GRAPHICS_ANALYTICAL_MODEL (-1006967), VIS_GRAPHICS_ANNOTATION (-1006962), VIS_GRAPHICS_DESIGNOPTIONS (-1006966), VIS_GRAPHICS_FILTERS (-1006964), VIS_GRAPHICS_IMPORT (-1006963), VIS_GRAPHICS_MODEL (-1006961), VIS_GRAPHICS_POINT_CLOUDS (-1006969), VIS_GRAPHICS_RVT_LINKS (-1006965), VIS_GRAPHICS_WORKSETS (-1006968), VOLUME_CUT (-1012603), VOLUME_FILL (-1012604), VOLUME_NET (-1012611), VOLUME_OF_INTEREST_NAME (-1012205), VOLUME_OF_INTEREST_VIEWS_VISIBLE (-1012203), WALKTHROUGH_FRAMES_COUNT (-1005167), WALL_ALIGN_KEY_REF_PARAM (-1016021), WALL_ATTR_DEFHEIGHT_PARAM (-1001002), WALL_ATTR_HEIGHT_PARAM (-1001001), WALL_ATTR_ROOM_BOUNDING (-1001007), WALL_ATTR_WIDTH_PARAM (-1001000), WALL_BASE_CONSTRAINT (-1001107), WALL_BASE_HEIGHT_PARAM (-1001102), WALL_BASE_OFFSET (-1001108), WALL_BOTTOM_EXTENSION_DIST_PARAM (-1012829), WALL_BOTTOM_IS_ATTACHED (-1001118), WALL_HEIGHT_TYPE (-1001103), WALL_KEY_REF_PARAM (-1001122), WALL_LOCATION_LINE_OFFSET_PARAM (-1001123), WALL_STRUCTURAL_SIGNIFICANT (-1001596), WALL_STRUCTURAL_USAGE_PARAM (-1001119), WALL_STRUCTURE_ID_PARAM (-1002103), WALL_SWEEP_CUT_BY_INSERTS_PARAM (-1012838), WALL_SWEEP_CUTS_WALL_PARAM (-1012839), WALL_SWEEP_DEFAULT_SETBACK_PARAM (-1012840), WALL_SWEEP_LEVEL_PARAM (-1012801), WALL_SWEEP_OFFSET_PARAM (-1012802), WALL_SWEEP_PROFILE_PARAM (-1012800), WALL_SWEEP_WALL_OFFSET_PARAM (-1012804), WALL_SWEEP_WALL_SUBCATEGORY_ID (-1012809), WALL_TOP_EXTENSION_DIST_PARAM (-1012828), WALL_TOP_IS_ATTACHED (-1001117), WALL_TOP_OFFSET (-1001109), WALL_USER_HEIGHT_PARAM (-1001105), WINDOW_CONSTRUCTION_TYPE (-1001207), WINDOW_HEIGHT (-1001300), WINDOW_INSET (-1001303), WINDOW_OPERATION_TYPE (-1001211), WINDOW_THICKNESS (-1001302), WINDOW_TYPE_ID (-1001405), WINDOW_WIDTH (-1001301), WITNS_LINE_EXTENSION (-1006404), WITNS_LINE_GAP_TO_ELT (-1006405), WITNS_LINE_TICK_MARK (-1006522), WRAPPING_AT_ENDS_PARAM (-1002111), WRAPPING_AT_INSERTS_PARAM (-1002112), Y_JUSTIFICATION (-1152362), Y_OFFSET_VALUE (-1152363), YZ_JUSTIFICATION (-1152361), Z_JUSTIFICATION (-1152364), Z_OFFSET_VALUE (-1152365), ZONE_AIR_VOLUME_CALCULATION_TYPE_PARAM (-1114345), ZONE_AREA (-1114301), ZONE_AREA_GROSS (-1114332), ZONE_CALCULATED_AREA_PER_COOLING_LOAD_PARAM (-1114343), ZONE_CALCULATED_AREA_PER_HEATING_LOAD_PARAM (-1114342), ZONE_CALCULATED_COOLING_LOAD_PARAM (-1114306), ZONE_CALCULATED_COOLING_LOAD_PER_AREA_PARAM (-1114319), ZONE_CALCULATED_HEATING_LOAD_PARAM (-1114305), ZONE_CALCULATED_HEATING_LOAD_PER_AREA_PARAM (-1114318), ZONE_CALCULATED_SUPPLY_AIRFLOW_PARAM (-1114307), ZONE_CALCULATED_SUPPLY_AIRFLOW_PER_AREA_PARAM (-1114320), ZONE_COIL_BYPASS_PERCENTAGE_PARAM (-1114344), ZONE_COOLING_AIR_TEMPERATURE_PARAM (-1114311), ZONE_COOLING_INFORMATION_PARAM (-1114335), ZONE_COOLING_SET_POINT_PARAM (-1114309), ZONE_DEHUMIDIFICATION_SET_POINT_PARAM (-1114313), ZONE_HEATING_AIR_TEMPERATURE_PARAM (-1114310), ZONE_HEATING_INFORMATION_PARAM (-1114334), ZONE_HEATING_SET_POINT_PARAM (-1114308), ZONE_HUMIDIFICATION_SET_POINT_PARAM (-1114312), ZONE_LEVEL_ID (-1114317), ZONE_NAME (-1114300), ZONE_OA_RATE_PER_ACH_PARAM (-1114316), ZONE_OUTDOOR_AIR_INFORMATION_PARAM (-1114336), ZONE_OUTSIDE_AIR_PER_AREA_PARAM (-1114315), ZONE_OUTSIDE_AIR_PER_PERSON_PARAM (-1114314), ZONE_PERIMETER (-1114302), ZONE_PHASE (-1114326), ZONE_PHASE_ID (-1114325), ZONE_SERVICE_TYPE_PARAM (-1114304), ZONE_USE_AIR_CHANGES_PER_HOUR_PARAM (-1114341), ZONE_USE_DEHUMIDIFICATION_SETPOINT_PARAM (-1114338), ZONE_USE_HUMIDIFICATION_SETPOINT_PARAM (-1114337), ZONE_USE_OUTSIDE_AIR_PER_AREA_PARAM (-1114340), ZONE_USE_OUTSIDE_AIR_PER_PERSON_PARAM (-1114339), ZONE_VOLUME (-1114303), ZONE_VOLUME_GROSS (-1114331)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ACTUAL_MAX_RIDGE_HEIGHT_PARAM = None
    ALLOW_AUTO_EMBED = None
    ALL_GRID_ROTATION_FOR_DIVISION_RULE = None
    ALL_MODEL_COST = None
    ALL_MODEL_DESCRIPTION = None
    ALL_MODEL_FAMILY_NAME = None
    ALL_MODEL_IMAGE = None
    ALL_MODEL_INSTANCE_COMMENTS = None
    ALL_MODEL_MANUFACTURER = None
    ALL_MODEL_MARK = None
    ALL_MODEL_MODEL = None
    ALL_MODEL_TYPE_COMMENTS = None
    ALL_MODEL_TYPE_IMAGE = None
    ALL_MODEL_TYPE_MARK = None
    ALL_MODEL_TYPE_NAME = None
    ALL_MODEL_URL = None
    ALTERNATE_UNITS = None
    ALTERNATE_UNITS_PREFIX = None
    ALTERNATE_UNITS_SUFFIX = None
    ALWAYS_ZERO_LENGTH = None
    ANALYTICAL_ABSORPTANCE = None
    ANALYTICAL_GEOMETRY_IS_VALID = None
    ANALYTICAL_HEAT_TRANSFER_COEFFICIENT = None
    ANALYTICAL_LINK_RELEASE_ROTATION_X = None
    ANALYTICAL_LINK_RELEASE_ROTATION_Y = None
    ANALYTICAL_LINK_RELEASE_ROTATION_Z = None
    ANALYTICAL_LINK_RELEASE_TRANSLATION_X = None
    ANALYTICAL_LINK_RELEASE_TRANSLATION_Y = None
    ANALYTICAL_LINK_RELEASE_TRANSLATION_Z = None
    ANALYTICAL_MEMBER_FORCE_END_ALL_NON_ZERO = None
    ANALYTICAL_MEMBER_FORCE_END_FX = None
    ANALYTICAL_MEMBER_FORCE_END_FY = None
    ANALYTICAL_MEMBER_FORCE_END_FZ = None
    ANALYTICAL_MEMBER_FORCE_END_MX = None
    ANALYTICAL_MEMBER_FORCE_END_MY = None
    ANALYTICAL_MEMBER_FORCE_END_MZ = None
    ANALYTICAL_MEMBER_FORCE_START_ALL_NON_ZERO = None
    ANALYTICAL_MEMBER_FORCE_START_FX = None
    ANALYTICAL_MEMBER_FORCE_START_FY = None
    ANALYTICAL_MEMBER_FORCE_START_FZ = None
    ANALYTICAL_MEMBER_FORCE_START_MX = None
    ANALYTICAL_MEMBER_FORCE_START_MY = None
    ANALYTICAL_MEMBER_FORCE_START_MZ = None
    ANALYTICAL_MODEL_AREA = None
    ANALYTICAL_MODEL_BASE_ALIGNMENT_METHOD = None
    ANALYTICAL_MODEL_BASE_EXTENSION_METHOD = None
    ANALYTICAL_MODEL_BASE_Y_PROJECTION = None
    ANALYTICAL_MODEL_BASE_Z_PROJECTION = None
    ANALYTICAL_MODEL_CODE_CHECKING = None
    ANALYTICAL_MODEL_COLUMN_BASE_EXTENSION = None
    ANALYTICAL_MODEL_COLUMN_TOP_EXTENSION = None
    ANALYTICAL_MODEL_END_ALIGNMENT_METHOD = None
    ANALYTICAL_MODEL_END_Y_PROJECTION = None
    ANALYTICAL_MODEL_END_Z_PROJECTION = None
    ANALYTICAL_MODEL_FLOOR_ALIGNMENT_METHOD = None
    ANALYTICAL_MODEL_FLOOR_PROJECTION = None
    ANALYTICAL_MODEL_FOUNDATIONS_MARK = None
    ANALYTICAL_MODEL_LENGTH = None
    ANALYTICAL_MODEL_MANUALLY_ADJUSTED = None
    ANALYTICAL_MODEL_NODES_MARK = None
    ANALYTICAL_MODEL_PERIMETER = None
    ANALYTICAL_MODEL_PHYSICAL_TYPE = None
    ANALYTICAL_MODEL_ROTATION = None
    ANALYTICAL_MODEL_SKETCH_ALIGNMENT_METHOD = None
    ANALYTICAL_MODEL_SKETCH_PROJECTION = None
    ANALYTICAL_MODEL_START_ALIGNMENT_METHOD = None
    ANALYTICAL_MODEL_START_Y_PROJECTION = None
    ANALYTICAL_MODEL_START_Z_PROJECTION = None
    ANALYTICAL_MODEL_STICK_ELEMENTS_MARK = None
    ANALYTICAL_MODEL_SURFACE_ELEMENTS_MARK = None
    ANALYTICAL_MODEL_TOP_ALIGNMENT_METHOD = None
    ANALYTICAL_MODEL_TOP_EXTENSION_METHOD = None
    ANALYTICAL_MODEL_TOP_Y_PROJECTION = None
    ANALYTICAL_MODEL_TOP_Z_PROJECTION = None
    ANALYTICAL_MODEL_WALL_ALIGNMENT_METHOD = None
    ANALYTICAL_MODEL_WALL_BASE_PROJECTION = None
    ANALYTICAL_MODEL_WALL_PROJECTION = None
    ANALYTICAL_MODEL_WALL_TOP_PROJECTION = None
    ANALYTICAL_ROUGHNESS = None
    ANALYTICAL_SOLAR_HEAT_GAIN_COEFFICIENT = None
    ANALYTICAL_THERMAL_MASS = None
    ANALYTICAL_THERMAL_RESISTANCE = None
    ANALYTICAL_VISUAL_LIGHT_TRANSMITTANCE = None
    ANALYTIC_CONSTRUCTION_GBXML_TYPEID = None
    ANALYTIC_CONSTRUCTION_LOOKUP_TABLE = None
    ANY_PATTERN_ID_PARAM = None
    ANY_PATTERN_ID_PARAM_NO_NO = None
    ARC_CENTER_MARK = None
    ARC_CURVE_CNTR_MRK_VISIBLE = None
    ARC_LEADER_PARAM = None
    ARC_WALL_CNTR_MRK_VISIBLE = None
    AREA_SCHEME_ID = None
    AREA_SCHEME_NAME = None
    AREA_TYPE = None
    AREA_TYPE_TEXT = None
    ARROWHEAD_END_AT_RISER = None
    ARROWHEAD_TYPE = None
    ARROW_CLOSED = None
    ARROW_FILLED = None
    ARROW_SIZE = None
    ARROW_TYPE = None
    ASSEMBLY_NAME = None
    ASSEMBLY_NAMING_CATEGORY = None
    ASSIGN_TEMPLATE_ON_VIEW_CREATION = None
    AUTO_JOIN_CONDITION = None
    AUTO_JOIN_CONDITION_WALL = None
    AUTO_MULLION_BORDER1_GRID1 = None
    AUTO_MULLION_BORDER1_GRID2 = None
    AUTO_MULLION_BORDER1_HORIZ = None
    AUTO_MULLION_BORDER1_VERT = None
    AUTO_MULLION_BORDER2_GRID1 = None
    AUTO_MULLION_BORDER2_GRID2 = None
    AUTO_MULLION_BORDER2_HORIZ = None
    AUTO_MULLION_BORDER2_VERT = None
    AUTO_MULLION_INTERIOR_GRID1 = None
    AUTO_MULLION_INTERIOR_GRID2 = None
    AUTO_MULLION_INTERIOR_HORIZ = None
    AUTO_MULLION_INTERIOR_VERT = None
    AUTO_PANEL = None
    AUTO_PANEL_WALL = None
    BASELINE_DIM_OFFSET = None
    BASEPOINT_ANGLETON_PARAM = None
    BASEPOINT_EASTWEST_PARAM = None
    BASEPOINT_ELEVATION_PARAM = None
    BASEPOINT_NORTHSOUTH_PARAM = None
    BEAM_H_JUSTIFICATION = None
    BEAM_SYSTEM_3D_PARAM = None
    BEAM_SYSTEM_TAG_INST_PARAM_ANGLE = None
    BEAM_SYSTEM_TAG_PARAM_LEFT = None
    BEAM_SYSTEM_TAG_PARAM_RIGHT = None
    BEAM_V_JUSTIFICATION = None
    BEAM_V_JUSTIFICATION_OTHER_VALUE = None
    BENT_FABRIC_PARAM_BEND_DIRECTION = None
    BENT_FABRIC_PARAM_LONGITUDINAL_CUT_LENGTH = None
    BENT_FABRIC_PARAM_STRAIGHT_WIRES_LOCATION = None
    BLEND_END_PARAM = None
    BLEND_START_PARAM = None
    BOUNDARY_AREA_RESTRAINT_X = None
    BOUNDARY_AREA_RESTRAINT_Y = None
    BOUNDARY_AREA_RESTRAINT_Z = None
    BOUNDARY_BEARING = None
    BOUNDARY_CONDITIONS_IS_EXT = None
    BOUNDARY_CONDITIONS_TYPE = None
    BOUNDARY_DIRECTION_ROT_X = None
    BOUNDARY_DIRECTION_ROT_Y = None
    BOUNDARY_DIRECTION_ROT_Z = None
    BOUNDARY_DIRECTION_X = None
    BOUNDARY_DIRECTION_Y = None
    BOUNDARY_DIRECTION_Z = None
    BOUNDARY_DISTANCE = None
    BOUNDARY_LINEAR_RESTRAINT_ROT_X = None
    BOUNDARY_LINEAR_RESTRAINT_X = None
    BOUNDARY_LINEAR_RESTRAINT_Y = None
    BOUNDARY_LINEAR_RESTRAINT_Z = None
    BOUNDARY_PARAM_PRESET = None
    BOUNDARY_PARAM_PRESET_AREA = None
    BOUNDARY_PARAM_PRESET_LINEAR = None
    BOUNDARY_RADIUS = None
    BOUNDARY_RESTRAINT_ROT_X = None
    BOUNDARY_RESTRAINT_ROT_Y = None
    BOUNDARY_RESTRAINT_ROT_Z = None
    BOUNDARY_RESTRAINT_X = None
    BOUNDARY_RESTRAINT_Y = None
    BOUNDARY_RESTRAINT_Z = None
    BOUNDARY_X_ROTATION_FIXED = None
    BOUNDARY_X_ROTATION_SPRING = None
    BOUNDARY_X_TRANSLATION_FIXED = None
    BOUNDARY_X_TRANSLATION_SPRING = None
    BOUNDARY_Y_ROTATION_FIXED = None
    BOUNDARY_Y_ROTATION_SPRING = None
    BOUNDARY_Y_TRANSLATION_FIXED = None
    BOUNDARY_Y_TRANSLATION_SPRING = None
    BOUNDARY_Z_ROTATION_FIXED = None
    BOUNDARY_Z_ROTATION_SPRING = None
    BOUNDARY_Z_TRANSLATION_FIXED = None
    BOUNDARY_Z_TRANSLATION_SPRING = None
    BR_ORG_FILTER = None
    BR_ORG_FOLDERS = None
    BUILDINGPAD_HEIGHTABOVELEVEL_PARAM = None
    BUILDINGPAD_THICKNESS = None
    BUILDING_CLOSING_TIME_PARAM = None
    BUILDING_CURVE_GSTYLE = None
    BUILDING_CURVE_GSTYLE_PLUS_INVISIBLE = None
    BUILDING_OPENING_TIME_PARAM = None
    BUILDING_UNOCCUPIED_COOLING_SET_POINT_PARAM = None
    BUILIDING_PAD_STRUCTURE_ID_PARAM = None
    CABLETRAY_MINBENDMULTIPLIER_PARAM = None
    CALLOUT_ATTR_HEAD_TAG = None
    CALLOUT_CORNER_SHEET_RADIUS = None
    CALLOUT_SYNCRONIZE_BOUND_OFFSET_FAR = None
    CALLOUT_TAG = None
    CASEWORK_CONSTRUCTION_TYPE = None
    CASEWORK_DEPTH = None
    CASEWORK_FINISH = None
    CASEWORK_HEIGHT = None
    CASEWORK_WIDTH = None
    CEILING_ATTR_DEFAULT_HEIGHT_PARAM = None
    CEILING_ATTR_PATTERN_PARAM = None
    CEILING_ATTR_SPACING1_PARAM = None
    CEILING_ATTR_SPACING2_PARAM = None
    CEILING_ATTR_SYSTEMNAME_PARAM = None
    CEILING_HAS_THICKNESS_PARAM = None
    CEILING_HEIGHTABOVELEVEL_PARAM = None
    CEILING_STRUCTURE_ID_PARAM = None
    CEILING_THICKNESS = None
    CEILING_THICKNESS_PARAM = None
    CENTER_MARK_SIZE = None
    CIRCUIT_LOAD_CLASSIFICATION_PARAM = None
    CIRC_MULLION_RADIUS = None
    CLEAR_COVER = None
    CLEAR_COVER_BOTTOM = None
    CLEAR_COVER_EXTERIOR = None
    CLEAR_COVER_INTERIOR = None
    CLEAR_COVER_OTHER = None
    CLEAR_COVER_TOP = None
    CLIENT_NAME = None
    CLINE_SUBCATEGORY = None
    COARSE_SCALE_FILL_PATTERN_COLOR = None
    COARSE_SCALE_FILL_PATTERN_ID_PARAM = None
    COLOR_FILL_FILTERED_PARAM = None
    COLOR_FILL_SWATCH_HEIGHT_PARAM = None
    COLOR_FILL_SWATCH_WIDTH_PARAM = None
    COLOR_SCHEME_LOCATION = None
    COLUMN_BASE_ATTACHED_PARAM = None
    COLUMN_BASE_ATTACHMENT_OFFSET_PARAM = None
    COLUMN_BASE_ATTACH_CUT_PARAM = None
    COLUMN_BASE_ATTACH_JUSTIFICATION_PARAM = None
    COLUMN_LOCATION_MARK = None
    COLUMN_TOP_ATTACHED_PARAM = None
    COLUMN_TOP_ATTACHMENT_OFFSET_PARAM = None
    COLUMN_TOP_ATTACH_CUT_PARAM = None
    COLUMN_TOP_ATTACH_JUSTIFICATION_PARAM = None
    CONCEPTUAL_CONSTRUCTION_MATERIAL = None
    CONDUIT_STANDARD_TYPE_PARAM = None
    CONNECTOR_ANGLE = None
    CONNECTOR_ANGLE_OF_DEFLECTION = None
    CONNECTOR_DIAMETER = None
    CONNECTOR_ENGAGEMENT_LENGTH = None
    CONNECTOR_GENDER_TYPE = None
    CONNECTOR_HEIGHT = None
    CONNECTOR_INDEX = None
    CONNECTOR_INSIDE_DIAMETER = None
    CONNECTOR_JOINT_TYPE = None
    CONNECTOR_LENGTH = None
    CONNECTOR_PROFILE_TYPE = None
    CONNECTOR_RADIUS = None
    CONNECTOR_REFERENCE_INDEX = None
    CONNECTOR_UTILITY_PARAM = None
    CONNECTOR_VISIBLE_SIZE = None
    CONNECTOR_WIDTH = None
    CONSTRAINT_FIXED_OFFSET = None
    CONTINUOUSRAIL_BEGINNING_TERMINATION_ATTACHMENT_PARAM = None
    CONTINUOUSRAIL_BEGINNING_TERMINATION_TYPE_PARAM = None
    CONTINUOUSRAIL_DEFAULT_JOIN_TYPE_PARAM = None
    CONTINUOUSRAIL_END_EXTENSION_LENGTH_PARAM = None
    CONTINUOUSRAIL_END_TERMINATION_ATTACHMENT_PARAM = None
    CONTINUOUSRAIL_END_TERMINATION_TYPE_PARAM = None
    CONTINUOUSRAIL_EXTENSION_LENGTH_PARAM = None
    CONTINUOUSRAIL_FILLET_RADIUS_PARAM = None
    CONTINUOUSRAIL_JOIN_TYPE_PARAM = None
    CONTINUOUSRAIL_LENGTH_PARAM = None
    CONTINUOUSRAIL_MATERIALS_PARAM = None
    CONTINUOUSRAIL_PLUS_TREAD_DEPTH_PARAM = None
    CONTINUOUSRAIL_PROFILE_TYPE_PARAM = None
    CONTINUOUSRAIL_TRANSITION_TYPE_PARAM = None
    CONTINUOUS_FOOTING_BEARING_WIDTH = None
    CONTINUOUS_FOOTING_BOTTOM_HEEL = None
    CONTINUOUS_FOOTING_BOTTOM_TOE = None
    CONTINUOUS_FOOTING_BREAK_AT_INSERTS_DISABLE = None
    CONTINUOUS_FOOTING_DEFAULT_END_EXTENSION_LENGTH = None
    CONTINUOUS_FOOTING_ECCENTRICITY = None
    CONTINUOUS_FOOTING_LENGTH = None
    CONTINUOUS_FOOTING_STRUCTURAL_USAGE = None
    CONTINUOUS_FOOTING_TOP_HEEL = None
    CONTINUOUS_FOOTING_TOP_TOE = None
    CONTINUOUS_FOOTING_WIDTH = None
    CONTOUR_ELEVATION = None
    CONTOUR_ELEVATION_STEP = None
    CONTOUR_LABELS_ELEV_BASE_TYPE = None
    CONTOUR_LABELS_LINEAR_UNITS = None
    CONTOUR_LABELS_PRIMARY_ONLY = None
    CONTOUR_LABELS_RELATIVE_BASE = None
    CONTOUR_SUBCATEGORY_ID = None
    COUPLER_CODE = None
    COUPLER_COUPLED_BAR_SIZE = None
    COUPLER_COUPLED_ENDTREATMENT = None
    COUPLER_COUPLED_ENGAGEMENT = None
    COUPLER_LENGTH = None
    COUPLER_MAIN_BAR_SIZE = None
    COUPLER_MAIN_ENDTREATMENT = None
    COUPLER_MAIN_ENGAGEMENT = None
    COUPLER_MARK = None
    COUPLER_NUMBER = None
    COUPLER_QUANTITY = None
    COUPLER_WEIGHT = None
    COUPLER_WIDTH = None
    COVER_TYPE_LENGTH = None
    COVER_TYPE_NAME = None
    CURTAINGRID_ADJUST_BORDER_1 = None
    CURTAINGRID_ADJUST_BORDER_2 = None
    CURTAINGRID_ADJUST_BORDER_HORIZ = None
    CURTAINGRID_ADJUST_BORDER_U = None
    CURTAINGRID_ADJUST_BORDER_V = None
    CURTAINGRID_ADJUST_BORDER_VERT = None
    CURTAINGRID_ANGLE_1 = None
    CURTAINGRID_ANGLE_2 = None
    CURTAINGRID_ANGLE_HORIZ = None
    CURTAINGRID_ANGLE_U = None
    CURTAINGRID_ANGLE_V = None
    CURTAINGRID_ANGLE_VERT = None
    CURTAINGRID_BELT_1 = None
    CURTAINGRID_BELT_2 = None
    CURTAINGRID_BELT_HORIZ = None
    CURTAINGRID_BELT_RATIO_1 = None
    CURTAINGRID_BELT_RATIO_2 = None
    CURTAINGRID_BELT_RATIO_U = None
    CURTAINGRID_BELT_RATIO_V = None
    CURTAINGRID_BELT_U = None
    CURTAINGRID_BELT_V = None
    CURTAINGRID_BELT_VERT = None
    CURTAINGRID_ORIGIN_1 = None
    CURTAINGRID_ORIGIN_2 = None
    CURTAINGRID_ORIGIN_HORIZ = None
    CURTAINGRID_ORIGIN_U = None
    CURTAINGRID_ORIGIN_V = None
    CURTAINGRID_ORIGIN_VERT = None
    CURTAINGRID_USE_CURVE_DIST = None
    CURTAINGRID_USE_CURVE_DIST_1 = None
    CURTAINGRID_USE_CURVE_DIST_2 = None
    CURTAINGRID_USE_CURVE_DIST_HORIZ = None
    CURTAINGRID_USE_CURVE_DIST_U = None
    CURTAINGRID_USE_CURVE_DIST_V = None
    CURTAINGRID_USE_CURVE_DIST_VERT = None
    CURTAIN_GRID_BASE_ORIENTATION = None
    CURTAIN_VERSION_PARAM = None
    CURTAIN_WALL_PANELS_CONSTRUCTION_TYPE = None
    CURTAIN_WALL_PANELS_FINISH = None
    CURTAIN_WALL_PANELS_HEIGHT = None
    CURTAIN_WALL_PANELS_WIDTH = None
    CURTAIN_WALL_PANEL_HOST_ID = None
    CURTAIN_WALL_SYSPANEL_OFFSET = None
    CURTAIN_WALL_SYSPANEL_THICKNESS = None
    CURVE_BY_POINTS_PROJECTION_TYPE = None
    CURVE_DETERMINES_ORIENTATION = None
    CURVE_EDGE_OFFSET = None
    CURVE_ELEM_ARC_END_ANGLE = None
    CURVE_ELEM_ARC_RADIUS = None
    CURVE_ELEM_ARC_RANGE = None
    CURVE_ELEM_ARC_START_ANGLE = None
    CURVE_ELEM_DEFINES_SLOPE = None
    CURVE_ELEM_LENGTH = None
    CURVE_ELEM_LINE_ANGLE = None
    CURVE_HEIGHT_OFFSET = None
    CURVE_IS_DETAIL = None
    CURVE_IS_FILLED = None
    CURVE_IS_REFERENCE_LINE = None
    CURVE_IS_SLOPE_DEFINING = None
    CURVE_LEVEL = None
    CURVE_NUMBER_OF_SEGMENTS = None
    CURVE_PARAM_CONCRETE_CANTILEVER = None
    CURVE_PARAM_STEEL_CANTILEVER = None
    CURVE_SUPPORT_OFFSET = None
    CURVE_VISIBILITY_PARAM = None
    CURVE_WALL_OFFSET = None
    CURVE_WALL_OFFSET_ROOFS = None
    CUST_MULLION_THICK = None
    CUST_MULLION_WIDTH1 = None
    CUST_MULLION_WIDTH2 = None
    CUT_LINE_ANGLE = None
    CUT_LINE_DISTANCE = None
    CUT_LINE_EXTENSION = None
    CUT_LINE_TYPE = None
    CUT_MARK_SYMBOL = None
    CUT_MARK_SYMBOL_SIZE = None
    CWP_ADD_GRID_PREFIX = None
    CWP_ADD_GRID_SUFFIX = None
    CWP_ADD_LEVEL_PREFIX = None
    CWP_ADD_LEVEL_SUFFIX = None
    CWP_COPY_FLOOR_INSERTS = None
    CWP_COPY_ROOF_INSERTS = None
    CWP_COPY_WALL_INSERTS = None
    CWP_LEVEL_OFFSET = None
    CWP_LINKED_ROOM_PARAMS = None
    CWP_LINKED_ROOM_PHASES = None
    CWP_REUSE_EXISTING_GRIDS = None
    CWP_REUSE_EXISTING_LEVELS = None
    CWP_REUSE_GRIDS_SAME_NAME = None
    CWP_REUSE_LEVELS_SAME_NAME = None
    CWP_SPLIT_COLUMNS_AT_LEVELS = None
    DATUM_BUBBLE_END_1 = None
    DATUM_BUBBLE_END_2 = None
    DATUM_BUBBLE_LOCATION_IN_ELEV = None
    DATUM_PLANE_DEFINES_ORIGIN = None
    DATUM_PLANE_DEFINES_WALL_CLOSURE = None
    DATUM_TEXT = None
    DATUM_VOLUME_OF_INTEREST = None
    DEBUGTAB_DATABOUNDCONTROLSDEMO_BOOLEAN = None
    DEBUGTAB_DATABOUNDCONTROLSDEMO_DOUBLE = None
    DEBUGTAB_DATABOUNDCONTROLSDEMO_ENUM = None
    DEBUGTAB_DATABOUNDCONTROLSDEMO_INTEGER = None
    DECAL_ATTRIBUTES = None
    DECAL_HEIGHT = None
    DECAL_LOCK_PROPORTIONS = None
    DECAL_SUBCATEGORY_ID = None
    DECAL_WIDTH = None
    DEFAULT_CONSTRUCTION_EXT_WALL_UNDERGROUND = None
    DEFAULT_CONSTRUCTION_MASS_EXTERIOR_WALL = None
    DEFAULT_CONSTRUCTION_MASS_FLOOR = None
    DEFAULT_CONSTRUCTION_MASS_GLAZING = None
    DEFAULT_CONSTRUCTION_MASS_INTERIOR_WALL = None
    DEFAULT_CONSTRUCTION_MASS_OPENING = None
    DEFAULT_CONSTRUCTION_MASS_ROOF = None
    DEFAULT_CONSTRUCTION_MASS_SHADE = None
    DEFAULT_CONSTRUCTION_MASS_SKYLIGHT = None
    DEFAULT_CONSTRUCTION_MASS_SLAB = None
    DEFAULT_VIEW_TEMPLATE = None
    DEFINES_CONSTANT_HEIGHT = None
    DESIGN_OPTION_ID = None
    DESIGN_OPTION_PARAM = None
    DIAMETER_SYMBOL_LOCATION = None
    DIAMETER_SYMBOL_TEXT = None
    DIM_DISPLAY_EQ = None
    DIM_ISREPORTING = None
    DIM_LABEL = None
    DIM_LABEL_GP_SHOW = None
    DIM_LABEL_IS_INSTANCE = None
    DIM_LEADER = None
    DIM_LEADER_ARROWHEAD = None
    DIM_LEADER_DISPLAY_CONDITION = None
    DIM_LEADER_SHOULDER_LENGTH = None
    DIM_LEADER_TYPE = None
    DIM_LINE_EXTENSION = None
    DIM_NOT_MODIFIABLE = None
    DIM_REFERENCE_COUNT = None
    DIM_STYLE_ANGULAR_UNITS = None
    DIM_STYLE_ANGULAR_UNITS_ALT = None
    DIM_STYLE_CENTERLINE_PATTERN = None
    DIM_STYLE_CENTERLINE_SYMBOL = None
    DIM_STYLE_CENTERLINE_TICK_MARK = None
    DIM_STYLE_DIM_LINE_SNAP_DIST = None
    DIM_STYLE_FLIPPED_DIM_LINE_EXTENSION = None
    DIM_STYLE_INTERIOR_TICK_MARK = None
    DIM_STYLE_LEADER_TICK_MARK = None
    DIM_STYLE_LINEAR_UNITS = None
    DIM_STYLE_LINEAR_UNITS_ALT = None
    DIM_STYLE_READ_CONVENTION = None
    DIM_STYLE_SHOW_OPENING_HT = None
    DIM_STYLE_SUPPRESS_SPACES = None
    DIM_TEXT_BACKGROUND = None
    DIM_TEXT_LOCATION_FOR_LEADER = None
    DIM_TOTAL_LENGTH = None
    DIM_TO_INSERTS = None
    DIM_TO_INSERT_TYPE = None
    DIM_TO_INTERSECTING_GRIDS = None
    DIM_TO_INTERSECTING_WALLS = None
    DIM_VALUE_ANGLE = None
    DIM_VALUE_LENGTH = None
    DIM_WITNS_LINE_CNTRL = None
    DIM_WITNS_LINE_EXTENSION_BELOW = None
    DISPLACED_ELEMENT_DISPLACEMENT_X = None
    DISPLACED_ELEMENT_DISPLACEMENT_Y = None
    DISPLACED_ELEMENT_DISPLACEMENT_Z = None
    DISPLACEMENT_PATH_DEPTH = None
    DISPLACEMENT_PATH_STYLE = None
    DISTANCE_TO_CUT_MARK = None
    DIVIDEDPATH_BEGINNING_INDENT = None
    DIVIDEDPATH_DISPLAY_NODES = None
    DIVIDEDPATH_DISPLAY_NODE_NUMBERS = None
    DIVIDEDPATH_DISPLAY_REFERENCE_CURVES = None
    DIVIDEDPATH_DISTANCE = None
    DIVIDEDPATH_END_INDENT = None
    DIVIDEDPATH_FLIP_DIRECTION = None
    DIVIDEDPATH_JUSTIFICATION = None
    DIVIDEDPATH_LAYOUT = None
    DIVIDEDPATH_LAYOUT_FIXED_NUM_POINT = None
    DIVIDEDPATH_MAX_DISTANCE = None
    DIVIDEDPATH_MEASUREMENT_TYPE = None
    DIVIDEDPATH_MERGED_POINT_NUM = None
    DIVIDEDPATH_MIN_DISTANCE = None
    DIVIDEDPATH_TOTAL_PATH_LENGTH = None
    DIVIDED_SURFACE_ALL_GRID_ROTATION = None
    DIVIDED_SURFACE_ALL_POINTS = None
    DIVIDED_SURFACE_COMPONENT_TRIM_TYPE = None
    DIVIDED_SURFACE_COVER_FACE_COMPLETELY = None
    DIVIDED_SURFACE_DISPLAY_COMPONENTS = None
    DIVIDED_SURFACE_DISPLAY_DISCARDEDDIVISIONLINES = None
    DIVIDED_SURFACE_DISPLAY_GRIDLINES = None
    DIVIDED_SURFACE_DISPLAY_NODES = None
    DIVIDED_SURFACE_DISPLAY_ORIGINAL_SURFACE = None
    DIVIDED_SURFACE_DISPLAY_PATTERN_FILL = None
    DIVIDED_SURFACE_DISPLAY_PATTERN_LINES = None
    DIVIDED_SURFACE_DISPLAY_SURFACE_OPTION = None
    DIVIDED_SURFACE_EDGE_NUMBER = None
    DIVIDED_SURFACE_FACET_NUMBER = None
    DIVIDED_SURFACE_GRIDLINES_STYLE = None
    DIVIDED_SURFACE_GRID_OPTION_PARAM_1 = None
    DIVIDED_SURFACE_GRID_OPTION_PARAM_2 = None
    DIVIDED_SURFACE_OFFSET_FROM_SURFACE = None
    DIVIDED_SURFACE_ORIGINAL_SURFACE_MATERIAL = None
    DIVIDED_SURFACE_PATTERN = None
    DIVIDED_SURFACE_PATTERN_FILL_MATERIAL = None
    DIVIDED_SURFACE_PATTERN_FLIP = None
    DIVIDED_SURFACE_PATTERN_INDENT_1 = None
    DIVIDED_SURFACE_PATTERN_INDENT_2 = None
    DIVIDED_SURFACE_PATTERN_LINES_STYLE = None
    DIVIDED_SURFACE_PATTERN_MIRROR = None
    DIVIDED_SURFACE_PATTERN_ROTATION_ANGLE = None
    DIVIDED_SURFACE_POINT_NUMBER = None
    DIVIDED_SURFACE_RULE_1_SUSPENSION = None
    DIVIDED_SURFACE_RULE_2_SUSPENSION = None
    DIVIDED_SURFACE_SURFACE_AREA = None
    DIVIDED_SURFACE_TILE_BORDER = None
    DIVIDED_SURFACE_TOTAL_EDGE_LENGTH = None
    DIVISION_PATTERN = None
    DIVISION_PROFILE_WIDTH = None
    DIVISION_RULE_PARAM = None
    DIVISION_SKETCH_CURVE_DIVISION_PARAMS_OVERRIDE_PARAM = None
    DIVISION_SKETCH_CURVE_EXTENTD_TO_SILH_PARAM = None
    DOOR_CONSTRUCTION_TYPE = None
    DOOR_COST = None
    DOOR_FINISH = None
    DOOR_FIRE_RATING = None
    DOOR_FRAME_MATERIAL = None
    DOOR_FRAME_TYPE = None
    DOOR_HEIGHT = None
    DOOR_NUMBER = None
    DOOR_OPERATION_TYPE = None
    DOOR_THICKNESS = None
    DOOR_WIDTH = None
    DPART_AREA_COMPUTED = None
    DPART_BASE_LEVEL = None
    DPART_BASE_LEVEL_BY_ORIGINAL = None
    DPART_CAN_HOST_REBAR = None
    DPART_EXCLUDED = None
    DPART_HEIGHT_COMPUTED = None
    DPART_LAYER_CONSTRUCTION = None
    DPART_LAYER_FUNCTION = None
    DPART_LAYER_WIDTH = None
    DPART_LENGTH_COMPUTED = None
    DPART_MATERIAL_BY_ORIGINAL = None
    DPART_MATERIAL_ID_PARAM = None
    DPART_ORIGINAL_CATEGORY = None
    DPART_ORIGINAL_CATEGORY_ID = None
    DPART_ORIGINAL_FAMILY = None
    DPART_ORIGINAL_TYPE = None
    DPART_PHASE_CREATED_BY_ORIGINAL = None
    DPART_PHASE_DEMOLISHED_BY_ORIGINAL = None
    DPART_SHAPE_MODIFIED = None
    DPART_VOLUME_COMPUTED = None
    DRAW_FOR_EACH_RUN = None
    DUCT_TERMINAL_ENGAGEMENT_LENGTH = None
    EDGE_LINEWORK = None
    EDITED_BY = None
    ELECTICAL_EQUIP_VOLTAGE = None
    ELECTICAL_EQUIP_WATTAGE = None
    ELEMENT_IS_CUTTING = None
    ELEMENT_LOCKED_PARAM = None
    ELEM_CATEGORY_PARAM = None
    ELEM_CATEGORY_PARAM_MT = None
    ELEM_DELETABLE_IN_FAMILY = None
    ELEM_FAMILY_AND_TYPE_PARAM = None
    ELEM_FAMILY_PARAM = None
    ELEM_IS_REFERENCE = None
    ELEM_PARTITION_PARAM = None
    ELEM_REFERENCE_NAME = None
    ELEM_REFERENCE_NAME_2D_XZ = None
    ELEM_ROOM_ID = None
    ELEM_ROOM_NAME = None
    ELEM_ROOM_NUMBER = None
    ELEM_TYPE_LABEL = None
    ELEM_TYPE_PARAM = None
    ELEVATN_TAG = None
    ELEV_ARROW_ANGLE = None
    ELEV_ARROW_FILLED = None
    ELEV_ASSOC_DATUM = None
    ELEV_REFERENCE_LABEL_POS = None
    ELEV_SHAPE = None
    ELEV_SHOW_VIEW_NAME = None
    ELEV_SYMBOL_ID = None
    ELEV_TEXT_POS = None
    ELEV_VIEW_NAME_POS = None
    ELEV_WIDTH = None
    ELLIPSE_FOCUS_MRK_VISIBLE = None
    ELLIPSE_X_PARAM = None
    ELLIPSE_Y_PARAM = None
    END_EXTENSION = None
    END_JOIN_CUTBACK = None
    END_TREATMENT = None
    END_Y_JUSTIFICATION = None
    END_Y_OFFSET_VALUE = None
    END_Z_JUSTIFICATION = None
    END_Z_OFFSET_VALUE = None
    ENERGY_ANALYSIS_ADVANCED_OPTIONS = None
    ENERGY_ANALYSIS_BUILDING_OPERATING_SCHEDULE = None
    ENERGY_ANALYSIS_CONCEPTUAL_CONSTRUCTION = None
    ENERGY_ANALYSIS_CREATE_ANALYTICAL_MODEL = None
    ENERGY_ANALYSIS_GLAZING_IS_SHADED = None
    ENERGY_ANALYSIS_HVAC_SYSTEM = None
    ENERGY_ANALYSIS_MASSZONE_COREOFFSET = None
    ENERGY_ANALYSIS_MASSZONE_DIVIDEPERIMETER = None
    ENERGY_ANALYSIS_MASSZONE_USEENERGYDATASETTINGS = None
    ENERGY_ANALYSIS_MASS_ZONING = None
    ENERGY_ANALYSIS_OUTDOOR_AIR_INFORMATION_PARAM = None
    ENERGY_ANALYSIS_PERCENTAGE_GLAZING = None
    ENERGY_ANALYSIS_PERCENTAGE_SKYLIGHTS = None
    ENERGY_ANALYSIS_SHADE_DEPTH = None
    ENERGY_ANALYSIS_SILL_HEIGHT = None
    ENERGY_ANALYSIS_SKYLIGHT_WIDTH = None
    EQUALITY_FORMULA = None
    EQUALITY_TEXT_FOR_ANGULAR_DIM = None
    EQUALITY_TEXT_FOR_CONTINUOUS_LINEAR_DIM = None
    EQUALITY_WITNESS_DISPLAY = None
    EXTRUSION_AUTO_PARAMS = None
    EXTRUSION_END_PARAM = None
    EXTRUSION_LENGTH = None
    EXTRUSION_START_PARAM = None
    FABRICATION_BOTTOM_ELEVATION_INCLUDE_INSULATION_OF_PART = None
    FABRICATION_BOTTOM_ELEVATION_OF_PART = None
    FABRICATION_BOTTOM_OF_PART = None
    FABRICATION_CENTERLINE_ELEVATION_OF_PART = None
    FABRICATION_DOUBLEWALL_MATERIAL_ABBREVIATION = None
    FABRICATION_END_OFFSET_PARAM = None
    FABRICATION_FITTING_DESCRIPTION = None
    FABRICATION_INSULATION_ABBREVIATION = None
    FABRICATION_INSULATION_SPEC = None
    FABRICATION_INSULATION_SPECIFICATION_ABBREVIATION = None
    FABRICATION_LEVEL_PARAM = None
    FABRICATION_MATERIAL_ABBREVIATION = None
    FABRICATION_OFFSET_PARAM = None
    FABRICATION_PART_ALIAS = None
    FABRICATION_PART_ANGLE = None
    FABRICATION_PART_ANGLE_OPTION = None
    FABRICATION_PART_BOUGHT_OUT = None
    FABRICATION_PART_CUT_TYPE = None
    FABRICATION_PART_DEPTH_IN = None
    FABRICATION_PART_DEPTH_IN_OPTION = None
    FABRICATION_PART_DEPTH_OUT = None
    FABRICATION_PART_DEPTH_OUT_OPTION = None
    FABRICATION_PART_DIAMETER_IN = None
    FABRICATION_PART_DIAMETER_IN_OPTION = None
    FABRICATION_PART_DIAMETER_OUT = None
    FABRICATION_PART_DIAMETER_OUT_OPTION = None
    FABRICATION_PART_DOUBLEWALL_MATERIAL = None
    FABRICATION_PART_DOUBLEWALL_MATERIAL_AREA = None
    FABRICATION_PART_DOUBLEWALL_MATERIAL_THICKNESS = None
    FABRICATION_PART_INSULATION_AREA = None
    FABRICATION_PART_ITEM_NUMBER = None
    FABRICATION_PART_LENGTH = None
    FABRICATION_PART_LENGTH_OPTION = None
    FABRICATION_PART_LINING_AREA = None
    FABRICATION_PART_MATERIAL = None
    FABRICATION_PART_MATERIAL_THICKNESS = None
    FABRICATION_PART_NOTES = None
    FABRICATION_PART_SHEETMETAL_AREA = None
    FABRICATION_PART_TAKEOFF_DIALOG_PARAM = None
    FABRICATION_PART_WEIGHT = None
    FABRICATION_PART_WIDTH_IN = None
    FABRICATION_PART_WIDTH_IN_OPTION = None
    FABRICATION_PART_WIDTH_OUT = None
    FABRICATION_PART_WIDTH_OUT_OPTION = None
    FABRICATION_PIPE_INVERT_ELEVATION = None
    FABRICATION_PRODUCT_CODE = None
    FABRICATION_PRODUCT_DATA_FINISH_DESCRIPTION = None
    FABRICATION_PRODUCT_DATA_INSTALL_TYPE = None
    FABRICATION_PRODUCT_DATA_ITEM_DESCRIPTION = None
    FABRICATION_PRODUCT_DATA_LONG_DESCRIPTION = None
    FABRICATION_PRODUCT_DATA_MATERIAL_DESCRIPTION = None
    FABRICATION_PRODUCT_DATA_OEM = None
    FABRICATION_PRODUCT_DATA_PRODUCT = None
    FABRICATION_PRODUCT_DATA_RANGE = None
    FABRICATION_PRODUCT_DATA_SIZE_DESCRIPTION = None
    FABRICATION_PRODUCT_DATA_SPECIFICATION = None
    FABRICATION_PRODUCT_ENTRY = None
    FABRICATION_RELATIVE_FILENAME = None
    FABRICATION_ROUTING_SOLUTIONS_UI_PARAM = None
    FABRICATION_SERVICE_ABBREVIATION = None
    FABRICATION_SERVICE_NAME = None
    FABRICATION_SERVICE_PARAM = None
    FABRICATION_SET_UP_DOWN_TAG = None
    FABRICATION_SLOPE_PARAM = None
    FABRICATION_SPECIFICATION = None
    FABRICATION_SPECIFICATION_ABBREVIATION = None
    FABRICATION_SPOT_BOTTOM_ELEVATION_INCLUDE_INSULATION_OF_PART = None
    FABRICATION_SPOT_BOTTOM_ELEVATION_OF_PART = None
    FABRICATION_SPOT_TOP_ELEVATION_INCLUDE_INSULATION_OF_PART = None
    FABRICATION_SPOT_TOP_ELEVATION_OF_PART = None
    FABRICATION_START_OFFSET_PARAM = None
    FABRICATION_TOP_ELEVATION_INCLUDE_INSULATION_OF_PART = None
    FABRICATION_TOP_ELEVATION_OF_PART = None
    FABRICATION_TOP_OF_PART = None
    FABRICATION_VENDOR = None
    FABRICATION_VENDOR_CODE = None
    FABRIC_BEND_DIAMETER = None
    FABRIC_NUMBER = None
    FABRIC_PARAM_COVER_OFFSET = None
    FABRIC_PARAM_CUT_BY_HOST = None
    FABRIC_PARAM_CUT_OVERALL_LENGTH = None
    FABRIC_PARAM_CUT_OVERALL_WIDTH = None
    FABRIC_PARAM_CUT_SHEET_MASS = None
    FABRIC_PARAM_LAPSPLICE_POSITION = None
    FABRIC_PARAM_LOCATION_GENERIC = None
    FABRIC_PARAM_LOCATION_SLAB = None
    FABRIC_PARAM_LOCATION_WALL = None
    FABRIC_PARAM_MAJOR_LAPSPLICE_LENGTH = None
    FABRIC_PARAM_MINOR_LAPSPLICE_LENGTH = None
    FABRIC_PARAM_ROUNDING = None
    FABRIC_PARAM_SHARED_FAMILY_KEY = None
    FABRIC_PARAM_SHEET_TYPE = None
    FABRIC_PARAM_SPAN_SYM_BOTTOM = None
    FABRIC_PARAM_SPAN_SYM_D_BOTTOM = None
    FABRIC_PARAM_SPAN_SYM_D_LEFT = None
    FABRIC_PARAM_SPAN_SYM_D_RIGHT = None
    FABRIC_PARAM_SPAN_SYM_D_TOP = None
    FABRIC_PARAM_SPAN_SYM_LEFT = None
    FABRIC_PARAM_SPAN_SYM_RIGHT = None
    FABRIC_PARAM_SPAN_SYM_TOP = None
    FABRIC_PARAM_SPAN_TAG_COMPONENT_REFERENCE = None
    FABRIC_PARAM_TAG_VIEW = None
    FABRIC_PARAM_TOTAL_SHEET_MASS = None
    FABRIC_SHEET_DEFAULT_MAJOR_LAPSPLICE_LENGTH = None
    FABRIC_SHEET_DEFAULT_MINOR_LAPSPLICE_LENGTH = None
    FABRIC_SHEET_LENGTH = None
    FABRIC_SHEET_MAJOR_DIRECTION_WIRE_TYPE = None
    FABRIC_SHEET_MAJOR_END_OVERHANG = None
    FABRIC_SHEET_MAJOR_LAYOUT_PATTERN = None
    FABRIC_SHEET_MAJOR_NUMBER_OF_WIRES = None
    FABRIC_SHEET_MAJOR_REINFORCEMENT_AREA = None
    FABRIC_SHEET_MAJOR_SPACING = None
    FABRIC_SHEET_MAJOR_START_OVERHANG = None
    FABRIC_SHEET_MASS = None
    FABRIC_SHEET_MASSUNIT = None
    FABRIC_SHEET_MINOR_DIRECTION_WIRE_TYPE = None
    FABRIC_SHEET_MINOR_END_OVERHANG = None
    FABRIC_SHEET_MINOR_LAYOUT_PATTERN = None
    FABRIC_SHEET_MINOR_NUMBER_OF_WIRES = None
    FABRIC_SHEET_MINOR_REINFORCEMENT_AREA = None
    FABRIC_SHEET_MINOR_SPACING = None
    FABRIC_SHEET_MINOR_START_OVERHANG = None
    FABRIC_SHEET_OVERALL_LENGTH = None
    FABRIC_SHEET_OVERALL_WIDTH = None
    FABRIC_SHEET_PHYSICAL_MATERIAL_ASSET = None
    FABRIC_SHEET_WIDTH = None
    FABRIC_WIRE_DIAMETER = None
    FABRIC_WIRE_DISTANCE = None
    FABRIC_WIRE_LENGTH = None
    FABRIC_WIRE_TYPE = None
    FACEROOF_LEVEL_PARAM = None
    FACEROOF_OFFSET_PARAM = None
    FAMILY_ALLOW_CUT_WITH_VOIDS = None
    FAMILY_ALWAYS_VERTICAL = None
    FAMILY_AUTOJOIN = None
    FAMILY_BASE_LEVEL_OFFSET_PARAM = None
    FAMILY_BASE_LEVEL_PARAM = None
    FAMILY_CAN_HOST_REBAR = None
    FAMILY_CATEGORY_PSEUDO_PARAM = None
    FAMILY_CONTENT_PART_TYPE = None
    FAMILY_CURVE_ATTACHMENT_PROPORTION = None
    FAMILY_CURVE_GSTYLE_FOR_2010_MASS = None
    FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE = None
    FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_MINUS_ANALYTICAL = None
    FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_PLUS_STICK_SYM = None
    FAMILY_CURVE_GSTYLE_PLUS_INVISIBLE_PLUS_STICK_SYM_MINUS_ANALYTICAL = None
    FAMILY_ELECTRICAL_MAINTAIN_ANNOTATION_ORIENTATION = None
    FAMILY_ELEM_SUBCATEGORY = None
    FAMILY_ENABLE_CUTTING_IN_VIEWS = None
    FAMILY_EXPORT_AS_GEOMETRY = None
    FAMILY_HEIGHT_PARAM = None
    FAMILY_HOSTING_BEHAVIOR = None
    FAMILY_IS_ELEVATION_MARK_BODY = None
    FAMILY_IS_PARAMETRIC = None
    FAMILY_KEEP_TEXT_READABLE = None
    FAMILY_KEYWORD_PROTECTED = None
    FAMILY_KEY_EXT_PARAM = None
    FAMILY_LEVEL_PARAM = None
    FAMILY_LINE_LENGTH_PARAM = None
    FAMILY_NAME_PSEUDO_PARAM = None
    FAMILY_RENDERING_TYPE = None
    FAMILY_RFA_PATH_PSEUDO_PARAM = None
    FAMILY_ROTATE_WITH_COMPONENT = None
    FAMILY_ROUGH_HEIGHT_PARAM = None
    FAMILY_ROUGH_WIDTH_PARAM = None
    FAMILY_ROUNDCONNECTOR_DIMENSIONTYPE = None
    FAMILY_SHARED = None
    FAMILY_STRUCT_FOOTING_USE_CAP_TOP = None
    FAMILY_STRUCT_MATERIAL_TYPE = None
    FAMILY_SYMBOLIC_REP = None
    FAMILY_THICKNESS_PARAM = None
    FAMILY_TOP_LEVEL_OFFSET_PARAM = None
    FAMILY_TOP_LEVEL_PARAM = None
    FAMILY_USAGE_PSEUDO_PARAM = None
    FAMILY_USE_PRECUT_SHAPE = None
    FAMILY_WIDTH_PARAM = None
    FAMILY_WINDOW_INSET_PARAM = None
    FAMILY_WORK_PLANE_BASED = None
    FAMILY_WPB_DEFAULT_ELEVATION = None
    FAM_PROFILE_DEFINITION = None
    FAM_PROFILE_USAGE = None
    FASCIA_DEPTH_PARAM = None
    FASCIA_MATERIAL_PARAM = None
    FASCIA_PROFILE_PARAM = None
    FBX_ASSET_TYPE = None
    FBX_LIGHT_AT_A_DISTANCE = None
    FBX_LIGHT_BALLAST_LOSS = None
    FBX_LIGHT_COLOR_FILTER = None
    FBX_LIGHT_DIMMING_LIGHT_COLOR = None
    FBX_LIGHT_EFFICACY = None
    FBX_LIGHT_EMIT_CIRCLE_DIAMETER = None
    FBX_LIGHT_EMIT_LINE_LENGTH = None
    FBX_LIGHT_EMIT_RECTANGLE_LENGTH = None
    FBX_LIGHT_EMIT_RECTANGLE_WIDTH = None
    FBX_LIGHT_EMIT_SHAPE_VISIBLE = None
    FBX_LIGHT_ILLUMINANCE = None
    FBX_LIGHT_INITIAL_COLOR_CTRL = None
    FBX_LIGHT_INITIAL_COLOR_NAME = None
    FBX_LIGHT_INITIAL_COLOR_TEMPERATURE = None
    FBX_LIGHT_INITIAL_INTENSITY = None
    FBX_LIGHT_INITIAL_INTENSITY_INPUT_METHOD = None
    FBX_LIGHT_LAMP_LUMEN_DEPR = None
    FBX_LIGHT_LAMP_TILT_LOSS = None
    FBX_LIGHT_LIMUNOUS_FLUX = None
    FBX_LIGHT_LIMUNOUS_INTENSITY = None
    FBX_LIGHT_LOSS_FACTOR_CTRL = None
    FBX_LIGHT_LOSS_FACTOR_METHOD = None
    FBX_LIGHT_LUMENAIRE_DIRT = None
    FBX_LIGHT_PHOTOMETRICS = None
    FBX_LIGHT_PHOTOMETRICS_FAM = None
    FBX_LIGHT_PHOTOMETRIC_FILE = None
    FBX_LIGHT_PHOTOMETRIC_FILE_CACHE = None
    FBX_LIGHT_SOURCE_DIAMETER = None
    FBX_LIGHT_SOURCE_LENGTH = None
    FBX_LIGHT_SPOT_BEAM_ANGLE = None
    FBX_LIGHT_SPOT_FIELD_ANGLE = None
    FBX_LIGHT_SPOT_TILT_ANGLE = None
    FBX_LIGHT_SURFACE_LOSS = None
    FBX_LIGHT_TEMPERATURE_LOSS = None
    FBX_LIGHT_TOTAL_LIGHT_LOSS = None
    FBX_LIGHT_VOLTAGE_LOSS = None
    FBX_LIGHT_WATTAGE = None
    FILLED_REGION_BACKGROUND = None
    FILL_PATTERN_ID_PARAM = None
    FILL_PATTERN_ID_PARAM_NO_NO = None
    FIRE_RATING = None
    FIXED_ROTATION = None
    FLEXIBLE_INSTANCE_FLIP = None
    FLOOR_ATTR_DEFAULT_HEIGHT_PARAM = None
    FLOOR_ATTR_DEFAULT_THICKNESS_PARAM = None
    FLOOR_ATTR_THICKNESS_PARAM = None
    FLOOR_HEIGHTABOVELEVEL_PARAM = None
    FLOOR_PARAM_IS_STRUCTURAL = None
    FLOOR_PARAM_SPAN_DIRECTION = None
    FLOOR_STRUCTURE_ID_PARAM = None
    FOLLOW_SURFACE = None
    FRAMING_LENGTH_ROUNDOFF = None
    FUNCTION_PARAM = None
    FURNITURE_HEIGHT = None
    FURNITURE_THICKNESS = None
    FURNITURE_WIDTH = None
    GBXML_EDIT_DATA_PARAM = None
    GENERIC_CONSTRUCTION_TYPE = None
    GENERIC_DEPTH = None
    GENERIC_FINISH = None
    GENERIC_HEIGHT = None
    GENERIC_THICKNESS = None
    GENERIC_WIDTH = None
    GEOM_VISIBILITY_PARAM = None
    GEO_LOCATION = None
    GRAPHIC_DISPLAY_OPTIONS = None
    GRAPHIC_DISPLAY_OPTIONS_BACKGROUND = None
    GRAPHIC_DISPLAY_OPTIONS_FOG = None
    GRAPHIC_DISPLAY_OPTIONS_LIGHTING = None
    GRAPHIC_DISPLAY_OPTIONS_MODEL = None
    GRAPHIC_DISPLAY_OPTIONS_PHOTO_EXPOSURE = None
    GRAPHIC_DISPLAY_OPTIONS_SHADOWS = None
    GRAPHIC_DISPLAY_OPTIONS_SKETCHY_LINES = None
    GRAPHIC_DISPLAY_OPTIONS_SS_INTENSITY = None
    GRIDLINE_SPEC_STATUS = None
    GRID_BANK_COL_NUM = None
    GRID_BANK_COL_WIDTH = None
    GRID_BANK_ROW_HEIGHT = None
    GRID_BANK_ROW_NUM = None
    GRID_BUBBLE_END_1 = None
    GRID_BUBBLE_END_2 = None
    GRID_BUBBLE_LINE_PEN = None
    GRID_CENTER_SEGMENT_COLOR = None
    GRID_CENTER_SEGMENT_PATTERN = None
    GRID_CENTER_SEGMENT_STYLE = None
    GRID_CENTER_SEGMENT_WEIGHT = None
    GRID_END_SEGMENTS_LENGTH = None
    GRID_END_SEGMENT_COLOR = None
    GRID_END_SEGMENT_PATTERN = None
    GRID_END_SEGMENT_WEIGHT = None
    GRID_HEAD_TAG = None
    GROUPNAME_PARAM = None
    GROUP_ALLOWED_VIEW_TYPES = None
    GROUP_ATTACHED_PARENT_NAME = None
    GROUP_LEVEL = None
    GROUP_OFFSET_FROM_LEVEL = None
    GUIDE_GRID_NAME_PARAM = None
    GUIDE_GRID_SPACING_PARAM = None
    GUTTER_MATERIAL_PARAM = None
    GUTTER_PROFILE_PARAM = None
    HANDRAIL_HAND_CLEARANCE_PARAM = None
    HANDRAIL_HEIGHT_PARAM = None
    HANDRAIL_PROJECTION_PARAM = None
    HANDRAIL_SUPPORTS_JUSTIFICATION_PARAM = None
    HANDRAIL_SUPPORTS_LAYOUT_PARAM = None
    HANDRAIL_SUPPORTS_NUMBER_PARAM = None
    HANDRAIL_SUPPORTS_SPACING_PARAM = None
    HANDRAIL_SUPPORTS_TYPE_PARAM = None
    HEAD_ON_PLACEMENT_METHOD = None
    HEAVY_END_PEN = None
    HEAVY_TICK_MARK_PEN = None
    HOST_AREA_COMPUTED = None
    HOST_ID_PARAM = None
    HOST_PANEL_SCHEDULE_AS_PANEL_PARAM = None
    HOST_PERIMETER_COMPUTED = None
    HOST_SSE_CURVED_EDGE_CONDITION_PARAM = None
    HOST_VOLUME_COMPUTED = None
    ICON_INDEX_PARAM = None
    ID_PARAM = None
    IFC_BUILDING_GUID = None
    IFC_GUID = None
    IFC_PROJECT_GUID = None
    IFC_SITE_GUID = None
    IFC_TYPE_GUID = None
    IMPORT_ADT_COMPONENTS_DESC = None
    IMPORT_ADT_ENTITY_HEIGHT = None
    IMPORT_ADT_ENTITY_LENGTH = None
    IMPORT_ADT_ENTITY_ROLL = None
    IMPORT_ADT_ENTITY_STRUCT_TYPE = None
    IMPORT_ADT_ENTITY_STYLE = None
    IMPORT_ADT_ENTITY_THICKNESS = None
    IMPORT_ADT_ENTITY_TYPE = None
    IMPORT_ADT_ENTITY_WIDTH = None
    IMPORT_BACKGROUND = None
    IMPORT_BASE_LEVEL = None
    IMPORT_BASE_LEVEL_OFFSET = None
    IMPORT_DISPLAY_UNITS = None
    IMPORT_INSTANCE_SCALE = None
    IMPORT_SCALE = None
    IMPORT_SYMBOL_NAME = None
    INSTANCE_ELEVATION_PARAM = None
    INSTANCE_FREE_HOST_OFFSET_PARAM = None
    INSTANCE_FREE_HOST_PARAM = None
    INSTANCE_HEAD_HEIGHT_PARAM = None
    INSTANCE_LENGTH_PARAM = None
    INSTANCE_MOVES_WITH_GRID_PARAM = None
    INSTANCE_MOVE_BASE_WITH_GRIDS = None
    INSTANCE_MOVE_TOP_WITH_GRIDS = None
    INSTANCE_OFFSET_POS_PARAM = None
    INSTANCE_REFERENCE_LEVEL_PARAM = None
    INSTANCE_SCHEDULE_ONLY_LEVEL_PARAM = None
    INSTANCE_SILL_HEIGHT_PARAM = None
    INSTANCE_STRUCT_USAGE_PARAM = None
    INSULATION_SCALE = None
    INSULATION_WIDTH = None
    INTERIOR_TICK_DISPLAY = None
    INVALID = None
    IS_VISIBLE_PARAM = None
    JOIN_STRENGTH_ORDER = None
    JOIST_SYSTEM_CLEAR_SPACING_PARAM = None
    JOIST_SYSTEM_ELEM_TAG_NEW_MEMBERS_VIEW = None
    JOIST_SYSTEM_FIXED_SPACING_PARAM = None
    JOIST_SYSTEM_JUSTIFICATION_PARAM = None
    JOIST_SYSTEM_LAYOUT_RULE_PARAM = None
    JOIST_SYSTEM_MAXIMUM_SPACING_PARAM = None
    JOIST_SYSTEM_NEW_BEAM_TYPE_NO_FAM_NAME_PARAM = None
    JOIST_SYSTEM_NEW_BEAM_TYPE_PARAM = None
    JOIST_SYSTEM_NUMBER_OF_LINES_PARAM = None
    JOIST_SYSTEM_NUM_BEAMS_SAME_TYPE = None
    JOIST_SYSTEM_SPACING_PARAM = None
    KEEP_READABLE = None
    KEYNOTE_NUMBER = None
    KEYNOTE_PARAM = None
    KEYNOTE_TEXT = None
    KEY_SOURCE_PARAM = None
    KEY_VALUE = None
    LAYOUTNODE_CURVETYPE_PARAM = None
    LEADER_ARROWHEAD = None
    LEADER_ARROW_WIDTH = None
    LEADER_LEFT_ATTACHMENT = None
    LEADER_LINE = None
    LEADER_OFFSET_SHEET = None
    LEADER_RIGHT_ATTACHMENT = None
    LEGEND_COMPONENT = None
    LEGEND_COMPONENT_DETAIL_LEVEL = None
    LEGEND_COMPONENT_LENGTH = None
    LEGEND_COMPONENT_VIEW = None
    LEVEL_ATTR_ROOM_COMPUTATION_AUTOMATIC = None
    LEVEL_ATTR_ROOM_COMPUTATION_HEIGHT = None
    LEVEL_DATA_FLOOR_AREA = None
    LEVEL_DATA_FLOOR_PERIMETER = None
    LEVEL_DATA_MASS_FAMILY_AND_TYPE_PARAM = None
    LEVEL_DATA_MASS_FAMILY_PARAM = None
    LEVEL_DATA_MASS_INSTANCE_COMMENTS = None
    LEVEL_DATA_MASS_TYPE_COMMENTS = None
    LEVEL_DATA_MASS_TYPE_DESCRIPTION = None
    LEVEL_DATA_MASS_TYPE_PARAM = None
    LEVEL_DATA_OWNING_LEVEL = None
    LEVEL_DATA_SPACE_USAGE = None
    LEVEL_DATA_SURFACE_AREA = None
    LEVEL_DATA_VOLUME = None
    LEVEL_ELEV = None
    LEVEL_HEAD_TAG = None
    LEVEL_IS_BUILDING_STORY = None
    LEVEL_IS_GROUND_PLANE = None
    LEVEL_IS_STRUCTURAL = None
    LEVEL_NAME = None
    LEVEL_PARAM = None
    LEVEL_RELATIVE_BASE_TYPE = None
    LEVEL_ROOM_COMPUTATION_HEIGHT = None
    LEVEL_UP_TO_LEVEL = None
    LIGHTING_FIXTURE_LAMP = None
    LIGHTING_FIXTURE_LIGHT_EMITTER = None
    LIGHTING_FIXTURE_WATTAGE = None
    LINEAR_DIM_TYPE = None
    LINE_COLOR = None
    LINE_PATTERN = None
    LINE_PEN = None
    LINE_SHAPE_AT_CORNER = None
    LOAD_ALL_NON_0_LOADS = None
    LOAD_AREA_AREA = None
    LOAD_AREA_FORCE_FX1 = None
    LOAD_AREA_FORCE_FX2 = None
    LOAD_AREA_FORCE_FX3 = None
    LOAD_AREA_FORCE_FY1 = None
    LOAD_AREA_FORCE_FY2 = None
    LOAD_AREA_FORCE_FY3 = None
    LOAD_AREA_FORCE_FZ1 = None
    LOAD_AREA_FORCE_FZ2 = None
    LOAD_AREA_FORCE_FZ3 = None
    LOAD_AREA_IS_PROJECTED = None
    LOAD_ARROW_SEPARATION = None
    LOAD_ATTR_AREA_FORCE_SCALE_FACTOR = None
    LOAD_ATTR_FORCE_ARROW_TYPE = None
    LOAD_ATTR_FORCE_SCALE_FACTOR = None
    LOAD_ATTR_LINEAR_FORCE_SCALE_FACTOR = None
    LOAD_ATTR_MOMENT_ARROW_ARC = None
    LOAD_ATTR_MOMENT_ARROW_LINE = None
    LOAD_ATTR_MOMENT_SCALE_FACTOR = None
    LOAD_CASE_ID = None
    LOAD_CASE_NAME = None
    LOAD_CASE_NATURE = None
    LOAD_CASE_NATURE_TEXT = None
    LOAD_CASE_NUMBER = None
    LOAD_CASE_SUBCATEGORY = None
    LOAD_COMBINATION_FACTOR = None
    LOAD_COMBINATION_NAME = None
    LOAD_COMMENTS = None
    LOAD_DESCRIPTION = None
    LOAD_FORCE_FX = None
    LOAD_FORCE_FY = None
    LOAD_FORCE_FZ = None
    LOAD_IS_CREATED_BY_API = None
    LOAD_IS_HOSTED = None
    LOAD_IS_PROJECTED = None
    LOAD_IS_REACTION = None
    LOAD_IS_UNIFORM = None
    LOAD_LINEAR_FORCE_FX1 = None
    LOAD_LINEAR_FORCE_FX2 = None
    LOAD_LINEAR_FORCE_FY1 = None
    LOAD_LINEAR_FORCE_FY2 = None
    LOAD_LINEAR_FORCE_FZ1 = None
    LOAD_LINEAR_FORCE_FZ2 = None
    LOAD_LINEAR_LENGTH = None
    LOAD_MOMENT_MX = None
    LOAD_MOMENT_MX1 = None
    LOAD_MOMENT_MX2 = None
    LOAD_MOMENT_MY = None
    LOAD_MOMENT_MY1 = None
    LOAD_MOMENT_MY2 = None
    LOAD_MOMENT_MZ = None
    LOAD_MOMENT_MZ1 = None
    LOAD_MOMENT_MZ2 = None
    LOAD_NATURE_NAME = None
    LOAD_USAGE_NAME = None
    LOAD_USE_LOCAL_COORDINATE_SYSTEM = None
    LOCKED_BASE_OFFSET = None
    LOCKED_END_OFFSET = None
    LOCKED_START_OFFSET = None
    LOCKED_TOP_OFFSET = None
    LV_MULLION_LEG1 = None
    LV_MULLION_LEG2 = None
    MARKUPS_CREATED = None
    MARKUPS_CREATOR = None
    MARKUPS_HISTORY = None
    MARKUPS_LABEL = None
    MARKUPS_MODIFIED = None
    MARKUPS_NOTES = None
    MARKUPS_PRIVATE = None
    MARKUPS_STATUS = None
    MASSING_INTEGRATION_LEVEL = None
    MASS_DATA_CONCEPTUAL_CONSTRUCTION = None
    MASS_DATA_GLAZING_IS_SHADED = None
    MASS_DATA_MASS_EXTERIOR_WALL_AREA = None
    MASS_DATA_MASS_INTERIOR_WALL_AREA = None
    MASS_DATA_MASS_OPENING_AREA = None
    MASS_DATA_MASS_ROOF_AREA = None
    MASS_DATA_MASS_SKYLIGHT_AREA = None
    MASS_DATA_MASS_WINDOW_AREA = None
    MASS_DATA_PERCENTAGE_GLAZING = None
    MASS_DATA_PERCENTAGE_SKYLIGHTS = None
    MASS_DATA_SHADE_DEPTH = None
    MASS_DATA_SILL_HEIGHT = None
    MASS_DATA_SKYLIGHT_WIDTH = None
    MASS_DATA_SLAB = None
    MASS_DATA_SUBCATEGORY = None
    MASS_DATA_SURFACE_DATA_SOURCE = None
    MASS_DATA_UNDERGROUND = None
    MASS_FLOOR_AREA_LEVELS = None
    MASS_GROSS_AREA = None
    MASS_GROSS_SURFACE_AREA = None
    MASS_GROSS_VOLUME = None
    MASS_SURFACEDATA_MATERIAL = None
    MASS_ZONE_CONDITION_TYPE_PARAM = None
    MASS_ZONE_FLOOR_AREA = None
    MASS_ZONE_MATERIAL = None
    MASS_ZONE_SPACE_TYPE_PARAM = None
    MASS_ZONE_VOLUME = None
    MATCHLINE_BOTTOM_OFFSET = None
    MATCHLINE_BOTTOM_PLANE = None
    MATCHLINE_TOP_OFFSET = None
    MATCHLINE_TOP_PLANE = None
    MATERIAL_AREA = None
    MATERIAL_ASPAINT = None
    MATERIAL_ASSET_PARAM_ASSET_LIB_ID = None
    MATERIAL_ASSET_PARAM_COMMON_SHARED_ASSET = None
    MATERIAL_ASSET_PARAM_EXTERNAL_MATERIAL_ID = None
    MATERIAL_ASSET_PARAM_SOURCE = None
    MATERIAL_ASSET_PARAM_SOURCE_URL = None
    MATERIAL_ID_PARAM = None
    MATERIAL_NAME = None
    MATERIAL_PARAM_COLOR = None
    MATERIAL_PARAM_GLOW = None
    MATERIAL_PARAM_SHININESS = None
    MATERIAL_PARAM_SMOOTHNESS = None
    MATERIAL_PARAM_TRANSPARENCY = None
    MATERIAL_VOLUME = None
    MEASURE_FROM_STRUCTURE = None
    MEP_PROFILE_TYPE_PARAM = None
    MODEL_CATEGORY_ID_PARAM = None
    MODEL_GRAPHICS_STYLE = None
    MODEL_GRAPHICS_STYLE_ANON_DRAFT = None
    MODEL_OR_SYMBOLIC = None
    MODEL_TEXT_SIZE = None
    MULLION_ANGLE = None
    MULLION_CORNER_TYPE = None
    MULLION_DEPTH = None
    MULLION_DEPTH1 = None
    MULLION_DEPTH2 = None
    MULLION_FAM_TYPE = None
    MULLION_OFFSET = None
    MULLION_POSITION = None
    MULLION_PROFILE = None
    MULTISTORY_STAIRS_ACTUAL_TREAD_DEPTH = None
    MULTISTORY_STAIRS_REF_LEVEL = None
    MULTISTORY_STAIRS_RUN_BEGIN_WITH_RISER = None
    MULTISTORY_STAIRS_RUN_END_WITH_RISER = None
    MULTI_REFERENCE_ANNOTATION_DIMENSION_STYLE = None
    MULTI_REFERENCE_ANNOTATION_GROUP_TAG_HEADS = None
    MULTI_REFERENCE_ANNOTATION_REFERENCE_CATEGORY = None
    MULTI_REFERENCE_ANNOTATION_SHOW_DIMENSION_TEXT = None
    MULTI_REFERENCE_ANNOTATION_TAG_TYPE = None
    NODE_CONNECTION_STATUS = None
    NUMBER_PARTITION_PARAM = None
    NUMBER_SYSTEM_DISPLAY_RULE = None
    NUMBER_SYSTEM_JUSTIFY = None
    NUMBER_SYSTEM_JUSTIFY_OFFSET = None
    NUMBER_SYSTEM_ORIENTATION = None
    NUMBER_SYSTEM_REFERENCE = None
    NUMBER_SYSTEM_REFERENCE_OFFSET = None
    NUMBER_SYSTEM_TAG_TYPE = None
    NUMBER_SYSTEM_TEXT_SIZE = None
    OBJECT_STYLE_MATERIAL_ID_PARAM = None
    OFFSETFACES_SHOW_SHAPE_HANDLES = None
    OMNICLASS_CODE = None
    OMNICLASS_DESCRIPTION = None
    OPTION_NAME = None
    OPTION_SET_ID = None
    OPTION_SET_NAME = None
    ORDINATE_DIM_SETTING = None
    ORIENT_BY_VIEW = None
    PADDING_LENGTH = None
    PANEL_SCHEDULE_NAME = None
    PARTMAKER_PARAM_DIVISION_GAP = None
    PART_MAKER_DIVISION_PROFILE_OFFSET = None
    PART_MAKER_SPLITTER_PROFILE = None
    PART_MAKER_SPLITTER_PROFILE_EDGE_MATCH = None
    PART_MAKER_SPLITTER_PROFILE_FLIP_ACROSS = None
    PART_MAKER_SPLITTER_PROFILE_FLIP_ALONG = None
    PATH_REIN_ADDL_OFFSET = None
    PATH_REIN_ALTERNATING = None
    PATH_REIN_ALT_OFFSET = None
    PATH_REIN_END_HOOK_ORIENT_1_SLAB = None
    PATH_REIN_END_HOOK_ORIENT_1_WALL = None
    PATH_REIN_END_HOOK_ORIENT_2_SLAB = None
    PATH_REIN_END_HOOK_ORIENT_2_WALL = None
    PATH_REIN_END_HOOK_TYPE_1 = None
    PATH_REIN_END_HOOK_TYPE_2 = None
    PATH_REIN_END_SPANHOOK_ALT = None
    PATH_REIN_END_SPANHOOK_PRIM = None
    PATH_REIN_FACE_SLAB = None
    PATH_REIN_FACE_WALL = None
    PATH_REIN_HOOK_ORIENT_1_SLAB = None
    PATH_REIN_HOOK_ORIENT_1_WALL = None
    PATH_REIN_HOOK_ORIENT_2_SLAB = None
    PATH_REIN_HOOK_ORIENT_2_WALL = None
    PATH_REIN_HOOK_TYPE_1 = None
    PATH_REIN_HOOK_TYPE_2 = None
    PATH_REIN_LENGTH_1 = None
    PATH_REIN_LENGTH_2 = None
    PATH_REIN_NUMBER_OF_BARS = None
    PATH_REIN_SHAPE_1 = None
    PATH_REIN_SHAPE_2 = None
    PATH_REIN_SPACING = None
    PATH_REIN_SPANHOOK_ALT = None
    PATH_REIN_SPANHOOK_PRIM = None
    PATH_REIN_SPANLENGTH_ALT_OFFSET = None
    PATH_REIN_SPANLENGTH_BARLENGTH_ALT = None
    PATH_REIN_SPANLENGTH_BARLENGTH_PRIM = None
    PATH_REIN_SPANLENGTH_BOTTOM_ALT = None
    PATH_REIN_SPANLENGTH_BOTTOM_PRIM = None
    PATH_REIN_SPANLENGTH_TOP_ALT = None
    PATH_REIN_SUMMARY = None
    PATH_REIN_TYPE_1 = None
    PATH_REIN_TYPE_2 = None
    PATTERN_INDENT_1_FOR_DIVISION_RULE = None
    PATTERN_INDENT_2_FOR_DIVISION_RULE = None
    PATTERN_MIRROR_FOR_DIVISION_RULE = None
    PHASE_CREATED = None
    PHASE_DEMOLISHED = None
    PHASE_NAME = None
    PHASE_SEQUENCE_NUMBER = None
    PHY_MATERIAL_PARAM_AVERAGE_MODULUS = None
    PHY_MATERIAL_PARAM_BEHAVIOR = None
    PHY_MATERIAL_PARAM_BENDING = None
    PHY_MATERIAL_PARAM_BENDING_REINFORCEMENT = None
    PHY_MATERIAL_PARAM_CLASS = None
    PHY_MATERIAL_PARAM_COMPRESSION_PARALLEL = None
    PHY_MATERIAL_PARAM_COMPRESSION_PERPENDICULAR = None
    PHY_MATERIAL_PARAM_CONCRETE_COMPRESSION = None
    PHY_MATERIAL_PARAM_DAMPING_RATIO = None
    PHY_MATERIAL_PARAM_EXP_COEFF = None
    PHY_MATERIAL_PARAM_EXP_COEFF1 = None
    PHY_MATERIAL_PARAM_EXP_COEFF2 = None
    PHY_MATERIAL_PARAM_EXP_COEFF3 = None
    PHY_MATERIAL_PARAM_EXP_COEFF_1 = None
    PHY_MATERIAL_PARAM_EXP_COEFF_2 = None
    PHY_MATERIAL_PARAM_FIVEPERCENT_MODULUS_OF_ELACTICITY = None
    PHY_MATERIAL_PARAM_GRADE = None
    PHY_MATERIAL_PARAM_LIGHT_WEIGHT = None
    PHY_MATERIAL_PARAM_MINIMUM_TENSILE_STRENGTH = None
    PHY_MATERIAL_PARAM_MINIMUM_YIELD_STRESS = None
    PHY_MATERIAL_PARAM_POISSON_MOD = None
    PHY_MATERIAL_PARAM_POISSON_MOD1 = None
    PHY_MATERIAL_PARAM_POISSON_MOD2 = None
    PHY_MATERIAL_PARAM_POISSON_MOD3 = None
    PHY_MATERIAL_PARAM_POISSON_MOD_12 = None
    PHY_MATERIAL_PARAM_POISSON_MOD_23 = None
    PHY_MATERIAL_PARAM_REDUCTION_FACTOR = None
    PHY_MATERIAL_PARAM_RESISTANCE_CALC_STRENGTH = None
    PHY_MATERIAL_PARAM_SHEAR_MOD = None
    PHY_MATERIAL_PARAM_SHEAR_MOD1 = None
    PHY_MATERIAL_PARAM_SHEAR_MOD2 = None
    PHY_MATERIAL_PARAM_SHEAR_MOD3 = None
    PHY_MATERIAL_PARAM_SHEAR_MOD_12 = None
    PHY_MATERIAL_PARAM_SHEAR_PARALLEL = None
    PHY_MATERIAL_PARAM_SHEAR_PERPENDICULAR = None
    PHY_MATERIAL_PARAM_SHEAR_REINFORCEMENT = None
    PHY_MATERIAL_PARAM_SHEAR_STRENGTH_REDUCTION = None
    PHY_MATERIAL_PARAM_SPECIES = None
    PHY_MATERIAL_PARAM_STRUCTURAL_DENSITY = None
    PHY_MATERIAL_PARAM_STRUCTURAL_SPECIFIC_HEAT = None
    PHY_MATERIAL_PARAM_STRUCTURAL_THERMAL_TREATED = None
    PHY_MATERIAL_PARAM_SUBCLASS = None
    PHY_MATERIAL_PARAM_TENSION_PARALLEL = None
    PHY_MATERIAL_PARAM_TENSION_PERPENDICULAR = None
    PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY = None
    PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_X = None
    PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_Y = None
    PHY_MATERIAL_PARAM_THERMAL_CONDUCTIVITY_Z = None
    PHY_MATERIAL_PARAM_TYPE = None
    PHY_MATERIAL_PARAM_UNIT_WEIGHT = None
    PHY_MATERIAL_PARAM_WOOD_CONSTRUCTION = None
    PHY_MATERIAL_PARAM_YOUNG_MOD = None
    PHY_MATERIAL_PARAM_YOUNG_MOD1 = None
    PHY_MATERIAL_PARAM_YOUNG_MOD2 = None
    PHY_MATERIAL_PARAM_YOUNG_MOD3 = None
    PHY_MATERIAL_PARAM_YOUNG_MOD_1 = None
    PHY_MATERIAL_PARAM_YOUNG_MOD_2 = None
    PHY_MATERIAL_PROPERTIES = None
    PIPING_CONNECTION_TYPE = None
    PIPING_GENDER_TYPE = None
    PLAN_REGION_VIEW_RANGE = None
    PLAN_VIEW_CUT_PLANE_HEIGHT = None
    PLAN_VIEW_LEVEL = None
    PLAN_VIEW_NORTH = None
    PLAN_VIEW_RANGE = None
    PLAN_VIEW_TOP_CLIP_HEIGHT = None
    PLAN_VIEW_VIEW_DIR = None
    PLUMBING_FIXTURES_CW_CONNECTION = None
    PLUMBING_FIXTURES_DRAIN = None
    PLUMBING_FIXTURES_HW_CONNECTION = None
    PLUMBING_FIXTURES_SUPPLY_FITTING = None
    PLUMBING_FIXTURES_SUPPLY_PIPE = None
    PLUMBING_FIXTURES_TRAP = None
    PLUMBING_FIXTURES_VENT_CONNECTION = None
    PLUMBING_FIXTURES_WASTE_CONNECTION = None
    POCHE_MAT_ID = None
    POINTCLOUDINSTANCE_NAME = None
    POINTCLOUDTYPE_SCALE = None
    POINT_ADAPTIVE_CONSTRAINED = None
    POINT_ADAPTIVE_NUM_PARAM = None
    POINT_ADAPTIVE_ORIENTATION_TYPE = None
    POINT_ADAPTIVE_SHOW_NUMBER = None
    POINT_ADAPTIVE_TYPE_PARAM = None
    POINT_ELEMENT_ANGLE = None
    POINT_ELEMENT_CHORD_LENGTH = None
    POINT_ELEMENT_DRIVEN = None
    POINT_ELEMENT_DRIVING = None
    POINT_ELEMENT_HOSTED_ON_FACE_U_PARAM = None
    POINT_ELEMENT_HOSTED_ON_FACE_V_PARAM = None
    POINT_ELEMENT_HOSTED_PARAM = None
    POINT_ELEMENT_MEASUREMENT_TYPE = None
    POINT_ELEMENT_MEASURE_FROM = None
    POINT_ELEMENT_MIRRORED = None
    POINT_ELEMENT_NON_NORMALIZED_CURVE_PARAMATER = None
    POINT_ELEMENT_NORMALIZED_CURVE_PARAMATER = None
    POINT_ELEMENT_NORMALIZED_SEGMENT_LENGTH = None
    POINT_ELEMENT_OFFSET = None
    POINT_ELEMENT_ROTATION_ANGLE = None
    POINT_ELEMENT_SEGMENT_LENGTH = None
    POINT_ELEMENT_SHOW_NORMAL_PLANE_ONLY = None
    POINT_ELEMENT_SHOW_PLANES = None
    POINT_ELEMENT_ZFLIPPED = None
    POINT_ELEVATION = None
    POINT_FLEXIBLE_CONSTRAINED = None
    POINT_FLEXIBLE_NUM_PARAM = None
    POINT_FLEXIBLE_ORIENTATION_TYPE = None
    POINT_FLEXIBLE_SHOW_NUMBER = None
    POINT_NAME_PARAM = None
    POINT_VISIBILITY_PARAM = None
    PRIMARY_OPTION_ID = None
    PROFILE1_ANGLE = None
    PROFILE1_FAM_TYPE = None
    PROFILE1_FLIPPED_HOR = None
    PROFILE1_OFFSET_X = None
    PROFILE1_OFFSET_Y = None
    PROFILE2_ANGLE = None
    PROFILE2_FAM_TYPE = None
    PROFILE2_FLIPPED_HOR = None
    PROFILE2_OFFSET_X = None
    PROFILE2_OFFSET_Y = None
    PROFILE_ANGLE = None
    PROFILE_FAM_TYPE = None
    PROFILE_FAM_TYPE_PLUS_NONE = None
    PROFILE_FLIPPED_HOR = None
    PROFILE_OFFSET_X = None
    PROFILE_OFFSET_Y = None
    PROFILE_PARAM_ALONG_PATH = None
    PROJECTED_SURFACE_AREA = None
    PROJECT_ADDRESS = None
    PROJECT_AUTHOR = None
    PROJECT_BUILDING_NAME = None
    PROJECT_BUILDING_TYPE = None
    PROJECT_ISSUE_DATE = None
    PROJECT_NAME = None
    PROJECT_NUMBER = None
    PROJECT_ORGANIZATION_DESCRIPTION = None
    PROJECT_ORGANIZATION_NAME = None
    PROJECT_POSTAL_CODE = None
    PROJECT_REVISION_ENUMERATION = None
    PROJECT_REVISION_REVISION_DATE = None
    PROJECT_REVISION_REVISION_DESCRIPTION = None
    PROJECT_REVISION_REVISION_ISSUED = None
    PROJECT_REVISION_REVISION_ISSUED_BY = None
    PROJECT_REVISION_REVISION_ISSUED_TO = None
    PROJECT_REVISION_REVISION_NUM = None
    PROJECT_REVISION_SEQUENCE_NUM = None
    PROJECT_STATUS = None
    PROPERTY_AREA = None
    PROPERTY_AREA_OPEN = None
    PROPERTY_AREA_UNITS = None
    PROPERTY_LENGTH_UNITS = None
    PROPERTY_SEGMENT_BEARING = None
    PROPERTY_SEGMENT_DISTANCE = None
    PROPERTY_SEGMENT_E_W = None
    PROPERTY_SEGMENT_L_R = None
    PROPERTY_SEGMENT_N_S = None
    PROPERTY_SEGMENT_RADIUS = None
    PROPERTY_SEGMENT_SUBCATEGORY_ID = None
    PROPERTY_SET_DESCRIPTION = None
    PROPERTY_SET_KEYWORDS = None
    PROPERTY_SET_MATERIAL_ASPECT = None
    PROPERTY_SET_NAME = None
    PROPERTY_SUBCATEGORY_ID = None
    RADIAL_ARRAY_ARC_RADIUS = None
    RADIUS_SYMBOL_LOCATION = None
    RADIUS_SYMBOL_TEXT = None
    RAILING_SYSTEM_HANDRAILS_HEIGHT_PARAM = None
    RAILING_SYSTEM_HANDRAILS_LATTERAL_OFFSET = None
    RAILING_SYSTEM_HANDRAILS_POSITION_PARAM = None
    RAILING_SYSTEM_HANDRAILS_TYPES_PARAM = None
    RAILING_SYSTEM_SECONDARY_HANDRAILS_HEIGHT_PARAM = None
    RAILING_SYSTEM_SECONDARY_HANDRAILS_LATTERAL_OFFSET = None
    RAILING_SYSTEM_SECONDARY_HANDRAILS_POSITION_PARAM = None
    RAILING_SYSTEM_SECONDARY_HANDRAILS_TYPES_PARAM = None
    RAILING_SYSTEM_TOP_RAIL_HEIGHT_PARAM = None
    RAILING_SYSTEM_TOP_RAIL_TYPES_PARAM = None
    RAMP_ATTR_LEFT_BALUSTER_ATTACH_PT = None
    RAMP_ATTR_MATERIAL = None
    RAMP_ATTR_MIN_INV_SLOPE = None
    RAMP_ATTR_RIGHT_BALUSTER_ATTACH_PT = None
    RAMP_ATTR_SHAPE = None
    RAMP_ATTR_TEXT_FONT = None
    RAMP_ATTR_TEXT_SIZE = None
    RAMP_ATTR_THICKNESS = None
    RAMP_MAX_RUN_LENGTH = None
    RASTER_HORIZONTAL_SCALE = None
    RASTER_MAINTAIN_ASPECT_RATIO = None
    RASTER_SHEETHEIGHT = None
    RASTER_SHEETWIDTH = None
    RASTER_SYMBOL_FILENAME = None
    RASTER_SYMBOL_HEIGHT = None
    RASTER_SYMBOL_PIXELHEIGHT = None
    RASTER_SYMBOL_PIXELWIDTH = None
    RASTER_SYMBOL_RESOLUTION = None
    RASTER_SYMBOL_VIEWNAME = None
    RASTER_SYMBOL_WIDTH = None
    RASTER_VERTICAL_SCALE = None
    RBS_ADDITIONAL_FLOW = None
    RBS_ADJUSTABLE_CONNECTOR = None
    RBS_BUILDING_CONSTRUCTIONCLASS = None
    RBS_BUILDING_USELOADCREDITS = None
    RBS_CABLETRAYCONDUITRUN_LENGTH_PARAM = None
    RBS_CABLETRAYCONDUIT_BENDORFITTING = None
    RBS_CABLETRAYCONDUIT_CONNECTORELEM_TYPE = None
    RBS_CABLETRAYCONDUIT_SYSTEM_TYPE = None
    RBS_CABLETRAYRUN_HEIGHT_PARAM = None
    RBS_CABLETRAYRUN_WIDTH_PARAM = None
    RBS_CABLETRAY_BENDRADIUS = None
    RBS_CABLETRAY_HEIGHT_PARAM = None
    RBS_CABLETRAY_RUNGHEIGHT = None
    RBS_CABLETRAY_RUNGSPACE = None
    RBS_CABLETRAY_RUNGWIDTH = None
    RBS_CABLETRAY_SHAPETYPE = None
    RBS_CABLETRAY_THICKNESS = None
    RBS_CABLETRAY_WIDTH_PARAM = None
    RBS_CALCULATED_SIZE = None
    RBS_COMPONENT_CLASSIFICATION_PARAM = None
    RBS_CONDUITRUN_DIAMETER_PARAM = None
    RBS_CONDUITRUN_INNER_DIAM_PARAM = None
    RBS_CONDUITRUN_OUTER_DIAM_PARAM = None
    RBS_CONDUIT_BENDRADIUS = None
    RBS_CONDUIT_DIAMETER_PARAM = None
    RBS_CONDUIT_INNER_DIAM_PARAM = None
    RBS_CONDUIT_OUTER_DIAM_PARAM = None
    RBS_CONDUIT_TRADESIZE = None
    RBS_CONNECTOR_DESCRIPTION = None
    RBS_CONNECTOR_ISPRIMARY = None
    RBS_CONNECTOR_OFFSET_OBSOLETE = None
    RBS_CONSTRUCTION_SET_PARAM = None
    RBS_CONSTRUCTION_TYPE_SHADINGFACTOR_PARAM = None
    RBS_CTC_BOTTOM_ELEVATION = None
    RBS_CTC_SERVICE_TYPE = None
    RBS_CTC_TOP_ELEVATION = None
    RBS_CURVETYPE_DEFAULT_BEND_PARAM = None
    RBS_CURVETYPE_DEFAULT_CAP_PARAM = None
    RBS_CURVETYPE_DEFAULT_CROSS_PARAM = None
    RBS_CURVETYPE_DEFAULT_ELBOWDOWN_PARAM = None
    RBS_CURVETYPE_DEFAULT_ELBOWUP_PARAM = None
    RBS_CURVETYPE_DEFAULT_ELBOW_PARAM = None
    RBS_CURVETYPE_DEFAULT_HORIZONTAL_BEND_PARAM = None
    RBS_CURVETYPE_DEFAULT_MECHJOINT_PARAM = None
    RBS_CURVETYPE_DEFAULT_TAKEOFF_PARAM = None
    RBS_CURVETYPE_DEFAULT_TEEDOWN_PARAM = None
    RBS_CURVETYPE_DEFAULT_TEEUP_PARAM = None
    RBS_CURVETYPE_DEFAULT_TEE_PARAM = None
    RBS_CURVETYPE_DEFAULT_TRANSITION_PARAM = None
    RBS_CURVETYPE_DEFAULT_UNION_PARAM = None
    RBS_CURVETYPE_MAX_HEIGHT_PARAM = None
    RBS_CURVETYPE_MAX_WIDTH_PARAM = None
    RBS_CURVETYPE_MULTISHAPE_TRANSITION_OVALROUND_PARAM = None
    RBS_CURVETYPE_MULTISHAPE_TRANSITION_PARAM = None
    RBS_CURVETYPE_MULTISHAPE_TRANSITION_RECTOVAL_PARAM = None
    RBS_CURVETYPE_PREFERRED_BRANCH_PARAM = None
    RBS_CURVETYPE_ROUGHNESS_PARAM = None
    RBS_CURVE_DIAMETER_PARAM = None
    RBS_CURVE_HEIGHT_PARAM = None
    RBS_CURVE_HOR_OFFSET_PARAM = None
    RBS_CURVE_SLOPE = None
    RBS_CURVE_SURFACE_AREA = None
    RBS_CURVE_UTSLOPE = None
    RBS_CURVE_VERT_OFFSET_PARAM = None
    RBS_CURVE_WIDTH_PARAM = None
    RBS_DISTRIBUTIONSYS_CONFIG_PARAM = None
    RBS_DISTRIBUTIONSYS_NUMWIRES_PARAM = None
    RBS_DISTRIBUTIONSYS_PHASE_PARAM = None
    RBS_DISTRIBUTIONSYS_VLG_PARAM = None
    RBS_DISTRIBUTIONSYS_VLL_PARAM = None
    RBS_DUCT_BOTTOM_ELEVATION = None
    RBS_DUCT_CALCULATED_SIZE = None
    RBS_DUCT_CONNECTOR_SYSTEM_CLASSIFICATION_PARAM = None
    RBS_DUCT_FITTING_LOSS_METHOD_PARAM = None
    RBS_DUCT_FITTING_LOSS_METHOD_SERVER_PARAM = None
    RBS_DUCT_FITTING_LOSS_METHOD_SETTINGS = None
    RBS_DUCT_FITTING_LOSS_TABLE_PARAM = None
    RBS_DUCT_FLOW_CONFIGURATION_PARAM = None
    RBS_DUCT_FLOW_DIRECTION_PARAM = None
    RBS_DUCT_FLOW_PARAM = None
    RBS_DUCT_PIPE_SYSTEM_ABBREVIATION_PARAM = None
    RBS_DUCT_PRESSURE_DROP = None
    RBS_DUCT_ROUTING_PREFERENCE_PARAM = None
    RBS_DUCT_SIZE_FORMATTED_PARAM = None
    RBS_DUCT_SLOPE = None
    RBS_DUCT_STATIC_PRESSURE = None
    RBS_DUCT_SYSTEM_CALCULATION_PARAM = None
    RBS_DUCT_SYSTEM_TYPE_PARAM = None
    RBS_DUCT_TOP_ELEVATION = None
    RBS_DUCT_TYPE_PARAM = None
    RBS_ELECTRICAL_DATA = None
    RBS_ELEC_AMBIENT_TEMPERATURE = None
    RBS_ELEC_APPARENT_CURRENT_PARAM = None
    RBS_ELEC_APPARENT_CURRENT_PHASEA_PARAM = None
    RBS_ELEC_APPARENT_CURRENT_PHASEB_PARAM = None
    RBS_ELEC_APPARENT_CURRENT_PHASEC_PARAM = None
    RBS_ELEC_APPARENT_LOAD = None
    RBS_ELEC_APPARENT_LOAD_PHASE1 = None
    RBS_ELEC_APPARENT_LOAD_PHASE2 = None
    RBS_ELEC_APPARENT_LOAD_PHASE3 = None
    RBS_ELEC_APPARENT_LOAD_PHASEA = None
    RBS_ELEC_APPARENT_LOAD_PHASEB = None
    RBS_ELEC_APPARENT_LOAD_PHASEC = None
    RBS_ELEC_BALANCED_LOAD = None
    RBS_ELEC_CALC_COEFFICIENT_UTILIZATION = None
    RBS_ELEC_CIRCUIT_FRAME_PARAM = None
    RBS_ELEC_CIRCUIT_LENGTH_PARAM = None
    RBS_ELEC_CIRCUIT_NAME = None
    RBS_ELEC_CIRCUIT_NAMING = None
    RBS_ELEC_CIRCUIT_NOTES_PARAM = None
    RBS_ELEC_CIRCUIT_NUMBER = None
    RBS_ELEC_CIRCUIT_NUMBER_OF_ELEMENTS_PARAM = None
    RBS_ELEC_CIRCUIT_PANEL_PARAM = None
    RBS_ELEC_CIRCUIT_PREFIX = None
    RBS_ELEC_CIRCUIT_PREFIX_SEPARATOR = None
    RBS_ELEC_CIRCUIT_RATING_PARAM = None
    RBS_ELEC_CIRCUIT_START_SLOT = None
    RBS_ELEC_CIRCUIT_TYPE = None
    RBS_ELEC_CIRCUIT_WIRE_NUM_GROUNDS_PARAM = None
    RBS_ELEC_CIRCUIT_WIRE_NUM_HOTS_PARAM = None
    RBS_ELEC_CIRCUIT_WIRE_NUM_NEUTRALS_PARAM = None
    RBS_ELEC_CIRCUIT_WIRE_NUM_RUNS_PARAM = None
    RBS_ELEC_CIRCUIT_WIRE_SIZE_PARAM = None
    RBS_ELEC_CIRCUIT_WIRE_TYPE_PARAM = None
    RBS_ELEC_DEMANDFACTOR_DEMANDLOAD_PARAM = None
    RBS_ELEC_DEMANDFACTOR_LOADCLASSIFICATION_PARAM = None
    RBS_ELEC_DEMANDFACTOR_LOAD_PARAM = None
    RBS_ELEC_ENCLOSURE = None
    RBS_ELEC_LOADSUMMARY_CONNECTED_CURRENT_PARAM = None
    RBS_ELEC_LOADSUMMARY_CONNECTED_LOAD_PARAM = None
    RBS_ELEC_LOADSUMMARY_DEMAND_CURRENT_PARAM = None
    RBS_ELEC_LOADSUMMARY_DEMAND_FACTOR_PARAM = None
    RBS_ELEC_LOADSUMMARY_DEMAND_FACTOR_RULE_PARAM = None
    RBS_ELEC_LOADSUMMARY_DEMAND_LOAD_PARAM = None
    RBS_ELEC_LOADSUMMARY_LOADCLASSIFICATION_PARAM = None
    RBS_ELEC_LOAD_CLASSIFICATION = None
    RBS_ELEC_MAINS = None
    RBS_ELEC_MAX_POLE_BREAKERS = None
    RBS_ELEC_MODIFICATIONS = None
    RBS_ELEC_MOUNTING = None
    RBS_ELEC_NUMBER_OF_POLES = None
    RBS_ELEC_PANEL_BUSSING_PARAM = None
    RBS_ELEC_PANEL_CONFIGURATION_PARAM = None
    RBS_ELEC_PANEL_CURRENT_PHASEA_PARAM = None
    RBS_ELEC_PANEL_CURRENT_PHASEB_PARAM = None
    RBS_ELEC_PANEL_CURRENT_PHASEC_PARAM = None
    RBS_ELEC_PANEL_FEED_PARAM = None
    RBS_ELEC_PANEL_GROUND_BUS_PARAM = None
    RBS_ELEC_PANEL_LOCATION_PARAM = None
    RBS_ELEC_PANEL_MAINSTYPE_PARAM = None
    RBS_ELEC_PANEL_MCB_RATING_PARAM = None
    RBS_ELEC_PANEL_NAME = None
    RBS_ELEC_PANEL_NEUTRAL_BUS_PARAM = None
    RBS_ELEC_PANEL_NEUTRAL_RATING_PARAM = None
    RBS_ELEC_PANEL_NUMPHASES_PARAM = None
    RBS_ELEC_PANEL_NUMWIRES_PARAM = None
    RBS_ELEC_PANEL_SCHEDULE_FOOTER_NOTES_PARAM = None
    RBS_ELEC_PANEL_SCHEDULE_HEADER_NOTES_PARAM = None
    RBS_ELEC_PANEL_SUBFEED_LUGS_PARAM = None
    RBS_ELEC_PANEL_SUPPLY_FROM_PARAM = None
    RBS_ELEC_PANEL_TOTALESTLOAD_HVAC_PARAM = None
    RBS_ELEC_PANEL_TOTALESTLOAD_LIGHT_PARAM = None
    RBS_ELEC_PANEL_TOTALESTLOAD_OTHER_PARAM = None
    RBS_ELEC_PANEL_TOTALESTLOAD_PARAM = None
    RBS_ELEC_PANEL_TOTALESTLOAD_POWER_PARAM = None
    RBS_ELEC_PANEL_TOTALLOAD_HVAC_PARAM = None
    RBS_ELEC_PANEL_TOTALLOAD_LIGHT_PARAM = None
    RBS_ELEC_PANEL_TOTALLOAD_OTHER_PARAM = None
    RBS_ELEC_PANEL_TOTALLOAD_PARAM = None
    RBS_ELEC_PANEL_TOTALLOAD_POWER_PARAM = None
    RBS_ELEC_PANEL_TOTAL_CONNECTED_CURRENT_PARAM = None
    RBS_ELEC_PANEL_TOTAL_DEMAND_CURRENT_PARAM = None
    RBS_ELEC_PANEL_TOTAL_DEMAND_FACTOR_PARAM = None
    RBS_ELEC_POWER_FACTOR = None
    RBS_ELEC_POWER_FACTOR_STATE = None
    RBS_ELEC_ROOM_AVERAGE_ILLUMINATION = None
    RBS_ELEC_ROOM_CAVITY_RATIO = None
    RBS_ELEC_ROOM_LIGHTING_CALC_LUMINAIREPLANE = None
    RBS_ELEC_ROOM_LIGHTING_CALC_WORKPLANE = None
    RBS_ELEC_ROOM_REFLECTIVITY_CEILING = None
    RBS_ELEC_ROOM_REFLECTIVITY_FLOOR = None
    RBS_ELEC_ROOM_REFLECTIVITY_WALLS = None
    RBS_ELEC_SHORT_CIRCUIT_RATING = None
    RBS_ELEC_SWITCH_ID_PARAM = None
    RBS_ELEC_TRUE_CURRENT_PARAM = None
    RBS_ELEC_TRUE_CURRENT_PHASEA_PARAM = None
    RBS_ELEC_TRUE_CURRENT_PHASEB_PARAM = None
    RBS_ELEC_TRUE_CURRENT_PHASEC_PARAM = None
    RBS_ELEC_TRUE_LOAD = None
    RBS_ELEC_TRUE_LOAD_PHASE1 = None
    RBS_ELEC_TRUE_LOAD_PHASE2 = None
    RBS_ELEC_TRUE_LOAD_PHASE3 = None
    RBS_ELEC_TRUE_LOAD_PHASEA = None
    RBS_ELEC_TRUE_LOAD_PHASEB = None
    RBS_ELEC_TRUE_LOAD_PHASEC = None
    RBS_ELEC_VOLTAGE = None
    RBS_ELEC_VOLTAGE_DROP_PARAM = None
    RBS_ELEC_WIRE_CIRCUITS = None
    RBS_ELEC_WIRE_ELEVATION = None
    RBS_ELEC_WIRE_GROUND_ADJUSTMENT = None
    RBS_ELEC_WIRE_HOT_ADJUSTMENT = None
    RBS_ELEC_WIRE_NEUTRAL_ADJUSTMENT = None
    RBS_ELEC_WIRE_SHARE_GROUND = None
    RBS_ELEC_WIRE_SHARE_NEUTRAL = None
    RBS_ELEC_WIRE_TICKMARK_STATE = None
    RBS_ELEC_WIRE_TYPE = None
    RBS_END_LEVEL_PARAM = None
    RBS_END_OFFSET_PARAM = None
    RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_GRID_CELL_SIZE = None
    RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SPACE_INDENTIFICATION_RESOLUTION = None
    RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SURFACE_INDENTIFICATION_RESOLUTION = None
    RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_DETERMINATION_PARAM = None
    RBS_ENERGY_ANALYSIS_EXPORT_CATEGORY_PARAM = None
    RBS_ENERGY_ANALYSIS_EXPORT_COMPLEXITY_PARAM = None
    RBS_ENERGY_ANALYSIS_EXPORT_GBXML_DEFAULTS_PARAM = None
    RBS_ENERGY_ANALYSIS_GROUND_PLANE_PARAM = None
    RBS_ENERGY_ANALYSIS_INCLUDE_THERMAL_PROPERTIES = None
    RBS_ENERGY_ANALYSIS_MODE = None
    RBS_ENERGY_ANALYSIS_PROJECT_PHASE_PARAM = None
    RBS_ENERGY_ANALYSIS_SLIVER_SPACE_TOLERANCE = None
    RBS_ENERGY_ANALYSIS_SURFACE_ADJACENT_SPACE_ID1 = None
    RBS_ENERGY_ANALYSIS_SURFACE_ADJACENT_SPACE_ID2 = None
    RBS_ENERGY_ANALYSIS_SURFACE_AZIMUTH = None
    RBS_ENERGY_ANALYSIS_SURFACE_CADOBJECTID = None
    RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_X = None
    RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_Y = None
    RBS_ENERGY_ANALYSIS_SURFACE_ORIGIN_Z = None
    RBS_ENERGY_ANALYSIS_SURFACE_TILT = None
    RBS_ENERGY_ANALYSIS_VIEW_BUILDING_SHELL_MODE = None
    RBS_ENERGY_ANALYSIS_VIEW_COORD_AXIS_MODE = None
    RBS_ENERGY_ANALYSIS_VIEW_INNER_SHELL_MODE = None
    RBS_ENERGY_ANALYSIS_VIEW_OUTER_SHELL_MODE = None
    RBS_ENERGY_ANALYSIS_VIEW_RBE_MODE = None
    RBS_ENERGY_ANALYSIS_VIEW_SHADING_SURFACES_MODE = None
    RBS_ENERGY_ANALYSIS_VIEW_SURFACES_MODE = None
    RBS_ENERGY_ANALYSIS_VIEW_TRANSPARENT_MODE = None
    RBS_ENERGY_ANALYSIS_VIEW_UPDATE_SURFACES = None
    RBS_EQ_DIAMETER_PARAM = None
    RBS_FAMILY_CONTENT_ANNOTATION_DISPLAY = None
    RBS_FAMILY_CONTENT_DISTRIBUTION_SYSTEM = None
    RBS_FAMILY_CONTENT_OFFSET_HEIGHT = None
    RBS_FAMILY_CONTENT_OFFSET_WIDTH = None
    RBS_FAMILY_CONTENT_SECONDARY_DISTRIBSYS = None
    RBS_FAMILY_CONTENT_TAKEOFF_FIXED_LENGTH = None
    RBS_FAMILY_CONTENT_TAKEOFF_LENGTH = None
    RBS_FAMILY_CONTENT_TAKEOFF_PROJLENGTH = None
    RBS_FLEXDUCT_ROUNDTYPE_PARAM = None
    RBS_FLEX_DUCT_TYPE_PARAM = None
    RBS_FLEX_PATTERN_PARAM = None
    RBS_FLEX_PIPE_TYPE_PARAM = None
    RBS_FLOW_FACTOR_PARAM = None
    RBS_FLOW_OBSOLETE = None
    RBS_FP_SPRINKLER_COVERAGE_PARAM = None
    RBS_FP_SPRINKLER_K_FACTOR_PARAM = None
    RBS_FP_SPRINKLER_ORIFICE_PARAM = None
    RBS_FP_SPRINKLER_ORIFICE_SIZE_PARAM = None
    RBS_FP_SPRINKLER_PRESSURE_CLASS_PARAM = None
    RBS_FP_SPRINKLER_RESPONSE_PARAM = None
    RBS_FP_SPRINKLER_TEMPERATURE_RATING_PARAM = None
    RBS_FRICTION = None
    RBS_GBXML_OPENING_TYPE = None
    RBS_GBXML_SURFACE_AREA = None
    RBS_GBXML_SURFACE_NAME = None
    RBS_GBXML_SURFACE_TYPE = None
    RBS_HVACLOAD_DOOR_AREA_PARAM = None
    RBS_HVACLOAD_DOOR_COOLING_LOAD_PARAM = None
    RBS_HVACLOAD_FLOOR_AREA_PARAM = None
    RBS_HVACLOAD_PARTITION_AREA_PARAM = None
    RBS_HVACLOAD_PARTITION_COOLING_LOAD_PARAM = None
    RBS_HVACLOAD_PLENUM_COOLING_LOAD_PARAM = None
    RBS_HVACLOAD_ROOF_AREA_PARAM = None
    RBS_HVACLOAD_ROOF_COOLING_LOAD_PARAM = None
    RBS_HVACLOAD_SKYLIGHT_AREA_PARAM = None
    RBS_HVACLOAD_SKYLIGHT_COOLING_LOAD_PARAM = None
    RBS_HVACLOAD_WALL_AREA_PARAM = None
    RBS_HVACLOAD_WALL_COOLING_LOAD_PARAM = None
    RBS_HVACLOAD_WINDOW_AREA_PARAM = None
    RBS_HVACLOAD_WINDOW_COOLING_LOAD_PARAM = None
    RBS_HYDRAULIC_DIAMETER_PARAM = None
    RBS_INSULATION_LINING_VOLUME = None
    RBS_INSULATION_THICKNESS = None
    RBS_INSULATION_THICKNESS_FOR_DUCT = None
    RBS_INSULATION_THICKNESS_FOR_PIPE = None
    RBS_IS_CUSTOM_FITTING = None
    RBS_LINING_THICKNESS = None
    RBS_LINING_THICKNESS_FOR_DUCT = None
    RBS_LOAD_SUB_CLASSIFICATION_MOTOR = None
    RBS_LOOKUP_TABLE_NAME = None
    RBS_LOSS_COEFFICIENT = None
    RBS_MAX_FLOW = None
    RBS_MIN_FLOW = None
    RBS_OFFSET_PARAM = None
    RBS_PANEL_SCHEDULE_SHEET_APPEARANCE_INST_PARAM = None
    RBS_PANEL_SCHEDULE_SHEET_APPEARANCE_PARAM = None
    RBS_PARALLELCONDUITS_HORIZONTAL_NUMBER = None
    RBS_PARALLELCONDUITS_HORIZONTAL_OFFSET_VALUE = None
    RBS_PARALLELCONDUITS_VERTICAL_NUMBER = None
    RBS_PARALLELCONDUITS_VERTICAL_OFFSET_VALUE = None
    RBS_PARALLELPIPES_HORIZONTAL_NUMBER = None
    RBS_PARALLELPIPES_HORIZONTAL_OFFSET_VALUE = None
    RBS_PARALLELPIPES_VERTICAL_NUMBER = None
    RBS_PARALLELPIPES_VERTICAL_OFFSET_VALUE = None
    RBS_PART_TYPE = None
    RBS_PIPE_ADDITIONAL_FLOW_PARAM = None
    RBS_PIPE_CALCULATED_SIZE = None
    RBS_PIPE_CLASS_PARAM = None
    RBS_PIPE_CONNECTIONTYPE_PARAM = None
    RBS_PIPE_CONNECTOR_SYSTEM_CLASSIFICATION_PARAM = None
    RBS_PIPE_CWFU_PARAM = None
    RBS_PIPE_DIAMETER_PARAM = None
    RBS_PIPE_FITTING_LOSS_KFACTOR_PARAM = None
    RBS_PIPE_FITTING_LOSS_METHOD_PARAM = None
    RBS_PIPE_FITTING_LOSS_METHOD_SERVER_PARAM = None
    RBS_PIPE_FITTING_LOSS_METHOD_SETTINGS = None
    RBS_PIPE_FITTING_LOSS_TABLE_PARAM = None
    RBS_PIPE_FIXTURE_UNITS_PARAM = None
    RBS_PIPE_FLOW_CONFIGURATION_PARAM = None
    RBS_PIPE_FLOW_DIRECTION_PARAM = None
    RBS_PIPE_FLOW_PARAM = None
    RBS_PIPE_FLOW_STATE_PARAM = None
    RBS_PIPE_FLUID_DENSITY_PARAM = None
    RBS_PIPE_FLUID_TEMPERATURE_PARAM = None
    RBS_PIPE_FLUID_TYPE_PARAM = None
    RBS_PIPE_FLUID_VISCOSITY_PARAM = None
    RBS_PIPE_FRICTION_FACTOR_PARAM = None
    RBS_PIPE_FRICTION_PARAM = None
    RBS_PIPE_HWFU_PARAM = None
    RBS_PIPE_INNER_DIAM_PARAM = None
    RBS_PIPE_INSULATION_THICKNESS = None
    RBS_PIPE_INVERT_ELEVATION = None
    RBS_PIPE_JOINTTYPE_PARAM = None
    RBS_PIPE_MATERIAL_PARAM = None
    RBS_PIPE_OUTER_DIAMETER = None
    RBS_PIPE_PRESSUREDROP_PARAM = None
    RBS_PIPE_RELATIVE_ROUGHNESS_PARAM = None
    RBS_PIPE_REYNOLDS_NUMBER_PARAM = None
    RBS_PIPE_ROUGHNESS_PARAM = None
    RBS_PIPE_SEGMENT_PARAM = None
    RBS_PIPE_SIZE_FORMATTED_PARAM = None
    RBS_PIPE_SIZE_MAXIMUM = None
    RBS_PIPE_SIZE_MINIMUM = None
    RBS_PIPE_SLOPE = None
    RBS_PIPE_SLOPE_DEF_PARAM = None
    RBS_PIPE_STATIC_PRESSURE = None
    RBS_PIPE_SYSTEM_CALCULATION_PARAM = None
    RBS_PIPE_SYSTEM_FIXTURE_UNIT_PARAM = None
    RBS_PIPE_TYPE_FITTING_LOSS_KFACTOR_PARAM = None
    RBS_PIPE_TYPE_FITTING_LOSS_METHOD_PARAM = None
    RBS_PIPE_TYPE_FITTING_LOSS_TABLE_PARAM = None
    RBS_PIPE_TYPE_PARAM = None
    RBS_PIPE_TYPE_VALVE_LOSS_CVFACTOR_PARAM = None
    RBS_PIPE_VALVE_LOSS_CVFACTOR_PARAM = None
    RBS_PIPE_VELOCITY_PARAM = None
    RBS_PIPE_VOLUME_PARAM = None
    RBS_PIPE_WFU_PARAM = None
    RBS_PIPING_SYSTEM_TYPE_PARAM = None
    RBS_PRESSURE_DROP = None
    RBS_PROJECT_CONSTRUCTION_TYPE_SHADINGFACTOR_PARAM = None
    RBS_PROJECT_LOCATION_PARAM = None
    RBS_PROJECT_REPORTTYPE_PARAM = None
    RBS_REFERENCE_FREESIZE = None
    RBS_REFERENCE_INSULATION_THICKNESS = None
    RBS_REFERENCE_INSULATION_TYPE = None
    RBS_REFERENCE_LINING_THICKNESS = None
    RBS_REFERENCE_LINING_TYPE = None
    RBS_REFERENCE_OVERALLSIZE = None
    RBS_REYNOLDSNUMBER_PARAM = None
    RBS_ROOM_COEFFICIENT_UTILIZATION = None
    RBS_ROUTING_PREFERENCE_PARAM = None
    RBS_SECTION = None
    RBS_SEGMENT_DESCRIPTION_PARAM = None
    RBS_SERVICE_TYPE_PARAM = None
    RBS_SHOW_PROFILE_TYPE = None
    RBS_SIZE_LOCK = None
    RBS_START_LEVEL_PARAM = None
    RBS_START_OFFSET_PARAM = None
    RBS_SYSTEM_ABBREVIATION_PARAM = None
    RBS_SYSTEM_BASE_ELEMENT_PARAM = None
    RBS_SYSTEM_CLASSIFICATION_PARAM = None
    RBS_SYSTEM_FLOW_CONVERSION_METHOD_PARAM = None
    RBS_SYSTEM_NAME_PARAM = None
    RBS_SYSTEM_NUM_ELEMENTS_PARAM = None
    RBS_SYSTEM_OVERRIDE_GRAPHICS_PARAM = None
    RBS_SYSTEM_RISEDROP_1LINEDROPSYMBOL_PARAM = None
    RBS_SYSTEM_RISEDROP_1LINERISESYMBOL_PARAM = None
    RBS_SYSTEM_RISEDROP_1LINETEEDOWNSYMBOL_PARAM = None
    RBS_SYSTEM_RISEDROP_1LINETEEUPSYMBOL_PARAM = None
    RBS_SYSTEM_RISEDROP_2LINEDROPSYMBOL_PARAM = None
    RBS_SYSTEM_RISEDROP_2LINERISESYMBOL_PARAM = None
    RBS_SYSTEM_RISEDROP_PARAM = None
    RBS_VELOCITY = None
    RBS_VELOCITY_PRESSURE = None
    RBS_VOLTAGETYPE_MAXVOLTAGE_PARAM = None
    RBS_VOLTAGETYPE_MINVOLTAGE_PARAM = None
    RBS_VOLTAGETYPE_VOLTAGE_PARAM = None
    RBS_WIRE_CIRCUIT_DESCRIPTION = None
    RBS_WIRE_CIRCUIT_LOAD_NAME = None
    RBS_WIRE_CONDUIT_TYPE_PARAM = None
    RBS_WIRE_INSULATION_PARAM = None
    RBS_WIRE_MATERIAL_PARAM = None
    RBS_WIRE_MAX_CONDUCTOR_SIZE_PARAM = None
    RBS_WIRE_NEUTRAL_INCLUDED_IN_BALANCED_LOAD_PARAM = None
    RBS_WIRE_NEUTRAL_MODE_PARAM = None
    RBS_WIRE_NEUTRAL_MULTIPLIER_PARAM = None
    RBS_WIRE_NUM_CONDUCTORS_PARAM = None
    RBS_WIRE_TEMPERATURE_RATING_PARAM = None
    REBAR_BAR_ALLOWED_BAR_TYPES = None
    REBAR_BAR_DEFORMATION_TYPE = None
    REBAR_BAR_DIAMETER = None
    REBAR_BAR_HOOK_LENGTHS = None
    REBAR_BAR_MAXIMUM_BEND_RADIUS = None
    REBAR_BAR_STIRRUP_BEND_DIAMETER = None
    REBAR_BAR_STYLE = None
    REBAR_CONTAINER_BAR_TYPE = None
    REBAR_DISTRIBUTION_TYPE = None
    REBAR_ELEMENT_ROUNDING = None
    REBAR_ELEMENT_VISIBILITY = None
    REBAR_ELEM_BAR_SPACING = None
    REBAR_ELEM_ENDTREATMENT_END = None
    REBAR_ELEM_ENDTREATMENT_START = None
    REBAR_ELEM_HOOK_END_ORIENT = None
    REBAR_ELEM_HOOK_END_TYPE = None
    REBAR_ELEM_HOOK_START_ORIENT = None
    REBAR_ELEM_HOOK_START_TYPE = None
    REBAR_ELEM_HOOK_STYLE = None
    REBAR_ELEM_HOST_MARK = None
    REBAR_ELEM_LAYOUT_RULE = None
    REBAR_ELEM_LENGTH = None
    REBAR_ELEM_QUANTITY_OF_BARS = None
    REBAR_ELEM_SCHEDULE_MARK = None
    REBAR_ELEM_TOTAL_LENGTH = None
    REBAR_HOOK_ANGLE = None
    REBAR_HOOK_LINE_LEN_FACTOR = None
    REBAR_HOOK_STYLE = None
    REBAR_HOST_CATEGORY = None
    REBAR_INCLUDE_FIRST_BAR = None
    REBAR_INCLUDE_LAST_BAR = None
    REBAR_INSTANCE_BAR_DIAMETER = None
    REBAR_INSTANCE_BEND_DIAMETER = None
    REBAR_INSTANCE_STIRRUP_TIE_ATTACHMENT = None
    REBAR_INTERNAL_MULTIPLANAR = None
    REBAR_INTERNAL_MULTIPLANAR_DUPLICATE = None
    REBAR_INTERNAL_MULTIPLANAR_END_CONNECTOR = None
    REBAR_INTERNAL_MULTIPLANAR_START_CONNECTOR = None
    REBAR_MAXIM_SUFFIX = None
    REBAR_MAX_LENGTH = None
    REBAR_MINIM_SUFFIX = None
    REBAR_MIN_LENGTH = None
    REBAR_NUMBER = None
    REBAR_NUMBER_SUFFIX = None
    REBAR_QUANITY_BY_DISTRIB = None
    REBAR_SHAPE = None
    REBAR_SHAPE_ALLOWED_BAR_TYPES = None
    REBAR_SHAPE_ENDTREATMENT_END_TYPE = None
    REBAR_SHAPE_ENDTREATMENT_START_TYPE = None
    REBAR_SHAPE_END_HOOK_LENGTH = None
    REBAR_SHAPE_END_HOOK_OFFSET = None
    REBAR_SHAPE_HOOK_END_TYPE = None
    REBAR_SHAPE_HOOK_START_TYPE = None
    REBAR_SHAPE_HOOK_STYLE = None
    REBAR_SHAPE_IMAGE = None
    REBAR_SHAPE_OUT_OF_PLANE_BEND_DIAMETER = None
    REBAR_SHAPE_PARAM_END_HOOK_TAN_LEN = None
    REBAR_SHAPE_PARAM_START_HOOK_TAN_LEN = None
    REBAR_SHAPE_SPIRAL_BASE_FINISHING_TURNS = None
    REBAR_SHAPE_SPIRAL_HEIGHT = None
    REBAR_SHAPE_SPIRAL_PITCH = None
    REBAR_SHAPE_SPIRAL_TOP_FINISHING_TURNS = None
    REBAR_SHAPE_START_HOOK_LENGTH = None
    REBAR_SHAPE_START_HOOK_OFFSET = None
    REBAR_SHAPE_STIRRUP_TIE_ATTACHMENT = None
    REBAR_STANDARD_BEND_DIAMETER = None
    REBAR_STANDARD_HOOK_BEND_DIAMETER = None
    REBAR_SYSTEM_ACTIVE_BACK_DIR_1 = None
    REBAR_SYSTEM_ACTIVE_BACK_DIR_2 = None
    REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_1 = None
    REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_1_GENERIC = None
    REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_2 = None
    REBAR_SYSTEM_ACTIVE_BOTTOM_DIR_2_GENERIC = None
    REBAR_SYSTEM_ACTIVE_FRONT_DIR_1 = None
    REBAR_SYSTEM_ACTIVE_FRONT_DIR_2 = None
    REBAR_SYSTEM_ACTIVE_TOP_DIR_1 = None
    REBAR_SYSTEM_ACTIVE_TOP_DIR_1_GENERIC = None
    REBAR_SYSTEM_ACTIVE_TOP_DIR_2 = None
    REBAR_SYSTEM_ACTIVE_TOP_DIR_2_GENERIC = None
    REBAR_SYSTEM_ADDL_BOTTOM_OFFSET = None
    REBAR_SYSTEM_ADDL_EXTERIOR_OFFSET = None
    REBAR_SYSTEM_ADDL_INTERIOR_OFFSET = None
    REBAR_SYSTEM_ADDL_TOP_OFFSET = None
    REBAR_SYSTEM_BAR_TYPE_BACK_DIR_1 = None
    REBAR_SYSTEM_BAR_TYPE_BACK_DIR_2 = None
    REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_1 = None
    REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_1_GENERIC = None
    REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_2 = None
    REBAR_SYSTEM_BAR_TYPE_BOTTOM_DIR_2_GENERIC = None
    REBAR_SYSTEM_BAR_TYPE_FRONT_DIR_1 = None
    REBAR_SYSTEM_BAR_TYPE_FRONT_DIR_2 = None
    REBAR_SYSTEM_BAR_TYPE_TOP_DIR_1 = None
    REBAR_SYSTEM_BAR_TYPE_TOP_DIR_1_GENERIC = None
    REBAR_SYSTEM_BAR_TYPE_TOP_DIR_2 = None
    REBAR_SYSTEM_BAR_TYPE_TOP_DIR_2_GENERIC = None
    REBAR_SYSTEM_BOTTOM_MAJOR_MATCHES_BOTTOM_MINOR = None
    REBAR_SYSTEM_COVER_BOTTOM = None
    REBAR_SYSTEM_COVER_SIDE = None
    REBAR_SYSTEM_COVER_TOP = None
    REBAR_SYSTEM_HOOK_ORIENT_BACK_DIR_1 = None
    REBAR_SYSTEM_HOOK_ORIENT_BACK_DIR_2 = None
    REBAR_SYSTEM_HOOK_ORIENT_BOTTOM_DIR_1 = None
    REBAR_SYSTEM_HOOK_ORIENT_BOTTOM_DIR_2 = None
    REBAR_SYSTEM_HOOK_ORIENT_FRONT_DIR_1 = None
    REBAR_SYSTEM_HOOK_ORIENT_FRONT_DIR_2 = None
    REBAR_SYSTEM_HOOK_ORIENT_TOP_DIR_1 = None
    REBAR_SYSTEM_HOOK_ORIENT_TOP_DIR_2 = None
    REBAR_SYSTEM_HOOK_TYPE_BACK_DIR_1 = None
    REBAR_SYSTEM_HOOK_TYPE_BACK_DIR_2 = None
    REBAR_SYSTEM_HOOK_TYPE_BOTTOM_DIR_1 = None
    REBAR_SYSTEM_HOOK_TYPE_BOTTOM_DIR_2 = None
    REBAR_SYSTEM_HOOK_TYPE_FRONT_DIR_1 = None
    REBAR_SYSTEM_HOOK_TYPE_FRONT_DIR_2 = None
    REBAR_SYSTEM_HOOK_TYPE_TOP_DIR_1 = None
    REBAR_SYSTEM_HOOK_TYPE_TOP_DIR_2 = None
    REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_1_NO_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_1_WITH_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_2_NO_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_BOTTOM_DIR_2_WITH_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_DIR_1_NO_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_DIR_1_WITH_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_DIR_2_NO_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_DIR_2_WITH_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_NO_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_1_NO_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_1_WITH_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_2_NO_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_TOP_DIR_2_WITH_SPACING = None
    REBAR_SYSTEM_LAYER_SUMMARY_WITH_SPACING = None
    REBAR_SYSTEM_LAYOUT_RULE = None
    REBAR_SYSTEM_NUMBER_OF_LINES_BACK_DIR_1 = None
    REBAR_SYSTEM_NUMBER_OF_LINES_BACK_DIR_2 = None
    REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_1 = None
    REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_1_GENERIC = None
    REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_2 = None
    REBAR_SYSTEM_NUMBER_OF_LINES_BOTTOM_DIR_2_GENERIC = None
    REBAR_SYSTEM_NUMBER_OF_LINES_FRONT_DIR_1 = None
    REBAR_SYSTEM_NUMBER_OF_LINES_FRONT_DIR_2 = None
    REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_1 = None
    REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_1_GENERIC = None
    REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_2 = None
    REBAR_SYSTEM_NUMBER_OF_LINES_TOP_DIR_2_GENERIC = None
    REBAR_SYSTEM_OVERRIDE = None
    REBAR_SYSTEM_SPACING_BACK_DIR_1 = None
    REBAR_SYSTEM_SPACING_BACK_DIR_2 = None
    REBAR_SYSTEM_SPACING_BOTTOM_DIR_1 = None
    REBAR_SYSTEM_SPACING_BOTTOM_DIR_1_GENERIC = None
    REBAR_SYSTEM_SPACING_BOTTOM_DIR_2 = None
    REBAR_SYSTEM_SPACING_BOTTOM_DIR_2_GENERIC = None
    REBAR_SYSTEM_SPACING_FRONT_DIR_1 = None
    REBAR_SYSTEM_SPACING_FRONT_DIR_2 = None
    REBAR_SYSTEM_SPACING_TOP_DIR_1 = None
    REBAR_SYSTEM_SPACING_TOP_DIR_1_GENERIC = None
    REBAR_SYSTEM_SPACING_TOP_DIR_2 = None
    REBAR_SYSTEM_SPACING_TOP_DIR_2_GENERIC = None
    REBAR_SYSTEM_SPANACTIVE_DIR_1 = None
    REBAR_SYSTEM_SPANACTIVE_DIR_2 = None
    REBAR_SYSTEM_SPANHOOK_BOTTOM_DIR_2 = None
    REBAR_SYSTEM_SPANHOOK_LEFT_DIR_1 = None
    REBAR_SYSTEM_SPANHOOK_RIGHT_DIR_1 = None
    REBAR_SYSTEM_SPANHOOK_TOP_DIR_2 = None
    REBAR_SYSTEM_TOP_MAJOR_MATCHES_BOTTOM_MAJOR = None
    REBAR_SYSTEM_TOP_MAJOR_MATCHES_TOP_MINOR = None
    REBAR_SYSTEM_TOP_MINOR_MATCHES_BOTTOM_MINOR = None
    RECT_MULLION_THICK = None
    RECT_MULLION_WIDTH1 = None
    RECT_MULLION_WIDTH2 = None
    REFERENCED_VIEW = None
    REFERENCE_OTHER_VIEW_UI_REF_VIEW = None
    REFERENCE_OTHER_VIEW_UI_TOGGLE = None
    REFERENCE_VIEWER_ATTR_TAG = None
    REFERENCE_VIEWER_TARGET_VIEW = None
    REFERENCE_VIEWER_UI_TARGET_FILTER = None
    REFERENCE_VIEWER_UI_TARGET_VIEW = None
    REF_TABLE_ELEM_NAME = None
    REF_TABLE_PARAM_NAME = None
    REINFORCEMENT_VOLUME = None
    REIN_EST_BAR_LENGTH = None
    REIN_EST_BAR_VOLUME = None
    REIN_EST_NUMBER_OF_BARS = None
    RELATED_TO_MASS = None
    RENDER_PLANT_HEIGHT = None
    RENDER_PLANT_NAME = None
    RENDER_PLANT_TRIM_HEIGHT = None
    RENDER_RPC_FILENAME = None
    RENDER_RPC_PROPERTIES = None
    REPEATING_DETAIL_ELEMENT = None
    REPEATING_DETAIL_INSIDE = None
    REPEATING_DETAIL_LAYOUT = None
    REPEATING_DETAIL_NUMBER = None
    REPEATING_DETAIL_ROTATION = None
    REPEATING_DETAIL_SPACING = None
    REVEAL_PROFILE_PARAM = None
    REVISION_CLOUD_REVISION = None
    REVISION_CLOUD_REVISION_DATE = None
    REVISION_CLOUD_REVISION_DESCRIPTION = None
    REVISION_CLOUD_REVISION_ISSUED_BY = None
    REVISION_CLOUD_REVISION_ISSUED_TO = None
    REVISION_CLOUD_REVISION_NUM = None
    REVOLUTION_END_ANGLE = None
    REVOLUTION_START_ANGLE = None
    RGB_B_PARAM = None
    RGB_G_PARAM = None
    RGB_R_PARAM = None
    ROOF_ATTR_DEFAULT_THICKNESS_PARAM = None
    ROOF_ATTR_THICKNESS_PARAM = None
    ROOF_BASE_LEVEL_PARAM = None
    ROOF_CONSTRAINT_LEVEL_PARAM = None
    ROOF_CONSTRAINT_OFFSET_PARAM = None
    ROOF_CURVE_HEIGHT_AT_WALL = None
    ROOF_CURVE_HEIGHT_OFFSET = None
    ROOF_CURVE_IS_SLOPE_DEFINING = None
    ROOF_EAVE_CUT_PARAM = None
    ROOF_FACES_LOCATION = None
    ROOF_LEVEL_OFFSET_PARAM = None
    ROOF_RAFTER_OR_TRUSS_PARAM = None
    ROOF_SLOPE = None
    ROOF_STRUCTURE_ID_PARAM = None
    ROOF_UPTO_LEVEL_OFFSET_PARAM = None
    ROOF_UPTO_LEVEL_PARAM = None
    ROOM_ACTUAL_EXHAUST_AIRFLOW_PARAM = None
    ROOM_ACTUAL_LIGHTING_LOAD_PARAM = None
    ROOM_ACTUAL_LIGHTING_LOAD_PER_AREA_PARAM = None
    ROOM_ACTUAL_POWER_LOAD_PARAM = None
    ROOM_ACTUAL_POWER_LOAD_PER_AREA_PARAM = None
    ROOM_ACTUAL_RETURN_AIRFLOW_PARAM = None
    ROOM_ACTUAL_SUPPLY_AIRFLOW_PARAM = None
    ROOM_AREA = None
    ROOM_AREA_PER_PERSON_PARAM = None
    ROOM_BASE_HEAT_LOAD_ON_PARAM = None
    ROOM_BASE_LIGHTING_LOAD_ON_PARAM = None
    ROOM_BASE_POWER_LOAD_ON_PARAM = None
    ROOM_BASE_RETURN_AIRFLOW_ON_PARAM = None
    ROOM_CALCULATED_COOLING_LOAD_PARAM = None
    ROOM_CALCULATED_COOLING_LOAD_PER_AREA_PARAM = None
    ROOM_CALCULATED_HEATING_LOAD_PARAM = None
    ROOM_CALCULATED_HEATING_LOAD_PER_AREA_PARAM = None
    ROOM_CALCULATED_SUPPLY_AIRFLOW_PARAM = None
    ROOM_CALCULATED_SUPPLY_AIRFLOW_PER_AREA_PARAM = None
    ROOM_CALCULATION_POINT = None
    ROOM_COMPUTATION_HEIGHT = None
    ROOM_COMPUTATION_METHOD = None
    ROOM_CONDITION_TYPE_PARAM = None
    ROOM_CONSTRUCTION_SET_PARAM = None
    ROOM_DEPARTMENT = None
    ROOM_DESIGN_COOLING_LOAD_PARAM = None
    ROOM_DESIGN_EXHAUST_AIRFLOW_PARAM = None
    ROOM_DESIGN_HEATING_LOAD_PARAM = None
    ROOM_DESIGN_LIGHTING_LOAD_PARAM = None
    ROOM_DESIGN_LIGHTING_LOAD_PER_AREA_PARAM = None
    ROOM_DESIGN_MECHANICAL_LOAD_PER_AREA_PARAM = None
    ROOM_DESIGN_OTHER_LOAD_PER_AREA_PARAM = None
    ROOM_DESIGN_POWER_LOAD_PARAM = None
    ROOM_DESIGN_POWER_LOAD_PER_AREA_PARAM = None
    ROOM_DESIGN_RETURN_AIRFLOW_PARAM = None
    ROOM_DESIGN_SUPPLY_AIRFLOW_PARAM = None
    ROOM_EDIT_ELECTRICAL_LOADS_PARAM = None
    ROOM_EDIT_PEOPLE_LOADS_PARAM = None
    ROOM_FINISH_BASE = None
    ROOM_FINISH_CEILING = None
    ROOM_FINISH_FLOOR = None
    ROOM_FINISH_WALL = None
    ROOM_HEIGHT = None
    ROOM_LEVEL_ID = None
    ROOM_LIGHTING_LOAD_UNITS_PARAM = None
    ROOM_LOWER_OFFSET = None
    ROOM_NAME = None
    ROOM_NUMBER = None
    ROOM_NUMBER_OF_PEOPLE_PARAM = None
    ROOM_OCCUPANCY = None
    ROOM_OCCUPANCY_UNIT_PARAM = None
    ROOM_PEOPLE_LATENT_HEAT_GAIN_PER_PERSON_PARAM = None
    ROOM_PEOPLE_SENSIBLE_HEAT_GAIN_PER_PERSON_PARAM = None
    ROOM_PEOPLE_TOTAL_HEAT_GAIN_PER_PERSON_PARAM = None
    ROOM_PERIMETER = None
    ROOM_PHASE = None
    ROOM_PHASE_ID = None
    ROOM_PLENUM_LIGHTING_PARAM = None
    ROOM_POWER_LOAD_UNITS_PARAM = None
    ROOM_SPACE_TYPE_PARAM = None
    ROOM_TAG_ORIENTATION_PARAM = None
    ROOM_UPPER_LEVEL = None
    ROOM_UPPER_OFFSET = None
    ROOM_VOLUME = None
    ROUTING_PREFERENCE_PARAM = None
    RVT_HOST_LEVEL = None
    RVT_LEVEL_OFFSET = None
    RVT_LINK_FILE_NAME_WITHOUT_EXT = None
    RVT_LINK_INSTANCE_NAME = None
    RVT_LINK_PHASE_MAP = None
    RVT_LINK_REFERENCE_TYPE = None
    RVT_SOURCE_LEVEL = None
    SCHEDULE_BASE_LEVEL_OFFSET_PARAM = None
    SCHEDULE_BASE_LEVEL_PARAM = None
    SCHEDULE_EMBEDDED_PARAM = None
    SCHEDULE_FIELDS_PARAM = None
    SCHEDULE_FILTER_PARAM = None
    SCHEDULE_FORMAT_PARAM = None
    SCHEDULE_GROUP_PARAM = None
    SCHEDULE_LEVEL_PARAM = None
    SCHEDULE_SHEET_APPEARANCE_PARAM = None
    SCHEDULE_TOP_LEVEL_OFFSET_PARAM = None
    SCHEDULE_TOP_LEVEL_PARAM = None
    SECTION_ATTR_HEAD_TAG = None
    SECTION_ATTR_TAIL_LENGTH = None
    SECTION_ATTR_TAIL_TAG = None
    SECTION_ATTR_TAIL_WIDTH = None
    SECTION_BROKEN_DISPLAY_STYLE = None
    SECTION_COARSER_SCALE_PULLDOWN_IMPERIAL = None
    SECTION_COARSER_SCALE_PULLDOWN_METRIC = None
    SECTION_PARENT_VIEW_NAME = None
    SECTION_SHOW_IN_ONE_VIEW_ONLY = None
    SECTION_TAG = None
    SEEK_ITEM_ID = None
    SHEET_APPROVED_BY = None
    SHEET_ASSEMBLY_ASSEMBLY_CODE = None
    SHEET_ASSEMBLY_ASSEMBLY_DESCRIPTION = None
    SHEET_ASSEMBLY_COST = None
    SHEET_ASSEMBLY_DESCRIPTION = None
    SHEET_ASSEMBLY_KEYNOTE = None
    SHEET_ASSEMBLY_MANUFACTURER = None
    SHEET_ASSEMBLY_MODEL = None
    SHEET_ASSEMBLY_NAME = None
    SHEET_ASSEMBLY_TYPE_COMMENTS = None
    SHEET_ASSEMBLY_TYPE_MARK = None
    SHEET_ASSEMBLY_URL = None
    SHEET_CHECKED_BY = None
    SHEET_CURRENT_REVISION = None
    SHEET_CURRENT_REVISION_DATE = None
    SHEET_CURRENT_REVISION_DESCRIPTION = None
    SHEET_CURRENT_REVISION_ISSUED = None
    SHEET_CURRENT_REVISION_ISSUED_BY = None
    SHEET_CURRENT_REVISION_ISSUED_TO = None
    SHEET_DATE = None
    SHEET_DESIGNED_BY = None
    SHEET_DRAWN_BY = None
    SHEET_FILE_PATH = None
    SHEET_GUIDE_GRID = None
    SHEET_HEIGHT = None
    SHEET_ISSUE_DATE = None
    SHEET_KEY_NUMBER = None
    SHEET_NAME = None
    SHEET_NUMBER = None
    SHEET_REVISIONS_ON_SHEET = None
    SHEET_SCALE = None
    SHEET_SCHEDULED = None
    SHEET_WIDTH = None
    SHOW_ARROWHEAD_TO_CUT_MARK = None
    SHOW_ICON_PARAM = None
    SHOW_TITLE = None
    SKETCH_GRID_SPACING_PARAM = None
    SKETCH_PLANE_PARAM = None
    SLAB_EDGE_MATERIAL_PARAM = None
    SLAB_EDGE_PROFILE_PARAM = None
    SLANTED_COLUMN_BASE_CUT_STYLE = None
    SLANTED_COLUMN_BASE_EXTENSION = None
    SLANTED_COLUMN_GEOMETRY_TREATMENT_BASE = None
    SLANTED_COLUMN_GEOMETRY_TREATMENT_TOP = None
    SLANTED_COLUMN_TOP_CUT_STYLE = None
    SLANTED_COLUMN_TOP_EXTENSION = None
    SLANTED_COLUMN_TYPE_PARAM = None
    SLOPE_ARROW_LEVEL_END = None
    SLOPE_ARROW_LEVEL_START = None
    SLOPE_END_HEIGHT = None
    SLOPE_START_HEIGHT = None
    SPACE_ASSOC_ROOM_NAME = None
    SPACE_ASSOC_ROOM_NUMBER = None
    SPACE_CARPETING_PARAM = None
    SPACE_ELEC_EQUIPMENT_RADIANT_PERCENTAGE_PARAM = None
    SPACE_INFILTRATION_PARAM = None
    SPACE_IS_OCCUPIABLE = None
    SPACE_IS_PLENUM = None
    SPACE_LIGHTING_SCHEDULE_PARAM = None
    SPACE_OCCUPANCY_SCHEDULE_PARAM = None
    SPACE_PEOPLE_ACTIVITY_LEVEL_PARAM = None
    SPACE_POWER_SCHEDULE_PARAM = None
    SPACE_ZONE_NAME = None
    SPACING_APPEND = None
    SPACING_JUSTIFICATION = None
    SPACING_JUSTIFICATION_1 = None
    SPACING_JUSTIFICATION_2 = None
    SPACING_JUSTIFICATION_HORIZ = None
    SPACING_JUSTIFICATION_U = None
    SPACING_JUSTIFICATION_V = None
    SPACING_JUSTIFICATION_VERT = None
    SPACING_LAYOUT = None
    SPACING_LAYOUT_1 = None
    SPACING_LAYOUT_2 = None
    SPACING_LAYOUT_HORIZ = None
    SPACING_LAYOUT_U = None
    SPACING_LAYOUT_V = None
    SPACING_LAYOUT_VERT = None
    SPACING_LENGTH = None
    SPACING_LENGTH_1 = None
    SPACING_LENGTH_2 = None
    SPACING_LENGTH_HORIZ = None
    SPACING_LENGTH_U = None
    SPACING_LENGTH_V = None
    SPACING_LENGTH_VERT = None
    SPACING_NUM_DIVISIONS = None
    SPACING_NUM_DIVISIONS_1 = None
    SPACING_NUM_DIVISIONS_2 = None
    SPACING_NUM_DIVISIONS_HORIZ = None
    SPACING_NUM_DIVISIONS_U = None
    SPACING_NUM_DIVISIONS_V = None
    SPACING_NUM_DIVISIONS_VERT = None
    SPAN_DIR_INST_PARAM_ANGLE = None
    SPAN_DIR_SYM_PARAM_BOTTOM = None
    SPAN_DIR_SYM_PARAM_LEFT = None
    SPAN_DIR_SYM_PARAM_RIGHT = None
    SPAN_DIR_SYM_PARAM_TOP = None
    SPATIAL_FIELD_MGR_CURRENT_NAME = None
    SPATIAL_FIELD_MGR_DESCRIPTION = None
    SPATIAL_FIELD_MGR_LEGEND_HEIGHT = None
    SPATIAL_FIELD_MGR_LEGEND_HOR_ORIGIN_GAP = None
    SPATIAL_FIELD_MGR_LEGEND_SHOW_CONFIG_NAME = None
    SPATIAL_FIELD_MGR_LEGEND_SHOW_DESCRIPTION = None
    SPATIAL_FIELD_MGR_LEGEND_TEXT_TYPE = None
    SPATIAL_FIELD_MGR_LEGEND_VERT_ORIGIN_GAP = None
    SPATIAL_FIELD_MGR_LEGEND_WIDTH = None
    SPATIAL_FIELD_MGR_RANGE = None
    SPATIAL_FIELD_MGR_RESULTS_VISIBILITY = None
    SPECIFY_SLOPE_OR_OFFSET = None
    SPOT_COORDINATE_BASE = None
    SPOT_COORDINATE_BOTTOM_PREFIX = None
    SPOT_COORDINATE_BOTTOM_SUFFIX = None
    SPOT_COORDINATE_ELEVATION_PREFIX = None
    SPOT_COORDINATE_ELEVATION_SUFFIX = None
    SPOT_COORDINATE_INCLUDE_ELEVATION = None
    SPOT_COORDINATE_TOP_PREFIX = None
    SPOT_COORDINATE_TOP_SUFFIX = None
    SPOT_DIM_LEADER = None
    SPOT_DIM_STYLE_SLOPE_UNITS = None
    SPOT_DIM_STYLE_SLOPE_UNITS_ALT = None
    SPOT_ELEV_BASE = None
    SPOT_ELEV_BEND_LEADER = None
    SPOT_ELEV_BOT_VALUE = None
    SPOT_ELEV_DISPLAY_ELEVATIONS = None
    SPOT_ELEV_FLIP_TEXT_VERT = None
    SPOT_ELEV_IND_BOTTOM = None
    SPOT_ELEV_IND_ELEVATION = None
    SPOT_ELEV_IND_EW = None
    SPOT_ELEV_IND_NS = None
    SPOT_ELEV_IND_TOP = None
    SPOT_ELEV_IND_TYPE = None
    SPOT_ELEV_IND_TYPE_BOTTOM = None
    SPOT_ELEV_IND_TYPE_ELEVATION = None
    SPOT_ELEV_IND_TYPE_TOP = None
    SPOT_ELEV_LEADER_ARROWHEAD = None
    SPOT_ELEV_LINE_PEN = None
    SPOT_ELEV_LOWER_PREFIX = None
    SPOT_ELEV_LOWER_SUFFIX = None
    SPOT_ELEV_LOWER_VALUE = None
    SPOT_ELEV_RELATIVE_BASE = None
    SPOT_ELEV_ROTATE_WITH_COMPONENT = None
    SPOT_ELEV_SINGLE_OR_UPPER_PREFIX = None
    SPOT_ELEV_SINGLE_OR_UPPER_SUFFIX = None
    SPOT_ELEV_SINGLE_OR_UPPER_VALUE = None
    SPOT_ELEV_SYMBOL = None
    SPOT_ELEV_TEXT_HORIZ_OFFSET = None
    SPOT_ELEV_TEXT_LOCATION = None
    SPOT_ELEV_TEXT_ORIENTATION = None
    SPOT_ELEV_TICK_MARK_PEN = None
    SPOT_ELEV_TOP_VALUE = None
    SPOT_SLOPE_LEADER_LENGTH = None
    SPOT_SLOPE_OFFSET_FROM_REFERENCE = None
    SPOT_SLOPE_PREFIX = None
    SPOT_SLOPE_SLOPE_DIRECTION = None
    SPOT_SLOPE_SLOPE_REPRESENTATION = None
    SPOT_SLOPE_SUFFIX = None
    SPOT_TEXT_FROM_LEADER = None
    STAIRSTYPE_CALCULATION_RULES = None
    STAIRSTYPE_CALC_RULE_MAX_RESULT = None
    STAIRSTYPE_CALC_RULE_MIN_RESULT = None
    STAIRSTYPE_CALC_RULE_RISER_MULTIPLIER = None
    STAIRSTYPE_CALC_RULE_TARGET_RESULT = None
    STAIRSTYPE_CALC_RULE_TREAD_MULTIPLIER = None
    STAIRSTYPE_CONSTRUCTION_METHOD = None
    STAIRSTYPE_CUTMARK_TYPE = None
    STAIRSTYPE_GEOMUNJOINED_END_CUT_STYLE = None
    STAIRSTYPE_HAS_INTERMEDIATE_SUPPORT = None
    STAIRSTYPE_HAS_LEFT_SUPPORT = None
    STAIRSTYPE_HAS_RIGHT_SUPPORT = None
    STAIRSTYPE_INTERMEDIATE_SUPPORT_TYPE = None
    STAIRSTYPE_IS_ASSEMBLED_STAIRS = None
    STAIRSTYPE_LANDING_TYPE = None
    STAIRSTYPE_LEFT_SIDE_SUPPORT_TYPE = None
    STAIRSTYPE_LEFT_SUPPORT_LATERAL_OFFSET = None
    STAIRSTYPE_MAXIMUM_RISER_HEIGHT = None
    STAIRSTYPE_MINIMUM_RUN_WIDTH = None
    STAIRSTYPE_MINIMUM_TREAD_DEPTH = None
    STAIRSTYPE_MINIMUM_TREAD_WIDTH_INSIDE_BOUNDARY = None
    STAIRSTYPE_NOTCH_CUSTOM_WIDTH = None
    STAIRSTYPE_NOTCH_EXTENSION = None
    STAIRSTYPE_NOTCH_HORIZONTAL_GAP = None
    STAIRSTYPE_NOTCH_THICKNESS = None
    STAIRSTYPE_NOTCH_VERTICAL_GAP = None
    STAIRSTYPE_NOTCH_WIDTH = None
    STAIRSTYPE_NUMBER_OF_INTERMEDIATE_SUPPORTS = None
    STAIRSTYPE_RIGHT_SIDE_SUPPORT_TYPE = None
    STAIRSTYPE_RIGHT_SUPPORT_LATERAL_OFFSET = None
    STAIRSTYPE_RUN_TYPE = None
    STAIRSTYPE_SHOW_CUTLINE = None
    STAIRSTYPE_SHOW_STAIR_PATH = None
    STAIRSTYPE_SHOW_UPDOWN = None
    STAIRSTYPE_WINDER_STEP_FRONT_MEASUREMENT = None
    STAIRS_ACTUAL_NUMBER_OF_RISERS = None
    STAIRS_ACTUAL_NUM_RISERS = None
    STAIRS_ACTUAL_RISER_HEIGHT = None
    STAIRS_ACTUAL_TREAD_DEPTH = None
    STAIRS_ATTR_BODY_MATERIAL = None
    STAIRS_ATTR_BREAK_SYM_IN_CUTLINE = None
    STAIRS_ATTR_CALC_ENABLED = None
    STAIRS_ATTR_CALC_MAX = None
    STAIRS_ATTR_CALC_MIN = None
    STAIRS_ATTR_EQ_RESULT = None
    STAIRS_ATTR_FIRST_RISER = None
    STAIRS_ATTR_LANDINGS_OVERLAPPING = None
    STAIRS_ATTR_LANDING_CARRIAGE = None
    STAIRS_ATTR_LAST_RISER = None
    STAIRS_ATTR_LEFT_SIDE_STRINGER = None
    STAIRS_ATTR_MAX_RISER_HEIGHT = None
    STAIRS_ATTR_MINIMUM_TREAD_DEPTH = None
    STAIRS_ATTR_MONOLITHIC_STAIRS = None
    STAIRS_ATTR_NOSING_LENGTH = None
    STAIRS_ATTR_NOSING_PLACEMENT = None
    STAIRS_ATTR_NUM_MID_STRINGERS = None
    STAIRS_ATTR_RIGHT_SIDE_STRINGER = None
    STAIRS_ATTR_RISERS_PRESENT = None
    STAIRS_ATTR_RISER_ANGLE = None
    STAIRS_ATTR_RISER_MATERIAL = None
    STAIRS_ATTR_RISER_MULT = None
    STAIRS_ATTR_RISER_THICKNESS = None
    STAIRS_ATTR_RISER_TREAD_CONNECT = None
    STAIRS_ATTR_RISER_TYPE = None
    STAIRS_ATTR_SIDE_STRINGER_TYPE_PARAM = None
    STAIRS_ATTR_STAIRS_BOTTOM = None
    STAIRS_ATTR_STAIRS_CUT_OFFSET = None
    STAIRS_ATTR_STAIR_CALCULATOR = None
    STAIRS_ATTR_STRINGER_CARRIAGE = None
    STAIRS_ATTR_STRINGER_HEIGHT = None
    STAIRS_ATTR_STRINGER_MATERIAL = None
    STAIRS_ATTR_STRINGER_OFFSET = None
    STAIRS_ATTR_STRINGER_THICKNESS = None
    STAIRS_ATTR_TEXT_FONT = None
    STAIRS_ATTR_TEXT_SIZE = None
    STAIRS_ATTR_TREAD_FRONT_PROFILE = None
    STAIRS_ATTR_TREAD_MATERIAL = None
    STAIRS_ATTR_TREAD_MULT = None
    STAIRS_ATTR_TREAD_THICKNESS = None
    STAIRS_ATTR_TREAD_WIDTH = None
    STAIRS_ATTR_TRIM_TOP = None
    STAIRS_BASE_LEVEL = None
    STAIRS_BASE_LEVEL_PARAM = None
    STAIRS_BASE_OFFSET = None
    STAIRS_CURVE_TYPE = None
    STAIRS_DBG_SHOW_ANNOTATION_CUT_MARK = None
    STAIRS_DBG_SHOW_BOUNDARY_2D = None
    STAIRS_DBG_SHOW_BOUNDARY_3D = None
    STAIRS_DBG_SHOW_LANDING_BOUNDARY = None
    STAIRS_DBG_SHOW_LANDING_FACES = None
    STAIRS_DBG_SHOW_LANDING_PATH = None
    STAIRS_DBG_SHOW_LEFT_RUN_BOUNDARY_2D = None
    STAIRS_DBG_SHOW_LEFT_RUN_BOUNDARY_3D = None
    STAIRS_DBG_SHOW_MONOLITHIC_SUPPORT_CORSE_GEOM = None
    STAIRS_DBG_SHOW_MONOLITHIC_SUPPORT_GEOM = None
    STAIRS_DBG_SHOW_RIGHT_RUN_BOUNDARY_2D = None
    STAIRS_DBG_SHOW_RIGHT_RUN_BOUNDARY_3D = None
    STAIRS_DBG_SHOW_RUN_CORSE_GEOM = None
    STAIRS_DBG_SHOW_RUN_GEOM = None
    STAIRS_DBG_SHOW_RUN_NOSING = None
    STAIRS_DBG_SHOW_RUN_OUTLINE_FOR_PLAN = None
    STAIRS_DBG_SHOW_RUN_PATH_2D = None
    STAIRS_DBG_SHOW_RUN_PATH_3D = None
    STAIRS_DBG_SHOW_RUN_RISER = None
    STAIRS_DBG_SHOW_SUPPORT_PATH = None
    STAIRS_DBG_SHOW_TREAD_FACES = None
    STAIRS_DBG_SHOW_TRISER_CORSE_GEOM = None
    STAIRS_DBG_SHOW_TRISER_GEOM = None
    STAIRS_DESIRED_NUMBER_OF_RISERS = None
    STAIRS_DESIRED_NUM_RISERS = None
    STAIRS_DOWN_TEXT = None
    STAIRS_ENABLE_CALCULATION_RULE_CHECKING = None
    STAIRS_INST_ALWAYS_UP = None
    STAIRS_INST_DOWN_ARROW_ON = None
    STAIRS_INST_DOWN_LABEL_ON = None
    STAIRS_INST_DOWN_LABEL_TEXT = None
    STAIRS_INST_UP_ARROW_ON = None
    STAIRS_INST_UP_LABEL_ON = None
    STAIRS_INST_UP_LABEL_TEXT = None
    STAIRS_LANDINGTYPE_HAS_MONOLITHIC_SUPPORT = None
    STAIRS_LANDINGTYPE_LANDING_MATERIAL = None
    STAIRS_LANDINGTYPE_STRUCTURE = None
    STAIRS_LANDINGTYPE_THICKNESS = None
    STAIRS_LANDINGTYPE_TREADRISER_TYPE = None
    STAIRS_LANDINGTYPE_USE_SAME_TRISER_AS_RUN = None
    STAIRS_LANDING_BASE_ELEVATION = None
    STAIRS_LANDING_OVERRIDDEN = None
    STAIRS_LANDING_STRUCTURAL = None
    STAIRS_LANDING_THICKNESS = None
    STAIRS_MIN_AUTOMATIC_LANDING_DEPTH = None
    STAIRS_MULTISTORY_TOP_LEVEL_PARAM = None
    STAIRS_MULTISTORY_UP_TO_LEVEL = None
    STAIRS_PATH_FULL_STEP_ARROW = None
    STAIRS_PATH_START_EXTENSION = None
    STAIRS_PATH_START_FROM_RISER = None
    STAIRS_RAILING_ANGLED_CONNECTION = None
    STAIRS_RAILING_BALUSTERS_PER_TREAD = None
    STAIRS_RAILING_BALUSTER_BOTTOM_ANGLE = None
    STAIRS_RAILING_BALUSTER_FAMILY = None
    STAIRS_RAILING_BALUSTER_HEIGHT = None
    STAIRS_RAILING_BALUSTER_IS_POST = None
    STAIRS_RAILING_BALUSTER_LENGTH = None
    STAIRS_RAILING_BALUSTER_OFFSET = None
    STAIRS_RAILING_BALUSTER_PLACEMENT = None
    STAIRS_RAILING_BALUSTER_SHAPE = None
    STAIRS_RAILING_BALUSTER_SLOPE_ANGLE = None
    STAIRS_RAILING_BALUSTER_SPACING = None
    STAIRS_RAILING_BALUSTER_SPACING_TYPE = None
    STAIRS_RAILING_BALUSTER_TOP_ANGLE = None
    STAIRS_RAILING_BALUSTER_WIDTH = None
    STAIRS_RAILING_BASE_LEVEL_PARAM = None
    STAIRS_RAILING_CONNECTION = None
    STAIRS_RAILING_HEIGHT = None
    STAIRS_RAILING_HEIGHT_OFFSET = None
    STAIRS_RAILING_HEIGHT_SHIFT_TYPE = None
    STAIRS_RAILING_HEIGHT_SHIFT_VAL = None
    STAIRS_RAILING_PLACEMENT_OFFSET = None
    STAIRS_RAILING_RAIL_HEIGHT = None
    STAIRS_RAILING_RAIL_NAME = None
    STAIRS_RAILING_RAIL_OFFSET = None
    STAIRS_RAILING_RAIL_STRUCTURE = None
    STAIRS_RAILING_SHAPE = None
    STAIRS_RAILING_TANGENT_CONNECTION = None
    STAIRS_RAILING_THICKNESS = None
    STAIRS_RAILING_WIDTH = None
    STAIRS_RUNTYPE_HAS_MONOLITHIC_SUPPORT = None
    STAIRS_RUNTYPE_RUN_MATERIAL = None
    STAIRS_RUNTYPE_STRUCTURAL_DEPTH = None
    STAIRS_RUNTYPE_STRUCTURE = None
    STAIRS_RUNTYPE_TOTAL_DEPTH = None
    STAIRS_RUNTYPE_UNDERSIDE_SURFACE_TYPE = None
    STAIRS_RUN_ACTUAL_NUMBER_OF_RISERS = None
    STAIRS_RUN_ACTUAL_NUMBER_OF_TREADS = None
    STAIRS_RUN_ACTUAL_RISER_HEIGHT = None
    STAIRS_RUN_ACTUAL_RUN_WIDTH = None
    STAIRS_RUN_ACTUAL_TREAD_DEPTH = None
    STAIRS_RUN_BEGIN_WITH_RISER = None
    STAIRS_RUN_BOTTOM_ELEVATION = None
    STAIRS_RUN_CCW = None
    STAIRS_RUN_CENTER_MARK_VISIBLE = None
    STAIRS_RUN_CREATE_AUTO_LANDING = None
    STAIRS_RUN_END_WITH_RISER = None
    STAIRS_RUN_EXTEND_BELOW_RISER_BASE = None
    STAIRS_RUN_EXTEND_BELOW_TREAD_BASE = None
    STAIRS_RUN_HEIGHT = None
    STAIRS_RUN_LOCATIONPATH_JUSTFICATION = None
    STAIRS_RUN_OVERRIDDEN = None
    STAIRS_RUN_STRUCTURAL = None
    STAIRS_RUN_TOP_ELEVATION = None
    STAIRS_RUN_WIDTH_MEASUREMENT = None
    STAIRS_RUN_WINDER_BEGIN_WITH_STRAIGHT = None
    STAIRS_RUN_WINDER_END_WITH_STRAIGHT = None
    STAIRS_SHOW_DOWN_TEXT = None
    STAIRS_SHOW_UP_TEXT = None
    STAIRS_STAIRS_HEIGHT = None
    STAIRS_STRINGERS_PRESENT = None
    STAIRS_SUPPORTTYPE_FLIP_SECTION_PROFILE = None
    STAIRS_SUPPORTTYPE_MATERIAL = None
    STAIRS_SUPPORTTYPE_SECTION_PROFILE = None
    STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH = None
    STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH_ON_LANDING = None
    STAIRS_SUPPORTTYPE_STRUCTURAL_DEPTH_ON_RUN = None
    STAIRS_SUPPORTTYPE_TOPSIDE_SURFACE = None
    STAIRS_SUPPORTTYPE_TOTAL_DEPTH = None
    STAIRS_SUPPORTTYPE_UNDERSIDE_SURFACE = None
    STAIRS_SUPPORTTYPE_WIDTH = None
    STAIRS_SUPPORT_HORIZONTAL_OFFSET = None
    STAIRS_SUPPORT_LANDINGSUPPORT_TYPE = None
    STAIRS_SUPPORT_LOWER_END_CUT = None
    STAIRS_SUPPORT_OVERRIDDEN = None
    STAIRS_SUPPORT_TRIM_SUPPORT_UPPER = None
    STAIRS_SUPPORT_UPPER_END_CUT = None
    STAIRS_SUPPORT_VERTICAL_OFFSET = None
    STAIRS_TEXT_ORIENTATION = None
    STAIRS_TEXT_TYPE = None
    STAIRS_TOP_LEVEL = None
    STAIRS_TOP_LEVEL_PARAM = None
    STAIRS_TOP_OFFSET = None
    STAIRS_TOTAL_NUMBER_OF_RISERS = None
    STAIRS_TOTAL_NUMBER_OF_TREADS = None
    STAIRS_TRISERTYPE_BACK_NOSING = None
    STAIRS_TRISERTYPE_FRONT_NOSING = None
    STAIRS_TRISERTYPE_LEFT_NOSING = None
    STAIRS_TRISERTYPE_NOSING_LENGTH = None
    STAIRS_TRISERTYPE_NOSING_PLACEMENT = None
    STAIRS_TRISERTYPE_NOSING_PROFILE = None
    STAIRS_TRISERTYPE_RIGHT_NOSING = None
    STAIRS_TRISERTYPE_RISER = None
    STAIRS_TRISERTYPE_RISER_IS_SLANTED = None
    STAIRS_TRISERTYPE_RISER_MATERIAL = None
    STAIRS_TRISERTYPE_RISER_PROFILE = None
    STAIRS_TRISERTYPE_RISER_STYLE = None
    STAIRS_TRISERTYPE_RISER_THICKNESS = None
    STAIRS_TRISERTYPE_RISER_TREAD_CONNECTION = None
    STAIRS_TRISERTYPE_TREAD = None
    STAIRS_TRISERTYPE_TREAD_MATERIAL = None
    STAIRS_TRISERTYPE_TREAD_PROFILE = None
    STAIRS_TRISERTYPE_TREAD_THICKNESS = None
    STAIRS_TRISER_IS_TYPE_OVERRIDDEN = None
    STAIRS_TRISER_NUMBER_BASE_INDEX = None
    STAIRS_TRISER_RISER_MARK = None
    STAIRS_TRISER_RISER_NUMBER = None
    STAIRS_TRISER_TREAD_MARK = None
    STAIRS_TRISER_TREAD_NUMBER = None
    STAIRS_UP_TEXT = None
    STAIRS_WINDERPATTERN_FILLET_INSIDE_CORNER = None
    STAIRS_WINDERPATTERN_MINIMUM_WIDTH_CORNER = None
    STAIRS_WINDERPATTERN_MINIMUM_WIDTH_INSIDE_WALKLINE = None
    STAIRS_WINDERPATTERN_NUMBER_OF_STRAIGHT_STEPS_AT_BEGIN = None
    STAIRS_WINDERPATTERN_NUMBER_OF_STRAIGHT_STEPS_AT_END = None
    STAIRS_WINDERPATTERN_RADIUS_INTERIOR = None
    STAIRS_WINDERPATTERN_STAIR_PATH_OFFSET = None
    STAIRS_WINDERPATTERN_WINDER_STYLE = None
    START_EXTENSION = None
    START_JOIN_CUTBACK = None
    START_SYMBOL_TYPE = None
    START_Y_JUSTIFICATION = None
    START_Y_OFFSET_VALUE = None
    START_Z_JUSTIFICATION = None
    START_Z_OFFSET_VALUE = None
    STRUCTURAL_ANALYTICAL_BEAM_HORIZONTAL_PROJECTION_PLANE = None
    STRUCTURAL_ANALYTICAL_BEAM_RIGID_LINK = None
    STRUCTURAL_ANALYTICAL_COLUMN_HORIZONTAL_PROJECTION_PLANE = None
    STRUCTURAL_ANALYTICAL_COLUMN_RIGID_LINK = None
    STRUCTURAL_ANALYTICAL_HARD_POINTS = None
    STRUCTURAL_ANALYTICAL_MODEL = None
    STRUCTURAL_ANALYTICAL_PROJECT_FLOOR_PLANE = None
    STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE = None
    STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE_COLUMN_BOTTOM = None
    STRUCTURAL_ANALYTICAL_PROJECT_MEMBER_PLANE_COLUMN_TOP = None
    STRUCTURAL_ANALYTICAL_TESSELLATE = None
    STRUCTURAL_ANALYTICAL_TESS_DEVIATION = None
    STRUCTURAL_ANALYZES_AS = None
    STRUCTURAL_ASSET_PARAM = None
    STRUCTURAL_ATTACHMENT_BASE_DISTANCE = None
    STRUCTURAL_ATTACHMENT_BASE_RATIO = None
    STRUCTURAL_ATTACHMENT_BASE_REFERENCEDEND = None
    STRUCTURAL_ATTACHMENT_BASE_TYPE = None
    STRUCTURAL_ATTACHMENT_END_LEVEL_REFERENCE = None
    STRUCTURAL_ATTACHMENT_END_REFELEMENT_END = None
    STRUCTURAL_ATTACHMENT_END_TYPE = None
    STRUCTURAL_ATTACHMENT_END_VALUE_DISTANCE = None
    STRUCTURAL_ATTACHMENT_END_VALUE_ELEVATION = None
    STRUCTURAL_ATTACHMENT_END_VALUE_RATIO = None
    STRUCTURAL_ATTACHMENT_START_LEVEL_REFERENCE = None
    STRUCTURAL_ATTACHMENT_START_REFELEMENT_END = None
    STRUCTURAL_ATTACHMENT_START_TYPE = None
    STRUCTURAL_ATTACHMENT_START_VALUE_DISTANCE = None
    STRUCTURAL_ATTACHMENT_START_VALUE_ELEVATION = None
    STRUCTURAL_ATTACHMENT_START_VALUE_RATIO = None
    STRUCTURAL_ATTACHMENT_TOP_DISTANCE = None
    STRUCTURAL_ATTACHMENT_TOP_RATIO = None
    STRUCTURAL_ATTACHMENT_TOP_REFERENCEDEND = None
    STRUCTURAL_ATTACHMENT_TOP_TYPE = None
    STRUCTURAL_BEAM_CUTBACK_FOR_COLUMN = None
    STRUCTURAL_BEAM_END0_ELEVATION = None
    STRUCTURAL_BEAM_END1_ELEVATION = None
    STRUCTURAL_BEAM_END_ATTACHMENT_DISTANCE = None
    STRUCTURAL_BEAM_END_ATTACHMENT_REFCOLUMN_END = None
    STRUCTURAL_BEAM_END_ATTACHMENT_TYPE = None
    STRUCTURAL_BEAM_END_SUPPORT = None
    STRUCTURAL_BEAM_ORIENTATION = None
    STRUCTURAL_BEAM_START_ATTACHMENT_DISTANCE = None
    STRUCTURAL_BEAM_START_ATTACHMENT_REFCOLUMN_END = None
    STRUCTURAL_BEAM_START_ATTACHMENT_TYPE = None
    STRUCTURAL_BEAM_START_SUPPORT = None
    STRUCTURAL_BEND_DIR_ANGLE = None
    STRUCTURAL_BOTTOM_RELEASE_FX = None
    STRUCTURAL_BOTTOM_RELEASE_FY = None
    STRUCTURAL_BOTTOM_RELEASE_FZ = None
    STRUCTURAL_BOTTOM_RELEASE_MX = None
    STRUCTURAL_BOTTOM_RELEASE_MY = None
    STRUCTURAL_BOTTOM_RELEASE_MZ = None
    STRUCTURAL_BOTTOM_RELEASE_TYPE = None
    STRUCTURAL_BRACE_REPRESENTATION = None
    STRUCTURAL_CAMBER = None
    STRUCTURAL_CONNECTION_APPROVAL_STATUS = None
    STRUCTURAL_CONNECTION_CODE_CHECKING_STATUS = None
    STRUCTURAL_CONNECTION_MODIFY_CONNECTION_PARAMETERS = None
    STRUCTURAL_CONNECTION_NOBLE_STATUS = None
    STRUCTURAL_CONNECTION_SYMBOL = None
    STRUCTURAL_COPING_DISTANCE = None
    STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS = None
    STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS_COLUMN = None
    STRUCTURAL_DISPLAY_IN_HIDDEN_VIEWS_FRAMING = None
    STRUCTURAL_ELEVATION_AT_BOTTOM = None
    STRUCTURAL_ELEVATION_AT_BOTTOM_CORE = None
    STRUCTURAL_ELEVATION_AT_BOTTOM_SURVEY = None
    STRUCTURAL_ELEVATION_AT_TOP = None
    STRUCTURAL_ELEVATION_AT_TOP_CORE = None
    STRUCTURAL_ELEVATION_AT_TOP_SURVEY = None
    STRUCTURAL_END_RELEASE_FX = None
    STRUCTURAL_END_RELEASE_FY = None
    STRUCTURAL_END_RELEASE_FZ = None
    STRUCTURAL_END_RELEASE_MX = None
    STRUCTURAL_END_RELEASE_MY = None
    STRUCTURAL_END_RELEASE_MZ = None
    STRUCTURAL_END_RELEASE_TYPE = None
    STRUCTURAL_FAMILY_CODE_NAME = None
    STRUCTURAL_FAMILY_NAME_KEY = None
    STRUCTURAL_FLOOR_ANALYZES_AS = None
    STRUCTURAL_FLOOR_CORE_THICKNESS = None
    STRUCTURAL_FOUNDATION_LENGTH = None
    STRUCTURAL_FOUNDATION_THICKNESS = None
    STRUCTURAL_FOUNDATION_WIDTH = None
    STRUCTURAL_FRAME_CUT_LENGTH = None
    STRUCTURAL_MATERIAL_PARAM = None
    STRUCTURAL_MATERIAL_TYPE = None
    STRUCTURAL_MEMBER_FORCES = None
    STRUCTURAL_NUMBER_OF_STUDS = None
    STRUCTURAL_REFERENCE_LEVEL_ELEVATION = None
    STRUCTURAL_SECTION_AREA = None
    STRUCTURAL_SECTION_BOTTOM_CUT_HEIGHT = None
    STRUCTURAL_SECTION_BOTTOM_CUT_WIDTH = None
    STRUCTURAL_SECTION_CANTILEVER_HEIGHT = None
    STRUCTURAL_SECTION_CANTILEVER_LENGTH = None
    STRUCTURAL_SECTION_COMMON_ALPHA = None
    STRUCTURAL_SECTION_COMMON_CENTROID_HORIZ = None
    STRUCTURAL_SECTION_COMMON_CENTROID_VERTICAL = None
    STRUCTURAL_SECTION_COMMON_DIAMETER = None
    STRUCTURAL_SECTION_COMMON_ELASTIC_MODULUS_STRONG_AXIS = None
    STRUCTURAL_SECTION_COMMON_ELASTIC_MODULUS_WEAK_AXIS = None
    STRUCTURAL_SECTION_COMMON_HEIGHT = None
    STRUCTURAL_SECTION_COMMON_MOMENT_OF_INERTIA_STRONG_AXIS = None
    STRUCTURAL_SECTION_COMMON_MOMENT_OF_INERTIA_WEAK_AXIS = None
    STRUCTURAL_SECTION_COMMON_NOMINAL_WEIGHT = None
    STRUCTURAL_SECTION_COMMON_PERIMETER = None
    STRUCTURAL_SECTION_COMMON_PLASTIC_MODULUS_STRONG_AXIS = None
    STRUCTURAL_SECTION_COMMON_PLASTIC_MODULUS_WEAK_AXIS = None
    STRUCTURAL_SECTION_COMMON_SHEAR_AREA_STRONG_AXIS = None
    STRUCTURAL_SECTION_COMMON_SHEAR_AREA_WEAK_AXIS = None
    STRUCTURAL_SECTION_COMMON_TORSIONAL_MODULUS = None
    STRUCTURAL_SECTION_COMMON_TORSIONAL_MOMENT_OF_INERTIA = None
    STRUCTURAL_SECTION_COMMON_WARPING_CONSTANT = None
    STRUCTURAL_SECTION_COMMON_WIDTH = None
    STRUCTURAL_SECTION_CPROFILE_FOLD_LENGTH = None
    STRUCTURAL_SECTION_HSS_INNERFILLET = None
    STRUCTURAL_SECTION_HSS_OUTERFILLET = None
    STRUCTURAL_SECTION_ISHAPE_BOLT_DIAMETER = None
    STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING = None
    STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_BETWEEN_ROWS = None
    STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_TWO_ROWS = None
    STRUCTURAL_SECTION_ISHAPE_BOLT_SPACING_WEB = None
    STRUCTURAL_SECTION_ISHAPE_CLEAR_WEB_HEIGHT = None
    STRUCTURAL_SECTION_ISHAPE_FLANGEFILLET = None
    STRUCTURAL_SECTION_ISHAPE_FLANGETHICKNESS = None
    STRUCTURAL_SECTION_ISHAPE_FLANGE_TOE_OF_FILLET = None
    STRUCTURAL_SECTION_ISHAPE_WEBFILLET = None
    STRUCTURAL_SECTION_ISHAPE_WEBHEIGHT = None
    STRUCTURAL_SECTION_ISHAPE_WEBTHICKNESS = None
    STRUCTURAL_SECTION_ISHAPE_WEB_TOE_OF_FILLET = None
    STRUCTURAL_SECTION_IWELDED_BOTTOMFLANGETHICKNESS = None
    STRUCTURAL_SECTION_IWELDED_BOTTOMFLANGEWIDTH = None
    STRUCTURAL_SECTION_IWELDED_TOPFLANGETHICKNESS = None
    STRUCTURAL_SECTION_IWELDED_TOPFLANGEWIDTH = None
    STRUCTURAL_SECTION_LANGLE_BOLT_DIAMETER_LONGER_FLANGE = None
    STRUCTURAL_SECTION_LANGLE_BOLT_DIAMETER_SHORTER_FLANGE = None
    STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_1_LONGER_FLANGE = None
    STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_2_LONGER_FLANGE = None
    STRUCTURAL_SECTION_LANGLE_BOLT_SPACING_SHORTER_FLANGE = None
    STRUCTURAL_SECTION_LPROFILE_LIP_LENGTH = None
    STRUCTURAL_SECTION_NAME_KEY = None
    STRUCTURAL_SECTION_PIPESTANDARD_WALLDESIGNTHICKNESS = None
    STRUCTURAL_SECTION_PIPESTANDARD_WALLNOMINALTHICKNESS = None
    STRUCTURAL_SECTION_SHAPE = None
    STRUCTURAL_SECTION_SIGMA_PROFILE_BEND_WIDTH = None
    STRUCTURAL_SECTION_SIGMA_PROFILE_MIDDLE_BEND_WIDTH = None
    STRUCTURAL_SECTION_SIGMA_PROFILE_TOP_BEND_WIDTH = None
    STRUCTURAL_SECTION_TOP_CUT_HEIGHT = None
    STRUCTURAL_SECTION_TOP_CUT_WIDTH = None
    STRUCTURAL_SECTION_ZPROFILE_BOTTOM_FLANGE_LENGTH = None
    STRUCTURAL_START_RELEASE_FX = None
    STRUCTURAL_START_RELEASE_FY = None
    STRUCTURAL_START_RELEASE_FZ = None
    STRUCTURAL_START_RELEASE_MX = None
    STRUCTURAL_START_RELEASE_MY = None
    STRUCTURAL_START_RELEASE_MZ = None
    STRUCTURAL_START_RELEASE_TYPE = None
    STRUCTURAL_STICK_SYMBOL_LOCATION = None
    STRUCTURAL_TOP_RELEASE_FX = None
    STRUCTURAL_TOP_RELEASE_FY = None
    STRUCTURAL_TOP_RELEASE_FZ = None
    STRUCTURAL_TOP_RELEASE_MX = None
    STRUCTURAL_TOP_RELEASE_MY = None
    STRUCTURAL_TOP_RELEASE_MZ = None
    STRUCTURAL_TOP_RELEASE_TYPE = None
    STRUCTURAL_WALL_BOTTOM_PROJECTION_PLANE = None
    STRUCTURAL_WALL_PROJECTION_SURFACE = None
    STRUCTURAL_WALL_TOP_PROJECTION_PLANE = None
    STRUCT_CONNECTION_APPLY_TO = None
    STRUCT_CONNECTION_BEAM_END = None
    STRUCT_CONNECTION_BEAM_START = None
    STRUCT_CONNECTION_COLUMN_BASE = None
    STRUCT_CONNECTION_COLUMN_TOP = None
    STRUCT_CONNECTION_CUTBACK = None
    STRUCT_CONNECTION_TYPE_NAME = None
    STRUCT_FRAM_JOIN_STATUS = None
    SUPPORT_HAND_CLEARANCE = None
    SUPPORT_HEIGHT = None
    SURFACE_AREA = None
    SURFACE_PATTERN_ID_PARAM = None
    SURFACE_PERIMETER = None
    SWEEP_BASE_FLOOR_SUBCATEGORY_ID = None
    SWEEP_BASE_OFFSET = None
    SWEEP_BASE_ROOF_SUBCATEGORY_ID = None
    SWEEP_BASE_VERT_OFFSET = None
    SWEEP_MAX_SEG_ANGLE = None
    SWEEP_TRAJ_SEGMENTED = None
    SYMBOL_FAMILY_AND_TYPE_NAMES_PARAM = None
    SYMBOL_FAMILY_NAME_PARAM = None
    SYMBOL_ID_PARAM = None
    SYMBOL_NAME_PARAM = None
    TAG_LEADER_TYPE = None
    TAG_NO_BREAK_PARAM_STRINGS = None
    TAG_ORIENTATION_PARAM = None
    TAG_SAMPLE_TEXT = None
    TAG_TAG = None
    TEMPLATE_NAME = None
    TERMINATION_EXTENSION_LENGTH = None
    TEXT_ALIGNMENT = None
    TEXT_ALIGN_HORZ = None
    TEXT_ALIGN_VERT = None
    TEXT_BACKGROUND = None
    TEXT_BOX_VISIBILITY = None
    TEXT_COLOR = None
    TEXT_DIST_TO_LINE = None
    TEXT_FONT = None
    TEXT_POSITION = None
    TEXT_SIZE = None
    TEXT_STYLE_BOLD = None
    TEXT_STYLE_FONT = None
    TEXT_STYLE_ITALIC = None
    TEXT_STYLE_SIZE = None
    TEXT_STYLE_UNDERLINE = None
    TEXT_TAB_SIZE = None
    TEXT_TEXT = None
    TEXT_WIDTH_SCALE = None
    THERMAL_MATERIAL_PARAM_COMPRESSIBILITY = None
    THERMAL_MATERIAL_PARAM_ELECTRICAL_RESISTIVITY = None
    THERMAL_MATERIAL_PARAM_EMISSIVITY = None
    THERMAL_MATERIAL_PARAM_GAS_VISCOSITY = None
    THERMAL_MATERIAL_PARAM_LIQUID_VISCOSITY = None
    THERMAL_MATERIAL_PARAM_PERMEABILITY = None
    THERMAL_MATERIAL_PARAM_POROSITY = None
    THERMAL_MATERIAL_PARAM_REFLECTIVITY = None
    THERMAL_MATERIAL_PARAM_SPECIFIC_HEAT_OF_VAPORIZATION = None
    THERMAL_MATERIAL_PARAM_TRANSMITS_LIGHT = None
    THERMAL_MATERIAL_PARAM_VAPOR_PRESSURE = None
    TICK_MARK_PEN = None
    TILE_PATTERN_FAMREF_COMPONENT_EXTENTS = None
    TILE_PATTERN_GRID_CELLS_X = None
    TILE_PATTERN_GRID_CELLS_Y = None
    TILE_PATTERN_GRID_UNIT_X = None
    TILE_PATTERN_GRID_UNIT_Y = None
    TITLE_FONT = None
    TITLE_SIZE = None
    TITLE_STYLE_BOLD = None
    TITLE_STYLE_ITALIC = None
    TITLE_STYLE_UNDERLINE = None
    TRAP_MULL_WIDTH = None
    TRUSS_BEARING_CHORD_TOP_BOTTOM_PARAM = None
    TRUSS_ELEMENT_ANGLE_PARAM = None
    TRUSS_ELEMENT_BEARING_JUST_PARAM = None
    TRUSS_ELEMENT_CLASS_PARAM = None
    TRUSS_ELEMENT_CREATE_BOTTOM_PARAM = None
    TRUSS_ELEMENT_CREATE_TOP_PARAM = None
    TRUSS_ELEMENT_END0_ELEVATION = None
    TRUSS_ELEMENT_END1_ELEVATION = None
    TRUSS_ELEMENT_REFERENCE_LEVEL_PARAM = None
    TRUSS_ELEMENT_ROTATE_CHORDS_WITH_TRUSS = None
    TRUSS_ELEMENT_SPAN_PARAM = None
    TRUSS_ELEMENT_STICK_JUST_PARAM = None
    TRUSS_ELEMENT_TAG_NEW_MEMBERS_VIEW = None
    TRUSS_FAMILY_BOTTOM_CHORD_ANGLE_PARAM = None
    TRUSS_FAMILY_BOTTOM_CHORD_END_RELEASE_TYPE = None
    TRUSS_FAMILY_BOTTOM_CHORD_START_RELEASE_TYPE = None
    TRUSS_FAMILY_BOTTOM_CHORD_STRUCTURAL_TYPES_PARAM = None
    TRUSS_FAMILY_BOTTOM_CHORD_VERTICAL_PROJECTION_PARAM = None
    TRUSS_FAMILY_DIAG_WEB_ANGLE_PARAM = None
    TRUSS_FAMILY_DIAG_WEB_END_RELEASE_TYPE = None
    TRUSS_FAMILY_DIAG_WEB_START_RELEASE_TYPE = None
    TRUSS_FAMILY_DIAG_WEB_STRUCTURAL_TYPES_PARAM = None
    TRUSS_FAMILY_TOP_CHORD_ANGLE_PARAM = None
    TRUSS_FAMILY_TOP_CHORD_END_RELEASE_TYPE = None
    TRUSS_FAMILY_TOP_CHORD_START_RELEASE_TYPE = None
    TRUSS_FAMILY_TOP_CHORD_STRUCTURAL_TYPES_PARAM = None
    TRUSS_FAMILY_TOP_CHORD_VERTICAL_PROJECTION_PARAM = None
    TRUSS_FAMILY_TRANSFORMATION_PARAM = None
    TRUSS_FAMILY_VERT_WEB_ANGLE_PARAM = None
    TRUSS_FAMILY_VERT_WEB_END_RELEASE_TYPE = None
    TRUSS_FAMILY_VERT_WEB_START_RELEASE_TYPE = None
    TRUSS_FAMILY_VERT_WEB_STRUCTURAL_TYPES_PARAM = None
    TRUSS_FAMILY_WEBS_HAVE_SYMBOLIC_CUTBACK_PARAM = None
    TRUSS_HEIGHT = None
    TRUSS_LENGTH = None
    TRUSS_NON_BEARING_OFFSET_PARAM = None
    TYPE_WALL_CLOSURE = None
    UNIFORMAT_CODE = None
    UNIFORMAT_DESCRIPTION = None
    value__ = None
    VIEWER3D_RENDER_SETTINGS = None
    VIEWER_ANNOTATION_CROP_ACTIVE = None
    VIEWER_BOUND_ACTIVE_BOTTOM = None
    VIEWER_BOUND_ACTIVE_FAR = None
    VIEWER_BOUND_ACTIVE_LEFT = None
    VIEWER_BOUND_ACTIVE_NEAR = None
    VIEWER_BOUND_ACTIVE_RIGHT = None
    VIEWER_BOUND_ACTIVE_TOP = None
    VIEWER_BOUND_FAR_CLIPPING = None
    VIEWER_BOUND_OFFSET_BOTTOM = None
    VIEWER_BOUND_OFFSET_FAR = None
    VIEWER_BOUND_OFFSET_LEFT = None
    VIEWER_BOUND_OFFSET_NEAR = None
    VIEWER_BOUND_OFFSET_RIGHT = None
    VIEWER_BOUND_OFFSET_TOP = None
    VIEWER_CROP_REGION = None
    VIEWER_CROP_REGION_DISABLED = None
    VIEWER_CROP_REGION_VISIBLE = None
    VIEWER_DETAIL_NUMBER = None
    VIEWER_EYE_ELEVATION = None
    VIEWER_IS_REFERENCE = None
    VIEWER_MODEL_CLIP_BOX_ACTIVE = None
    VIEWER_OPTION_VISIBILITY = None
    VIEWER_PERSPECTIVE = None
    VIEWER_PERSPECTIVE_DISABLED = None
    VIEWER_REFERENCE_LABEL = None
    VIEWER_REFERENCE_LABEL_TEXT = None
    VIEWER_SHEET_NUMBER = None
    VIEWER_SHOW_UNCROPPED = None
    VIEWER_TARGET_ELEVATION = None
    VIEWER_VOLUME_OF_INTEREST_CROP = None
    VIEWPORT_ATTR_LABEL_TAG = None
    VIEWPORT_ATTR_ORIENTATION_ON_SHEET = None
    VIEWPORT_ATTR_SHOW_BOX = None
    VIEWPORT_ATTR_SHOW_EXTENSION_LINE = None
    VIEWPORT_ATTR_SHOW_LABEL = None
    VIEWPORT_DETAIL_NUMBER = None
    VIEWPORT_SCALE = None
    VIEWPORT_SHEET_NAME = None
    VIEWPORT_SHEET_NUMBER = None
    VIEWPORT_VIEW_NAME = None
    VIEW_ANALYSIS_DISPLAY_STYLE = None
    VIEW_ANALYSIS_RESULTS_VISIBILITY = None
    VIEW_ASSOCIATED_ASSEMBLY_INSTANCE_ID = None
    VIEW_BACK_CLIPPING = None
    VIEW_CAMERA_ORIENTATION = None
    VIEW_CAMERA_POSITION = None
    VIEW_CLEAN_JOINS = None
    VIEW_DEPENDENCY = None
    VIEW_DEPTH = None
    VIEW_DESCRIPTION = None
    VIEW_DESIGN_OPTIONS_CONFIG = None
    VIEW_DETAIL_LEVEL = None
    VIEW_DISCIPLINE = None
    VIEW_FAMILY = None
    VIEW_FAMILY_AND_TYPE_SCHEDULES = None
    VIEW_FAMILY_SCHEDULES = None
    VIEW_FIXED_SKETCH_PLANE = None
    VIEW_GRAPH_SCHED_BOTTOM_LEVEL = None
    VIEW_GRAPH_SCHED_GRID_APPEARANCE = None
    VIEW_GRAPH_SCHED_GROUP_SIMILAR = None
    VIEW_GRAPH_SCHED_HIDDEN_LEVELS = None
    VIEW_GRAPH_SCHED_LEVEL_RELATIVE_BASE_TYPE = None
    VIEW_GRAPH_SCHED_LOCATIONS_HIGH = None
    VIEW_GRAPH_SCHED_LOCATIONS_LOW = None
    VIEW_GRAPH_SCHED_MATERIAL_TYPES = None
    VIEW_GRAPH_SCHED_NUMBER_COLUMNS = None
    VIEW_GRAPH_SCHED_OFF_GRID = None
    VIEW_GRAPH_SCHED_ROWS_COUNT = None
    VIEW_GRAPH_SCHED_ROWS_FROM = None
    VIEW_GRAPH_SCHED_TEXT_APPEARANCE = None
    VIEW_GRAPH_SCHED_TITLE = None
    VIEW_GRAPH_SCHED_TOP_LEVEL = None
    VIEW_GRAPH_SCHED_TOTAL_COLUMNS = None
    VIEW_GRAPH_SCHED_TOTAL_ROWS = None
    VIEW_GRAPH_SCHED_UNITS_FORMAT = None
    VIEW_GRAPH_SUN_PATH = None
    VIEW_GRAPH_SUN_PATH_SIZE = None
    VIEW_MODEL_DISPLAY_MODE = None
    VIEW_NAME = None
    VIEW_PARTS_VISIBILITY = None
    VIEW_PHASE = None
    VIEW_PHASE_FILTER = None
    VIEW_REFERENCING_DETAIL = None
    VIEW_REFERENCING_SHEET = None
    VIEW_SCALE = None
    VIEW_SCALE_CUSTOMNAME = None
    VIEW_SCALE_HAVENAME = None
    VIEW_SCALE_PULLDOWN_IMPERIAL = None
    VIEW_SCALE_PULLDOWN_METRIC = None
    VIEW_SCHEMA_SETTING_FOR_BUILDING = None
    VIEW_SCHEMA_SETTING_FOR_SYSTEM = None
    VIEW_SCHEMA_SETTING_FOR_SYSTEM_TEMPLATE = None
    VIEW_SHEET_VIEWPORT_INFO = None
    VIEW_SHOW_HIDDEN_LINES = None
    VIEW_SHOW_MASSING = None
    VIEW_SLANTED_COLUMN_SYMBOL_OFFSET = None
    VIEW_TEMPLATE = None
    VIEW_TEMPLATE_FOR_SCHEDULE = None
    VIEW_TYPE = None
    VIEW_TYPE_SCHEDULES = None
    VIEW_UNDERLAY_BOTTOM_ID = None
    VIEW_UNDERLAY_ORIENTATION = None
    VIEW_UNDERLAY_TOP_ID = None
    VIEW_VISIBLE_CATEGORIES = None
    VIS_GRAPHICS_ANALYTICAL_MODEL = None
    VIS_GRAPHICS_ANNOTATION = None
    VIS_GRAPHICS_DESIGNOPTIONS = None
    VIS_GRAPHICS_FILTERS = None
    VIS_GRAPHICS_IMPORT = None
    VIS_GRAPHICS_MODEL = None
    VIS_GRAPHICS_POINT_CLOUDS = None
    VIS_GRAPHICS_RVT_LINKS = None
    VIS_GRAPHICS_WORKSETS = None
    VOLUME_CUT = None
    VOLUME_FILL = None
    VOLUME_NET = None
    VOLUME_OF_INTEREST_NAME = None
    VOLUME_OF_INTEREST_VIEWS_VISIBLE = None
    WALKTHROUGH_FRAMES_COUNT = None
    WALL_ALIGN_KEY_REF_PARAM = None
    WALL_ATTR_DEFHEIGHT_PARAM = None
    WALL_ATTR_HEIGHT_PARAM = None
    WALL_ATTR_ROOM_BOUNDING = None
    WALL_ATTR_WIDTH_PARAM = None
    WALL_BASE_CONSTRAINT = None
    WALL_BASE_HEIGHT_PARAM = None
    WALL_BASE_OFFSET = None
    WALL_BOTTOM_EXTENSION_DIST_PARAM = None
    WALL_BOTTOM_IS_ATTACHED = None
    WALL_HEIGHT_TYPE = None
    WALL_KEY_REF_PARAM = None
    WALL_LOCATION_LINE_OFFSET_PARAM = None
    WALL_STRUCTURAL_SIGNIFICANT = None
    WALL_STRUCTURAL_USAGE_PARAM = None
    WALL_STRUCTURE_ID_PARAM = None
    WALL_SWEEP_CUTS_WALL_PARAM = None
    WALL_SWEEP_CUT_BY_INSERTS_PARAM = None
    WALL_SWEEP_DEFAULT_SETBACK_PARAM = None
    WALL_SWEEP_LEVEL_PARAM = None
    WALL_SWEEP_OFFSET_PARAM = None
    WALL_SWEEP_PROFILE_PARAM = None
    WALL_SWEEP_WALL_OFFSET_PARAM = None
    WALL_SWEEP_WALL_SUBCATEGORY_ID = None
    WALL_TOP_EXTENSION_DIST_PARAM = None
    WALL_TOP_IS_ATTACHED = None
    WALL_TOP_OFFSET = None
    WALL_USER_HEIGHT_PARAM = None
    WINDOW_CONSTRUCTION_TYPE = None
    WINDOW_HEIGHT = None
    WINDOW_INSET = None
    WINDOW_OPERATION_TYPE = None
    WINDOW_THICKNESS = None
    WINDOW_TYPE_ID = None
    WINDOW_WIDTH = None
    WITNS_LINE_EXTENSION = None
    WITNS_LINE_GAP_TO_ELT = None
    WITNS_LINE_TICK_MARK = None
    WRAPPING_AT_ENDS_PARAM = None
    WRAPPING_AT_INSERTS_PARAM = None
    YZ_JUSTIFICATION = None
    Y_JUSTIFICATION = None
    Y_OFFSET_VALUE = None
    ZONE_AIR_VOLUME_CALCULATION_TYPE_PARAM = None
    ZONE_AREA = None
    ZONE_AREA_GROSS = None
    ZONE_CALCULATED_AREA_PER_COOLING_LOAD_PARAM = None
    ZONE_CALCULATED_AREA_PER_HEATING_LOAD_PARAM = None
    ZONE_CALCULATED_COOLING_LOAD_PARAM = None
    ZONE_CALCULATED_COOLING_LOAD_PER_AREA_PARAM = None
    ZONE_CALCULATED_HEATING_LOAD_PARAM = None
    ZONE_CALCULATED_HEATING_LOAD_PER_AREA_PARAM = None
    ZONE_CALCULATED_SUPPLY_AIRFLOW_PARAM = None
    ZONE_CALCULATED_SUPPLY_AIRFLOW_PER_AREA_PARAM = None
    ZONE_COIL_BYPASS_PERCENTAGE_PARAM = None
    ZONE_COOLING_AIR_TEMPERATURE_PARAM = None
    ZONE_COOLING_INFORMATION_PARAM = None
    ZONE_COOLING_SET_POINT_PARAM = None
    ZONE_DEHUMIDIFICATION_SET_POINT_PARAM = None
    ZONE_HEATING_AIR_TEMPERATURE_PARAM = None
    ZONE_HEATING_INFORMATION_PARAM = None
    ZONE_HEATING_SET_POINT_PARAM = None
    ZONE_HUMIDIFICATION_SET_POINT_PARAM = None
    ZONE_LEVEL_ID = None
    ZONE_NAME = None
    ZONE_OA_RATE_PER_ACH_PARAM = None
    ZONE_OUTDOOR_AIR_INFORMATION_PARAM = None
    ZONE_OUTSIDE_AIR_PER_AREA_PARAM = None
    ZONE_OUTSIDE_AIR_PER_PERSON_PARAM = None
    ZONE_PERIMETER = None
    ZONE_PHASE = None
    ZONE_PHASE_ID = None
    ZONE_SERVICE_TYPE_PARAM = None
    ZONE_USE_AIR_CHANGES_PER_HOUR_PARAM = None
    ZONE_USE_DEHUMIDIFICATION_SETPOINT_PARAM = None
    ZONE_USE_HUMIDIFICATION_SETPOINT_PARAM = None
    ZONE_USE_OUTSIDE_AIR_PER_AREA_PARAM = None
    ZONE_USE_OUTSIDE_AIR_PER_PERSON_PARAM = None
    ZONE_VOLUME = None
    ZONE_VOLUME_GROSS = None
    Z_JUSTIFICATION = None
    Z_OFFSET_VALUE = None


class BuiltInParameterGroup(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all of the built-in parameter groups supported by Autodesk
    Revit.
    
    enum BuiltInParameterGroup, values: INVALID (-1), PG_ADSK_MODEL_PROPERTIES (-5000165), PG_AELECTRICAL (-5000130), PG_ANALYSIS_RESULTS (-5000161), PG_ANALYTICAL_ALIGNMENT (-5000191), PG_ANALYTICAL_MODEL (-5000145), PG_ANALYTICAL_PROPERTIES (-5000192), PG_AREA (-5000166), PG_CONCEPTUAL_ENERGY_DATA (-5000167), PG_CONCEPTUAL_ENERGY_DATA_BUILDING_SERVICES (-5000176), PG_CONSTRAINTS (-5000119), PG_CONSTRUCTION (-5000103), PG_CONTINUOUSRAIL_BEGIN_BOTTOM_EXTENSION (-5000203), PG_CONTINUOUSRAIL_END_TOP_EXTENSION (-5000204), PG_COUPLER_ARRAY (-5000218), PG_CURTAIN_GRID (-5000141), PG_CURTAIN_GRID_1 (-5000134), PG_CURTAIN_GRID_2 (-5000136), PG_CURTAIN_GRID_HORIZ (-5000135), PG_CURTAIN_GRID_U (-5000163), PG_CURTAIN_GRID_V (-5000164), PG_CURTAIN_GRID_VERT (-5000133), PG_CURTAIN_MULLION_1 (-5000138), PG_CURTAIN_MULLION_2 (-5000140), PG_CURTAIN_MULLION_HORIZ (-5000139), PG_CURTAIN_MULLION_VERT (-5000137), PG_DATA (-5000175), PG_DISPLAY (-5000162), PG_DIVISION_GEOMETRY (-5000206), PG_ELECTRICAL (-5000110), PG_ELECTRICAL_CIRCUITING (-5000174), PG_ELECTRICAL_LIGHTING (-5000124), PG_ELECTRICAL_LOADS (-5000125), PG_ENERGY_ANALYSIS (-5000129), PG_ENERGY_ANALYSIS_ADVANCED (-5000217), PG_ENERGY_ANALYSIS_BLDG_CONS_MTL_THERMAL_PROPS (-5000221), PG_ENERGY_ANALYSIS_BUILDING_DATA (-5000219), PG_ENERGY_ANALYSIS_CONCEPTUAL_MODEL (-5000171), PG_ENERGY_ANALYSIS_DETAILED_AND_CONCEPTUAL_MODELS (-5000169), PG_ENERGY_ANALYSIS_DETAILED_MODEL (-5000170), PG_ENERGY_ANALYSIS_ROOM_SPACE_DATA (-5000220), PG_FABRICATION_PRODUCT_DATA (-5000210), PG_FIRE_PROTECTION (-5000148), PG_FITTING (-5000168), PG_FLEXIBLE (-5000172), PG_FORCES (-5000211), PG_GENERAL (-5000173), PG_GEOMETRY (-5000101), PG_GEOMETRY_POSITIONING (-5000207), PG_GRAPHICS (-5000104), PG_GREEN_BUILDING (-5000157), PG_IDENTITY_DATA (-5000100), PG_IFC (-5000131), PG_INSULATION (-5000188), PG_LENGTH (-5000194), PG_LIGHT_PHOTOMETRICS (-5000159), PG_LINING (-5000189), PG_MATERIALS (-5000105), PG_MECHANICAL (-5000113), PG_MECHANICAL_AIRFLOW (-5000127), PG_MECHANICAL_LOADS (-5000126), PG_MOMENTS (-5000212), PG_NODES (-5000193), PG_OVERALL_LEGEND (-5000187), PG_PATTERN (-5000120), PG_PATTERN_APPLICATION (-5000158), PG_PHASING (-5000114), PG_PLUMBING (-5000111), PG_PRIMARY_END (-5000213), PG_PROFILE (-5000154), PG_PROFILE_1 (-5000155), PG_PROFILE_2 (-5000156), PG_RAILING_SYSTEM_FAMILY_HANDRAILS (-5000178), PG_RAILING_SYSTEM_FAMILY_SEGMENT_PATTERN (-5000179), PG_RAILING_SYSTEM_FAMILY_TOP_RAIL (-5000177), PG_RAILING_SYSTEM_SECONDARY_FAMILY_HANDRAILS (-5000199), PG_RAILING_SYSTEM_SEGMENT_PATTERN_REMAINDER (-5000181), PG_RAILING_SYSTEM_SEGMENT_PATTERN_REPEAT (-5000180), PG_RAILING_SYSTEM_SEGMENT_POSTS (-5000182), PG_RAILING_SYSTEM_SEGMENT_U_GRID (-5000183), PG_RAILING_SYSTEM_SEGMENT_V_GRID (-5000184), PG_REBAR_ARRAY (-5000144), PG_REBAR_SYSTEM_LAYERS (-5000143), PG_REFERENCE (-5000208), PG_RELEASES_MEMBER_FORCES (-5000216), PG_ROTATION_ABOUT (-5000147), PG_SECONDARY_END (-5000214), PG_SEGMENTS_FITTINGS (-5000205), PG_SLAB_SHAPE_EDIT (-5000160), PG_SPLIT_PROFILE_DIMENSIONS (-5000195), PG_STAIR_RISERS (-5000108), PG_STAIR_STRINGERS (-5000109), PG_STAIR_TREADS (-5000107), PG_STAIRS_CALCULATOR_RULES (-5000196), PG_STAIRS_OPEN_END_CONNECTION (-5000200), PG_STAIRS_SUPPORTS (-5000201), PG_STAIRS_TREADS_RISERS (-5000197), PG_STAIRS_WINDERS (-5000202), PG_STRUCTURAL (-5000112), PG_STRUCTURAL_ANALYSIS (-5000128), PG_SUPPORT (-5000185), PG_SYSTEMTYPE_RISEDROP (-5000190), PG_TERMINTATION (-5000198), PG_TEXT (-5000123), PG_TITLE (-5000149), PG_TRANSLATION_IN (-5000146), PG_TRUSS_FAMILY_BOTTOM_CHORD (-5000153), PG_TRUSS_FAMILY_DIAG_WEB (-5000151), PG_TRUSS_FAMILY_TOP_CHORD (-5000152), PG_TRUSS_FAMILY_VERT_WEB (-5000150), PG_UNDERLAY (-5000106), PG_VIEW_CAMERA (-5000122), PG_VIEW_EXTENTS (-5000121), PG_VISIBILITY (-5000186)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    INVALID = None
    PG_ADSK_MODEL_PROPERTIES = None
    PG_AELECTRICAL = None
    PG_ANALYSIS_RESULTS = None
    PG_ANALYTICAL_ALIGNMENT = None
    PG_ANALYTICAL_MODEL = None
    PG_ANALYTICAL_PROPERTIES = None
    PG_AREA = None
    PG_CONCEPTUAL_ENERGY_DATA = None
    PG_CONCEPTUAL_ENERGY_DATA_BUILDING_SERVICES = None
    PG_CONSTRAINTS = None
    PG_CONSTRUCTION = None
    PG_CONTINUOUSRAIL_BEGIN_BOTTOM_EXTENSION = None
    PG_CONTINUOUSRAIL_END_TOP_EXTENSION = None
    PG_COUPLER_ARRAY = None
    PG_CURTAIN_GRID = None
    PG_CURTAIN_GRID_1 = None
    PG_CURTAIN_GRID_2 = None
    PG_CURTAIN_GRID_HORIZ = None
    PG_CURTAIN_GRID_U = None
    PG_CURTAIN_GRID_V = None
    PG_CURTAIN_GRID_VERT = None
    PG_CURTAIN_MULLION_1 = None
    PG_CURTAIN_MULLION_2 = None
    PG_CURTAIN_MULLION_HORIZ = None
    PG_CURTAIN_MULLION_VERT = None
    PG_DATA = None
    PG_DISPLAY = None
    PG_DIVISION_GEOMETRY = None
    PG_ELECTRICAL = None
    PG_ELECTRICAL_CIRCUITING = None
    PG_ELECTRICAL_LIGHTING = None
    PG_ELECTRICAL_LOADS = None
    PG_ENERGY_ANALYSIS = None
    PG_ENERGY_ANALYSIS_ADVANCED = None
    PG_ENERGY_ANALYSIS_BLDG_CONS_MTL_THERMAL_PROPS = None
    PG_ENERGY_ANALYSIS_BUILDING_DATA = None
    PG_ENERGY_ANALYSIS_CONCEPTUAL_MODEL = None
    PG_ENERGY_ANALYSIS_DETAILED_AND_CONCEPTUAL_MODELS = None
    PG_ENERGY_ANALYSIS_DETAILED_MODEL = None
    PG_ENERGY_ANALYSIS_ROOM_SPACE_DATA = None
    PG_FABRICATION_PRODUCT_DATA = None
    PG_FIRE_PROTECTION = None
    PG_FITTING = None
    PG_FLEXIBLE = None
    PG_FORCES = None
    PG_GENERAL = None
    PG_GEOMETRY = None
    PG_GEOMETRY_POSITIONING = None
    PG_GRAPHICS = None
    PG_GREEN_BUILDING = None
    PG_IDENTITY_DATA = None
    PG_IFC = None
    PG_INSULATION = None
    PG_LENGTH = None
    PG_LIGHT_PHOTOMETRICS = None
    PG_LINING = None
    PG_MATERIALS = None
    PG_MECHANICAL = None
    PG_MECHANICAL_AIRFLOW = None
    PG_MECHANICAL_LOADS = None
    PG_MOMENTS = None
    PG_NODES = None
    PG_OVERALL_LEGEND = None
    PG_PATTERN = None
    PG_PATTERN_APPLICATION = None
    PG_PHASING = None
    PG_PLUMBING = None
    PG_PRIMARY_END = None
    PG_PROFILE = None
    PG_PROFILE_1 = None
    PG_PROFILE_2 = None
    PG_RAILING_SYSTEM_FAMILY_HANDRAILS = None
    PG_RAILING_SYSTEM_FAMILY_SEGMENT_PATTERN = None
    PG_RAILING_SYSTEM_FAMILY_TOP_RAIL = None
    PG_RAILING_SYSTEM_SECONDARY_FAMILY_HANDRAILS = None
    PG_RAILING_SYSTEM_SEGMENT_PATTERN_REMAINDER = None
    PG_RAILING_SYSTEM_SEGMENT_PATTERN_REPEAT = None
    PG_RAILING_SYSTEM_SEGMENT_POSTS = None
    PG_RAILING_SYSTEM_SEGMENT_U_GRID = None
    PG_RAILING_SYSTEM_SEGMENT_V_GRID = None
    PG_REBAR_ARRAY = None
    PG_REBAR_SYSTEM_LAYERS = None
    PG_REFERENCE = None
    PG_RELEASES_MEMBER_FORCES = None
    PG_ROTATION_ABOUT = None
    PG_SECONDARY_END = None
    PG_SEGMENTS_FITTINGS = None
    PG_SLAB_SHAPE_EDIT = None
    PG_SPLIT_PROFILE_DIMENSIONS = None
    PG_STAIRS_CALCULATOR_RULES = None
    PG_STAIRS_OPEN_END_CONNECTION = None
    PG_STAIRS_SUPPORTS = None
    PG_STAIRS_TREADS_RISERS = None
    PG_STAIRS_WINDERS = None
    PG_STAIR_RISERS = None
    PG_STAIR_STRINGERS = None
    PG_STAIR_TREADS = None
    PG_STRUCTURAL = None
    PG_STRUCTURAL_ANALYSIS = None
    PG_SUPPORT = None
    PG_SYSTEMTYPE_RISEDROP = None
    PG_TERMINTATION = None
    PG_TEXT = None
    PG_TITLE = None
    PG_TRANSLATION_IN = None
    PG_TRUSS_FAMILY_BOTTOM_CHORD = None
    PG_TRUSS_FAMILY_DIAG_WEB = None
    PG_TRUSS_FAMILY_TOP_CHORD = None
    PG_TRUSS_FAMILY_VERT_WEB = None
    PG_UNDERLAY = None
    PG_VIEW_CAMERA = None
    PG_VIEW_EXTENTS = None
    PG_VISIBILITY = None
    value__ = None


class CADExportOptions(object):
    """ Generic CAD Export options. """

class CADLinkType(ElementType, IDisposable):
    """
    CADLinkType represents both CAD links and CAD imports. The
       function IsLink can be used to distinguish between the two.
       CAD imports are not ExternalFileReferences; they are brought
       completely into the document and maintain no connection to
       their original file.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class CameraInfo(object, IDisposable):
    """ An object holding information about the projection mapping of a 3D view. """
    def Dispose(self):
        """ Dispose(self: CameraInfo) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CameraInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    FarDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Distance from eye point to far plane of view frustum along the view direction.

Get: FarDistance(self: CameraInfo) -> float

"""

    HorizontalExtent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Distance between left and right planes on the target plane.

Get: HorizontalExtent(self: CameraInfo) -> float

"""

    IsPerspective = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether the projection is orthographic or perspective

Get: IsPerspective(self: CameraInfo) -> bool

"""

    IsPespective = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether the projection is orthographic or perspective

Get: IsPespective(self: CameraInfo) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: CameraInfo) -> bool

"""

    NearDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Distance from eye point to near plane of view frustum along the view direction.

Get: NearDistance(self: CameraInfo) -> float

"""

    RightOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Distance that the target plane is offset towards the right
   where right is normal to both Up direction and View direction.
   This offset shifts both left and right planes.

Get: RightOffset(self: CameraInfo) -> float

"""

    TargetDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Distance from eye point along view direction to target plane.

Get: TargetDistance(self: CameraInfo) -> float

"""

    UpOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Distance that the target plane is offset in the direction of
   the Up direction. This offset shifts both top and bottom planes.

Get: UpOffset(self: CameraInfo) -> float

"""

    VerticalExtent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Distance between top and bottom planes on the target plane.

Get: VerticalExtent(self: CameraInfo) -> float

"""



class CancellationListener(object, IDisposable):
    """
    Allows clients to poll the cancellation status of a background operation. Revit instantiates
       CancellationListener objects for internal background operation implementations only. As such,
       third-party developers are not expected to instantiate or handle CancellationListener objects.
    """
    def Dispose(self):
        """ Dispose(self: CancellationListener) """
        pass

    def IsCancelled(self):
        """
        IsCancelled(self: CancellationListener) -> bool
        
            Returns true if the operation associated with this instance has been cancelled.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CancellationListener, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: CancellationListener) -> bool

"""



class CategoryNameMap(APIObject, IDisposable, IEnumerable):
    """
    A map that contains a mapping of category name to its category object.
    
    CategoryNameMap()
    """
    def Clear(self):
        """
        Clear(self: CategoryNameMap)
            Removes every category from the map, rendering it empty.
        """
        pass

    def Contains(self, key):
        """
        Contains(self: CategoryNameMap, key: str) -> bool
        
            Tests for the existence of a category with that name within the map.
        
            key: The category name to be searched for.
            Returns: The Contains method returns True if the name is within the map, otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: CategoryNameMap, A_0: bool) """
        pass

    def Erase(self, key):
        """
        Erase(self: CategoryNameMap, key: str) -> int
        
            Removes a category with the specified name from the map.
        
            key: The name of the category to be erased.
            Returns: The number of categories that were erased from the map.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: CategoryNameMap) -> CategoryNameMapIterator
        
            Retrieve a forward moving iterator to the map.
            Returns: Returns a forward moving iterator to the map.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: CategoryNameMap) -> IEnumerator
        
            Retrieve a forward moving iterator to the map.
            Returns: Returns a forward moving iterator to the map.
        """
        pass

    def Insert(self, key, item):
        """
        Insert(self: CategoryNameMap, key: str, item: Category) -> bool
        
            Insert the specified category with the specified name into the map.
        
            key: The name to be used for inserting the category into the map.
            item: The category to be inserted into the map.
            Returns: Returns whether the category was inserted into the map.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: CategoryNameMap) -> CategoryNameMapIterator
        
            Retrieve a backward moving iterator to the map.
            Returns: Returns a backward moving iterator to the map.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the map is empty.

Get: IsEmpty(self: CategoryNameMap) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of categories that are in the map.

Get: Size(self: CategoryNameMap) -> int

"""



class Categories(CategoryNameMap, IDisposable, IEnumerable):
    """ The Categories object is a map that contains all the top-level Category objects within the Document. """
    def Contains(self, name):
        """
        Contains(self: Categories, name: str) -> bool
        
            Identifies if a category which has the specified name is in the list of 
             top-level categories.
        
        
            name: The name of the category to be retrieved.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Categories, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: Categories) -> CategoryNameMapIterator
        
            Retrieves a forward moving iterator to the map.
            Returns: A forward moving iterator to the map.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: Categories) -> IEnumerator
        
            Retrieves a forward moving iterator to the map.
            Returns: A forward moving iterator to the map.
        """
        pass

    def Insert(self, key, item):
        """
        Insert(self: Categories, key: str, item: Category) -> bool
        
            Inserts the specified category with the specified name into the map.
        
            key: The name to be used for inserting the category into the map.
            item: The category to be inserted into the map.
            Returns: Whether or not the category was inserted into the map.
        """
        pass

    def NewSubcategory(self, parentCategory, name):
        """
        NewSubcategory(self: Categories, parentCategory: Category, name: str) -> Category
        
            Add a new subcategory into the Autodesk Revit document.
        
            parentCategory: The parent category.
            name: The new category name.
            Returns: If successful, the newly created subcategory.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: Categories) -> CategoryNameMapIterator
        
            Retrieves a backward moving iterator to the map.
            Returns: A backward moving iterator to the map.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not the list of top-level categories is empty.

Get: IsEmpty(self: Categories) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The total number of top-level categories in the document.

Get: Size(self: Categories) -> int

"""



class Category(APIObject, IDisposable):
    """ Represents the category or subcategory to which an element belongs. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    @staticmethod
    def GetCategory(document, categoryId):
        """
        GetCategory(document: Document, categoryId: BuiltInCategory) -> Category
        
            Retrieves a category object corresponding to a BuiltInCategory id.
        
            document: The document.
            categoryId: A build in category id.
            Returns: Returns a category object corresponding to a BuiltInCategory id.
        GetCategory(document: Document, categoryId: ElementId) -> Category
        
            Retrieves a category object corresponding to the category id.
        
            document: The document.
            categoryId: An category id.
            Returns: Returns a category object corresponding to the category id.
        """
        pass

    def GetGraphicsStyle(self, graphicsStyleType):
        """
        GetGraphicsStyle(self: Category, graphicsStyleType: GraphicsStyleType) -> GraphicsStyle
        
            Gets the graphics style associated with this category for the given graphics 
             style type.
        
        
            graphicsStyleType: The type of graphics style.
        """
        pass

    def GetHashCode(self):
        """ GetHashCode(self: Category) -> int """
        pass

    def GetLinePatternId(self, graphicsStyleType):
        """
        GetLinePatternId(self: Category, graphicsStyleType: GraphicsStyleType) -> ElementId
        
            Gets the line pattern id associated with this category for the given graphics 
             style type.
        
        
            graphicsStyleType: The type of graphics style.
            Returns: Returns the line pattern id associated with this category for the given 
             graphics style type.
        """
        pass

    def GetLineWeight(self, graphicsStyleType):
        """
        GetLineWeight(self: Category, graphicsStyleType: GraphicsStyleType) -> Nullable[int]
        
            Retrieves the line weight assigned to the category for the given graphics style 
             type.
        
        
            graphicsStyleType: The type of graphics style.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def SetLinePatternId(self, linePatternId, graphicsStyleType):
        """
        SetLinePatternId(self: Category, linePatternId: ElementId, graphicsStyleType: GraphicsStyleType)
            Sets the line pattern id associated with this category for the given graphics 
             style type.
        
        
            linePatternId: The line pattern id for the graphics style.
            graphicsStyleType: The type of graphics style.
        """
        pass

    def SetLineWeight(self, lineWeight, graphicsStyleType):
        """
        SetLineWeight(self: Category, lineWeight: int, graphicsStyleType: GraphicsStyleType)
            Sets the line weight for the given graphics style type.
        
            graphicsStyleType: The type of graphics style.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllowsBoundParameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """To check if the category can have project parameters.

Get: AllowsBoundParameters(self: Category) -> bool

"""

    CanAddSubcategory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if subcategories can be assigned to the category.

Get: CanAddSubcategory(self: Category) -> bool

"""

    CategoryType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the category type of this category.

Get: CategoryType(self: Category) -> CategoryType

"""

    HasMaterialQuantities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if elements of the category are able to report what materials they contain in what quantities.

Get: HasMaterialQuantities(self: Category) -> bool

"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the category id associated with the category object.

Get: Id(self: Category) -> ElementId

"""

    IsCuttable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the category is cuttable or not.

Get: IsCuttable(self: Category) -> bool

"""

    IsTagCategory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the category is associated with a type of tag for a different category.

Get: IsTagCategory(self: Category) -> bool

"""

    LineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of lines shown for elements of this category.

Get: LineColor(self: Category) -> Color

Set: LineColor(self: Category) = value
"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the material of the category.

Get: Material(self: Category) -> Material

Set: Material(self: Category) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The category name.

Get: Name(self: Category) -> str

"""

    Parent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the parent category of this category.

Get: Parent(self: Category) -> Category

"""

    SubCategories = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns a map containing all of the subcategories of this category.

Get: SubCategories(self: Category) -> CategoryNameMap

"""



class CategoryNameMapIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a category name map.
    
    CategoryNameMapIterator()
    """
    def Dispose(self):
        """ Dispose(self: CategoryNameMapIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: CategoryNameMapIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the map.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Reset(self):
        """
        Reset(self: CategoryNameMapIterator)
            Bring the iterator back to the start of the map.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the category that is the current focus of the iterator.

Get: Current(self: CategoryNameMapIterator) -> object

"""

    Key = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the category name that is the current focus of the iterator.

Get: Key(self: CategoryNameMapIterator) -> str

"""



class CategorySet(APIObject, IDisposable, IEnumerable):
    """
    A set that can contains Category objects.
    
    CategorySet()
    """
    def Clear(self):
        """
        Clear(self: CategorySet)
            Removes every item from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: CategorySet, item: Category) -> bool
        
            Tests for the existence of a category within the set.
        
            item: The category to be searched for.
            Returns: The Contains method returns True if the category is within the set, otherwise 
             False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: CategorySet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: CategorySet, item: Category) -> int
        
            Removes a specified category from the set.
        
            item: The category to be erased.
            Returns: The number of items that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: CategorySet) -> CategorySetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: CategorySet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: CategorySet, item: Category) -> bool
        
            Insert the specified category into the set.
        
            item: The item to be inserted into the set.
            Returns: Returns whether the item was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: CategorySet) -> CategorySetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: CategorySet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of categories that are in the set.

Get: Size(self: CategorySet) -> int

"""



class CategorySetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a category set.
    
    CategorySetIterator()
    """
    def Dispose(self):
        """ Dispose(self: CategorySetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: CategorySetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Reset(self):
        """
        Reset(self: CategorySetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: CategorySetIterator) -> object

"""



class CategoryType(Enum, IComparable, IFormattable, IConvertible):
    """
    The type of category.
    
    enum CategoryType, values: AnalyticalModel (5), Annotation (2), Internal (4), Invalid (0), Model (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AnalyticalModel = None
    Annotation = None
    Internal = None
    Invalid = None
    Model = None
    value__ = None


class HostObject(Element, IDisposable):
    """ A base class that provides support for all objects that can host other objects, such as walls roofs, and floors. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def FindInserts(self, addRectOpenings, includeShadows, includeEmbeddedWalls, includeSharedEmbeddedInserts):
        """
        FindInserts(self: HostObject, addRectOpenings: bool, includeShadows: bool, includeEmbeddedWalls: bool, includeSharedEmbeddedInserts: bool) -> IList[ElementId]
        
            Gets the ids of the instances inserted into this host object.
        
            addRectOpenings: True if rectangular openings should be included in the return.
            includeShadows: True if shadows should be included in the return.
            includeEmbeddedWalls: True if embedded walls should be included in the return.
            includeSharedEmbeddedInserts: True if shared embedded inserts should be included in the return.
            Returns: All the insertable instances' ids.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class CeilingAndFloor(HostObject, IDisposable):
    """ A base class that provides support for all ceiling and floor objects. """
    def Dispose(self):
        """ Dispose(self: CeilingAndFloor, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class Ceiling(CeilingAndFloor, IDisposable):
    """ Represents a ceiling in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: CeilingAndFloor, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class CeilingType(HostObjAttributes, IDisposable):
    """ Represents a ceiling type in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ThermalProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The calculated and settable thermal properties of the CeilingType

Get: ThermalProperties(self: CeilingType) -> ThermalProperties

"""



class CellType(Enum, IComparable, IFormattable, IConvertible):
    """
    Declares the cell data type.
    
    enum CellType, values: CalculatedValue (5), CombinedParameter (4), Graphic (1), Inherited (3), Parameter (2), ParameterText (6), Text (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CalculatedValue = None
    CombinedParameter = None
    Graphic = None
    Inherited = None
    Parameter = None
    ParameterText = None
    Text = None
    value__ = None


class ChangePriority(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum used to specify the priority of an Updater during execution.
    
    enum ChangePriority, values: Annotations (16), Connections (10), DetailComponents (15), DoorsOpeningsWindows (5), FloorsRoofsStructuralWalls (2), FreeStandingComponents (9), GridsLevelsReferencePlanes (0), InteriorWalls (4), Masses (1), MEPAccessoriesFittingsSegmentsWires (12), MEPCalculations (8), MEPFixtures (6), MEPSystems (13), Rebar (11), RoomsSpacesZones (7), Structure (3), Views (14)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Annotations = None
    Connections = None
    DetailComponents = None
    DoorsOpeningsWindows = None
    FloorsRoofsStructuralWalls = None
    FreeStandingComponents = None
    GridsLevelsReferencePlanes = None
    InteriorWalls = None
    Masses = None
    MEPAccessoriesFittingsSegmentsWires = None
    MEPCalculations = None
    MEPFixtures = None
    MEPSystems = None
    Rebar = None
    RoomsSpacesZones = None
    Structure = None
    value__ = None
    Views = None


class ChangeType(object, IDisposable):
    """ A class representing a change that can be detected and tracked during Dynamic Update. """
    @staticmethod
    def ConcatenateChangeTypes(changeType1, changeType2):
        """
        ConcatenateChangeTypes(changeType1: ChangeType, changeType2: ChangeType) -> ChangeType
        
            Creates a ChangeType that is a union of the two input ChangeTypes
        
            changeType1: First input ChangeType to be concatenated
            changeType2: Second input ChangeType to be concatenated
            Returns: A new ChangeType that is a concatenation/union of the input change types
        """
        pass

    def Contains(self, changeType):
        """
        Contains(self: ChangeType, changeType: ChangeType) -> bool
        
            Checks whether this ChangeType contains the input ChangeType
            Returns: True if input changeType is contained by this ChangeType
        """
        pass

    def Dispose(self):
        """ Dispose(self: ChangeType) """
        pass

    def IsIdentical(self, changeType):
        """
        IsIdentical(self: ChangeType, changeType: ChangeType) -> bool
        
            Compares if two ChangeTypes are identical
        
            changeType: Input ChangeType to be compared
            Returns: True if the this ChangeType and input ChangeType are identical
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ChangeType, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ChangeType) -> bool

"""



class CheckoutStatus(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the ownership status of an element
    
    enum CheckoutStatus, values: NotOwned (2), OwnedByCurrentUser (0), OwnedByOtherUser (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    NotOwned = None
    OwnedByCurrentUser = None
    OwnedByOtherUser = None
    value__ = None


class City(APIObject, IDisposable):
    """ An object that contains geographical location information for a known city. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Latitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Latitude of the city

Get: Latitude(self: City) -> float

"""

    Longitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Longitude of the city

Get: Longitude(self: City) -> float

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the city

Get: Name(self: City) -> str

"""

    TimeZone = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Time-zone in which the city resides

Get: TimeZone(self: City) -> float

"""

    WeatherStation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An identifier for the nearest weather station

Get: WeatherStation(self: City) -> str

"""



class CitySet(APIObject, IDisposable, IEnumerable):
    """
    An set that contains cities.
    
    CitySet()
    """
    def Clear(self):
        """
        Clear(self: CitySet)
            Removes every city from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: CitySet, item: City) -> bool
        
            Tests for the existence of a city within the set.
        
            item: The city to be searched for.
            Returns: The Contains method returns True if the city is within the set, otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: CitySet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: CitySet, item: City) -> int
        
            Removes a specified city from the set.
        
            item: The city to be erased.
            Returns: The number of cities that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: CitySet) -> CitySetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: CitySet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: CitySet, item: City) -> bool
        
            Insert the specified city into the set.
        
            item: The city to be inserted into the set.
            Returns: Returns whether the city was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CitySet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: CitySet) -> CitySetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: CitySet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of cities that are in the set.

Get: Size(self: CitySet) -> int

"""



class CitySetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a city set.
    
    CitySetIterator()
    """
    def Dispose(self):
        """ Dispose(self: CitySetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: CitySetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CitySetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: CitySetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: CitySetIterator) -> object

"""



class KeyBasedTreeEntries(object, IEnumerable[KeyBasedTreeEntry], IEnumerable, IDisposable):
    """ A collection of KeyBasedTreeEntry objects that make up the key-based tree. """
    def Dispose(self):
        """ Dispose(self: KeyBasedTreeEntries) """
        pass

    def FindEntry(self, key):
        """
        FindEntry(self: KeyBasedTreeEntries, key: str) -> KeyBasedTreeEntry
        
            Finds the KeyBasedTreeEntry associated with the given key value.
        
            key: The specified key value.
            Returns: The KeyBasedTreeEntry corresponds to the given key value.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: KeyBasedTreeEntries) -> IEnumerator[KeyBasedTreeEntry]
        
            Returns an enumerator that iterates through a collection.
            Returns: An IEnumerator object that can be used to iterate through the collection.
        """
        pass

    def GetKeyBasedTreeEntriesIterator(self):
        """
        GetKeyBasedTreeEntriesIterator(self: KeyBasedTreeEntries) -> KeyBasedTreeEntriesIterator
        
            Returns a KeyBasedTreeEntriesIterator that iterates through the collection.
            Returns: A KeyBasedTreeEntriesIterator object that can be used to iterate through 
             KeyBasedTreeEntry objects in the collection.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: KeyBasedTreeEntries, disposing: bool) """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyBasedTreeEntry](enumerable: IEnumerable[KeyBasedTreeEntry], value: KeyBasedTreeEntry) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: KeyBasedTreeEntries) -> bool

"""



class ClassificationEntries(KeyBasedTreeEntries, IEnumerable[KeyBasedTreeEntry], IEnumerable, IDisposable):
    """ A collection of ClassificationEntry objects that make up the classification table. """
    def Dispose(self):
        """ Dispose(self: KeyBasedTreeEntries, A_0: bool) """
        pass

    @staticmethod
    def LoadClassificationEntriesFromFile(filePath, loadContent):
        """
        LoadClassificationEntriesFromFile(filePath: str, loadContent: KeyBasedTreeEntriesLoadContent) -> bool
        
            Loads the contents of a classification text file into the provided 
             KeyBasedTreeEntriesLoadContent.
        
        
            filePath: The full path of the existing classification file.
            loadContent: The classification entries read from the filePath will be added to this object.
             
           A KeyBasedTreeEntriesLoadContent object will also be updated to contain 
             status information,
           including information about any errors that occurred 
             while reading the keynote entries from
           the specified file.
        
            Returns: True if reading the keynote file succeeds; False if the classification file 
             cannot be read.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: KeyBasedTreeEntries, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class KeyBasedTreeEntry(object, IDisposable):
    """ A key-based tree entry, containing the key, parent key, and children keys (if applicable). """
    def Dispose(self):
        """ Dispose(self: KeyBasedTreeEntry) """
        pass

    def GetChildrenKeys(self):
        """
        GetChildrenKeys(self: KeyBasedTreeEntry) -> IList[str]
        
            Gets a collection containing the keys of all children entry objects from this 
             entry.
        
            Returns: The collection containing the keys of all children entry objects from this 
             entry.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: KeyBasedTreeEntry, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: KeyBasedTreeEntry) -> bool

"""

    Key = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The key of this entry.

Get: Key(self: KeyBasedTreeEntry) -> str

"""

    ParentKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The parent key of this entry.

Get: ParentKey(self: KeyBasedTreeEntry) -> str

"""



class ClassificationEntry(KeyBasedTreeEntry, IDisposable):
    """
    Represents an entry in the classification table.
    
    ClassificationEntry(key: str, parentKey: str, description: str, level: int, categoryId: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: KeyBasedTreeEntry, A_0: bool) """
        pass

    def HasBadCategoryId(self):
        """
        HasBadCategoryId(self: ClassificationEntry) -> bool
        
            Checks if the category id is Revit BuiltInCategory id.
            Returns: True if the category id is not Revit BuiltInCategory id.
           False otherwise.
        """
        pass

    def HasBadLevel(self):
        """
        HasBadLevel(self: ClassificationEntry) -> bool
        
            Checks if the level is an integer in range between 1 and 5 inclusive.
            Returns: True if the level is not an integer from 1 to 5 inclusive. False otherwise.
        """
        pass

    def HasInvalidKey(self):
        """
        HasInvalidKey(self: ClassificationEntry) -> bool
        
            Checks if the key matches the level and parent key.
            Returns: True if the key doesn't matach the level and parent key.
           False otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: KeyBasedTreeEntry, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, key, parentKey, description, level, categoryId):
        """ __new__(cls: type, key: str, parentKey: str, description: str, level: int, categoryId: ElementId) """
        pass

    CategoryId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the category associated with this entry.

Get: CategoryId(self: ClassificationEntry) -> ElementId

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The description associated with this entry.

Get: Description(self: ClassificationEntry) -> str

"""

    Level = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The entry level in the classification table. The expected range is between 1 and 5 inclusive.

Get: Level(self: ClassificationEntry) -> int

"""



class Color(APIObject, IDisposable):
    """
    Represents a color in Autodesk Revit.
    
    Color(red: Byte, green: Byte, blue: Byte)
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, red, green, blue):
        """ __new__(cls: type, red: Byte, green: Byte, blue: Byte) """
        pass

    Blue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the blue channel of the color.  Setting a channel is obsolete in Autodesk Revit 2013.  Please create a new color instead.

Get: Blue(self: Color) -> Byte

Set: Blue(self: Color) = value
"""

    Green = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the green channel of the color.  Setting a channel is obsolete in Autodesk Revit 2013.  Please create a new color instead.

Get: Green(self: Color) -> Byte

Set: Green(self: Color) = value
"""

    IsValid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the color represents a valid color, or an uninitialized/invalid value.

Get: IsValid(self: Color) -> bool

"""

    Red = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the red channel of the color.  Setting a channel is obsolete in Autodesk Revit 2013.  Please create a new color instead.

Get: Red(self: Color) -> Byte

Set: Red(self: Color) = value
"""


    InvalidColorValue = None


class ColorBackgroundSettings(BackgroundSettings, IDisposable):
    """ Represents the rendering color background settings. """
    def Dispose(self):
        """ Dispose(self: BackgroundSettings, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BackgroundSettings, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the rendering background.

Get: Color(self: ColorBackgroundSettings) -> Color

Set: Color(self: ColorBackgroundSettings) = value
"""



class ColorDepthType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all Color Depth types of Print Setting.
    
    enum ColorDepthType, values: BlackLine (0), Color (2), GrayScale (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BlackLine = None
    Color = None
    GrayScale = None
    value__ = None


class ColorWithTransparency(object, IDisposable):
    """
    Color with transparency
    
    ColorWithTransparency(red: UInt32, green: UInt32, blue: UInt32, transparency: UInt32)
    ColorWithTransparency()
    """
    def Dispose(self):
        """ Dispose(self: ColorWithTransparency) """
        pass

    def GetBlue(self):
        """
        GetBlue(self: ColorWithTransparency) -> UInt32
        
            get blue
            Returns: blue
        """
        pass

    def GetColor(self):
        """
        GetColor(self: ColorWithTransparency) -> Color
        
            get color
            Returns: color
        """
        pass

    def GetGreen(self):
        """
        GetGreen(self: ColorWithTransparency) -> UInt32
        
            get green
            Returns: green
        """
        pass

    def GetRed(self):
        """
        GetRed(self: ColorWithTransparency) -> UInt32
        
            get red
            Returns: red
        """
        pass

    def GetTransparency(self):
        """
        GetTransparency(self: ColorWithTransparency) -> UInt32
        
            get transparency
            Returns: transparency
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ColorWithTransparency, disposing: bool) """
        pass

    def SetBlue(self, blue):
        """
        SetBlue(self: ColorWithTransparency, blue: UInt32)
            set blue
        
            blue: blue
        """
        pass

    def SetColor(self, color):
        """
        SetColor(self: ColorWithTransparency, color: Color)
            set color
        
            color: color
        """
        pass

    def SetGreen(self, green):
        """
        SetGreen(self: ColorWithTransparency, green: UInt32)
            set green
        
            green: green
        """
        pass

    def SetRed(self, red):
        """
        SetRed(self: ColorWithTransparency, red: UInt32)
            set red
        
            red: red
        """
        pass

    def SetTransparency(self, transparency):
        """
        SetTransparency(self: ColorWithTransparency, transparency: UInt32)
            set transparency
        
            transparency: transparency
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, red=None, green=None, blue=None, transparency=None):
        """
        __new__(cls: type, red: UInt32, green: UInt32, blue: UInt32, transparency: UInt32)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ColorWithTransparency) -> bool

"""



class ColumnAttachment(object, IDisposable):
    """
    An object representing the attachment of the top or bottom of a column to some target:
       a floor, roof, ceiling, beam, or brace.
    """
    @staticmethod
    def AddColumnAttachment(doc, column, target, baseOrTop, cutColumnStyle, justification, attachOffset):
        """
        AddColumnAttachment(doc: Document, column: FamilyInstance, target: Element, baseOrTop: int, cutColumnStyle: ColumnAttachmentCutStyle, justification: ColumnAttachmentJustification, attachOffset: float)
            Attaches the column to the target. If an attachment already
           exists with the 
             same "baseOrTop" value, no attachment is made.
        
        
            doc: The document containing column and target.
            column: A column.
            target: A target element.
            baseOrTop: 0 to attach the column base, 1 to attach the column top.
            cutColumnStyle: Control the handling of columns that intersect their targets.
            justification: Control the column extent in cases where the target is not a uniform height.
            attachOffset: An additional offset for the bottom. If positive, the column base or top will
         
               be higher than the attachment point; if negative, lower.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ColumnAttachment) """
        pass

    @staticmethod
    def GetColumnAttachment(column, *__args):
        """
        GetColumnAttachment(column: FamilyInstance, baseOrTop: int) -> ColumnAttachment
        
            Look up a column attachment. There is at most one attachment on
           the base 
             and one on the top.
        
        
            column: A column.
            baseOrTop: 0 for base, 1 for top.
            Returns: The column attachment for the base or top of the column, or ll if that end
           
             of the column is unattached.
        
        GetColumnAttachment(column: FamilyInstance, targetId: ElementId) -> ColumnAttachment
        
            Look up a column attachment by specifying the target id.
        
            column: A column.
            targetId: Id of a target element.
            Returns: The column attachment attaching the column to the target, or ll if there
           is 
             no such attachment.
        """
        pass

    @staticmethod
    def IsValidColumn(familyInstance):
        """
        IsValidColumn(familyInstance: FamilyInstance) -> bool
        
            Says whether a FamilyInstance supports column attachments.
        
            familyInstance: A column.
        """
        pass

    @staticmethod
    def IsValidTarget(*__args):
        """
        IsValidTarget(column: FamilyInstance, target: Element) -> bool
        
            Says whether the element can be used as a target for a new attachment.
        
            column: The column to attach. If the target is a beam or brace, the column
           will be 
             checked to see if it is slanted. Otherwise, this argument
           is not used and 
             may be omitted.
        
            target: A proposed target element for a column attachment.
        IsValidTarget(forSlantedColumn: bool, target: Element) -> bool
        
            Says whether the element can be used as a target for a new attachment.
        
            forSlantedColumn: If true, check whether the target is valid for a slanted column;
           if false, 
             check whether the target is valid for a vertical column.
        
            target: A proposed target element for a column attachment.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ColumnAttachment, disposing: bool) """
        pass

    @staticmethod
    def RemoveColumnAttachment(column, *__args):
        """
        RemoveColumnAttachment(column: FamilyInstance, baseOrTop: int)
            Removes an attachment at the top or base of a column, if there is one.
        
            column: A column.
            baseOrTop: 0 for base, 1 for top.
        RemoveColumnAttachment(column: FamilyInstance, targetId: ElementId)
            Removes any attachment of the column to the specified target.
        
            column: A column.
            targetId: Id of a target element.
        """
        pass

    def SetJustification(self, justification):
        """
        SetJustification(self: ColumnAttachment, justification: ColumnAttachmentJustification)
            Setter of ColumnAttachmentJustification
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AttachOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset of the column attachment.

Get: AttachOffset(self: ColumnAttachment) -> float

Set: AttachOffset(self: ColumnAttachment) = value
"""

    BaseOrTop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if this ColumnAttachment is at the base or top of the column.

Get: BaseOrTop(self: ColumnAttachment) -> int

"""

    CutStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether the column, or the attached element should be cut (or if neither should be cut).

Get: CutStyle(self: ColumnAttachment) -> ColumnAttachmentCutStyle

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ColumnAttachment) -> bool

"""

    Justification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the type of justification to apply to this ColumnAttachment.

Get: Justification(self: ColumnAttachment) -> ColumnAttachmentJustification

"""

    TargetId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the element that is attached to the column and is described by this ColumnAttachment.

Get: TargetId(self: ColumnAttachment) -> ElementId

"""



class ColumnAttachmentCutStyle(Enum, IComparable, IFormattable, IConvertible):
    """
    Control the handling of columns that intersect their targets.
    
    enum ColumnAttachmentCutStyle, values: CutColumn (0), CutTarget (1), None (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CutColumn = None
    CutTarget = None
    None = None
    value__ = None


class ColumnAttachmentJustification(Enum, IComparable, IFormattable, IConvertible):
    """
    Control the column extent in cases where the target is not a uniform height.
    
    enum ColumnAttachmentJustification, values: Maximum (2), Midpoint (1), Minimum (0), Tangent (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Maximum = None
    Midpoint = None
    Minimum = None
    Tangent = None
    value__ = None


class CombinableElementArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains CombinableElement objects.
    
    CombinableElementArray()
    """
    def Append(self, item):
        """
        Append(self: CombinableElementArray, item: CombinableElement)
            Add the element to the end of the array.
        
            item: The CombinableElement to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: CombinableElementArray)
            Removes every CombinableElement from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: CombinableElementArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: CombinableElementArray) -> CombinableElementArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: CombinableElementArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: CombinableElementArray, item: CombinableElement, index: int)
            Insert the specified element into the array.
        
            item: The CombinableElement to be inserted into the array.
            index: The CombinableElement will be inserted before this index.
            Returns: Returns whether the CombinableElement was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CombinableElementArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: CombinableElementArray) -> CombinableElementArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: CombinableElementArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of CombinableElements that are in the array.

Get: Size(self: CombinableElementArray) -> int

"""



class CombinableElementArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to an CombinableElement array.
    
    CombinableElementArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: CombinableElementArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: CombinableElementArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CombinableElementArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: CombinableElementArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: CombinableElementArrayIterator) -> object

"""



class ComponentRepeater(Element, IDisposable, IEnumerable[ComponentRepeaterSlot], IEnumerable):
    """ An element that contains and manages a set of repeated components. """
    @staticmethod
    def CanElementBeRepeated(ADoc, elementId):
        """
        CanElementBeRepeated(ADoc: Document, elementId: ElementId) -> bool
        
            Determines whether an element can be repeated using the RepeatElements method.
        
            ADoc: The document containing the element.
            elementId: The element to be tested.
            Returns: True if the element can be repeated.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ComponentRepeater) -> IEnumerator[ComponentRepeaterSlot]
        
            Returns an enumerator that iterates through a collection.
            Returns: An IEnumerator object that can be used to iterate through the collection.
        """
        pass

    def IsTypeValidForRepeater(self, typeId):
        """
        IsTypeValidForRepeater(self: ComponentRepeater, typeId: ElementId) -> bool
        
            Determines whether given family type can be used as the default type for the 
             repeater.
        
        
            typeId: The element id of the type.
            Returns: True if the family type can be used as the default type for the repeater.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    @staticmethod
    def RemoveRepeaters(document, elementIds):
        """ RemoveRepeaters(document: Document, elementIds: ISet[ElementId]) -> ISet[ElementId] """
        pass

    @staticmethod
    def RepeatElements(document, elementIds):
        """ RepeatElements(document: Document, elementIds: ICollection[ElementId]) -> IList[ComponentRepeater] """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[ComponentRepeaterSlot](enumerable: IEnumerable[ComponentRepeaterSlot], value: ComponentRepeaterSlot) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    DefaultFamilyType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The default family type for the component repeater.

Get: DefaultFamilyType(self: ComponentRepeater) -> ElementId

Set: DefaultFamilyType(self: ComponentRepeater) = value
"""

    DimensionCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The dimension count of the component repeater.

Get: DimensionCount(self: ComponentRepeater) -> int

"""



class ComponentRepeaterIterator(object, IEnumerator[ComponentRepeaterSlot], IDisposable, IEnumerator):
    """ A slot iterator for ComponentRepeater. """
    def Dispose(self):
        """ Dispose(self: ComponentRepeaterIterator) """
        pass

    def GetCurrent(self):
        """
        GetCurrent(self: ComponentRepeaterIterator) -> ComponentRepeaterSlot
        
            Returns the current repeater slot.
            Returns: The current slot.
        """
        pass

    def IsDone(self):
        """
        IsDone(self: ComponentRepeaterIterator) -> bool
        
            Identifies if the iteration has completed.
            Returns: True if the iteration has no more items.  False if there are more items to be 
             iterated.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ComponentRepeaterIterator) -> bool
        
            Increments the iterator to the next item.
            Returns: True if there is a next available item in this iterator.
           False if the 
             iterator has completed all available items.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ComponentRepeaterIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: ComponentRepeaterIterator)
            Resets the iterator to the initial state.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[ComponentRepeaterSlot](enumerator: IEnumerator[ComponentRepeaterSlot], value: ComponentRepeaterSlot) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: ComponentRepeaterIterator) -> ComponentRepeaterSlot

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ComponentRepeaterIterator) -> bool

"""



class ComponentRepeaterSlot(Element, IDisposable):
    """ Represents a slot that holds one repeated component in a component repeater. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def IsTypeValidForSlot(self, typeId):
        """
        IsTypeValidForSlot(self: ComponentRepeaterSlot, typeId: ElementId) -> bool
        
            Determines whether instance of given family type can be used in the component 
             repeater slot.
        
        
            typeId: The element id of the type.
            Returns: True if the family type can be used in the component repeater slot.
        """
        pass

    def MakeDefault(self):
        """
        MakeDefault(self: ComponentRepeaterSlot)
            Populates the slot with an instance of the default family type of the component 
             repeater.
        """
        pass

    def MakeEmpty(self):
        """
        MakeEmpty(self: ComponentRepeaterSlot)
            Makes the slot empty by removing the instance currently held by the slot.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    FamilyType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the family type of the component in the slot, or invalid id if the slot is empty.

Get: FamilyType(self: ComponentRepeaterSlot) -> ElementId

Set: FamilyType(self: ComponentRepeaterSlot) = value
"""

    IsDefault = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A flag indicating whether the slot currently holds an instance of the default family type of the component repeater.

Get: IsDefault(self: ComponentRepeaterSlot) -> bool

"""

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A flag indicating whether the slot is currently empty.

Get: IsEmpty(self: ComponentRepeaterSlot) -> bool

"""



class ComponentRotation(Enum, IComparable, IFormattable, IConvertible):
    """
    ComponentRotation property of DividedSurface.
    See Autodesk.Revit.DB.DividedSurface.
    
    enum ComponentRotation, values: Angle0 (0), Angle180 (180), Angle270 (270), Angle90 (90)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Angle0 = None
    Angle180 = None
    Angle270 = None
    Angle90 = None
    value__ = None


class CompoundStructure(object, IDisposable):
    """ Describes the internal structure of a wall, floor, roof or ceiling. """
    def AddWallSweep(self, wallSweepInfo):
        """
        AddWallSweep(self: CompoundStructure, wallSweepInfo: WallSweepInfo)
            Adds a new wall sweep or reveal to the compound structure.
        
            wallSweepInfo: The wall sweep info to create a wall sweep.
        """
        pass

    def AssociateRegionWithLayer(self, regionId, layerIdx):
        """
        AssociateRegionWithLayer(self: CompoundStructure, regionId: int, layerIdx: int)
            Associates a region with a layer.
        
            regionId: The id of a region.
            layerIdx: The index of a layer in this CompoundStructure.
        """
        pass

    def CanLayerBeStructuralMaterial(self, layerIndex):
        """
        CanLayerBeStructuralMaterial(self: CompoundStructure, layerIndex: int) -> bool
        
            Identifies if the input layer can be designated as defining the structural 
             material for this structure.
        
        
            layerIndex: Index of a layer in the CompoundStructure.
            Returns: True if the input layer may be used to define the structural material and false 
             otherwise.
        """
        pass

    def CanLayerBeVariable(self, variableLayerIndex):
        """
        CanLayerBeVariable(self: CompoundStructure, variableLayerIndex: int) -> bool
        
            Identifies if the input layer can be designated as a variable thickness layer.
        
            variableLayerIndex: Index of a layer in the CompoundStructure.
            Returns: True if the input layer may be a variable thickness layer and false otherwise.
        """
        pass

    def CanLayerWidthBeNonZero(self, layerIdx):
        """
        CanLayerWidthBeNonZero(self: CompoundStructure, layerIdx: int) -> bool
        
            Identifies if changing the width of an existing layer from zero to a positive 
             value will create a rectangular region.
        
        
            layerIdx: The index of a CompoundStructureLayer.
        """
        pass

    def ChangeRegionWidth(self, regionId, newWidth):
        """
        ChangeRegionWidth(self: CompoundStructure, regionId: int, newWidth: float) -> bool
        
            Adjust the width of an existing simple region.
        
            regionId: The id of a region.
            newWidth: The desired width of the specified region.
            Returns: True if newWidth is zero and the region was deleted.
        """
        pass

    def ClearWallSweeps(self, wallSweepType):
        """
        ClearWallSweeps(self: CompoundStructure, wallSweepType: WallSweepType)
            Removes all sweeps or reveals from the compound structure.
        
            wallSweepType: The type of a wall sweep.
        """
        pass

    @staticmethod
    def CreateSimpleCompoundStructure(layers):
        """ CreateSimpleCompoundStructure(layers: IList[CompoundStructureLayer]) -> CompoundStructure """
        pass

    @staticmethod
    def CreateSingleLayerCompoundStructure(*__args):
        """
        CreateSingleLayerCompoundStructure(layerFunction: MaterialFunctionAssignment, width: float, materialId: ElementId) -> CompoundStructure
        
            Creates a CompoundStructure containing a single layer.
        
            layerFunction: The function of the single layer.
            width: The width of the single layer.
            materialId: The ElementId of the material for the single layer.
            Returns: The newly created compound structure.
        CreateSingleLayerCompoundStructure(sampleHeight: float, layerFunction: MaterialFunctionAssignment, width: float, materialId: ElementId) -> CompoundStructure
        
            Creates a vertically compound CompoundStructure with one layer.
        
            sampleHeight: The sample height of this vertically compound structure.
            layerFunction: The function of the single layer.
            width: The width of the single layer.
            materialId: The ElementId of the material for the single layer.
            Returns: The newly created compound structure.
        """
        pass

    def DeleteLayer(self, layerIdx):
        """
        DeleteLayer(self: CompoundStructure, layerIdx: int) -> bool
        
            Deletes the specified layer from this CompoundStructure.
        
            layerIdx: The layer index is zero based. It counts from the exterior of wall and from the 
             top of roofs, floors and ceilings.
        
            Returns: True if the layer was successfully deleted, and false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: CompoundStructure) """
        pass

    def FindEnclosingRegionAndSegments(self, gridUV, splitDirection, segmentId1, segmentId2):
        """
        FindEnclosingRegionAndSegments(self: CompoundStructure, gridUV: UV, splitDirection: RectangularGridSegmentOrientation) -> (int, int, int)
        
            Given a pair of grid coordinates, and a direction for splitting, returns the 
             enclosing region and the two segments
           intersected by a line through the 
             grid point.
        
        
            gridUV: Coordinates of a point in the rectangular grid of this compound structure.
            splitDirection: Specifies the direction of the split.
            Returns: Returns the id of the enclosing region, and -1 if no region encloses the point.
        """
        pass

    def GetAdjacentRegions(self, segmentId):
        """
        GetAdjacentRegions(self: CompoundStructure, segmentId: int) -> IList[int]
        
            Gets the ids of region bound to a specified segment.
        
            segmentId: The id of a segment in this CompoundStructure.
            Returns: The ids of the regions that are bounded by the specified segment.
        """
        pass

    def GetCoreBoundaryLayerIndex(self, shellLayerType):
        """
        GetCoreBoundaryLayerIndex(self: CompoundStructure, shellLayerType: ShellLayerType) -> int
        
            Returns the index of the layer just below the core boundary.
        
            shellLayerType: If ShellLayerType.Exterior return the index on the exterior side (or top side 
             for a roof, floor, or ceiling type).
           If ShellLayerType.Interior return the 
             index on the interior side (or bottom side for a roof, floor, or ceiling type).
        
            Returns: The index of the layer.
        """
        pass

    def GetDeckEmbeddingType(self, layerIdx):
        """
        GetDeckEmbeddingType(self: CompoundStructure, layerIdx: int) -> StructDeckEmbeddingType
        
            Retrieves the deck embedding type used for the specified structural deck.
        
            layerIdx: Index of a layer in the CompoundStructure.
            Returns: The embedding type of the structural deck associated to the specified layer. 
             Invalid if it is not a structural deck.
        """
        pass

    def GetDeckProfileId(self, layerIdx):
        """
        GetDeckProfileId(self: CompoundStructure, layerIdx: int) -> ElementId
        
            Retrieves the profile loop used for the specified structural deck.
        
            layerIdx: Index of a layer in the CompoundStructure.
            Returns: The element id of a FamilySymbol which contains a profile loop used by a 
             structural deck associated to the specified layer,
           or invalidElementId if 
             isStructuralDeck(layerIdx) is false.
        """
        pass

    def GetExtendableRegionIds(self, top):
        """
        GetExtendableRegionIds(self: CompoundStructure, top: bool) -> IList[int]
        
            Gets the extendable region ids for the compound structure.
        
            top: If true, retrieve ids of regions which are extendable at the top, otherwise
           
             retrieve the ids of regions which are extendable at the bottom.
        
            Returns: An array of region ids which are marked extendable.
        """
        pass

    def GetFirstCoreLayerIndex(self):
        """
        GetFirstCoreLayerIndex(self: CompoundStructure) -> int
        
            Gets the index of the first core layer.
            Returns: The index of the first core layer.
        """
        pass

    def GetLastCoreLayerIndex(self):
        """
        GetLastCoreLayerIndex(self: CompoundStructure) -> int
        
            Gets the index of the last core layer.
            Returns: The index of the last core layer.
        """
        pass

    def GetLayerAssociatedToRegion(self, regionId):
        """
        GetLayerAssociatedToRegion(self: CompoundStructure, regionId: int) -> int
        
            Gets the layer associated to a particular region.
        
            regionId: The id of a region.
            Returns: The index of a layer in this CompoundStructure.
        """
        pass

    def GetLayerFunction(self, layerIdx):
        """
        GetLayerFunction(self: CompoundStructure, layerIdx: int) -> MaterialFunctionAssignment
        
            Retrieves the function of the specified layer.
        
            layerIdx: Index of a layer in the CompoundStructure.
            Returns: The function of the layer.
        """
        pass

    def GetLayers(self):
        """
        GetLayers(self: CompoundStructure) -> IList[CompoundStructureLayer]
        
            A copy of the layers which define this compound structure.
            Returns: The layers, returned in order (Exterior to Interior for walls, top to bottom 
             for roofs, floors or ceilings). The index of each layer in this array
           can 
             be used in other CompoundStructure methods accepting a layer index.
        """
        pass

    def GetLayerWidth(self, layerIdx):
        """
        GetLayerWidth(self: CompoundStructure, layerIdx: int) -> float
        
            Retrieves the width of a specified layer.
        
            layerIdx: Index of a layer in the CompoundStructure.
            Returns: The width of the specified layer.
        """
        pass

    def GetMaterialId(self, layerIdx):
        """
        GetMaterialId(self: CompoundStructure, layerIdx: int) -> ElementId
        
            Retrieves the material element id of a specified layer.
        
            layerIdx: Index of a layer in the CompoundStructure.
            Returns: The material element id.
        """
        pass

    @staticmethod
    def GetMinimumLayerThickness():
        """
        GetMinimumLayerThickness() -> float
        
            Get the minimum allowable layer thickness.
            Returns: The minimum allowable width of a layer in feet.
        """
        pass

    def GetNumberOfShellLayers(self, shellLayerType):
        """
        GetNumberOfShellLayers(self: CompoundStructure, shellLayerType: ShellLayerType) -> int
        
            Retrieves the number of interior or exterior shell layers.
        
            shellLayerType: If ShellLayerType.Exterior return the number of exterior shell layers (or top 
             shell layers for a roof, floor, or ceiling type).
           If 
             ShellLayerType.Interior return the number of interior shell layers (or bottom 
             shell layers for a roof, floor, or ceiling type).
        
            Returns: The number of shell layers in the interior or exterior shell, as specified by 
             shellLayerType.
        """
        pass

    def GetOffsetForLocationLine(self, wallLocationLine):
        """
        GetOffsetForLocationLine(self: CompoundStructure, wallLocationLine: WallLocationLine) -> float
        
            Returns the offset from the center of the compound structure to the given 
             location line value.
        
        
            wallLocationLine: The alignment type of the wall's location line.
            Returns: The offset.
        """
        pass

    def GetPreviousNonZeroLayerIndex(self, thisIdx):
        """
        GetPreviousNonZeroLayerIndex(self: CompoundStructure, thisIdx: int) -> int
        
            Returns the index of the nearest non-zero width layer before this layer.
        
            thisIdx: The layer from which to look for a non-zero width layer.
            Returns: The index of the layer found.
        """
        pass

    def GetRegionEnvelope(self, regionId):
        """
        GetRegionEnvelope(self: CompoundStructure, regionId: int) -> BoundingBoxUV
        
            Gets the envelope that a specified region spans.
        
            regionId: The id of the region.
            Returns: The envelope of the region.
        """
        pass

    def GetRegionIds(self):
        """
        GetRegionIds(self: CompoundStructure) -> IList[int]
        
            Gets the region ids of this compound structure.
            Returns: The ids of the regions defining this CompoundStructure.
        """
        pass

    def GetRegionsAlongLevel(self, height):
        """
        GetRegionsAlongLevel(self: CompoundStructure, height: float) -> IList[int]
        
            Returns the ids of the regions encountered as the vertically compound structure 
             is traversed
           at a constant height above the bottom a wall to which this 
             structure is applied.
        
        
            height: Distance from the bottom of the wall.
            Returns: The ids of the regions intersected by the specified line.
        """
        pass

    def GetRegionsAssociatedToLayer(self, layerIdx):
        """
        GetRegionsAssociatedToLayer(self: CompoundStructure, layerIdx: int) -> IList[int]
        
            Gets the set of region ids associated to a particular layer.
        
            layerIdx: The index of a layer in this CompoundStructure.
            Returns: An array of region ids which are associated to the specified layer.
        """
        pass

    def GetSegmentCoordinate(self, segmentId):
        """
        GetSegmentCoordinate(self: CompoundStructure, segmentId: int) -> float
        
            Gets the coordinate of a segment.
        
            segmentId: The id of a segment in this CompoundStructure.
            Returns: The local coordinates of the specified segment.
        """
        pass

    def GetSegmentEndPoints(self, segmentId, regionId, end1, end2):
        """
        GetSegmentEndPoints(self: CompoundStructure, segmentId: int, regionId: int) -> (UV, UV)
        
            Gets the end points of a segment.
        
            segmentId: The segment id.
            regionId: The region id.
        """
        pass

    def GetSegmentIds(self):
        """
        GetSegmentIds(self: CompoundStructure) -> IList[int]
        
            Gets the segment ids of this compound structure.
            Returns: The ids of the segments which form the boundary of the regions of this 
             CompoundStructure.
        """
        pass

    def GetSegmentOrientation(self, segmentId):
        """
        GetSegmentOrientation(self: CompoundStructure, segmentId: int) -> RectangularGridSegmentOrientation
        
            Gets the orientation of a segment.
        
            segmentId: The id of a segment in this CompoundStructure.
            Returns: The orientation of the specified segment.
        """
        pass

    def GetSimpleCompoundStructure(self, wallHeight, distAboveBase):
        """
        GetSimpleCompoundStructure(self: CompoundStructure, wallHeight: float, distAboveBase: float) -> CompoundStructure
        
            Takes a horizontal slice through a sample wall to which this CompoundStructure 
             is applied
           and returns a simple compound structure which describes that 
             slice, i.e. a series of
           parallel layers.
        
        
            wallHeight: The height of the wall.
            distAboveBase: The distance from the base of the wall at which to take the section.
           If 
             distAboveBase < 0, then internally distAboveBase = 0 is used.
           If 
             distAboveBase > wallHeight, then internally distAboveBase = wallHeight is used.
        
            Returns: A simple CompoundStructure representing a series of parallel layers.
        """
        pass

    def GetWallSweepsInfo(self, wallSweepType):
        """
        GetWallSweepsInfo(self: CompoundStructure, wallSweepType: WallSweepType) -> IList[WallSweepInfo]
        
            Obtains a list of the intrinsic wall sweeps or reveals in this 
             CompoundStructure.
        
        
            wallSweepType: Whether to obtain wall sweeps or reveals.
            Returns: An array which describes the intrinsic wall sweeps or reveals.
        """
        pass

    def GetWidth(self, regionId=None):
        """
        GetWidth(self: CompoundStructure, regionId: int) -> float
        
            Computes the width of the envelope (2d bounding box) of the specified region.
        
            regionId: The id of a region in this vertically compound structure.
            Returns: The width of the envelope (2d bounding box) of the region.
        GetWidth(self: CompoundStructure) -> float
        
            The width implied by this compound structure.
            Returns: The width of a host object with this compound structure.
        """
        pass

    def IsCoreLayer(self, layerIdx):
        """
        IsCoreLayer(self: CompoundStructure, layerIdx: int) -> bool
        
            Checks if the specified layer is a core layer.
        
            layerIdx: The index of a layer in this CompoundStructure.
            Returns: Returns true if the layer is within the core layer boundary, false if it is in 
             the interior or exterior shell layers.
        """
        pass

    def IsEqual(self, otherStructure):
        """
        IsEqual(self: CompoundStructure, otherStructure: CompoundStructure) -> bool
        
            Checks whether this CompoundStructure is the same as another CompoundStructure.
        
            otherStructure: A CompoundStructure.
            Returns: True if the two CompoundStructures are the same, and false otherwise.
        """
        pass

    def IsLayerValid(self, layerIdx, layer):
        """
        IsLayerValid(self: CompoundStructure, layerIdx: int, layer: CompoundStructureLayer) -> bool
        
            Verifies that the data in this layer is internally consistent.
        
            layerIdx: The index of the layer in the compound structure to be set.
            layer: The layer to be set.
            Returns: True if the layer is internally consistent, false if the layer is not 
             internally consistent.
        """
        pass

    def IsRectangularRegion(self, regionId):
        """
        IsRectangularRegion(self: CompoundStructure, regionId: int) -> bool
        
            Determines whether the specified region is rectangular.
        
            regionId: The id of a region.
            Returns: True if the specified region is a rectangle, false otherwise.
        """
        pass

    def IsSimpleRegion(self, regionId):
        """
        IsSimpleRegion(self: CompoundStructure, regionId: int) -> bool
        
            Determines whether the region is a simple region in this CompoundStructure.
        
            regionId: The id of a region in this vertically compound structure.
            Returns: True if the region is simple, false otherwise.
        """
        pass

    def IsStructuralDeck(self, layerIdx):
        """
        IsStructuralDeck(self: CompoundStructure, layerIdx: int) -> bool
        
            Determines whether a specified layer is a structural deck.
        
            layerIdx: Index of a layer in the CompoundStructure.
            Returns: True if specified layer is a structural deck, and false otherwise.
        """
        pass

    def IsValid(self, doc, errMap, twoLayerErrorsMap):
        """ IsValid(self: CompoundStructure, doc: Document) -> (bool, IDictionary[int, CompoundStructureError], IDictionary[int, int]) """
        pass

    def IsValidRegionId(self, regionId):
        """
        IsValidRegionId(self: CompoundStructure, regionId: int) -> bool
        
            Determines whether the specified integer is actually the id of a region in this 
             CompoundStructure.
        
        
            regionId: The id of a region in this vertically compound structure.
            Returns: True if the region is valid, false otherwise.
        """
        pass

    def IsValidSampleHeight(self, height):
        """
        IsValidSampleHeight(self: CompoundStructure, height: float) -> bool
        
            Is the specified height a valid sample height for this compound structure?
        """
        pass

    def IsValidSegmentId(self, segmentId):
        """
        IsValidSegmentId(self: CompoundStructure, segmentId: int) -> bool
        
            Determines whether the specified integer is actually the id of a segment in 
             this CompoundStructure.
        
        
            segmentId: The id of a segment in this CompoundStructure.
            Returns: True if the specified segment is valid, false otherwise.
        """
        pass

    def IsVerticallyHomogeneous(self):
        """
        IsVerticallyHomogeneous(self: CompoundStructure) -> bool
        
            Indicates whether this CompoundStructure represents a single set of parallel 
             layers.
        
            Returns: True if this CompoundStructure represents a series of parallel layers that 
             stretch from bottom to top, false otherwise.
        """
        pass

    def MergeRegionsAdjacentToSegment(self, segmentId, layerIdxForMergedRegion):
        """
        MergeRegionsAdjacentToSegment(self: CompoundStructure, segmentId: int, layerIdxForMergedRegion: int) -> int
        
            Merges the two regions which share the specified segment.
        
            segmentId: The id of a segment in the underlying grid.
            layerIdxForMergedRegion: The index of the layer to which the resulting region will be associated.
            Returns: The id of the resulting region. If -1 is returned, then the operation would 
             have produced
           an invalid region and was not performed.
        """
        pass

    def ParticipatesInWrapping(self, layerIdx):
        """
        ParticipatesInWrapping(self: CompoundStructure, layerIdx: int) -> bool
        
            Identifies if a layer is included in wrapping at inserts and ends.
        
            layerIdx: The index of the layer.
            Returns: If true, then the layer participates in wrapping at inserts and openings. If 
             false, the layer will not
           participate in wrapping.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CompoundStructure, disposing: bool) """
        pass

    def RemoveWallSweep(self, wallSweepType, id):
        """
        RemoveWallSweep(self: CompoundStructure, wallSweepType: WallSweepType, id: int)
            Removes a single sweep or reveal from the compound structure.
        
            wallSweepType: The type of a wall sweep.
            id: The id of the sweep or reveal to remove.
        """
        pass

    def SetDeckEmbeddingType(self, layerIdx, embedType):
        """
        SetDeckEmbeddingType(self: CompoundStructure, layerIdx: int, embedType: StructDeckEmbeddingType)
            Sets the deck embedding type to use for the specified structural deck.
        
            layerIdx: Index of a layer in the CompoundStructure.
            embedType: The embedding type to be used by the specified layer if it is a structural deck.
        """
        pass

    def SetDeckProfileId(self, layerIdx, profileId):
        """
        SetDeckProfileId(self: CompoundStructure, layerIdx: int, profileId: ElementId)
            Sets the profile loop to use for the specified structural deck.
        
            layerIdx: Index of a layer in the CompoundStructure.
            profileId: The element id of a FamilySymbol which contains a profile loop to be used by 
             the specified layer if it is a structural deck.
        """
        pass

    def SetExtendableRegionIds(self, top, regionIds):
        """ SetExtendableRegionIds(self: CompoundStructure, top: bool, regionIds: IList[int]) """
        pass

    def SetLayer(self, layerIdx, layer):
        """
        SetLayer(self: CompoundStructure, layerIdx: int, layer: CompoundStructureLayer)
            Sets a single layer for this CompoundStructure.
        
            layerIdx: The index of a layer. This should range from 0 to the number of layers - 1.
            layer: The layer to be set.
        """
        pass

    def SetLayerFunction(self, layerIdx, function):
        """
        SetLayerFunction(self: CompoundStructure, layerIdx: int, function: MaterialFunctionAssignment)
            Sets the function of the specified layer.
        
            layerIdx: Index of a layer in the CompoundStructure.
            function: The function of the layer.
        """
        pass

    def SetLayers(self, layers):
        """ SetLayers(self: CompoundStructure, layers: IList[CompoundStructureLayer]) """
        pass

    def SetLayerWidth(self, layerIdx, width):
        """
        SetLayerWidth(self: CompoundStructure, layerIdx: int, width: float)
            Sets the width of a specified layer.
        
            layerIdx: Index of a layer in the CompoundStructure.
            width: The new width of the specified layer.
        """
        pass

    def SetMaterialId(self, layerIdx, materialId):
        """
        SetMaterialId(self: CompoundStructure, layerIdx: int, materialId: ElementId)
            Sets a material element for a specified layer.
        
            layerIdx: Index of a layer in the CompoundStructure.
            materialId: The ElementId of a Material element.
        """
        pass

    def SetNumberOfShellLayers(self, shellLayerType, numLayers):
        """
        SetNumberOfShellLayers(self: CompoundStructure, shellLayerType: ShellLayerType, numLayers: int)
            Sets the number of interior or exterior shell layers.
        
            shellLayerType: If ShellLayerType.Exterior set the number of exterior shell layers (or top 
             shell layers for a roof, floor, or ceiling type).
           If 
             ShellLayerType.Interior set the number of interior shell layers (or bottom 
             shell layers for a roof, floor, or ceiling type).
        
            numLayers: The number of layers to be in the specified shell.
        """
        pass

    def SetParticipatesInWrapping(self, layerIdx, participatesInWrapping):
        """
        SetParticipatesInWrapping(self: CompoundStructure, layerIdx: int, participatesInWrapping: bool)
            Assigns if a layer is included in wrapping at inserts and ends.
        
            layerIdx: The index of the layer.
            participatesInWrapping: True if the specified layer will participate in wrapping at inserts and ends, 
             false otherwise.
        """
        pass

    def SplitRegion(self, gridUV, splitDirection, newSegmentId=None):
        """
        SplitRegion(self: CompoundStructure, gridUV: UV, splitDirection: RectangularGridSegmentOrientation) -> (int, int)
        
            Splits the region which contains the specified grid point by a line with the 
             specified direction.
        
        
            gridUV: Coordinates of a point in the rectangular grid of this compound structure.
            splitDirection: Specifies the direction of the split.
            Returns: The id of the region created by this operation.
        SplitRegion(self: CompoundStructure, gridUV: UV, splitDirection: RectangularGridSegmentOrientation) -> int
        
            Splits the region which contains the specified grid point by a line with the 
             specified direction.
        
        
            gridUV: Coordinates of a point in the rectangular grid of this compound structure.
            splitDirection: Specifies the direction of the split.
            Returns: The id of the region created by this operation.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    CutoffHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Horizontal segments below or at the cutoff height have their distance to the wall bottom fixed, those above
   have their distance to the wall top fixed.

Get: CutoffHeight(self: CompoundStructure) -> float

Set: CutoffHeight(self: CompoundStructure) = value
"""

    EndCap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the end cap condition defining which shell layers will participate in end wrapping.

Get: EndCap(self: CompoundStructure) -> EndCapCondition

Set: EndCap(self: CompoundStructure) = value
"""

    HasStructuralDeck = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks if the compound structure has a structural deck.

Get: HasStructuralDeck(self: CompoundStructure) -> bool

"""

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks whether this CompoundStructure is empty.

Get: IsEmpty(self: CompoundStructure) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: CompoundStructure) -> bool

"""

    IsVerticallyCompound = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if this CompoundStructure represents a layout that is more complicated than a simple set of parallel layers.

Get: IsVerticallyCompound(self: CompoundStructure) -> bool

"""

    LayerCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of layers contained in this CompoundStructure.

Get: LayerCount(self: CompoundStructure) -> int

"""

    MinimumSampleHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The minimum sample height determined by the current sample height and the horizontal segments.

Get: MinimumSampleHeight(self: CompoundStructure) -> float

"""

    OpeningWrapping = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the opening wrapping condition defining which shell layers of a wall, in plan view, wrap at inserts and openings.

Get: OpeningWrapping(self: CompoundStructure) -> OpeningWrappingCondition

Set: OpeningWrapping(self: CompoundStructure) = value
"""

    SampleHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sample height is the presumed height of the wall to which the data in this CompoundStructure is applied.

Get: SampleHeight(self: CompoundStructure) -> float

Set: SampleHeight(self: CompoundStructure) = value
"""

    StructuralMaterialIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the layer whose material defines the structural properties of the type for the purposes of analysis.

Get: StructuralMaterialIndex(self: CompoundStructure) -> int

Set: StructuralMaterialIndex(self: CompoundStructure) = value
"""

    VariableLayerIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the index of the layer which is designated as variable.

Get: VariableLayerIndex(self: CompoundStructure) -> int

Set: VariableLayerIndex(self: CompoundStructure) = value
"""



class CompoundStructureError(Enum, IComparable, IFormattable, IConvertible):
    """
    When CompoundStructure::isValid() returns false, it uses these values to indicate precise nature of defect.
    
    enum CompoundStructureError, values: BadShellOrder (0), BadShellsStructure (5), CoreTooThin (1), DeckCantBoundAbove (12), DeckCantBoundBelow (13), ExtensibleRegionsNotContiguousAlongBottom (17), ExtensibleRegionsNotContiguousAlongTop (16), InvalidMaterialId (15), InvalidProfileId (18), MembraneTooThick (3), NonmembraneTooThin (4), ThinOuterLayer (6), VarThickLayerCantBeZero (14), VerticalUnusedLayer (7), VerticalWrongOrderCoreExterior (9), VerticalWrongOrderCoreInterior (10), VerticalWrongOrderLayer (8), VerticalWrongOrderMembrane (11)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BadShellOrder = None
    BadShellsStructure = None
    CoreTooThin = None
    DeckCantBoundAbove = None
    DeckCantBoundBelow = None
    ExtensibleRegionsNotContiguousAlongBottom = None
    ExtensibleRegionsNotContiguousAlongTop = None
    InvalidMaterialId = None
    InvalidProfileId = None
    MembraneTooThick = None
    NonmembraneTooThin = None
    ThinOuterLayer = None
    value__ = None
    VarThickLayerCantBeZero = None
    VerticalUnusedLayer = None
    VerticalWrongOrderCoreExterior = None
    VerticalWrongOrderCoreInterior = None
    VerticalWrongOrderLayer = None
    VerticalWrongOrderMembrane = None


class CompoundStructureLayer(object, IDisposable):
    """
    Describes a single layer in a CompoundStructure.
    
    CompoundStructureLayer(width: float, function: MaterialFunctionAssignment, materialId: ElementId)
    CompoundStructureLayer(cs: CompoundStructureLayer)
    CompoundStructureLayer()
    """
    def Dispose(self):
        """ Dispose(self: CompoundStructureLayer) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CompoundStructureLayer, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, width: float, function: MaterialFunctionAssignment, materialId: ElementId)
        __new__(cls: type, cs: CompoundStructureLayer)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DeckEmbeddingType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Embedding type for structural deck - only for a layer whose function is StructuralDeck.

Get: DeckEmbeddingType(self: CompoundStructureLayer) -> StructDeckEmbeddingType

Set: DeckEmbeddingType(self: CompoundStructureLayer) = value
"""

    DeckProfileId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ElementId of the structural deck profile - only for a layer whose function is StructuralDeck.

Get: DeckProfileId(self: CompoundStructureLayer) -> ElementId

Set: DeckProfileId(self: CompoundStructureLayer) = value
"""

    Function = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The function of the layer.

Get: Function(self: CompoundStructureLayer) -> MaterialFunctionAssignment

Set: Function(self: CompoundStructureLayer) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: CompoundStructureLayer) -> bool

"""

    LayerCapFlag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the layer participates in wrapping at end caps and/or inserts.

Get: LayerCapFlag(self: CompoundStructureLayer) -> bool

Set: LayerCapFlag(self: CompoundStructureLayer) = value
"""

    LayerId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the layer - note that this may be different from the index in the array of layers in a CompoundStructure.

Get: LayerId(self: CompoundStructureLayer) -> int

"""

    MaterialId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the material assigned to this layer.

Get: MaterialId(self: CompoundStructureLayer) -> ElementId

Set: MaterialId(self: CompoundStructureLayer) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Width of the layer.

Get: Width(self: CompoundStructureLayer) -> float

Set: Width(self: CompoundStructureLayer) = value
"""



class ConfigurationReloadInfo(object, IDisposable):
    """
    This object contains information returned by a reload of the fabrication configuration.
    
    ConfigurationReloadInfo()
    """
    def Dispose(self):
        """ Dispose(self: ConfigurationReloadInfo) """
        pass

    def GetConnectivityValidation(self):
        """
        GetConnectivityValidation(self: ConfigurationReloadInfo) -> ConnectionValidationInfo
        
            Returns information about the post-reload connectivity validation.
            Returns: Information about the post-reload connectivity validation.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ConfigurationReloadInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Disconnects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of disconnections caused by the reload.

Get: Disconnects(self: ConfigurationReloadInfo) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ConfigurationReloadInfo) -> bool

"""

    ProfileNotAvailable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current profile is not available in the disk configuration.

Get: ProfileNotAvailable(self: ConfigurationReloadInfo) -> bool

"""



class Face(GeometryObject, IDisposable):
    """ A bounded face of a 3d solid or open shell. """
    def ComputeDerivatives(self, point):
        """
        ComputeDerivatives(self: Face, point: UV) -> Transform
        
            Returns the first partial derivatives of the underlying surface at the 
             specified point.
        
        
            point: The parameters to be evaluated, in natural parameterization of the face.
            Returns: A transformation containing tangent vectors and a normal vector.
        """
        pass

    def ComputeNormal(self, point):
        """
        ComputeNormal(self: Face, point: UV) -> XYZ
        
            Returns the normal vector for the face at the given point.
        
            point: The parameters to be evaluated, in natural parameterization of the face.
            Returns: The normal vector. This vector will be normalized.
        """
        pass

    def ComputeSecondDerivatives(self, point):
        """
        ComputeSecondDerivatives(self: Face, point: UV) -> FaceSecondDerivatives
        
            Returns the second partial derivatives of the face at the specified point.
        
            point: The parameters to be evaluated, in natural parameterization of the face.
            Returns: The second partial derivatives of the face at the specified point.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def Evaluate(self, params):
        """
        Evaluate(self: Face, params: UV) -> XYZ
        
            Evaluates and returns the XYZ coordinates of a point at the indicated UV 
             parameterization of the face.
        
        
            params: The parameters to be evaluated, in natural parameterization of the face.
            Returns: The XYZ coordinates.
        """
        pass

    def GetBoundingBox(self):
        """
        GetBoundingBox(self: Face) -> BoundingBoxUV
        
            Returns the UV bounding box of the face.
            Returns: A BoundingBoxUV with the extents of the parameterization of the face.
        """
        pass

    def GetEdgesAsCurveLoops(self):
        """
        GetEdgesAsCurveLoops(self: Face) -> IList[CurveLoop]
        
            Returns a list of closed curve loops that correspond to the edge loops of the 
             face. 
        Curves in each curve loop correspond to individual edges.
        
            Returns: A list of closed curve loops, that correspond edges of face.
        """
        pass

    def GetRegions(self):
        """
        GetRegions(self: Face) -> IList[Face]
        
            Gets the face regions (created, for example, by the Split Face command) of the 
             face.
        
            Returns: A list of faces, one for the main face of the object hosting the Split Face 
             (such as wall or floor) 
        and one face for each Split Face regions.
        """
        pass

    def Intersect(self, *__args):
        """
        Intersect(self: Face, curve: Curve) -> (SetComparisonResult, IntersectionResultArray)
        
            Calculates the intersection of the specified curve with this face and returns 
             the intersection results.
        
        
            curve: The specified curve to intersect with this face.
            Returns: SetComparisonResult.Overlap - One or more intersections were encountered.  The 
             output argument has the results. SetComparisonResult.Subset - The curve is 
             coincident with the surface.SetComparisonResult.Disjoint - There is no 
             intersection found.
        
        Intersect(self: Face, curve: Curve) -> SetComparisonResult
        
            Calculates the intersection of the specified curve with this face.
        
            curve: The specified curve to intersect with this face.
            Returns: SetComparisonResult.Overlap - One or more intersections were encountered. 
             SetComparisonResult.Subset - The curve is coincident with the 
             surface.SetComparisonResult.Disjoint - There is no intersection found.
        
        Intersect(self: Face, face: Face) -> (FaceIntersectionFaceResult, Curve)
        
            Calculates the intersection of the specified face with this face and returns 
             the intersection results.
        
        
            face: The specified face to intersect with this face.
            Returns: FaceIntersectionFaceResult.Intersecting - One or more intersections were 
             encountered.SetComparisonResult.NonIntersecting - There is no intersection 
             found.
        
        Intersect(self: Face, face: Face) -> FaceIntersectionFaceResult
        
            Calculates the intersection of the specified face with this face and returns 
             the intersection results.
        
        
            face: The specified face to intersect with this face.
            Returns: FaceIntersectionFaceResult.Intersecting - One or more intersections were 
             encountered.SetComparisonResult.NonIntersecting - There is no intersection 
             found.
        """
        pass

    def IsInside(self, point, result=None):
        """
        IsInside(self: Face, point: UV) -> bool
        
            Indicates whether the specified point is within this face.
        
            point: The parameters to be evaluated, in natural parameterization of the face.
            Returns: True if point is within this face or on its boundary, otherwise false.
        IsInside(self: Face, point: UV) -> (bool, IntersectionResult)
        
            Indicates whether the specified point is within this face and outputs 
             additional information about the point location.
        
        
            point: The parameters to be evaluated, in natural parameterization of the face.
            Returns: True if within this face or on its boundary, otherwise False.
        """
        pass

    def Project(self, point):
        """
        Project(self: Face, point: XYZ) -> IntersectionResult
        
            Projects the specified point on the face.
        
            point: The point to be projected.
            Returns: Geometric information if projection is successful;
        if projection fails or the 
             nearest point is outside of this face, returns ll.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def Triangulate(self, levelOfDetail=None):
        """
        Triangulate(self: Face) -> Mesh
        
            Returns a triangular mesh approximation to the face.
        Triangulate(self: Face, levelOfDetail: float) -> Mesh
        
            Returns a triangular mesh approximation to the face.
        
            levelOfDetail: The level of detail. Its range is from 0 to 1. 0 is the lowest level of detail 
             and 1 is the highest.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The area of this face.

Get: Area(self: Face) -> float

"""

    EdgeLoops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A collection of edge loops.  Each edge loop represents one of the closed boundaries of the face.

Get: EdgeLoops(self: Face) -> EdgeArrayArray

"""

    HasRegions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the face contains regions (which can be created, for example, by the Split Face command).

Get: HasRegions(self: Face) -> bool

"""

    IsTwoSided = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determines if a face is two-sided (degenerate).

Get: IsTwoSided(self: Face) -> bool

"""

    MaterialElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element ID of the material from which this face is composed.

Get: MaterialElementId(self: Face) -> ElementId

"""

    Reference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns a stable reference to the face.

Get: Reference(self: Face) -> Reference

"""



class ConicalFace(Face, IDisposable):
    """ A conical face of a 3d solid or open shell. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Axis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Axis of the surface.

Get: Axis(self: ConicalFace) -> XYZ

"""

    HalfAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Half angle of the surface.

Get: HalfAngle(self: ConicalFace) -> float

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Origin of the surface.

Get: Origin(self: ConicalFace) -> XYZ

"""



class Surface(object, IDisposable):
    """ A mathematical representation of a surface. """
    def Dispose(self):
        """ Dispose(self: Surface) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Surface, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: Surface) -> bool

"""



class ConicalSurface(Surface, IDisposable):
    """ A Conical Surface. """
    @staticmethod
    def Create(frameOfReference, halfAngle):
        """
        Create(frameOfReference: Frame, halfAngle: float) -> ConicalSurface
        
            Creates a conical surface defined by a local reference frame and a half angle.
        
            frameOfReference: frameOfReference is an orthonormal frame that defines a local coordinate system 
             for the cone.
           Frame.Origin is a point on the cylinder's axis.Frame.BasisZ 
             points along the axis, while Frame.BasisX and Frame.BasisY are orthogonal to 
             the axis. The frame may be either left-handed or right-handed (see 
             Frame.IsRightHanded). Note that
           the "handedness" of the frame does not, by 
             itself, determine the surface's orientation.
        
            halfAngle: Cone angle. Must be not 0, lesser than PI/2 and greater than -PI/2.
            Returns: The created ConicalSurface.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Surface, A_0: bool) """
        pass

    def GetFrameOfReference(self):
        """
        GetFrameOfReference(self: ConicalSurface) -> Frame
        
            Returns frame of reference associated with this ConicalSurface.
            Returns: Frame of reference associated with this ConicalSurface.
        """
        pass

    @staticmethod
    def IsValidConeAngle(halfAngle):
        """
        IsValidConeAngle(halfAngle: float) -> bool
        
            Checks whether the input value lies is not 0, greater than -PI/2 and lesser 
             than PI/2.
        
        
            halfAngle: Cone half-angle parameter.
            Returns: True if input is not 0, lesser than PI/2 and greater than -PI/2, false 
             otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Surface, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Axis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Axis of the cone. This is the Z axis of the local coordinate system associated with this cone.

Get: Axis(self: ConicalSurface) -> XYZ

"""

    HalfAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cone angle.

Get: HalfAngle(self: ConicalSurface) -> float

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Apex of the cone. This is the origin of the local coordinate system associated with this cone.

Get: Origin(self: ConicalSurface) -> XYZ

"""

    XDir = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """X axis of the local coordinate system associated with this cone.

Get: XDir(self: ConicalSurface) -> XYZ

"""

    YDir = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """X axis of the local coordinate system associated with this cone.

Get: YDir(self: ConicalSurface) -> XYZ

"""



class ConnectionResolution(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all the possible resolutions for connectivity validation.
    
    enum ConnectionResolution, values: Disconnected (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Disconnected = None
    value__ = None


class ConnectionValidationInfo(object, IDisposable):
    """
    This object contains information about fabrication connection validations.
    
    ConnectionValidationInfo()
    """
    def Dispose(self):
        """ Dispose(self: ConnectionValidationInfo) """
        pass

    def GetWarning(self, index):
        """
        GetWarning(self: ConnectionValidationInfo, index: int) -> ConnectionValidationWarning
        
            Access specific warning number of warnings generated by reload.
        """
        pass

    def IsValidWarningIndex(self, index):
        """
        IsValidWarningIndex(self: ConnectionValidationInfo, index: int) -> bool
        
            Validate warning index.
        """
        pass

    def ManyWarnings(self):
        """
        ManyWarnings(self: ConnectionValidationInfo) -> int
        
            Returns number of warnings generated by reload.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ConnectionValidationInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ConnectionValidationInfo) -> bool

"""



class ConnectionValidationWarning(object, IDisposable):
    """
    Contains information about a specific connection validation problem.
    
    ConnectionValidationWarning(resolution: ConnectionResolution, reason: ConnectionWarning, part1: ElementId, part2: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: ConnectionValidationWarning) """
        pass

    def GetParts(self):
        """
        GetParts(self: ConnectionValidationWarning) -> ISet[ElementId]
        
            Get ElementIds of affected parts.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ConnectionValidationWarning, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, resolution, reason, part1, part2):
        """ __new__(cls: type, resolution: ConnectionResolution, reason: ConnectionWarning, part1: ElementId, part2: ElementId) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ConnectionValidationWarning) -> bool

"""

    Reason = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Enumeration for reason of warning.

Get: Reason(self: ConnectionValidationWarning) -> ConnectionWarning

"""

    Resolution = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Enumeration for resolution that was applied.

Get: Resolution(self: ConnectionValidationWarning) -> ConnectionResolution

"""



class ConnectionWarning(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all the reasons for connectivity failure.
    
    enum ConnectionWarning, values: Alignment (1), Connectivity (4), Shape (3), Size (2), Unknown (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Alignment = None
    Connectivity = None
    Shape = None
    Size = None
    Unknown = None
    value__ = None


class Connector(object, IConnector, IDisposable):
    """ A connector in an Autodesk Revit MEP project document. """
    def ConnectTo(self, connector):
        """
        ConnectTo(self: Connector, connector: Connector)
            Make connection between two connectors.
        
            connector: Indicate the connector will be connected to.
        """
        pass

    def DisconnectFrom(self, connector):
        """
        DisconnectFrom(self: Connector, connector: Connector)
            Remove connection between two connectors.
        
            connector: Indicate the connector, connection will be removed from.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Connector) """
        pass

    def GetFabricationConnectorInfo(self):
        """
        GetFabricationConnectorInfo(self: Connector) -> FabricationConnectorInfo
        
            Gets fabrication connectivity information.
            Returns: Returns ll if there is no fabrication connector information associated.
        """
        pass

    def GetMEPConnectorInfo(self):
        """
        GetMEPConnectorInfo(self: Connector) -> MEPConnectorInfo
        
            Gets MEP connector information.
            Returns: Returns ll if there is no MEP connector information associated.
        """
        pass

    def IsConnectedTo(self, connector):
        """
        IsConnectedTo(self: Connector, connector: Connector) -> bool
        
            Identifies if the connector is connected to the specified connector.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Connector, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AllowsSlopeAdjustments = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the connector allows the slope adjustment.

Get: AllowsSlopeAdjustments(self: Connector) -> bool

"""

    AllRefs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All references of the connector.

Get: AllRefs(self: Connector) -> ConnectorSet

"""

    Angle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The angle of the Connector.

Get: Angle(self: Connector) -> float

Set: Angle(self: Connector) = value
"""

    AssignedDuctFlowConfiguration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The assigned duct flow configuration of the connector.

Get: AssignedDuctFlowConfiguration(self: Connector) -> DuctFlowConfigurationType

"""

    AssignedDuctLossMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The duct loss method of the connector.

Get: AssignedDuctLossMethod(self: Connector) -> DuctLossMethodType

"""

    AssignedFixtureUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The assigned fixture units of the connector.

Get: AssignedFixtureUnits(self: Connector) -> float

Set: AssignedFixtureUnits(self: Connector) = value
"""

    AssignedFlow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The assigned flow of the connector.

Get: AssignedFlow(self: Connector) -> float

Set: AssignedFlow(self: Connector) = value
"""

    AssignedFlowDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The assigned flow direction of the connector.

Get: AssignedFlowDirection(self: Connector) -> FlowDirectionType

"""

    AssignedFlowFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The assigned flow factor of this connector.

Get: AssignedFlowFactor(self: Connector) -> float

Set: AssignedFlowFactor(self: Connector) = value
"""

    AssignedKCoefficient = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The assigned kCoefficient of the connector.

Get: AssignedKCoefficient(self: Connector) -> float

Set: AssignedKCoefficient(self: Connector) = value
"""

    AssignedLossCoefficient = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The assigned loss coefficient of the connector.

Get: AssignedLossCoefficient(self: Connector) -> float

Set: AssignedLossCoefficient(self: Connector) = value
"""

    AssignedPipeFlowConfiguration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The pipe flow configuration type of the connector.

Get: AssignedPipeFlowConfiguration(self: Connector) -> PipeFlowConfigurationType

"""

    AssignedPipeLossMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The pipe loss method of the connector.

Get: AssignedPipeLossMethod(self: Connector) -> PipeLossMethodType

"""

    AssignedPressureDrop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The assigned pressure drop of the connector.

Get: AssignedPressureDrop(self: Connector) -> float

Set: AssignedPressureDrop(self: Connector) = value
"""

    Coefficient = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The coefficient of the connector.

Get: Coefficient(self: Connector) -> float

"""

    ConnectorManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The connector manager of the connector.

Get: ConnectorManager(self: Connector) -> ConnectorManager

"""

    ConnectorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The connector type of the connector.

Get: ConnectorType(self: Connector) -> ConnectorType

"""

    CoordinateSystem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The coordinate system of the connector.

Get: CoordinateSystem(self: Connector) -> Transform

"""

    Demand = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The demand of the connector.

Get: Demand(self: Connector) -> float

"""

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The description.

Get: Description(self: Connector) -> str

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The direction of the connector.

Get: Direction(self: Connector) -> FlowDirectionType

"""

    Domain = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The domain of the connector.

Get: Domain(self: Connector) -> Domain

"""

    DuctSystemType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The duct system type of the connector.

Get: DuctSystemType(self: Connector) -> DuctSystemType

"""

    ElectricalSystemType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The electrical system type of the connector.

Get: ElectricalSystemType(self: Connector) -> ElectricalSystemType

"""

    EngagementLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Connector engagement length

Get: EngagementLength(self: Connector) -> float

"""

    Flow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The flow of the connector.

Get: Flow(self: Connector) -> float

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The height of the connector.

Get: Height(self: Connector) -> float

Set: Height(self: Connector) = value
"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A unique identifier to identify this connector.

Get: Id(self: Connector) -> int

"""

    IsConnected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the connector is physically connected to a connector on another element.

Get: IsConnected(self: Connector) -> bool

"""

    IsMovable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """whether the connector can be moved.

Get: IsMovable(self: Connector) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: Connector) -> bool

"""

    MEPSystem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The system of the connector belong to.

Get: MEPSystem(self: Connector) -> MEPSystem

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The location of the connector.

Get: Origin(self: Connector) -> XYZ

Set: Origin(self: Connector) = value
"""

    Owner = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The host of the connector.

Get: Owner(self: Connector) -> Element

"""

    PipeSystemType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The pipe system type of the connector.

Get: PipeSystemType(self: Connector) -> PipeSystemType

"""

    PressureDrop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The pressure drop of the connector.

Get: PressureDrop(self: Connector) -> float

"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The radius of the connector.

Get: Radius(self: Connector) -> float

Set: Radius(self: Connector) = value
"""

    Shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The shape of the connector.

Get: Shape(self: Connector) -> ConnectorProfileType

"""

    Utility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the connector is a utility connector.

Get: Utility(self: Connector) -> bool

"""

    VelocityPressure = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The velocity pressure of the connector.

Get: VelocityPressure(self: Connector) -> float

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The width of the connector.

Get: Width(self: Connector) -> float

Set: Width(self: Connector) = value
"""



class ConnectorDomainType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enumeration of connector domain types
    
    enum ConnectorDomainType, values: CableTrayConduit (4), Electrical (2), Hvac (1), Piping (3), StructuralAnalytical (5), Undefined (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CableTrayConduit = None
    Electrical = None
    Hvac = None
    Piping = None
    StructuralAnalytical = None
    Undefined = None
    value__ = None


class ConnectorElement(Element, IDisposable, IConnector):
    """ A base class that provides support for all connector elements occurring in families. """
    def AssignAsPrimary(self):
        """
        AssignAsPrimary(self: ConnectorElement)
            Assign a connector as a primary connector.
        """
        pass

    @staticmethod
    def CreateCableTrayConnector(document, planarFace, edge=None):
        """
        CreateCableTrayConnector(document: Document, planarFace: Reference) -> ConnectorElement
        
            Create a new cable tray ConnectorElement.
        
            document: The document to add the connector to.
            planarFace: The planar face to place the connector on.
            Returns: The cable tray ConnectorElement.
        CreateCableTrayConnector(document: Document, planarFace: Reference, edge: Edge) -> ConnectorElement
        
            Create a new cable tray ConnectorElement.
        
            document: The document to add the connector to.
            planarFace: The planar face to place the connector on.
            edge: One of the edges in the edge loop that defines the connector location on the 
             planar face.
        
            Returns: The cable tray ConnectorElement.
        """
        pass

    @staticmethod
    def CreateConduitConnector(document, planarFace, edge=None):
        """
        CreateConduitConnector(document: Document, planarFace: Reference) -> ConnectorElement
        
            Create a new conduit ConnectorElement.
        
            document: The document to add the connector to.
            planarFace: The planar face to place the connector on.
            Returns: The conduit ConnectorElement.
        CreateConduitConnector(document: Document, planarFace: Reference, edge: Edge) -> ConnectorElement
        
            Create a new conduit ConnectorElement.
        
            document: The document to add the connector to.
            planarFace: The planar face to place the connector on.
            edge: One of the edges in the edge loop that defines the connector location on the 
             planar face.
        
            Returns: The conduit ConnectorElement.
        """
        pass

    @staticmethod
    def CreateDuctConnector(document, ductSystemType, profileShape, planarFace, edge=None):
        """
        CreateDuctConnector(document: Document, ductSystemType: DuctSystemType, profileShape: ConnectorProfileType, planarFace: Reference) -> ConnectorElement
        
            Create a new duct ConnectorElement.
        
            document: The document to add the connector to.
            ductSystemType: The DuctSystemType of the connector.
            profileShape: The profile shape of the duct.
            planarFace: The planar face to place the connector on.
            Returns: The duct ConnectorElement.
        CreateDuctConnector(document: Document, ductSystemType: DuctSystemType, profileShape: ConnectorProfileType, planarFace: Reference, edge: Edge) -> ConnectorElement
        
            Create a new duct ConnectorElement.
        
            document: The document to add the connector to.
            ductSystemType: The DuctSystemType of the connector.
            profileShape: The profile shape of the duct.
            planarFace: The planar face to place the connector on.
            edge: One of the edges in the edge loop that defines the connector location on the 
             planar face.
        
            Returns: The duct ConnectorElement.
        """
        pass

    @staticmethod
    def CreateElectricalConnector(document, electricalSystemType, planarFace, edge=None):
        """
        CreateElectricalConnector(document: Document, electricalSystemType: ElectricalSystemType, planarFace: Reference) -> ConnectorElement
        
            Create a new electrical ConnectorElement.
        
            document: The document to add the connector to.
            electricalSystemType: The ElectricalSystemTYpe of the connector.
            planarFace: The planar face to place the connector on.
            Returns: The electrical ConnectorElement.
        CreateElectricalConnector(document: Document, electricalSystemType: ElectricalSystemType, planarFace: Reference, edge: Edge) -> ConnectorElement
        
            Create a new electrical ConnectorElement.
        
            document: The document to add the connector to.
            electricalSystemType: The ElectricalSystemTYpe of the connector.
            planarFace: The planar face to place the connector on.
            edge: One of the edges in the edge loop that defines the connector location on the 
             planar face.
        
            Returns: The electrical ConnectorElement.
        """
        pass

    @staticmethod
    def CreatePipeConnector(document, pipeSystemType, planarFace, edge=None):
        """
        CreatePipeConnector(document: Document, pipeSystemType: PipeSystemType, planarFace: Reference) -> ConnectorElement
        
            Create a new pipe ConnectorElement.
        
            document: The document to add the connector to.
            pipeSystemType: The PipeSystemType of the connector.
            planarFace: The planar face to place the connector on.
            Returns: The pipe ConnectorElement.
        CreatePipeConnector(document: Document, pipeSystemType: PipeSystemType, planarFace: Reference, edge: Edge) -> ConnectorElement
        
            Create a new pipe ConnectorElement with a face and an edge.
        
            document: The document to add the connector to.
            pipeSystemType: The PipeSystemType of the connector.
            planarFace: The planar face to place the connector on.
            edge: One of the edges in the edge loop that defines the connector location on the 
             planar face.
        
            Returns: The pipe ConnectorElement.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def FlipDirection(self):
        """
        FlipDirection(self: ConnectorElement)
            Reverses the direction of the connector element.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetLinkedConnectorElement(self):
        """
        GetLinkedConnectorElement(self: ConnectorElement) -> ConnectorElement
        
            Get the linked connector element.
            Returns: The linked connector element.  If ll, the connector has no link.
        """
        pass

    def IsSystemClassificationValid(self, systemClassification):
        """
        IsSystemClassificationValid(self: ConnectorElement, systemClassification: MEPSystemClassification) -> bool
        
            Checks that the MEPSystemType is valid for the domain of connector.
        
            systemClassification: The MEPSystemType to be validated.
            Returns: True if the MEPSystemType is valid for the domain of the connector, false 
             otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetLinkedConnectorElement(self, otherConnector):
        """
        SetLinkedConnectorElement(self: ConnectorElement, otherConnector: ConnectorElement)
            Set the linked connector element.
        
            otherConnector: The connector to link to.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CoordinateSystem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The coordinate system of the connector.

Get: CoordinateSystem(self: ConnectorElement) -> Transform

"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the direction of the connector element.

Get: Direction(self: ConnectorElement) -> XYZ

"""

    Domain = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The domain of the connector.

Get: Domain(self: ConnectorElement) -> Domain

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The height of the connector.

Get: Height(self: ConnectorElement) -> float

"""

    IsPrimary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if this is the primary connector in the family.

Get: IsPrimary(self: ConnectorElement) -> bool

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The location of the connector in family document.

Get: Origin(self: ConnectorElement) -> XYZ

"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The radius of the connector.

Get: Radius(self: ConnectorElement) -> float

"""

    Shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The shape of the connector.

Get: Shape(self: ConnectorElement) -> ConnectorProfileType

"""

    SystemClassification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The system classification of the connector.

Get: SystemClassification(self: ConnectorElement) -> MEPSystemClassification

Set: SystemClassification(self: ConnectorElement) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The width of the connector.

Get: Width(self: ConnectorElement) -> float

"""



class ConnectorGenderType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum of connector gender type
    
    enum ConnectorGenderType, values: Female (2), Male (1), Undefined (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Female = None
    Male = None
    Undefined = None
    value__ = None


class ConnectorJointType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum of connector joint type
    
    enum ConnectorJointType, values: Flanged (1), Glued (5), Grooved (4), Soldered (6), Threaded (3), Undefined (0), Welded (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Flanged = None
    Glued = None
    Grooved = None
    Soldered = None
    Threaded = None
    Undefined = None
    value__ = None
    Welded = None


class ConnectorManager(object, IDisposable):
    """ Provides access to the Connector Manager """
    def Dispose(self):
        """ Dispose(self: ConnectorManager) """
        pass

    def Lookup(self, index):
        """
        Lookup(self: ConnectorManager, index: int) -> Connector
        
            Lookup the connector using the unique index value that identify this connector.
        
            index: The unique index value.
            Returns: Returns the connector or null if a connector for the provided unique index 
             value doesn't exist.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ConnectorManager, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Connectors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Return all the Connectors of the Connector Manager.

Get: Connectors(self: ConnectorManager) -> ConnectorSet

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ConnectorManager) -> bool

"""

    Owner = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property is used to retrieve the owner of the Connector Manager.

Get: Owner(self: ConnectorManager) -> Element

"""

    UnusedConnectors = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Return all the unused Connectors of the Connector Manager.

Get: UnusedConnectors(self: ConnectorManager) -> ConnectorSet

"""



class ConnectorProfileType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all connector profile types
    
    enum ConnectorProfileType, values: Invalid (-1), Oval (2), Rectangular (1), Round (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Invalid = None
    Oval = None
    Rectangular = None
    Round = None
    value__ = None


class ConnectorSet(APIObject, IDisposable, IEnumerable):
    """
    A set that can contain any type of object.
    
    ConnectorSet()
    """
    def Clear(self):
        """
        Clear(self: ConnectorSet)
            Removes every item from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """ Contains(self: ConnectorSet, item: Connector) -> bool """
        pass

    def Dispose(self):
        """ Dispose(self: ConnectorSet, A_0: bool) """
        pass

    def Erase(self, item):
        """ Erase(self: ConnectorSet, item: Connector) -> int """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ConnectorSet) -> ConnectorSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ConnectorSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """ Insert(self: ConnectorSet, item: Connector) -> bool """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ConnectorSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ConnectorSet) -> ConnectorSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: ConnectorSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the set.

Get: Size(self: ConnectorSet) -> int

"""



class ConnectorSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a set.
    
    ConnectorSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: ConnectorSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ConnectorSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ConnectorSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: ConnectorSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ConnectorSetIterator) -> object

"""



class ConnectorType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all connector types for a connection
    
    enum ConnectorType, values: AllModes (16777215), AnyEnd (129), BlankEnd (128), Curve (2), End (1), EndSurface (17), Family (49), Invalid (0), Logical (4), MasterSurface (32), NodeReference (64), NonEnd (30), Physical (19), Reference (8), Surface (16)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AllModes = None
    AnyEnd = None
    BlankEnd = None
    Curve = None
    End = None
    EndSurface = None
    Family = None
    Invalid = None
    Logical = None
    MasterSurface = None
    NodeReference = None
    NonEnd = None
    Physical = None
    Reference = None
    Surface = None
    value__ = None


class Construction(object):
    """ Construction definition for Project Information. """
    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the id of the Construction.

Get: Id(self: Construction) -> str

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the name of the Construction.

Get: Name(self: Construction) -> str

"""



class RenderNode(object, IDisposable):
    """ This is a base class representing a render node in a model-exporting process. """
    def Dispose(self):
        """ Dispose(self: RenderNode) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RenderNode) -> bool

"""

    NodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A readable name of the output node.

Get: NodeName(self: RenderNode) -> str

"""



class ContentNode(RenderNode, IDisposable):
    """ This is a class representing a generic content node in a model-exporting process. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def GetAsset(self):
        """
        GetAsset(self: ContentNode) -> Asset
        
            Returns an an instance of an Asset object, which contains definitions of the 
             content node.
        """
        pass

    def GetTransform(self):
        """
        GetTransform(self: ContentNode) -> Transform
        
            A transformation matrix associated with the node.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class Control(Element, IDisposable):
    """ A control in Autodesk Revit family document. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The control origin.

Get: Origin(self: Control) -> XYZ

"""

    Shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The control shape.

Get: Shape(self: Control) -> ControlShape

"""

    View = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The view.

Get: View(self: Control) -> View

"""



class ControlShape(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing four shapes of control that Autodesk Revit supports.
    
    enum ControlShape, values: DoubleHorizontalArrow (3), DoubleVerticalArrow (2), HorizontalArrow (1), VerticalArrow (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DoubleHorizontalArrow = None
    DoubleVerticalArrow = None
    HorizontalArrow = None
    value__ = None
    VerticalArrow = None


class CoordinatePlaneVisibility(Enum, IComparable, IFormattable, IConvertible):
    """
    Visibility settings for ReferencePoint element's coordinate reference planes.
    
    enum CoordinatePlaneVisibility, values: Always (2), Never (0), WhenSelected (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Always = None
    Never = None
    value__ = None
    WhenSelected = None


class CopyPasteOptions(object, IDisposable):
    """
    Settings to control the behavior of a copy-paste operation.
    
    CopyPasteOptions()
    """
    def Dispose(self):
        """ Dispose(self: CopyPasteOptions) """
        pass

    def GetDuplicateTypeNamesHandler(self):
        """
        GetDuplicateTypeNamesHandler(self: CopyPasteOptions) -> IDuplicateTypeNamesHandler
        
            Returns current duplicate type names handler or ll if none is set.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CopyPasteOptions, disposing: bool) """
        pass

    def SetDuplicateTypeNamesHandler(self, handler):
        """
        SetDuplicateTypeNamesHandler(self: CopyPasteOptions, handler: IDuplicateTypeNamesHandler)
            Sets a custom duplicate type names handler. If this value is not set, the 
             default handler is used.
           By default, Revit displays a modal dialog with 
             options to either copy new types only, or cancel the operation.
        
        
            handler: The duplicate type names handler.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: CopyPasteOptions) -> bool

"""



class CurtainCell(APIObject, IDisposable):
    """ Represents a CurtainCell within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CurveLoops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cell boundaries on the reference face. The boundaries can have more than one CurveLoop. Each item in the returned array represents a CurveLoop containing 3 or more than 3 edges.

Get: CurveLoops(self: CurtainCell) -> CurveArrArray

"""

    PlanarizedCurveLoops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The planarized curve loops for cell boundaries. The boundaries can have more than one CurveLoop. Each item in the returned array represents a CurveLoop containing 3 or more than 3 edges.

Get: PlanarizedCurveLoops(self: CurtainCell) -> CurveArrArray

"""



class CurtainGrid(APIObject, IDisposable):
    """ Represents a curtain grid element within Autodesk Revit. """
    def AddGridLine(self, isUGridLine, position, oneSegmentOnly):
        """
        AddGridLine(self: CurtainGrid, isUGridLine: bool, position: XYZ, oneSegmentOnly: bool) -> CurtainGridLine
        
            Add a grid line to the curtain grid.
        
            isUGridLine: If true, a U-direction grid line will be added. Otherwise, a V-direction grid 
             line will be added.
        
            position: The position of the grid line.
            oneSegmentOnly: If it is true, only one segment is added. Otherwise, all segments will be added 
             for the grid line.
        
            Returns: The created grid line is returned if the operation is successful. Otherwise, ll 
             is returned.
        """
        pass

    def ChangePanelType(self, panel, newSymbol):
        """
        ChangePanelType(self: CurtainGrid, panel: Element, newSymbol: ElementType) -> Element
        
            Change the type of a curtain panel.
        
            panel: The panel to be changed, it can be a type of Autodesk.Revit.DB.Panel or 
             Autodesk.Revit.DB.Wall.
        
            newSymbol: The new symbol, it may be of Autodesk.Revit.DB.PanelType or 
             Autodesk.Revit.DB.WallType when the panel is hosted in a curtain wall. 
        The 
             new symbol can only be of type Autodesk.Revit.DB.PanelType if the Panel is 
             hosted in a curtain system.
        
            Returns: If operation succeeds, the modified panel element is returned.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def GetCell(self, uGridLineId, vGridLineId):
        """
        GetCell(self: CurtainGrid, uGridLineId: ElementId, vGridLineId: ElementId) -> CurtainCell
        
            Get the specified cell located by the intersection of the grid lines.
        
            uGridLineId: The id of a grid line in the U-direction used to locate the cell.
            vGridLineId: The id of a grid line in the V-direction used to locate the cell.
            Returns: The cell.
        """
        pass

    def GetCurtainCells(self):
        """
        GetCurtainCells(self: CurtainGrid) -> ICollection[CurtainCell]
        
            Gets the CurtainCells owned by this curtain grid.
            Returns: The CurtainCells owned by this curtain grid.
        """
        pass

    def GetMullionIds(self):
        """
        GetMullionIds(self: CurtainGrid) -> ICollection[ElementId]
        
            Gets all ElementIds of the mullions of the curtain grid.
            Returns: The mullion ElementIds
        """
        pass

    def GetPanel(self, uGridLineId, vGridLineId):
        """
        GetPanel(self: CurtainGrid, uGridLineId: ElementId, vGridLineId: ElementId) -> Panel
        
            Get the specified panel located by the intersection of the grid lines.
        
            uGridLineId: The id of a grid line in the U-direction used to locate the panel.
            vGridLineId: The id of a grid line in the V-direction used to locate the panel.
            Returns: The panel, or ll if the panel cannot be found at this intersection.
        """
        pass

    def GetPanelIds(self):
        """
        GetPanelIds(self: CurtainGrid) -> ICollection[ElementId]
        
            Gets all ElementIds of the panels of the curtain grid.
            Returns: The panel ElementIds
        """
        pass

    def GetUGridLineIds(self):
        """
        GetUGridLineIds(self: CurtainGrid) -> ICollection[ElementId]
        
            Gets all ElementIds of grid lines in the U direction.
            Returns: The U grid line ElementIds
        """
        pass

    def GetUnlockedMullionIds(self):
        """
        GetUnlockedMullionIds(self: CurtainGrid) -> ICollection[ElementId]
        
            Gets all ElementIds of the unlocked mullions of the curtain grid.
            Returns: The unlocked mullion ElementIds
        """
        pass

    def GetUnlockedPanelIds(self):
        """
        GetUnlockedPanelIds(self: CurtainGrid) -> ICollection[ElementId]
        
            Gets all ElementIds of the unlocked panels of the curtain grid.
            Returns: The unlocked panel ElementIds
        """
        pass

    def GetVGridLineIds(self):
        """
        GetVGridLineIds(self: CurtainGrid) -> ICollection[ElementId]
        
            Gets all ElementIds of grid lines in the V direction.
            Returns: The V grid line ElementIds
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CurtainGrid) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Grid1Angle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The angle for the U grid line pattern of the curtain grid.

Get: Grid1Angle(self: CurtainGrid) -> float

Set: Grid1Angle(self: CurtainGrid) = value
"""

    Grid1Justification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The justification for the U grid line pattern of the curtain grid.

Get: Grid1Justification(self: CurtainGrid) -> CurtainGridAlignType

Set: Grid1Justification(self: CurtainGrid) = value
"""

    Grid1Offset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset for the U grid line pattern of the curtain grid.

Get: Grid1Offset(self: CurtainGrid) -> float

Set: Grid1Offset(self: CurtainGrid) = value
"""

    Grid2Angle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The angle for V grid line pattern of the curtain grid.

Get: Grid2Angle(self: CurtainGrid) -> float

Set: Grid2Angle(self: CurtainGrid) = value
"""

    Grid2Justification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The justification for the V grid line pattern of the curtain grid.

Get: Grid2Justification(self: CurtainGrid) -> CurtainGridAlignType

Set: Grid2Justification(self: CurtainGrid) = value
"""

    Grid2Offset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset for V grid line pattern of the curtain grid.

Get: Grid2Offset(self: CurtainGrid) -> float

Set: Grid2Offset(self: CurtainGrid) = value
"""

    NumPanels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of panels.

Get: NumPanels(self: CurtainGrid) -> int

"""

    NumULines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the number of grid lines in the U direction.

Get: NumULines(self: CurtainGrid) -> int

"""

    NumVLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the number of grid lines in the V direction.

Get: NumVLines(self: CurtainGrid) -> int

"""



class CurtainGridAlignType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated to list CurtainGrid patterns.
    
    enum CurtainGridAlignType, values: Beginning (1), Center (2), End (3), NoJustify (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Beginning = None
    Center = None
    End = None
    NoJustify = None
    value__ = None


class CurtainGridLine(HostObject, IDisposable):
    """ Represents a CurtainGridLine within Autodesk Revit. """
    def AddAllSegments(self):
        """
        AddAllSegments(self: CurtainGridLine)
            All the segments on this grid line will be added.
        """
        pass

    def AddMullions(self, segment, mullionType, oneSegmentOnly):
        """
        AddMullions(self: CurtainGridLine, segment: Curve, mullionType: MullionType, oneSegmentOnly: bool) -> ElementSet
        
            Add mullions on the specified segments of a grid. If any segment already has a 
             mullion, no change is made to that segment.
        
        
            segment: Curve of the segment.
            mullionType: The type of the mullion to add.
            oneSegmentOnly: If true, add one mullion to the specified segment, otherwise add mullions to 
             all the segments of the matching grid line.
        
            Returns: If operation succeeds, the created mullions will be returned.
        """
        pass

    def AddSegment(self, curve):
        """
        AddSegment(self: CurtainGridLine, curve: Curve)
            Add a segment based on the specified segment curve of the gridline.
        
            curve: The curve used to locate the segment to be removed. This function will invoke 
             regeneration.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveSegment(self, curve):
        """
        RemoveSegment(self: CurtainGridLine, curve: Curve)
            Remove the segment specified by the input curve.
        
            curve: The curve used to locate the segment to be removed.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllSegmentCurves = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the curves of all segments.

Get: AllSegmentCurves(self: CurtainGridLine) -> CurveArray

"""

    ExistingSegmentCurves = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve all the existing segment curves of the grid line.

Get: ExistingSegmentCurves(self: CurtainGridLine) -> CurveArray

"""

    FullCurve = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the geometry curve of the curtain grid line.

Get: FullCurve(self: CurtainGridLine) -> Curve

"""

    IsUGridLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the direction of a grid line.If it is true,we say it is a UGridLine,otherwise it is VGridLine

Get: IsUGridLine(self: CurtainGridLine) -> bool

"""

    Lock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the lock state of the curtain grid line.

Get: Lock(self: CurtainGridLine) -> bool

Set: Lock(self: CurtainGridLine) = value
"""

    SkippedSegmentCurves = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve all the removed segment curves of the grid line.

Get: SkippedSegmentCurves(self: CurtainGridLine) -> CurveArray

"""



class CurtainGridSet(APIObject, IDisposable, IEnumerable):
    """
    A set that can contain any type of object.
    
    CurtainGridSet()
    """
    def Clear(self):
        """
        Clear(self: CurtainGridSet)
            Removes every item from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """ Contains(self: CurtainGridSet, item: CurtainGrid) -> bool """
        pass

    def Dispose(self):
        """ Dispose(self: CurtainGridSet, A_0: bool) """
        pass

    def Erase(self, item):
        """ Erase(self: CurtainGridSet, item: CurtainGrid) -> int """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: CurtainGridSet) -> CurtainGridSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: CurtainGridSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """ Insert(self: CurtainGridSet, item: CurtainGrid) -> bool """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CurtainGridSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: CurtainGridSet) -> CurtainGridSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: CurtainGridSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the set.

Get: Size(self: CurtainGridSet) -> int

"""



class CurtainGridSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a set.
    
    CurtainGridSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: CurtainGridSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: CurtainGridSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CurtainGridSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: CurtainGridSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: CurtainGridSetIterator) -> object

"""



class CurtainSystemBase(HostObject, IDisposable):
    """ Provides access to the CurtainSystemBase object in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class CurtainSystem(CurtainSystemBase, IDisposable):
    """ Provides access to the CurtainSystem object in Autodesk Revit. """
    def AddCurtainGrid(self, face):
        """
        AddCurtainGrid(self: CurtainSystem, face: Reference)
            Add CurtainGrid on the specified face for the CurtainSystem.
        
            face: The face new CurtainGrid will be created on.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveCurtainGrid(self, face):
        """
        RemoveCurtainGrid(self: CurtainSystem, face: Reference)
            Remove CurtainGrid from the specified face for the CurtainSystem.
        
            face: The face CurtainGrid will be removed from.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CurtainGrids = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get all the CurtainGrid object of this CurtainSystem. Each CurtainGrid corresponds to one face.

Get: CurtainGrids(self: CurtainSystem) -> CurtainGridSet

"""

    CurtainSystemType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """get or set the type of the CurtainSystem.

Get: CurtainSystemType(self: CurtainSystem) -> CurtainSystemType

Set: CurtainSystemType(self: CurtainSystem) = value
"""



class CurtainSystemType(HostObjAttributes, IDisposable):
    """ An object that represents CurtainSystem type. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class CurveArrArray(APIObject, IDisposable, IEnumerable):
    """
    An array that can contain any type of object.
    
    CurveArrArray()
    """
    def Append(self, item):
        """ Append(self: CurveArrArray, item: CurveArray) """
        pass

    def Clear(self):
        """
        Clear(self: CurveArrArray)
            Removes every item from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: CurveArrArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: CurveArrArray) -> CurveArrArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: CurveArrArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """ Insert(self: CurveArrArray, item: CurveArray, index: int) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: CurveArrArray) -> CurveArrArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: CurveArrArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the array.

Get: Size(self: CurveArrArray) -> int

"""



class CurveArrArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a array.
    
    CurveArrArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: CurveArrArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: CurveArrArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Reset(self):
        """
        Reset(self: CurveArrArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: CurveArrArrayIterator) -> object

"""



class CurveArray(APIObject, IDisposable, IEnumerable):
    """
    An array that can contain curves.
    
    CurveArray()
    """
    def Append(self, item):
        """
        Append(self: CurveArray, item: Curve)
            Add the curve to the end of the array.
        
            item: The curve to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: CurveArray)
            Removes every curve from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: CurveArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: CurveArray) -> CurveArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: CurveArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: CurveArray, item: Curve, index: int)
            Insert the specified curve into the array.
        
            item: The curve to be inserted into the array.
            index: The curve will be inserted before this index.
            Returns: Returns whether the curve was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: CurveArray) -> CurveArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: CurveArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of curves that are in the array.

Get: Size(self: CurveArray) -> int

"""



class CurveArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a curve array.
    
    CurveArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: CurveArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: CurveArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Reset(self):
        """
        Reset(self: CurveArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: CurveArrayIterator) -> object

"""



class CurveElement(Element, IDisposable):
    """ Class representing curve elements. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetAdjoinedCurveElements(self, end):
        """
        GetAdjoinedCurveElements(self: CurveElement, end: int) -> ISet[ElementId]
        
            Returns elements that are joining with this curve element at the given end 
             point.
        
        
            end: Id of one the curve's end. Value '0' indicates start and '1' indicates the end 
             of the curve, respectively.
        
            Returns: Collection of Ids of Curve Elements.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetLineStyleIds(self):
        """
        GetLineStyleIds(self: CurveElement) -> ICollection[ElementId]
        
            Ids of all line style Elements that are applicable to this curve element.
            Returns: A collection of Ids of line style elements.
        """
        pass

    def GetTangentLock(self, end, other):
        """
        GetTangentLock(self: CurveElement, end: int, other: ElementId) -> bool
        
            Returns the state of a tangent join between this and another curve element at 
             the given end-point.
        
        
            end: Index of one of the curve's end. Values '0' and '1' indicate the start or end 
             point, respectively.
        
            other: ElementId of another Curve Element from the same document.
            Returns: Returns True if this curve element has a tangent joint with the other input 
             element and the join is curently locked; returns False otherwise.
        """
        pass

    def HasTangentJoin(self, end, other):
        """
        HasTangentJoin(self: CurveElement, end: int, other: ElementId) -> bool
        
            Tests whether this curve element and the input curve element have common 
             tangent join at the given end-point.
        
        
            end: Index of one of the curve's end. Values '0' and '1' indicate the start or end 
             point, respectively.
        
            other: ElementId of another Curve Element from the same document.
            Returns: Returns True if the two curve elements have a tangent join at the given 
             end-point.
        """
        pass

    def HasTangentLocks(self, end):
        """
        HasTangentLocks(self: CurveElement, end: int) -> bool
        
            Tests whether this curve element has any locked tangent joins at the given 
             end-point.
        
        
            end: Index of one of the curve's end. Values '0' and '1' indicate the start or end 
             point, respectively.
        
            Returns: Returns True if the curve element is tangentially locked to at least one other 
             curve element at the given end-point; returns False otherwise.
        """
        pass

    def IsAdjoinedCurveElement(self, end, other):
        """
        IsAdjoinedCurveElement(self: CurveElement, end: int, other: ElementId) -> bool
        
            This method tests whether this and the given curve elements are joined at the 
             given end.
        
        
            end: Index of one of the curve's end. Values '0' and '1' indicate the start or end 
             point, respectively.
        
            other: ElementId of another Curve Element from the same document.
            Returns: Returns True if the input curve element joins This curve element at the given 
             end-point; returns False otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetGeometryCurve(self, curve, overrideJoins):
        """
        SetGeometryCurve(self: CurveElement, curve: Curve, overrideJoins: bool)
            Sets the geometry of the curve element.
        After the curve geometry is set, other 
             nearby curves may join to the new curve geometry.
        
        
            curve: The new curve.
            overrideJoins: An option to specify whether or not existing joins will affect setting the 
             geometry of the CurveElement.
        Setting this parameter to false is essentially 
             the same as directly setting the Autodesk.Revit.DB.CurveElement.GeometryCurve 
             property.
        """
        pass

    def SetSketchPlaneAndCurve(self, sketchPlane, curve):
        """
        SetSketchPlaneAndCurve(self: CurveElement, sketchPlane: SketchPlane, curve: Curve)
            Sets the sketch plane and the curve for this CurveElement.
        
            sketchPlane: The new sketch plane.
            curve: The new curve.
        """
        pass

    def SetTangentLock(self, end, other, state):
        """
        SetTangentLock(self: CurveElement, end: int, other: ElementId, state: bool)
            Sets a new status for an existing tangent join with another curve element at 
             the given end-point.
        
        
            end: Index of one of the curve's ends. Values '0' and '1' indicate the start or end 
             point, respectively.
        
            other: ElementId of another Curve Element from the same document.
            state: Requested new state of the lock; True to lock it, False to unlock it.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CenterPointReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Centerpoint reference of curve element.  Curves such as circles, arcs, ellipses, and partial ellipses support this property.

Get: CenterPointReference(self: CurveElement) -> Reference

"""

    CurveElementType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Type of the curve element.

Get: CurveElementType(self: CurveElement) -> CurveElementType

"""

    GeometryCurve = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Geometry curve of the curve element.

Get: GeometryCurve(self: CurveElement) -> Curve

Set: GeometryCurve(self: CurveElement) = value
"""

    LineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The line style of this curve element.

Get: LineStyle(self: CurveElement) -> Element

Set: LineStyle(self: CurveElement) = value
"""

    SketchPlane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sketch plane the curve element lies in.

Get: SketchPlane(self: CurveElement) -> SketchPlane

Set: SketchPlane(self: CurveElement) = value
"""

    SupportsTangentLocks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether or not this curve element can have a locked tangent
   join at either of its end-points shared with another curve element.

Get: SupportsTangentLocks(self: CurveElement) -> bool

"""



class CurveByPoints(CurveElement, IDisposable):
    """ A curve interpolating two or more points. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetPoints(self):
        """
        GetPoints(self: CurveByPoints) -> ReferencePointArray
        
            Get the sequence of points interpolated by this curve.
        """
        pass

    def GetVisibility(self):
        """
        GetVisibility(self: CurveByPoints) -> FamilyElementVisibility
        
            Gets the visibility.
            Returns: A copy of visibility settings for the curve.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetPoints(self, points):
        """
        SetPoints(self: CurveByPoints, points: ReferencePointArray)
            Change the sequence of points interpolated by this curve.
        
            points: An array of 2 or more ReferencePoints.
        """
        pass

    def SetVisibility(self, visibility):
        """
        SetVisibility(self: CurveByPoints, visibility: FamilyElementVisibility)
            Sets the visibility.
        """
        pass

    @staticmethod
    def SortPoints(arr):
        """
        SortPoints(arr: ReferencePointArray) -> bool
        
            Order a set of ReferencePoints in the same way Revit does
        when creating a 
             curve from points.
        
        
            arr: An array of ReferencePoints. The array is reordered
        if sortPoints returns 
             true, and is unchanged if
        sortPoints returns false.
        
            Returns: False if the least-squares method is unable to find a solution;
        true otherwise.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsReferenceLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: IsReferenceLine(self: CurveByPoints) -> bool

Set: IsReferenceLine(self: CurveByPoints) = value
"""

    ReferenceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the type of reference.

Get: ReferenceType(self: CurveByPoints) -> ReferenceType

Set: ReferenceType(self: CurveByPoints) = value
"""

    SketchPlane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Override the SketchPlane property of CurveElement.

Get: SketchPlane(self: CurveByPoints) -> SketchPlane

Set: SketchPlane(self: CurveByPoints) = value
"""

    Subcategory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The subcategory, or graphics style, of the CurveByPoints.

Get: Subcategory(self: CurveByPoints) -> GraphicsStyle

Set: Subcategory(self: CurveByPoints) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the point is visible when the family is loaded
into a project.

Get: Visible(self: CurveByPoints) -> bool

Set: Visible(self: CurveByPoints) = value
"""



class CurveByPointsArray(APIObject, IDisposable, IEnumerable):
    """
    An array that can contain CurveByPoints elements.
    
    CurveByPointsArray()
    """
    def Append(self, item):
        """ Append(self: CurveByPointsArray, item: CurveByPoints) """
        pass

    def Clear(self):
        """
        Clear(self: CurveByPointsArray)
            Removes every curve from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: CurveByPointsArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: CurveByPointsArray) -> CurveByPointsArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: CurveByPointsArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """ Insert(self: CurveByPointsArray, item: CurveByPoints, index: int) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CurveByPointsArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: CurveByPointsArray) -> CurveByPointsArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: CurveByPointsArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of curves that are in the array.

Get: Size(self: CurveByPointsArray) -> int

"""



class CurveByPointsArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a CurveByPoints array.
    
    CurveByPointsArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: CurveByPointsArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: CurveByPointsArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CurveByPointsArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: CurveByPointsArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: CurveByPointsArrayIterator) -> object

"""



class CurveByPointsUtils(object, IDisposable):
    """ A static class that contains methods for processing curves driven by points. """
    @staticmethod
    def AddCurvesToFaceRegion(document, curveElemIds):
        """ AddCurvesToFaceRegion(document: Document, curveElemIds: IList[ElementId]) """
        pass

    @staticmethod
    def CreateArcThroughPoints(document, startPoint, endPoint, interiorPoint):
        """
        CreateArcThroughPoints(document: Document, startPoint: ReferencePoint, endPoint: ReferencePoint, interiorPoint: ReferencePoint) -> CurveElement
        
            Creates an arc through the given reference points.
        
            document: The Document.
            startPoint: The start point of the arc.
            endPoint: The end end of the arc.
            interiorPoint: The interior point on the arc.
            Returns: The CurveElement to be created.
        """
        pass

    @staticmethod
    def CreateRectangle(document, startPoint, endPoint, projectionType, boundaryReferenceLines, boundaryCurvesFollowSurface, createdCurvesIds, createdCornersIds):
        """ CreateRectangle(document: Document, startPoint: ReferencePoint, endPoint: ReferencePoint, projectionType: CurveProjectionType, boundaryReferenceLines: bool, boundaryCurvesFollowSurface: bool) -> (IList[ElementId], IList[ElementId]) """
        pass

    def Dispose(self):
        """ Dispose(self: CurveByPointsUtils) """
        pass

    @staticmethod
    def GetFaceRegions(cda, referenceOfFace):
        """
        GetFaceRegions(cda: Document, referenceOfFace: Reference) -> IList[Reference]
        
            Gets the FaceRegions in the existing face.
        
            cda: The Document.
            referenceOfFace: The Reference of the existing face.
            Returns: The FaceRegions in the existing face, or an empty collection if no FaceRegions 
             are found.
        """
        pass

    @staticmethod
    def GetHostFace(curveElem):
        """
        GetHostFace(curveElem: CurveElement) -> Reference
        
            Gets the host face to which the CurveElement is added.
        
            curveElem: The CurveElement.
            Returns: The host face to which the CurveElement is added, or an empty Reference if the 
             host is not a face.
        """
        pass

    @staticmethod
    def GetProjectionType(curveElem):
        """
        GetProjectionType(curveElem: CurveElement) -> CurveProjectionType
        
            Gets the projection type of the CurveElement.
        
            curveElem: The CurveElement.
            Returns: The projection type.
        """
        pass

    @staticmethod
    def GetSketchOnSurface(curveElem):
        """
        GetSketchOnSurface(curveElem: CurveElement) -> bool
        
            Gets the relationship between the CurveElement and face.
        
            curveElem: The CurveElement.
            Returns: Whether or not the CurveElement should lie on the face and be able to be added 
             to the face.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CurveByPointsUtils, disposing: bool) """
        pass

    @staticmethod
    def SetProjectionType(curveElem, value):
        """
        SetProjectionType(curveElem: CurveElement, value: CurveProjectionType)
            Sets the projection type of the CurveElement.
        
            curveElem: The CurveElement.
            value: The input projection type.
        """
        pass

    @staticmethod
    def SetSketchOnSurface(curveElem, sketchOnSurface):
        """
        SetSketchOnSurface(curveElem: CurveElement, sketchOnSurface: bool)
            Sets the relationship between the CurveElement and face.
        
            curveElem: The CurveElement.
            sketchOnSurface: Whether or not the CurveElement should lie on the face and be able to be added 
             to the face.
        """
        pass

    @staticmethod
    def ValidateCurveElementIdArrayForFaceRegions(document, curveElemIds):
        """ ValidateCurveElementIdArrayForFaceRegions(document: Document, curveElemIds: IList[ElementId]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: CurveByPointsUtils) -> bool

"""



class CurveElementFilter(ElementSlowFilter, IDisposable):
    """
    A filter used to pass curve elements which are of a specific type.
    
    CurveElementFilter(curveElementType: CurveElementType, inverted: bool)
    CurveElementFilter(curveElementType: CurveElementType)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, curveElementType, inverted=None):
        """
        __new__(cls: type, curveElementType: CurveElementType, inverted: bool)
        __new__(cls: type, curveElementType: CurveElementType)
        """
        pass

    CurveElementType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The curve element type.

Get: CurveElementType(self: CurveElementFilter) -> CurveElementType

"""



class CurveElementType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing the curve element types that can be used when filtering elements
       (via CurveElementFilter).
    
    enum CurveElementType, values: AreaSeparation (7), Cloud (11), CurveByPoints (8), DetailCurve (2), Insulation (10), Invalid (0), ModelCurve (1), ReferenceLine (4), RepeatingDetail (9), RoomSeparation (6), SpaceSeparation (5), SymbolicCurve (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AreaSeparation = None
    Cloud = None
    CurveByPoints = None
    DetailCurve = None
    Insulation = None
    Invalid = None
    ModelCurve = None
    ReferenceLine = None
    RepeatingDetail = None
    RoomSeparation = None
    SpaceSeparation = None
    SymbolicCurve = None
    value__ = None


class CurveExtents(object, IDisposable):
    """ Represents the start and end parameters for a curve segment. """
    def Dispose(self):
        """ Dispose(self: CurveExtents) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CurveExtents, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    EndParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The end parameter of the curve extents.

Get: EndParameter(self: CurveExtents) -> float

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: CurveExtents) -> bool

"""

    StartParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The start parameter of the curve extents.

Get: StartParameter(self: CurveExtents) -> float

"""



class CurveLoop(object, IEnumerable[Curve], IEnumerable, IDisposable):
    """
    A class that represents a chain of curves.
    
    CurveLoop()
    """
    def Append(self, curve):
        """
        Append(self: CurveLoop, curve: Curve)
            Append the curve to this loop.
        
            curve: The curve.
        """
        pass

    @staticmethod
    def Create(curves):
        """ Create(curves: IList[Curve]) -> CurveLoop """
        pass

    @staticmethod
    def CreateViaCopy(original):
        """
        CreateViaCopy(original: CurveLoop) -> CurveLoop
        
            Creates a new curve loop as a copy of the input.
        
            original: The original curve loop.
            Returns: The copied curve loop.
        """
        pass

    @staticmethod
    def CreateViaOffset(original, offsetDist, normal):
        """
        CreateViaOffset(original: CurveLoop, offsetDist: float, normal: XYZ) -> CurveLoop
        
            Creates a new curve loop that is an offset of the existing curve loop.
        
            original: The original curve loop.
            offsetDist: The signed offset distance.
            normal: The normal of the offset plane.
            Returns: The offset curve loop.
        """
        pass

    @staticmethod
    def CreateViaThicken(*__args):
        """
        CreateViaThicken(pCurve: Curve, thickness: float, normal: XYZ) -> CurveLoop
        
            Creates a new closed curve loop by thickening the input curve with respect to a 
             given plane.
        
        
            pCurve: The input curve.
            thickness: The distance between the offset curves created on either side of the input 
             curve.
        
            normal: The normal vector to the plane used for thickening.
            Returns: The new curve loop.
        CreateViaThicken(curveLoop: CurveLoop, thickness: float, normal: XYZ) -> CurveLoop
        
            Creates a new closed curve loop by thickening the input open curve loop with 
             respect to a given plane.
        
        
            curveLoop: The input curve loop.
            thickness: The distance between the offset curves created on either side of the input 
             curve.
        
            normal: The normal vector to the plane used for thickening.
            Returns: The new curve loop.
        """
        pass

    @staticmethod
    def CreateViaTransform(curveLoop, transform):
        """
        CreateViaTransform(curveLoop: CurveLoop, transform: Transform) -> CurveLoop
        
            Creates a new curve loop as a transformed copy of the input curve loop.
        
            curveLoop: The input curve loop.
            transform: The transformation.
            Returns: The new curve loop.
        """
        pass

    def Dispose(self):
        """ Dispose(self: CurveLoop) """
        pass

    def Flip(self):
        """
        Flip(self: CurveLoop)
            Reverses the orientation of the curve loop.
        """
        pass

    def GetCurveLoopIterator(self):
        """
        GetCurveLoopIterator(self: CurveLoop) -> CurveLoopIterator
        
            Returns a curve that iterates through the curve loop.
            Returns: A curve loop iterator object that can be used to iterate through key-value 
             pairs in the collection.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: CurveLoop) -> IEnumerator[Curve]
        
            Returns an enumerator that iterates through a collection.
            Returns: An IEnumerator object that can be used to iterate through the collection.
        """
        pass

    def GetExactLength(self):
        """
        GetExactLength(self: CurveLoop) -> float
        
            Returns the sum of exact lengths of all curves in the loop.
            Returns: The total length of the curves in the loop.
        """
        pass

    def GetPlane(self):
        """
        GetPlane(self: CurveLoop) -> Plane
        
            Gets the plane of the curve loop, if it is planar.
            Returns: The plane of the curve loop.
        """
        pass

    def GetRectangularHeight(self, plane):
        """
        GetRectangularHeight(self: CurveLoop, plane: Plane) -> float
        
            Returns the width of a curve loop if it is rectangular with respect to the 
             projection plane.
        
        
            plane: The plane to which the curves will be projected.
            Returns: The height.
        """
        pass

    def GetRectangularWidth(self, plane):
        """
        GetRectangularWidth(self: CurveLoop, plane: Plane) -> float
        
            Returns the width of a curve loop if it is rectangular with respect to the 
             projection plane.
        
        
            plane: The plane to which the curves will be projected.
            Returns: The width.
        """
        pass

    def HasPlane(self):
        """
        HasPlane(self: CurveLoop) -> bool
        
            Identifies if the CurveLoop is planar.
            Returns: True if the curve loop is planar, false otherwise.
        """
        pass

    def IsCounterclockwise(self, normal):
        """
        IsCounterclockwise(self: CurveLoop, normal: XYZ) -> bool
        
            Determines if this CurveLoop is oriented counter-clockwise (CCW) or clockwise 
             (CW) with
           respect to the specified 3D direction.
        
        
            normal: The normal vector to the plane used for this determination.
            Returns: True if the curve loop is oriented counter-clockwise with respect to the 
             specified 3D direction,
           false if the loop is oriented clockwise.
        """
        pass

    def IsOpen(self):
        """
        IsOpen(self: CurveLoop) -> bool
        
            Returns whether the curve loop is open or closed, as determined by an internal 
             flag.
        
            Returns: True if the CurveLoop is marked open, false if marked closed.
        """
        pass

    def IsRectangular(self, plane):
        """
        IsRectangular(self: CurveLoop, plane: Plane) -> bool
        
            Identifies if the curve loop is rectangular with respect to a given projection 
             plane.
        
        
            plane: The plane to which the curves will be projected to determine if they represent 
             a rectangle.
        
            Returns: True if the curve loop is rectangular, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CurveLoop, disposing: bool) """
        pass

    def Transform(self, transform):
        """
        Transform(self: CurveLoop, transform: Transform)
            Transforms this curve loop and all of its component curves by the supplied 
             transformation.
        
        
            transform: The transformation.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Curve](enumerable: IEnumerable[Curve], value: Curve) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: CurveLoop) -> bool

"""



class CurveLoopIterator(object, IEnumerator[Curve], IDisposable, IEnumerator):
    """ An iterator to a curve loop. """
    def Dispose(self):
        """ Dispose(self: CurveLoopIterator) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: CurveLoopIterator) -> bool
        
            Increments the iterator to the next item.
            Returns: True if there is a next available item in this iterator.
           False if the 
             iterator has completed all available items.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CurveLoopIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: CurveLoopIterator)
            Resets the iterator to the initial state.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Curve](enumerator: IEnumerator[Curve], value: Curve) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: CurveLoopIterator) -> Curve

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: CurveLoopIterator) -> bool

"""



class SweepProfile(APIObject, IDisposable):
    """ Represents a profile for sweep or swept blend elements. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class CurveLoopsProfile(SweepProfile, IDisposable):
    """ Represents a curve loop based profile for sweep or swept blend elements. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Profile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the curve loops of the profile.

Get: Profile(self: CurveLoopsProfile) -> CurveArrArray

Set: Profile(self: CurveLoopsProfile) = value
"""



class ModelCurveNode(RenderNode, IDisposable):
    """ A base class of output nodes that represent various model curves. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    LineProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Access to the line (pen) properties of the curve being drawn

Get: LineProperties(self: ModelCurveNode) -> LineProperties

"""



class CurveNode(ModelCurveNode, IDisposable):
    """ An output node that represents a model curve. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def GetCurve(self):
        """
        GetCurve(self: CurveNode) -> Curve
        
            Returns the geometric curve object corresponding to the node.
            Returns: The curve.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class CurveProjectionType(Enum, IComparable, IFormattable, IConvertible):
    """
    This attribute indicates how the curve will be projected to the surface if the curve is sketched on the surface.
    
    enum CurveProjectionType, values: FollowSurfaceUV (2), FromTopDown (0), ParallelToLevel (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FollowSurfaceUV = None
    FromTopDown = None
    ParallelToLevel = None
    value__ = None


class CustomExporter(object, IDisposable):
    """
    A class that allows exporting 3D views via an export context.
    
    CustomExporter(document: Document, context: IExportContext)
    """
    def Dispose(self):
        """ Dispose(self: CustomExporter) """
        pass

    def Export(self, *__args):
        """
        Export(self: CustomExporter, view: View3D)
            Exports one 3-D view
        
            view: An instance of the 3-D view to export
        Export(self: CustomExporter, viewIds: IList[ElementId])
        """
        pass

    @staticmethod
    def IsRenderingSupported():
        """
        IsRenderingSupported() -> bool
        
            Checks if 3D view rendering is currently supported in the running instance of 
             Revit.
        
            Returns: Returns True if rendering is currently supported, False otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: CustomExporter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, document, context):
        """ __new__(cls: type, document: Document, context: IExportContext) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IncludeGeometricObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This flag sets the exporter to either include or exclude
   output of geometric objects such as faces and curves
   when the model is being processed by the export context.

Get: IncludeGeometricObjects(self: CustomExporter) -> bool

Set: IncludeGeometricObjects(self: CustomExporter) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: CustomExporter) -> bool

"""

    ShouldStopOnError = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This flag instructs the exporting process to either stop or continue
   in case an error occurs during any of the exporting methods.

Get: ShouldStopOnError(self: CustomExporter) -> bool

Set: ShouldStopOnError(self: CustomExporter) = value
"""



class CutFailureReason(Enum, IComparable, IFormattable, IConvertible):
    """
    The reason why a solid-solid cut cannot be created.
    
    enum CutFailureReason, values: CutAllowed (0), CutAlreadyExists (1), CutNotAppropriateForElements (3), OppositeCutExists (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CutAllowed = None
    CutAlreadyExists = None
    CutNotAppropriateForElements = None
    OppositeCutExists = None
    value__ = None


class CylindricalFace(Face, IDisposable):
    """ A cylindrical face of a 3d solid or open shell. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Axis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Axis of the surface.

Get: Axis(self: CylindricalFace) -> XYZ

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Origin of the surface.

Get: Origin(self: CylindricalFace) -> XYZ

"""



class CylindricalHelix(Curve, IDisposable):
    """ A cylindrical helix. """
    @staticmethod
    def Create(basePoint, radius, xVector, zVector, pitch, startAngle, endAngle):
        """
        Create(basePoint: XYZ, radius: float, xVector: XYZ, zVector: XYZ, pitch: float, startAngle: float, endAngle: float) -> CylindricalHelix
        
            Create a cylindrical helix.
        
            basePoint: Base point of the axis. It can be any point in 3d.
            radius: Radius. It should be a positive number.
            xVector: X vector. Should be Non-zero vector.
            zVector: Z vector = axis direction. Should be non-zero and orthogonal to X Vector.
            pitch: Pitch. It should be non-zero number, can be positive or negative.
                     
                          Positive means right handed and negative means left handed.
        
            startAngle: Start angle. It specifies the start point of the Helix.
            endAngle: End angle. It specifies the end point of the Helix. 
                                  
             End angle should not be equal to start angle.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BasePoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The base point of the axis of the cylindrical helix.

Get: BasePoint(self: CylindricalHelix) -> XYZ

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Height of the cylindrical helix.

Get: Height(self: CylindricalHelix) -> float

"""

    IsRightHanded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the helix is right handed, false if the helix is left handed.

Get: IsRightHanded(self: CylindricalHelix) -> bool

"""

    Pitch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The pitch of the cylindrical helix.

Get: Pitch(self: CylindricalHelix) -> float

"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The radius of the cylindrical helix.

Get: Radius(self: CylindricalHelix) -> float

"""

    XVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The X direction vector.

Get: XVector(self: CylindricalHelix) -> XYZ

"""

    YVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Y direction vector.

Get: YVector(self: CylindricalHelix) -> XYZ

"""

    ZVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Z direction vector, which is same as the axis direction vector.

Get: ZVector(self: CylindricalHelix) -> XYZ

"""



class CylindricalSurface(Surface, IDisposable):
    """ A cylindrical surface. """
    @staticmethod
    def Create(frameOfReference, radius):
        """
        Create(frameOfReference: Frame, radius: float) -> CylindricalSurface
        
            Construct a cylindrical surface defined by a local coordinate system and a 
             radius.
        
        
            frameOfReference: frameOfReference is an orthonormal frame that defines a local coordinate system 
             for the cylinder.
           Frame.Origin is a point on the cylinder's axis. 
             Frame.BasisZ points along the axis, while Frame.BasisX and Frame.BasisY are 
             orthogonal to the axis. The frame may be either left-handed or right-handed 
             (see Frame.IsRightHanded). Note that
           the "handedness" of the frame does 
             not, by itself, determine the surface's orientation.
        
            radius: Radius of the circle that defines the base of the cylindrical surface.
            Returns: The created CylindricalSurface.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Surface, A_0: bool) """
        pass

    def GetFrameOfReference(self):
        """
        GetFrameOfReference(self: CylindricalSurface) -> Frame
        
            Returns frame of reference associated with this CylindricalSurface.
            Returns: Frame of reference associated with this CylindricalSurface.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Surface, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Axis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Axis of the cylinder. This is the Z axis of the local coordinate system associated with this cylinder.

Get: Axis(self: CylindricalSurface) -> XYZ

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Center of the circle that defines the base of the cylinder. This is the origin of the local coordinate system associated with this cylinder.

Get: Origin(self: CylindricalSurface) -> XYZ

"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Radius of the circle that defines the base of this cylinder.

Get: Radius(self: CylindricalSurface) -> float

"""

    XDir = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """X axis of the local coordinate system associated with this cylinder.

Get: XDir(self: CylindricalSurface) -> XYZ

"""

    YDir = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """X axis of the local coordinate system associated with this cylinder.

Get: YDir(self: CylindricalSurface) -> XYZ

"""



class DataConversionMonitorScope(object, IDisposable):
    """
    This class is used to regsiter an application-supplied object that implements IDataConversionMonitor.
       Creating the object registers an implementation of IDataConversionMonitor supplied as constructor argument.
       When the scope object is destroyed, that object is unregistered.
    
    DataConversionMonitorScope(IDCM: IDataConversionMonitor)
    """
    def Dispose(self):
        """ Dispose(self: DataConversionMonitorScope) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DataConversionMonitorScope, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, IDCM):
        """ __new__(cls: type, IDCM: IDataConversionMonitor) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: DataConversionMonitorScope) -> bool

"""



class DataExchangeMessageId(Enum, IComparable, IFormattable, IConvertible):
    """
    Predefined message ids for DataExchangeLog.
    
    enum DataExchangeMessageId, values: EmptyObject (10), GenericError (6), InvalidDataSet (5), InvalidRenderingStyle (9), InvalidSourceObject (4), None (0), ObjectCreated (2), ObjectNotConverted (8), ObjectNotSupported (7), UnexpectedResult (3), UnitOfProgressCompleted (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    EmptyObject = None
    GenericError = None
    InvalidDataSet = None
    InvalidRenderingStyle = None
    InvalidSourceObject = None
    None = None
    ObjectCreated = None
    ObjectNotConverted = None
    ObjectNotSupported = None
    UnexpectedResult = None
    UnitOfProgressCompleted = None
    value__ = None


class DataExchangeMessageSeverity(Enum, IComparable, IFormattable, IConvertible):
    """
    Error levels for DataExchangeLog
    
    enum DataExchangeMessageSeverity, values: Error (2), FatalError (3), Info (0), Warning (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Error = None
    FatalError = None
    Info = None
    value__ = None
    Warning = None


class DataExchangeMessageVerbosity(Enum, IComparable, IFormattable, IConvertible):
    """
    Predefined verbosity levels for DataExchangeLog
    
    enum DataExchangeMessageVerbosity, values: Default (1), Minimal (0), Verbose (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Default = None
    Minimal = None
    value__ = None
    Verbose = None


class DatumEnds(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type representing ends of a datum plane.
    
    enum DatumEnds, values: End0 (0), End1 (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    End0 = None
    End1 = None
    value__ = None


class DatumExtentType(Enum, IComparable, IFormattable, IConvertible):
    """
    Represents the type of datum extent that is displayed in a particular view.
    
    enum DatumExtentType, values: Model (0), ViewSpecific (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Model = None
    value__ = None
    ViewSpecific = None


class DatumPlane(Element, IDisposable):
    """ A base class representing a datum surface (level, grid or reference plane) in Autodesk Revit. """
    def AddLeader(self, datumEnd, view):
        """
        AddLeader(self: DatumPlane, datumEnd: DatumEnds, view: View) -> Leader
        
            Adds a default Leader for the indicated end of the datum plane. This method 
             does not apply to Reference planes (which do not support leaders).
        
        
            datumEnd: The end of the datum plane.
            view: The view on which the DatumPlane shows.
            Returns: The Leader of the datum plane. Null will return if the view is null.
        """
        pass

    def CanBeVisibleInView(self, view):
        """
        CanBeVisibleInView(self: DatumPlane, view: View) -> bool
        
            Checks if the datum plane can be visible in the view.
        
            view: The view.
            Returns: True if visible, false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetCurvesInView(self, extentMode, view):
        """
        GetCurvesInView(self: DatumPlane, extentMode: DatumExtentType, view: View) -> IList[Curve]
        
            Gets a collection of curves representing the DatumPlane element in the given 
             view.
        
        
            extentMode: The extent type.
            view: The view.
            Returns: The curves.
        """
        pass

    def GetDatumExtentTypeInView(self, datumEnd, view):
        """
        GetDatumExtentTypeInView(self: DatumPlane, datumEnd: DatumEnds, view: View) -> DatumExtentType
        
            Identifies if the end of the datum plane is aligned with 3D extents or is set 
             to vary specifically in the indicated view.
        
        
            datumEnd: The end of the datum plane.
            view: The view in which to evaluate the datum extent settings.
            Returns: The extent type.
        """
        pass

    def GetLeader(self, datumEnd, view):
        """
        GetLeader(self: DatumPlane, datumEnd: DatumEnds, view: View) -> Leader
        
            Gets a copy of the leader applied to the indicated end of the datum plane. This 
             method does not apply to Reference planes (which do not support leaders).
        
        
            datumEnd: The end of the datum plane.
            view: The view on which the DatumPlane shows.
            Returns: The Leader of the datum plane. Null will return if no leader applied.
        """
        pass

    def GetPropagationViews(self, view):
        """
        GetPropagationViews(self: DatumPlane, view: View) -> ISet[ElementId]
        
            Gets a list of candidate views which are parallel to the current view and to 
             which the extents of the datum may be propagated.
        
        
            view: The view on which the DatumPlane shows.
            Returns: A set of ElementIds of the parallel views for extent propagation.
        """
        pass

    def HasBubbleInView(self, datumEnd, view):
        """
        HasBubbleInView(self: DatumPlane, datumEnd: DatumEnds, view: View) -> bool
        
            Identifies if the DatumPlane has bubble or not.
        
            datumEnd: The end of the datum plane.
            view: The view on which the DatumPlane shows.
            Returns: True if the DatumPlane has bubble, false otherwise.
        """
        pass

    def HideBubbleInView(self, datumEnd, view):
        """
        HideBubbleInView(self: DatumPlane, datumEnd: DatumEnds, view: View)
            Hides the bubble in a view. This method does not apply to Reference planes.
        
            datumEnd: The end of the datum plane.
            view: The view on which the DatumPlane shows.
        """
        pass

    def IsBubbleVisibleInView(self, datumEnd, view):
        """
        IsBubbleVisibleInView(self: DatumPlane, datumEnd: DatumEnds, view: View) -> bool
        
            Identifies if the bubble is visible or not in a view.
        
            datumEnd: The end of the datum plane.
            view: The view on which the DatumPlane shows.
            Returns: True if the bubble is visible, false otherwise.
        """
        pass

    def IsCurveValidInView(self, extentMode, view, curve):
        """
        IsCurveValidInView(self: DatumPlane, extentMode: DatumExtentType, view: View, curve: Curve) -> bool
        
            Checks if the curve is valid to be as the extents for the datum plane in a 
             view.
           The curve must be bound and coincident with the original one of the 
             datum plane.
        
        
            extentMode: The extent type.
            view: The view.
            curve: The curve.
            Returns: True if it is valid, false otherwise.
        """
        pass

    def IsLeaderValid(self, datumEnd, view, leader):
        """
        IsLeaderValid(self: DatumPlane, datumEnd: DatumEnds, view: View, leader: Leader) -> bool
        
            Identifies if the leader valid or not for this DatumPlane. This method does not 
             apply to Reference planes (which do not support leaders).
        
        
            datumEnd: The end of the datum plane.
            view: The view on which the DatumPlane shows.
            leader: The Leader for setting the datum plane.
            Returns: True if the leader is valid for set leader, false otherwise.
        """
        pass

    def Maximize3DExtents(self):
        """
        Maximize3DExtents(self: DatumPlane)
            Maximizes the 3d extents of the datum plane in all possible views.
        """
        pass

    def PropagateToViews(self, view, parallelViews):
        """ PropagateToViews(self: DatumPlane, view: View, parallelViews: ISet[ElementId]) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def SetCurveInView(self, extentMode, view, curve):
        """
        SetCurveInView(self: DatumPlane, extentMode: DatumExtentType, view: View, curve: Curve)
            Sets the extents to match the curve.
        
            extentMode: The extent type.
            view: The view.
            curve: The curve.
        """
        pass

    def SetDatumExtentType(self, datumEnd, view, extentMode):
        """
        SetDatumExtentType(self: DatumPlane, datumEnd: DatumEnds, view: View, extentMode: DatumExtentType)
            Sets whether or not the end of the datum plane is aligned with 3D extents or is 
             set to vary specifically in the indicated view.
        
        
            datumEnd: Specifies one end of the datum plane in the view.
            view: The view in which to evaluate the datum extent settings.
            extentMode: The DatumExtentType.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetLeader(self, datumEnd, view, pLeader):
        """
        SetLeader(self: DatumPlane, datumEnd: DatumEnds, view: View, pLeader: Leader)
            Sets the leader to the indicated end of the datum plane. This method does not 
             apply to Reference planes (which do not support leaders).
        
        
            datumEnd: The end of the datum plane.
            view: The view on which the DatumPlane shows.
            pLeader: The Leader for setting the datum plane.
        """
        pass

    def ShowBubbleInView(self, datumEnd, view):
        """
        ShowBubbleInView(self: DatumPlane, datumEnd: DatumEnds, view: View)
            Shows the bubble in a view. This method does not apply to Reference planes.
        
            datumEnd: The end of the datum plane.
            view: The view on which the DatumPlane shows.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class DecimalSymbol(Enum, IComparable, IFormattable, IConvertible):
    """
    The symbol used to separate the integer and fractional parts of a number.
    
    enum DecimalSymbol, values: Comma (1), Dot (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Comma = None
    Dot = None
    value__ = None


class DefaultDivideSettings(Element, IDisposable):
    """ Provides access to project-wide divide settings. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetDefaultDivideSettings(cda):
        """
        GetDefaultDivideSettings(cda: Document) -> DefaultDivideSettings
        
            Obtains the DefaultDivideSettings object for the specified document.
        
            cda: A document.
            Returns: The DefaultDivideSettings object.
        """
        pass

    def GetSurfaceDistance(self, gridlines):
        """
        GetSurfaceDistance(self: DefaultDivideSettings, gridlines: UVGridlineType) -> float
        
            Gets the default Divided Surface distance for a fixed, minimum, or maximum 
             distance layout for U or V gridlines.
        
        
            gridlines: U-gridlines or V-gridlines.
            Returns: The default distance for the layout.
        """
        pass

    def GetSurfaceLayout(self, gridlines):
        """
        GetSurfaceLayout(self: DefaultDivideSettings, gridlines: UVGridlineType) -> SpacingRuleLayout
        
            Gets the default Divided Surface layout for U or V gridlines.
        
            gridlines: U-gridlines or V-gridlines.
            Returns: The layout spacing rule.
        """
        pass

    def GetSurfaceNumber(self, gridlines):
        """
        GetSurfaceNumber(self: DefaultDivideSettings, gridlines: UVGridlineType) -> int
        
            Gets the default Divided Surface number for a fixed number layout for U or V 
             gridlines.
        
        
            gridlines: U-gridlines or V-gridlines.
            Returns: The default number for a fixed number layout.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetSurfaceDistance(self, gridlines, distance):
        """
        SetSurfaceDistance(self: DefaultDivideSettings, gridlines: UVGridlineType, distance: float)
            Sets the default Divided Surface distance for a fixed, minimum, or maximum 
             distance layout for U or V gridlines.
        
        
            gridlines: U-gridlines or V-gridlines.
            distance: A default distance for a layout.
        """
        pass

    def SetSurfaceLayout(self, gridlines, layout):
        """
        SetSurfaceLayout(self: DefaultDivideSettings, gridlines: UVGridlineType, layout: SpacingRuleLayout)
            Sets the default Divided Surface layout for U or V gridlines.
        
            gridlines: U-gridlines or V-gridlines.
            layout: A layout spacing rule.
        """
        pass

    def SetSurfaceNumber(self, gridlines, number):
        """
        SetSurfaceNumber(self: DefaultDivideSettings, gridlines: UVGridlineType, number: int)
            Sets the default Divided Surface number for a fixed number layout for U or V 
             gridlines.
        
        
            gridlines: U-gridlines or V-gridlines.
            number: A default number for a fixed number layout.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    PathDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A default Divided Path distance for a fixed, minimum, or maximum distance layout.

Get: PathDistance(self: DefaultDivideSettings) -> float

Set: PathDistance(self: DefaultDivideSettings) = value
"""

    PathLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A default Divided Path layout.

Get: PathLayout(self: DefaultDivideSettings) -> SpacingRuleLayout

Set: PathLayout(self: DefaultDivideSettings) = value
"""

    PathMeasurementType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A default Divided Path measurement type for distance layouts.

Get: PathMeasurementType(self: DefaultDivideSettings) -> DividedPathMeasurementType

Set: PathMeasurementType(self: DefaultDivideSettings) = value
"""

    PathNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A default Divided Path number for a fixed number layout.

Get: PathNumber(self: DefaultDivideSettings) -> int

Set: PathNumber(self: DefaultDivideSettings) = value
"""



class Definition(object):
    """ The Definition object is a base object for all type of parameter definitions within the Autodesk Revit API. """
    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The user visible name for the parameter.

Get: Name(self: Definition) -> str

"""

    ParameterGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the group ID of the parameter definition.

Get: ParameterGroup(self: Definition) -> BuiltInParameterGroup

"""

    ParameterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the user visible interpretation of the parameter data.

Get: ParameterType(self: Definition) -> ParameterType

"""

    UnitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the UnitType of the parameter definition.

Get: UnitType(self: Definition) -> UnitType

"""



class DefinitionBindingMapIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a parameter definition to parameter bindings map.
    
    DefinitionBindingMapIterator()
    """
    def Dispose(self):
        """ Dispose(self: DefinitionBindingMapIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: DefinitionBindingMapIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the map.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Reset(self):
        """
        Reset(self: DefinitionBindingMapIterator)
            Bring the iterator back to the start of the map.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the binding that is the current focus of the iterator.

Get: Current(self: DefinitionBindingMapIterator) -> object

"""

    Key = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the definition that is the current focus of the iterator.

Get: Key(self: DefinitionBindingMapIterator) -> Definition

"""



class DefinitionFile(APIObject, IDisposable):
    """ The DefinitionFile object represents a shared parameters file on disk. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Filename = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property returns the physical filename of the shared parameters file on disk.

Get: Filename(self: DefinitionFile) -> str

"""

    Groups = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Return a map of shared parameter definition groups contained within the file.

Get: Groups(self: DefinitionFile) -> DefinitionGroups

"""



class DefinitionGroup(APIObject, IDisposable):
    """ The DefinitionGroup is a container that is used to hold shared parameter definitions on disk. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Definitions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Definitions property returns an object that contains all the shared parameter
definitions within the group.

Get: Definitions(self: DefinitionGroup) -> Definitions

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the name of the parameter group.

Get: Name(self: DefinitionGroup) -> str

"""



class DefinitionGroups(object, IEnumerable[DefinitionGroup], IEnumerable, IDisposable):
    """ A specialized set of definition groups that allows creation of new groups. """
    def Contains(self, definitionGroup):
        """
        Contains(self: DefinitionGroups, definitionGroup: DefinitionGroup) -> bool
        
            Tests for the existence of a definition group within the collection.
        
            definitionGroup: The definition group to look for.
            Returns: True if the definition group was found, false otherwise.
        """
        pass

    def Create(self, name):
        """
        Create(self: DefinitionGroups, name: str) -> DefinitionGroup
        
            Create a new parameter definition group using the name provided.
        
            name: The name of the group to be created.
            Returns: If successful a reference to the new parameter group is returned, otherwise ll.
        """
        pass

    def Dispose(self):
        """ Dispose(self: DefinitionGroups) """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: DefinitionGroups) -> IEnumerator[DefinitionGroup]
        
            Retrieves an enumerator to the collection.
            Returns: The enumerator.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[DefinitionGroup](enumerable: IEnumerable[DefinitionGroup], value: DefinitionGroup) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the definition groups collection is empty.

Get: IsEmpty(self: DefinitionGroups) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of definition groups in the collection.

Get: Size(self: DefinitionGroups) -> int

"""



class Definitions(object, IEnumerable[Definition], IEnumerable, IDisposable):
    """
    A base class that supports the addition of new parameter definitions.
    
    Definitions()
    """
    def Contains(self, definition):
        """
        Contains(self: Definitions, definition: Definition) -> bool
        
            Tests for the existence of a definition within the set.
        
            definition: The definition to look for.
            Returns: True if the definition was found, false otherwise.
        """
        pass

    def Create(self, option):
        """
        Create(self: Definitions, option: ExternalDefinitionCreationOptions) -> Definition
        
            Creates a new parameter definition using specified options.
        
            option: The options used to create the new parameter definition.
            Returns: If successful a reference to the new parameter definition is returned, 
             otherwise ll.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Definitions) """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: Definitions) -> IEnumerator[Definition]
        
            Retrieves an enumerator to the collection.
            Returns: The enumerator.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Definition](enumerable: IEnumerable[Definition], value: Definition) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the definitions collection is empty.

Get: IsEmpty(self: Definitions) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of definitions in the collection.

Get: Size(self: Definitions) -> int

"""



class FailureResolution(object, IDisposable):
    """ Defines a resolution for a failure. """
    def Dispose(self):
        """ Dispose(self: FailureResolution) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FailureResolution, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FailureResolution) -> bool

"""



class DeleteElements(FailureResolution, IDisposable):
    """ Deletes element(s) related to the failure. """
    @staticmethod
    def Create(document, *__args):
        """
        Create(document: Document, ids: ISet[ElementId]) -> FailureResolution
        Create(document: Document, ids: IList[ElementId]) -> FailureResolution
        Create(document: Document, id: ElementId) -> FailureResolution
        
            Creates an instance of the DeleteElements resolution.
        
            document: The document which owns the element to delete.
            id: The id of the element that will be deleted when this resolution is chosen.
            Returns: The instance of the DeletedElements resolution.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FailureResolution, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FailureResolution, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class DesignOption(Element, IDisposable):
    """ An element that represents a design alternative. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    @staticmethod
    def GetActiveDesignOptionId(document):
        """
        GetActiveDesignOptionId(document: Document) -> ElementId
        
            Gets the active design option id for the current design option set.
        
            document: The document.
            Returns: The active design option id. It can be invalid id if there is no active design 
             option in the model.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsPrimary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determines whether this is a primary design option.

Get: IsPrimary(self: DesignOption) -> bool

"""



class DetachFromCentralOption(Enum, IComparable, IFormattable, IConvertible):
    """
    Options for workset detachment behavior.
    
    enum DetachFromCentralOption, values: ClearTransmittedSaveAsNewCentral (3), DetachAndDiscardWorksets (2), DetachAndPreserveWorksets (1), DoNotDetach (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ClearTransmittedSaveAsNewCentral = None
    DetachAndDiscardWorksets = None
    DetachAndPreserveWorksets = None
    DoNotDetach = None
    value__ = None


class DetailCurve(CurveElement, IDisposable):
    """
    A curve that is used to create a detail drawing. 
    A detail curve is visible only in the view in which it is drawn.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class DetailArc(DetailCurve, IDisposable):
    """ Represents a DetailArc within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class DetailCurveArray(APIObject, IDisposable, IEnumerable):
    """
    An array that can contain any type of object.
    
    DetailCurveArray()
    """
    def Append(self, item):
        """ Append(self: DetailCurveArray, item: DetailCurve) """
        pass

    def Clear(self):
        """
        Clear(self: DetailCurveArray)
            Removes every item from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: DetailCurveArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: DetailCurveArray) -> DetailCurveArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: DetailCurveArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """ Insert(self: DetailCurveArray, item: DetailCurve, index: int) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DetailCurveArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: DetailCurveArray) -> DetailCurveArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: DetailCurveArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the array.

Get: Size(self: DetailCurveArray) -> int

"""



class DetailCurveArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a array.
    
    DetailCurveArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: DetailCurveArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: DetailCurveArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DetailCurveArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: DetailCurveArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: DetailCurveArrayIterator) -> object

"""



class DetailElementOrderUtils(object):
    """ A utility class that arranges the draw order of the detail objects. """
    @staticmethod
    def AreDetailElements(pDocument, pDBView, detailElementIds):
        """ AreDetailElements(pDocument: Document, pDBView: View, detailElementIds: ICollection[ElementId]) -> bool """
        pass

    @staticmethod
    def BringForward(pDocument, pDBView, *__args):
        """
        BringForward(pDocument: Document, pDBView: View, detailElementId: ElementId)
            Moves the given detail instance one step closer to the front of all other 
             detail instances in the view.
        
        
            pDocument: The document.
            pDBView: The view.
            detailElementId: The detail elementId to bring forward.
        BringForward(pDocument: Document, pDBView: View, detailElementIds: ICollection[ElementId])
        """
        pass

    @staticmethod
    def BringToFront(pDocument, pDBView, *__args):
        """
        BringToFront(pDocument: Document, pDBView: View, detailElementId: ElementId)
            Places the given detail instance in the front of all other detail instances in 
             the view.
        
        
            pDocument: The document.
            pDBView: The view.
            detailElementId: The detail elementId
        BringToFront(pDocument: Document, pDBView: View, detailElementIds: ICollection[ElementId])
        """
        pass

    @staticmethod
    def IsDetailElement(pDocument, pDBView, detailElementId):
        """
        IsDetailElement(pDocument: Document, pDBView: View, detailElementId: ElementId) -> bool
        
            Indicates if the given element is a detail element.
        
            pDocument: The document.
            pDBView: The view.
            detailElementId: The detail elementId
            Returns: True if it is a detail element, false otherwise.
        """
        pass

    @staticmethod
    def SendBackward(pDocument, pDBView, *__args):
        """
        SendBackward(pDocument: Document, pDBView: View, detailElementId: ElementId)
            Moves the given detail instance one step closer to the back of all other detail 
             instances in the view.
        
        
            pDocument: The document.
            pDBView: The view.
            detailElementId: The detail elementId to move backward.
        SendBackward(pDocument: Document, pDBView: View, detailElementIds: ICollection[ElementId])
        """
        pass

    @staticmethod
    def SendToBack(pDocument, pDBView, *__args):
        """
        SendToBack(pDocument: Document, pDBView: View, detailElementId: ElementId)
            Places the given detail instance behind all detail instances in the view.
        
            pDocument: The document.
            pDBView: The view.
            detailElementId: The detail elementId to send to back.
        SendToBack(pDocument: Document, pDBView: View, detailElementIds: ICollection[ElementId])
        """
        pass

    __all__ = [
        'AreDetailElements',
        'BringForward',
        'BringToFront',
        'IsDetailElement',
        'SendBackward',
        'SendToBack',
    ]


class DetailEllipse(DetailCurve, IDisposable):
    """ Represents a DetailEllipse within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class DetailLine(DetailCurve, IDisposable):
    """ Represents a DetailLine within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class DetailNurbSpline(DetailCurve, IDisposable):
    """ Represents a DetailNurbSpline within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class DGNExportOptions(BaseExportOptions, IDisposable):
    """
    The export options used by exporting DGN format file.
    
    DGNExportOptions(option: DGNExportOptions)
    DGNExportOptions()
    """
    def Dispose(self):
        """ Dispose(self: BaseExportOptions, A_0: bool) """
        pass

    def GetExportLineweightTable(self):
        """
        GetExportLineweightTable(self: DGNExportOptions) -> ExportLineweightTable
        
            Gets a copy of the line weight table.
            Returns: The line weight table.
        """
        pass

    @staticmethod
    def GetPredefinedOptions(document, setup):
        """
        GetPredefinedOptions(document: Document, setup: str) -> DGNExportOptions
        
            Returns an instance DGNExportOptions containing settings from a predefined 
             export setup.
        
        
            document: A Revit project document to retrieve the setup from.
            setup: The name of a predefined export setup from the specified document.
            Returns: An instance of predefined DGNExportOptions, or ll if the name was not found.
        """
        pass

    @staticmethod
    def GetPredefinedSetupNames(document):
        """
        GetPredefinedSetupNames(document: Document) -> IList[str]
        
            Returns a list of names of predefined setups of DGN export options.
        
            document: A Revit document to retrieve names from.
            Returns: An array of strings representing names of predefined setups.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BaseExportOptions, disposing: bool) """
        pass

    def SetExportLineweightTable(self, lineweightTable):
        """
        SetExportLineweightTable(self: DGNExportOptions, lineweightTable: ExportLineweightTable)
            Sets the line weight table to use during export.
        
            lineweightTable: The line weight table to be set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, option=None):
        """
        __new__(cls: type, option: DGNExportOptions)
        __new__(cls: type)
        """
        pass

    FileVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The DGN file version.
   Default value of fileVersion is DGNFileFormat.Default.

Get: FileVersion(self: DGNExportOptions) -> DGNFileFormat

Set: FileVersion(self: DGNExportOptions) = value
"""

    MasterUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The master units.
   Default value of masterUnits is true.

Get: MasterUnits(self: DGNExportOptions) -> bool

Set: MasterUnits(self: DGNExportOptions) = value
"""

    MergedViews = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether to merge all views in one file (via XRefs).
   Default value of mergedViews is false.

Get: MergedViews(self: DGNExportOptions) -> bool

Set: MergedViews(self: DGNExportOptions) = value
"""

    SeedName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the DGN seed.
   Default value of seedName is empty.

Get: SeedName(self: DGNExportOptions) -> str

Set: SeedName(self: DGNExportOptions) = value
"""



class DGNFileFormat(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing available Microstation versions into which a file may be exported.
    
    enum DGNFileFormat, values: Default (20), DGNVersion7 (19), DGNVersion8 (20)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Default = None
    DGNVersion7 = None
    DGNVersion8 = None
    value__ = None


class DGNImportOptions(BaseImportOptions, IDisposable):
    """
    The import options used to import DGN format files.
    
    DGNImportOptions(option: DGNImportOptions)
    DGNImportOptions()
    """
    def Dispose(self):
        """ Dispose(self: BaseImportOptions, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BaseImportOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, option=None):
        """
        __new__(cls: type, option: DGNImportOptions)
        __new__(cls: type)
        """
        pass

    DGNModelViewName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The model view name to be imported.
   Need user give a model view name to specify which model view need to be imported into Revit

Get: DGNModelViewName(self: DGNImportOptions) -> str

Set: DGNModelViewName(self: DGNImportOptions) = value
"""

    IgnoreUnsupportedElementWarning = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """If true, ignore warning messages about unsupported elements in the DGN file.
   If false, the import process is aborted if imported dgn files have unsupported elements.

Get: IgnoreUnsupportedElementWarning(self: DGNImportOptions) -> bool

Set: IgnoreUnsupportedElementWarning(self: DGNImportOptions) = value
"""



class DigitGroupingAmount(Enum, IComparable, IFormattable, IConvertible):
    """
    The number of digits in each group when numbers are formatted with digit grouping.
    
    enum DigitGroupingAmount, values: Three (1), Two (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Three = None
    Two = None
    value__ = None


class DigitGroupingSymbol(Enum, IComparable, IFormattable, IConvertible):
    """
    The symbol used to separate groups of digits when numbers are formatted with digit grouping.
    
    enum DigitGroupingSymbol, values: Apostrophe (3), Comma (1), Dot (0), Space (2), Tick (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Apostrophe = None
    Comma = None
    Dot = None
    Space = None
    Tick = None
    value__ = None


class DimensionSegment(APIObject, IDisposable):
    """ A segment of a dimension within the Autodesk Revit project. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def IsTextPositionAdjustable(self):
        """
        IsTextPositionAdjustable(self: DimensionSegment) -> bool
        
            Indicates if this dimension is supported to set/get TextPosition/LeaderPosition.
            Returns: True if this dimension is supported to set/get TextPosition/LeaderPosition, 
             false otherwise.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ResetTextPosition(self):
        """
        ResetTextPosition(self: DimensionSegment)
            Resets the text position of the segment to the initial position determined by 
             its type and parameters.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Above = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text shown above the segment's value.

Get: Above(self: DimensionSegment) -> str

Set: Above(self: DimensionSegment) = value
"""

    Below = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text shown below the segment's value.

Get: Below(self: DimensionSegment) -> str

Set: Below(self: DimensionSegment) = value
"""

    IsLocked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if this segment is locked.

Get: IsLocked(self: DimensionSegment) -> bool

Set: IsLocked(self: DimensionSegment) = value
"""

    LeaderEndPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position of the dimension leader end point.

Get: LeaderEndPosition(self: DimensionSegment) -> XYZ

Set: LeaderEndPosition(self: DimensionSegment) = value
"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The segment origin.

Get: Origin(self: DimensionSegment) -> XYZ

"""

    Prefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text shown before the segment's value.

Get: Prefix(self: DimensionSegment) -> str

Set: Prefix(self: DimensionSegment) = value
"""

    Suffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text shown after the segment's value.

Get: Suffix(self: DimensionSegment) -> str

Set: Suffix(self: DimensionSegment) = value
"""

    TextPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position of the dimension text's drag point.

Get: TextPosition(self: DimensionSegment) -> XYZ

Set: TextPosition(self: DimensionSegment) = value
"""

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The length of the segment.

Get: Value(self: DimensionSegment) -> Nullable[float]

"""

    ValueOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text that replaces the segment's value.

Get: ValueOverride(self: DimensionSegment) -> str

Set: ValueOverride(self: DimensionSegment) = value
"""

    ValueString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The displayed value shown for the dimension segment.

Get: ValueString(self: DimensionSegment) -> str

"""



class DimensionSegmentArray(APIObject, IDisposable, IEnumerable):
    """
    An array that can contain any number of DimensionSegment objects.
    
    DimensionSegmentArray()
    """
    def Append(self, item):
        """
        Append(self: DimensionSegmentArray, item: DimensionSegment)
            Add the item to the end of the array.
        
            item: The item to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: DimensionSegmentArray)
            Removes every item from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: DimensionSegmentArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: DimensionSegmentArray) -> DimensionSegmentArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: DimensionSegmentArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: DimensionSegmentArray, item: DimensionSegment, index: int)
            Insert the specified item into the array.
        
            item: The item to be inserted into the array.
            index: The item will be inserted before this index.
            Returns: Returns whether the item was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DimensionSegmentArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: DimensionSegmentArray) -> DimensionSegmentArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: DimensionSegmentArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the array.

Get: Size(self: DimensionSegmentArray) -> int

"""



class DimensionSegmentArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to an array of DimensionSegment objects..
    
    DimensionSegmentArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: DimensionSegmentArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: DimensionSegmentArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DimensionSegmentArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: DimensionSegmentArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: DimensionSegmentArrayIterator) -> object

"""



class DimensionShape(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type to list dimension type.
    
    enum DimensionShape, values: Angular (1), ArcLength (3), Diameter (5), Linear (0), Radial (2), Spot (4), Unknown (6)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Angular = None
    ArcLength = None
    Diameter = None
    Linear = None
    Radial = None
    Spot = None
    Unknown = None
    value__ = None


class DimensionStyleType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type containing possible style types of dimensions.
    
    enum DimensionStyleType, values: Angular (1), ArcLength (3), Diameter (9), Linear (0), LinearFixed (7), Radial (2), SpotCoordinate (5), SpotElevation (4), SpotSlope (8)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Angular = None
    ArcLength = None
    Diameter = None
    Linear = None
    LinearFixed = None
    Radial = None
    SpotCoordinate = None
    SpotElevation = None
    SpotSlope = None
    value__ = None


class DimensionType(ElementType, IDisposable):
    """ An object that represents a dimension style. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetAlternateUnitsFormatOptions(self):
        """
        GetAlternateUnitsFormatOptions(self: DimensionType) -> FormatOptions
        
            Gets the FormatOptions to optionally override the default settings in the Units 
             class for the alternate units value.
        
            Returns: A copy of the FormatOptions.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def SetAlternateUnitsFormatOptions(self, formatOptions):
        """
        SetAlternateUnitsFormatOptions(self: DimensionType, formatOptions: FormatOptions)
            Sets the FormatOptions to optionally override the default settings in the Units 
             class for the alternate units value.
        
        
            formatOptions: The FormatOptions.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AlternateUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The alternate units display mode for this DimensionType.

Get: AlternateUnits(self: DimensionType) -> AlternateUnits

Set: AlternateUnits(self: DimensionType) = value
"""

    AlternateUnitsPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The prefix text for the alternate units value.

Get: AlternateUnitsPrefix(self: DimensionType) -> str

Set: AlternateUnitsPrefix(self: DimensionType) = value
"""

    AlternateUnitsSuffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The suffix text for the alternate units value.

Get: AlternateUnitsSuffix(self: DimensionType) -> str

Set: AlternateUnitsSuffix(self: DimensionType) = value
"""

    StyleType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The dimension style type of this DimensionType.

Get: StyleType(self: DimensionType) -> DimensionStyleType

"""

    UnitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The unit type of this dimension style.

Get: UnitType(self: DimensionType) -> UnitType

"""



class DirectShape(Element, IDisposable):
    """
    This class is used to store externally created geometric shapes. Primary intended use is for importing shapes from other data formats such as IFC or STEP.
       A DirectShape object may be assigned a category. That will affect how that object is displayed in Revit.
    """
    def AppendShape(self, *__args):
        """
        AppendShape(self: DirectShape, pGeomArr: IList[GeometryObject])AppendShape(self: DirectShape, pGeomArr: IList[GeometryObject], viewType: DirectShapeTargetViewType)AppendShape(self: DirectShape, ShapeBuilder: ShapeBuilder)
            Appends shape built by the supplied ShapeBuilderObject to shape representation 
             stored in this DirectShape.
           The data stored in the supplied ShapeBuilder 
             object will be cleared.
        
        
            ShapeBuilder: The ShapeBuilder object that was used to build the shape to be appended.
        """
        pass

    def AreOptionsValid(self, options):
        """
        AreOptionsValid(self: DirectShape, options: DirectShapeOptions) -> bool
        
            Validates that the given DirectShapeOptions are allowed for this particular 
             DirectShape.
        
        
            options: The options object.
            Returns: True if the DirectShapeOptions are valid; false otherwise.
        """
        pass

    def AreOptionsValidForTransientDirectShape(self, options):
        """
        AreOptionsValidForTransientDirectShape(self: DirectShape, options: DirectShapeOptions) -> bool
        
            Validates that the given DirectShapeOptions are allowed if this DirectShape is 
             transient.
        
        
            options: The options object.
            Returns: True if the DirectShapeOptions are valid; false otherwise.
        """
        pass

    @staticmethod
    def CreateElement(document, categoryId, applicationId=None, applicationDataId=None):
        """
        CreateElement(document: Document, categoryId: ElementId, applicationId: str, applicationDataId: str) -> DirectShape
        
            Creates a DirectShape object and adds it to document.
        
            document: Document to which the created element will be added.
            categoryId: Id of the category assigned to this DirectShape. Must be a valid category id.
            applicationId: An optional text string that identifies the creating application. May not be 
             empty.
        
            applicationDataId: An optional text string that identifies the data to the creating application.
         
               The intended use is to identify the native data that was the source of this 
             DirectShape.
        
            Returns: The created DirectShape object.
        CreateElement(document: Document, categoryId: ElementId) -> DirectShape
        
            Creates a DirectShape object and adds it to document.
        
            document: Document to which the created element will be added.
            categoryId: Id of the category assigned to this DirectShape. Must be a valid category id.
            Returns: The created DirectShape object.
        """
        pass

    @staticmethod
    def CreateElementInstance(document, typeId, categoryId, definitionId, trf, applicationId=None, applicationDataId=None):
        """
        CreateElementInstance(document: Document, typeId: ElementId, categoryId: ElementId, definitionId: str, trf: Transform, applicationId: str, applicationDataId: str) -> DirectShape
        
            Creates a DirectShape object and adds it to document.
           The shape stored in 
             the element is either a reference or a copy of a definition shape
           that was 
             created earlier. How the definitions are stored will determine whether an 
             instance or a copy of the
           shape will be created. See DirectShapeLibrary for 
             more details.
           This function is included for convenience. It essentially 
             combines CreateGeometryInstance and CreateElement.
        
        
            document: Document to which the created element will be added.
            typeId: Element id of a DirectShapeType element.
            categoryId: Id of the category assigned to this DirectShape. Must be a valid category id.
            definitionId: Id of the shape definition that was created earlier and stored via 
             DirectShapeLibrary.
        
            trf: Transform to be applied to the definition
            applicationId: A text string that identifies the creating application. May not be empty.
            applicationDataId: An optional text string that identifies the data to the creating application.
         
               The intended use is to identify the native data that was the source of this 
             DirectShape.
        
            Returns: The created DirectShape object.
        CreateElementInstance(document: Document, typeId: ElementId, categoryId: ElementId, definitionId: str, trf: Transform) -> DirectShape
        
            Creates a DirectShape object and adds it to document.
        
            document: Document to which the created element will be added.
            typeId: Element id of a DirectShapeType element.
            categoryId: Id of the category assigned to this DirectShape. Must be a valid category id.
            definitionId: Id of the shape definition that was created earlier and stored via 
             DirectShapeLibrary.
        
            trf: Transform to be applied to the definition.
            Returns: The created DirectShape object.
        """
        pass

    @staticmethod
    def CreateGeometryInstance(document, definition_id, trf):
        """
        CreateGeometryInstance(document: Document, definition_id: str, trf: Transform) -> IList[GeometryObject]
        
            Creates a copy of a definition shape that was created earlier.
        
            document: Document to which the created element will be added
            definition_id: ID of the shape definition that was created earlier and stored via 
             DirectShapeLibrary
        
            trf: Transform to be applied to the definition
            Returns: A collection of geometry objects representing a placed instance of the 
             pre-defined shape
           The caller function takes ownership
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetOptions(self):
        """
        GetOptions(self: DirectShape) -> DirectShapeOptions
        
            Gets a copy of the current options for this DirectShape.
            Returns: Options currently set for this DirectShape.
        """
        pass

    @staticmethod
    def IsSupportedDocument(document):
        """
        IsSupportedDocument(document: Document) -> bool
        
            Tests whether a DirectShape or a DirectShapeType may be created in this 
             document.
        
        
            document: Document to be tested.
            Returns: True if a DirectShape or a DirectShapeType object can be created in this 
             document, false otherwise.
        """
        pass

    @staticmethod
    def IsValidCategoryId(categoryId, doc):
        """
        IsValidCategoryId(categoryId: ElementId, doc: Document) -> bool
        
            Test the category id to make sure it is indeed a top-level built-in category.
        
            categoryId: Category id to be tested.
            doc: Document to look up the category by id.
            Returns: False unless categoryId corresponds to a valid built-in top-level model 
             category.
        """
        pass

    def IsValidGeometry(self, Geom):
        """
        IsValidGeometry(self: DirectShape, Geom: Solid) -> bool
        
            Validates geometry to be stored in a DirectShape. Suitable geometry validation 
             is performed. Additionally, the geometry
           must make sense as a shape 
             representation for the category assigned to this DirectShape object.
        
        
            Geom: Geometry object to be validated.
            Returns: True if the supplied geometry object passes the validation criteria.
        """
        pass

    def IsValidShape(self, shape, viewType=None):
        """
        IsValidShape(self: DirectShape, shape: IList[GeometryObject]) -> bool
        IsValidShape(self: DirectShape, shape: IList[GeometryObject], viewType: DirectShapeTargetViewType) -> bool
        """
        pass

    def IsValidTypeId(self, typeId):
        """
        IsValidTypeId(self: DirectShape, typeId: ElementId) -> bool
        
            Tests the type id to make sure it satisfies the following conditions
           It is 
             a valid element id.It corresponds to a valid DirectShapeType.The 
             DirectShapeType has the same category assigned.
           Additionally, this 
             functions tests that the current type id in this DirectShape is invalid.
           
             The type id is initialized to invalidElementId by the create functions. Once it 
             is set, it may no longer be changed.
        
        
            typeId: Type id to be tested.
            Returns: False unless typeId satisfies the conditions listed above and the type id of 
             this object was not set previously.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetGUIDs(self, appGUID, appDataGUID):
        """
        SetGUIDs(self: DirectShape, appGUID: str, appDataGUID: str)
            Sets the GUID of the application that has created this DirectShape element and
        
                the GUID of the native data that was the source of this DirectShape.
        
        
            appGUID: GUID of the application.
            appDataGUID: GUID of the native data.
        """
        pass

    def SetName(self, name):
        """
        SetName(self: DirectShape, name: str)
            Sets the name for the DirectShape element.
        
            name: The name.
        """
        pass

    def SetOptions(self, options):
        """
        SetOptions(self: DirectShape, options: DirectShapeOptions)
            Sets the options to use for this DirectShape.
        
            options: Options to use for this DirectShape.
        """
        pass

    def SetShape(self, *__args):
        """
        SetShape(self: DirectShape, pGeomArr: IList[GeometryObject])SetShape(self: DirectShape, pGeomArr: IList[GeometryObject], viewType: DirectShapeTargetViewType)SetShape(self: DirectShape, pBuilder: ShapeBuilder)
            Sets the shape of this object to the one accumulated in the supplied Builder 
             object.
           If the new shape is identical to the old one, the old shape will be 
             kept.
        
        
            pBuilder: A ShapeBuilder object that was used to successfully build geometry to store in 
             this DirectShape.
           The built shape will be transferred to the DirectShape, 
             and the ShapeBuilder object will be reset.
        """
        pass

    def SetTypeId(self, typeId):
        """
        SetTypeId(self: DirectShape, typeId: ElementId)
            Sets the DirectShapeType for the DirectShape element.
        
            typeId: The ID of the type corresponding to this DirectShape element. May only be set 
             once.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ApplicationDataId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A text string that identifies the data to the creating application.

Get: ApplicationDataId(self: DirectShape) -> str

Set: ApplicationDataId(self: DirectShape) = value
"""

    ApplicationId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A text string that identifies the creating application.

Get: ApplicationId(self: DirectShape) -> str

Set: ApplicationId(self: DirectShape) = value
"""

    TypeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Element id of a DirectShapeType object that holds properties to be shared by this element. Optional.

Get: TypeId(self: DirectShape) -> ElementId

"""



class DirectShapeLibrary(object, IDisposable):
    """
    DirectShapeLibrary is used to store pre-created geometry for further referencing via the definition/instance mechanism.
       It is not persistent: the scope of a library object is usually a single data creation session.
       DirectShape::createGeometryInstance and DirectShape::CreateElementInstance will use the current DirectShapeLibrary to
       look up the definitions.
       store a collection of GNodes as definition
       end class DirectShapeDefinition
    """
    def AddDefinition(self, id, *__args):
        """
        AddDefinition(self: DirectShapeLibrary, id: str, GNode: GeometryObject)
            Add a definition to be reused by instances. A definition is a single geometry 
             object.
        
        
            id: ID of the definition to be added. Must be unique.
            GNode: Definition as a single Geometry object
        AddDefinition(self: DirectShapeLibrary, id: str, GNodes: IList[GeometryObject])
        """
        pass

    def AddDefinitionType(self, id, typeId):
        """
        AddDefinitionType(self: DirectShapeLibrary, id: str, typeId: ElementId)
            Add a definition to be reused by instances. Adding a definition type will 
             change how the instances are created.
           When asked to create a definition, 
             the library object will look for a corresponding type object.
           If one is 
             found, it will create an instance of geometry stored in the type object. If it 
             is not found,
           the library will look for a list of geometry objects stored 
             as definition, and will copy and transform these
           to create an instance.
        
        
            id: ID of the definition to be added. Must be unique.
            typeId: Element id of the DirectShapeType element that will be used as a definition.
        """
        pass

    def Contains(self, id):
        """
        Contains(self: DirectShapeLibrary, id: str) -> bool
        
            A quick check whether a definition already exists in the library. Checks for 
             stored geometry objects only.
        
        
            id: Definition id
            Returns: True if a geometry definition exists, false otherwise.
        """
        pass

    def ContainsType(self, name):
        """
        ContainsType(self: DirectShapeLibrary, name: str) -> bool
        
            A quick check whether a definition type already exists in the library. Checks 
             for type objects only.
        
        
            name: Definition id
            Returns: True if a geometry definition exists, false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: DirectShapeLibrary) """
        pass

    def FindDefinition(self, id):
        """
        FindDefinition(self: DirectShapeLibrary, id: str) -> IList[GeometryObject]
        
            Find a definition by id
        
            id: Definition id. Expecected to be unique
            Returns: List of geometry objects that together define a shape
        """
        pass

    def FindDefinitionType(self, id):
        """
        FindDefinitionType(self: DirectShapeLibrary, id: str) -> ElementId
        
            Find a DirectShapeType element by definition id. The element will be used for 
             creating instances of that definition.
        
        
            id: Definition id. Expected to be unique.
            Returns: Element id of a DirectShapeTypeElement
        """
        pass

    @staticmethod
    def GetDirectShapeLibrary(ADoc):
        """
        GetDirectShapeLibrary(ADoc: Document) -> DirectShapeLibrary
        
            Get the currently active Library object
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DirectShapeLibrary, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: DirectShapeLibrary)
            Removes all definitions from library. This is useful when importing several 
             self-contained data sets within one session.
           Once a data set is imported, 
             keeping the definitions specific to that data set will slow down the searches.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: DirectShapeLibrary) -> bool

"""



class DirectShapeOptions(object, IDisposable):
    """ This class is used to control behavior of a DirectShape or a DirectShapeType object. """
    def Dispose(self):
        """ Dispose(self: DirectShapeOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DirectShapeOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: DirectShapeOptions) -> bool

"""

    ReferencingOption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not the geometry stored in a DirectShape or DirectShapeType object may be referenced.

Get: ReferencingOption(self: DirectShapeOptions) -> DirectShapeReferencingOption

Set: ReferencingOption(self: DirectShapeOptions) = value
"""

    RoomBoundingOption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether the DirectShape supports an option for the "Room Bounding" parameter to permit participation in room boundary calculations.

Get: RoomBoundingOption(self: DirectShapeOptions) -> DirectShapeRoomBoundingOption

"""



class DirectShapeReferencingOption(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type containing possible referencing options for DirectShapes.
    
    enum DirectShapeReferencingOption, values: NotReferenceable (0), Referenceable (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    NotReferenceable = None
    Referenceable = None
    value__ = None


class DirectShapeRoomBoundingOption(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type containing possible room bounding settings for DirectShapes.
    
    enum DirectShapeRoomBoundingOption, values: NotApplicable (0), SetByParameter (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    NotApplicable = None
    SetByParameter = None
    value__ = None


class DirectShapeTargetViewType(Enum, IComparable, IFormattable, IConvertible):
    """
    View types for which DirectShape objects are allowed to have alternative shape representations. Currently limited to Plan Views.
    
    enum DirectShapeTargetViewType, values: Default (1), Plan (2), Undefined (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Default = None
    Plan = None
    Undefined = None
    value__ = None


class DirectShapeType(ElementType, IDisposable):
    """ The type element associated with a DirectShape element. This element includes data reused by DirectShape elements of the same type. """
    def AppendShape(self, *__args):
        """
        AppendShape(self: DirectShapeType, pGeomArr: IList[GeometryObject])AppendShape(self: DirectShapeType, pGeomArr: IList[GeometryObject], viewType: DirectShapeTargetViewType)AppendShape(self: DirectShapeType, ShapeBuilder: ShapeBuilder)
            Append shape built by the supplied ShapeBuilderObject to shape representation 
             stored in this DirectShapeType.
           The data stored in the supplied 
             ShapeBuilder object will be cleared.
        
        
            ShapeBuilder: The ShapeBuilder object that was used to build the shape to be appended.
        """
        pass

    @staticmethod
    def Create(document, name, categoryId):
        """
        Create(document: Document, name: str, categoryId: ElementId) -> DirectShapeType
        
            Creates a DirectShapeType element.
        
            document: The document that will contain the new element.
            name: Name of the DirectShapeType.
            categoryId: Id of the category assigned to this DirectShapeType. Must be a valid category 
             id.
        
            Returns: The new DirectShapeType.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def IsValidShape(self, shape, viewType=None):
        """
        IsValidShape(self: DirectShapeType, shape: IList[GeometryObject]) -> bool
        IsValidShape(self: DirectShapeType, shape: IList[GeometryObject], viewType: DirectShapeTargetViewType) -> bool
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetShape(self, *__args):
        """
        SetShape(self: DirectShapeType, pGeomArr: IList[GeometryObject])SetShape(self: DirectShapeType, pBuilder: ShapeBuilder)
            Sets the shape of this object to the one accumulated in the supplied Builder 
             object.
           If the new shape is identical to the old one, the old shape will be 
             kept.
        
        
            pBuilder: A ShapeBuilder object that was used to successfully build geometry to store in 
             this DirectShapeType. The built shape will be
           transferred to the 
             DirectShapeType, and the ShapeBuilder object will be reset.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class DisplacementElement(Element, IDisposable):
    """
    A view-specific element that causes other elements to appear to be displaced from their
       actual locations.
    """
    @staticmethod
    def CanCategoryBeDisplaced(categoryId):
        """
        CanCategoryBeDisplaced(categoryId: ElementId) -> bool
        
            Indicates whether elements of the specified category are eligible as displaced 
             elements.
        
        
            categoryId: Category id of element to be replaced.
            Returns: Returns true if elements of this category can be displaced, and false otherwise.
        """
        pass

    def CanElementsBeAddedToDisplacementSet(self, toDisplace):
        """ CanElementsBeAddedToDisplacementSet(self: DisplacementElement, toDisplace: ICollection[ElementId]) -> bool """
        pass

    @staticmethod
    def CanElementsBeDisplaced(view, elementIds, commonDisplacedElementId=None):
        """
        CanElementsBeDisplaced(view: View, elementIds: ICollection[ElementId]) -> (bool, ElementId)
        CanElementsBeDisplaced(view: View, elementIds: ICollection[ElementId]) -> bool
        """
        pass

    @staticmethod
    def Create(document, elementsToDisplace, displacement, ownerDBView, parentDisplacementElement):
        """ Create(document: Document, elementsToDisplace: ICollection[ElementId], displacement: XYZ, ownerDBView: View, parentDisplacementElement: DisplacementElement) -> DisplacementElement """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetAbsoluteDisplacement(self):
        """
        GetAbsoluteDisplacement(self: DisplacementElement) -> XYZ
        
            The absolute displacement applied to the displaced elements.
            Returns: The absolute displacement.
        """
        pass

    @staticmethod
    def GetAdditionalElementsToDisplace(document, view, idToDisplace):
        """
        GetAdditionalElementsToDisplace(document: Document, view: View, idToDisplace: ElementId) -> ICollection[ElementId]
        
            Identify a set of elements that potentially should be displaced along with a 
             given element.
        
        
            document: the document
            view: the view
            idToDisplace: element id of element to displace
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetChildren(self):
        """
        GetChildren(self: DisplacementElement) -> IList[DisplacementElement]
        
            Returns a set of DisplacementElements which have this
           DisplacementElement 
             as a parent.
        
            Returns: The returned array is sorted by element id.
        """
        pass

    def GetDisplacedElementIds(self, view=None):
        """
        GetDisplacedElementIds(view: View) -> ICollection[ElementId]
        
            Returns the element ids of all displaced elements in the specified view.
        
            view: The view.
            Returns: The element ids.
        GetDisplacedElementIds(self: DisplacementElement) -> ICollection[ElementId]
        
            The ids of the elements affected by this DisplacementElement.
            Returns: The element ids.
        """
        pass

    def GetDisplacedElementIdsFromAllChildren(self):
        """
        GetDisplacedElementIdsFromAllChildren(self: DisplacementElement) -> ICollection[ElementId]
        
            The element ids of elements displaced by this DisplacementElement and any
           
             DisplacementElement which declare this one as parent.
        
            Returns: The element ids.
        """
        pass

    @staticmethod
    def GetDisplacementElementId(view, id):
        """
        GetDisplacementElementId(view: View, id: ElementId) -> ElementId
        
            The element id of the DisplacementElement that includes the specified element.
        
            view: The view.
            id: The element id.
            Returns: The element id of DisplacementElement that includes the specified element id.
        """
        pass

    @staticmethod
    def GetDisplacementElementIds(view):
        """
        GetDisplacementElementIds(view: View) -> ICollection[ElementId]
        
            The element ids of all DisplacementElements owned by the specified view.
        
            view: The view.
            Returns: The element ids.
        """
        pass

    def GetRelativeDisplacement(self):
        """
        GetRelativeDisplacement(self: DisplacementElement) -> XYZ
        
            The relative displacement applied to the displaced elements by this 
             DisplacementElement.
        
            Returns: The relative displacement.
        """
        pass

    @staticmethod
    def IsAllowedAsDisplacedElement(element):
        """
        IsAllowedAsDisplacedElement(element: Element) -> bool
        
            Indicates if the specified element is allowed to be displaced.
        
            element: Any element.
            Returns: Returns true if the element is eligible to be assigned to a DisplacementElement.
        """
        pass

    @staticmethod
    def IsElementDisplacedInView(view, id):
        """
        IsElementDisplacedInView(view: View, id: ElementId) -> bool
        
            Indicates if the specified element displaced in the specified View.
        
            view: The view.
            id: The element id.
        """
        pass

    @staticmethod
    def IsNotEmpty(elementIds):
        """ IsNotEmpty(elementIds: ICollection[ElementId]) -> bool """
        pass

    @staticmethod
    def IsValidAsParentInView(view, parent):
        """
        IsValidAsParentInView(view: View, parent: DisplacementElement) -> bool
        
            Indicates whether the specified DisplacementElement can be used as a parent 
             when
           creating a DisplacementElement in the specified view.
        
        
            view: A view.
            parent: A DisplacementElement.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveDisplacedElement(self, ElemToRemove):
        """
        RemoveDisplacedElement(self: DisplacementElement, ElemToRemove: Element)
            Remove a displaced element from this DisplacementElement.
        
            ElemToRemove: The element to remove.
        """
        pass

    def ResetDisplacedElements(self):
        """
        ResetDisplacedElements(self: DisplacementElement)
            Sets the translation of the DisplacementElement to (0, 0, 0).
           The 
             DisplacementElement continues to exist, but its elements are displayed in their 
             actual location.
        """
        pass

    def SetDisplacedElementIds(self, displacedElemIds):
        """ SetDisplacedElementIds(self: DisplacementElement, displacedElemIds: ICollection[ElementId]) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetRelativeDisplacement(self, displacement):
        """
        SetRelativeDisplacement(self: DisplacementElement, displacement: XYZ)
            Sets the relative displacement applied to the displaced elements by this 
             DisplacementElement.
        
        
            displacement: The relative displacement.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ParentId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element id of the parent DisplacementElement. This DisplacementElement's relative transform
   will be concatenated with the absolute transform of its parent.

Get: ParentId(self: DisplacementElement) -> ElementId

"""



class DisplacementPath(Element, IDisposable):
    """ A view-specific annotation related to a DisplacementElement. """
    @staticmethod
    def Create(aDoc, displacementElement, reference, param):
        """
        Create(aDoc: Document, displacementElement: DisplacementElement, reference: Reference, param: float) -> ElementId
        
            Creates a new DisplacementPath referencing a DisplacementElement and edge or 
             curve and adds it to the document.
        
        
            aDoc: The document.
            displacementElement: Element id of a DisplacementElement
            reference: A reference that refers to an edge or curve of one of the elements displaced by 
             the displacementElement.
        
            param: A value in the range [0,1]. It will be interpreted as a parameter for the 
             specified edge.
        
            Returns: The element id of the newly created DisplacementPath.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def IsValidParam(param):
        """
        IsValidParam(param: float) -> bool
        
            Is the specified value a valid edge or curve parameter.
        
            param: proposed edge parameter.
        """
        pass

    @staticmethod
    def IsValidReference(displacementElement, reference):
        """
        IsValidReference(displacementElement: DisplacementElement, reference: Reference) -> bool
        
            Does the specified pick represent an edge or a curve belonging to one of the 
             displaced elements.
        
        
            displacementElement: A DisplacementElement.
            reference: A pick.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def SetAnchorPoint(self, displacementElement, reference, param):
        """
        SetAnchorPoint(self: DisplacementPath, displacementElement: DisplacementElement, reference: Reference, param: float)
            Sets the reference that determines the origin of this DisplacementPath.
        
            displacementElement: The element id of a DisplacementElement.
            reference: A reference of an edge or a curve in the GRep of the element corresponding to 
             elemId.
        
            param: An parameter used to specify a point on the edge.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AncestorIdx = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies the end point of the path.

Get: AncestorIdx(self: DisplacementPath) -> int

Set: AncestorIdx(self: DisplacementPath) = value
"""

    PathStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies the style of the path.

Get: PathStyle(self: DisplacementPath) -> DisplacementPathStyle

Set: PathStyle(self: DisplacementPath) = value
"""



class DisplacementPathStyle(Enum, IComparable, IFormattable, IConvertible):
    """
    Used to control the graphical representation of a  DisplacementPath element.
    
    enum DisplacementPathStyle, values: Jogged (1), Straight (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Jogged = None
    Straight = None
    value__ = None


class DisplayStyle(Enum, IComparable, IFormattable, IConvertible):
    """
    Display type of the view.
    
    enum DisplayStyle, values: FlatColors (7), HLR (2), Raytrace (9), Realistic (6), RealisticWithEdges (8), Rendering (5), Shading (3), ShadingWithEdges (4), Undefined (0), Wireframe (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FlatColors = None
    HLR = None
    Raytrace = None
    Realistic = None
    RealisticWithEdges = None
    Rendering = None
    Shading = None
    ShadingWithEdges = None
    Undefined = None
    value__ = None
    Wireframe = None


class DisplayUnit(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the type of Revit display unit, metric or imperial.
    
    enum DisplayUnit, values: IMPERIAL (1), METRIC (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    IMPERIAL = None
    METRIC = None
    value__ = None


class DisplayUnitType(Enum, IComparable, IFormattable, IConvertible):
    """
    The units and display format used to format numbers as strings.  Also used for unit conversions.
    
    enum DisplayUnitType, values: DUT_1_RATIO (182), DUT_ACRES (7), DUT_AMPERES (69), DUT_ATMOSPHERES (54), DUT_BARS (55), DUT_BRITISH_THERMAL_UNIT_PER_FAHRENHEIT (186), DUT_BRITISH_THERMAL_UNITS (31), DUT_BRITISH_THERMAL_UNITS_PER_HOUR (42), DUT_BRITISH_THERMAL_UNITS_PER_HOUR_CUBIC_FOOT (167), DUT_BRITISH_THERMAL_UNITS_PER_HOUR_FOOT_FAHRENHEIT (231), DUT_BRITISH_THERMAL_UNITS_PER_HOUR_SQUARE_FOOT (166), DUT_BRITISH_THERMAL_UNITS_PER_HOUR_SQUARE_FOOT_FAHRENHEIT (155), DUT_BRITISH_THERMAL_UNITS_PER_POUND (233), DUT_BRITISH_THERMAL_UNITS_PER_POUND_FAHRENHEIT (232), DUT_BRITISH_THERMAL_UNITS_PER_SECOND (41), DUT_CALORIES (32), DUT_CALORIES_PER_SECOND (43), DUT_CANDELAS (81), DUT_CANDELAS_PER_SQUARE_METER (80), DUT_CANDLEPOWER (82), DUT_CELSIUS (57), DUT_CELSIUS_DIFFERENCE (244), DUT_CENTIMETERS (1), DUT_CENTIMETERS_PER_MINUTE (62), DUT_CENTIMETERS_TO_THE_FOURTH_POWER (200), DUT_CENTIMETERS_TO_THE_SIXTH_POWER (205), DUT_CENTIPOISES (131), DUT_CUBIC_CENTIMETERS (24), DUT_CUBIC_FEET (13), DUT_CUBIC_FEET_PER_KIP (124), DUT_CUBIC_FEET_PER_MINUTE (63), DUT_CUBIC_FEET_PER_MINUTE_CUBIC_FOOT (169), DUT_CUBIC_FEET_PER_MINUTE_SQUARE_FOOT (156), DUT_CUBIC_FEET_PER_MINUTE_TON_OF_REFRIGERATION (171), DUT_CUBIC_INCHES (23), DUT_CUBIC_METERS (14), DUT_CUBIC_METERS_PER_HOUR (66), DUT_CUBIC_METERS_PER_KILONEWTON (123), DUT_CUBIC_METERS_PER_SECOND (65), DUT_CUBIC_MILLIMETERS (25), DUT_CUBIC_YARDS (10), DUT_CURRENCY (175), DUT_CUSTOM (-1), DUT_CYCLES_PER_SECOND (76), DUT_DECANEWTON_METERS (112), DUT_DECANEWTON_METERS_PER_METER (140), DUT_DECANEWTONS (88), DUT_DECANEWTONS_PER_METER (96), DUT_DECANEWTONS_PER_SQUARE_METER (104), DUT_DECIMAL_DEGREES (15), DUT_DECIMAL_FEET (3), DUT_DECIMAL_INCHES (6), DUT_DECIMETERS (236), DUT_DEGREES_AND_MINUTES (16), DUT_FAHRENHEIT (56), DUT_FAHRENHEIT_DIFFERENCE (243), DUT_FEET_FRACTIONAL_INCHES (4), DUT_FEET_OF_WATER (128), DUT_FEET_OF_WATER_PER_100FT (127), DUT_FEET_PER_KIP (120), DUT_FEET_PER_MINUTE (60), DUT_FEET_PER_SECOND (132), DUT_FEET_PER_SECOND_SQUARED (195), DUT_FEET_TO_THE_FOURTH_POWER (197), DUT_FEET_TO_THE_SIXTH_POWER (202), DUT_FIXED (18), DUT_FOOTCANDLES (78), DUT_FOOTLAMBERTS (79), DUT_FRACTIONAL_INCHES (5), DUT_GALLONS_US (27), DUT_GALLONS_US_PER_HOUR (68), DUT_GALLONS_US_PER_MINUTE (67), DUT_GENERAL (17), DUT_GRADS (215), DUT_GRAINS_PER_HOUR_SQUARE_FOOT_INCH_MERCURY (234), DUT_HECTARES (8), DUT_HERTZ (75), DUT_HORSEPOWER (86), DUT_HOUR_SQUARE_FOOT_FAHRENHEIT_PER_BRITISH_THERMAL_UNIT (184), DUT_HOURS (220), DUT_INCHES_OF_MERCURY (52), DUT_INCHES_OF_WATER (47), DUT_INCHES_OF_WATER_PER_100FT (37), DUT_INCHES_PER_SECOND_SQUARED (194), DUT_INCHES_TO_THE_FOURTH_POWER (198), DUT_INCHES_TO_THE_SIXTH_POWER (203), DUT_INV_CELSIUS (138), DUT_INV_FAHRENHEIT (137), DUT_INV_KILONEWTONS (125), DUT_INV_KIPS (126), DUT_JOULES (34), DUT_JOULES_PER_GRAM (228), DUT_JOULES_PER_GRAM_CELSIUS (227), DUT_JOULES_PER_KELVIN (187), DUT_JOULES_PER_KILOGRAM_CELSIUS (237), DUT_KELVIN (58), DUT_KELVIN_DIFFERENCE (245), DUT_KILOAMPERES (70), DUT_KILOCALORIES (33), DUT_KILOCALORIES_PER_SECOND (44), DUT_KILOGRAM_FORCE_METERS (116), DUT_KILOGRAM_FORCE_METERS_PER_METER (144), DUT_KILOGRAMS_FORCE (92), DUT_KILOGRAMS_FORCE_PER_METER (100), DUT_KILOGRAMS_FORCE_PER_SQUARE_METER (108), DUT_KILOGRAMS_MASS (189), DUT_KILOGRAMS_MASS_PER_METER (212), DUT_KILOGRAMS_MASS_PER_SQUARE_METER (224), DUT_KILOGRAMS_PER_CUBIC_METER (28), DUT_KILOJOULES (223), DUT_KILOJOULES_PER_KELVIN (188), DUT_KILOMETERS_PER_HOUR (221), DUT_KILOMETERS_PER_SECOND_SQUARED (193), DUT_KILONEWTON_METERS (113), DUT_KILONEWTON_METERS_PER_DEGREE (151), DUT_KILONEWTON_METERS_PER_DEGREE_PER_METER (153), DUT_KILONEWTON_METERS_PER_METER (141), DUT_KILONEWTONS (89), DUT_KILONEWTONS_PER_CUBIC_METER (134), DUT_KILONEWTONS_PER_METER (97), DUT_KILONEWTONS_PER_SQUARE_CENTIMETER (178), DUT_KILONEWTONS_PER_SQUARE_METER (105), DUT_KILONEWTONS_PER_SQUARE_MILLIMETER (180), DUT_KILOPASCALS (49), DUT_KILOVOLT_AMPERES (85), DUT_KILOVOLTS (73), DUT_KILOWATT_HOURS (35), DUT_KILOWATTS (40), DUT_KIP_FEET (115), DUT_KIP_FEET_PER_DEGREE (150), DUT_KIP_FEET_PER_DEGREE_PER_FOOT (152), DUT_KIP_FEET_PER_FOOT (143), DUT_KIPS (91), DUT_KIPS_PER_CUBIC_FOOT (149), DUT_KIPS_PER_CUBIC_INCH (136), DUT_KIPS_PER_FOOT (99), DUT_KIPS_PER_INCH (148), DUT_KIPS_PER_SQUARE_FOOT (107), DUT_KIPS_PER_SQUARE_INCH (133), DUT_LITERS (26), DUT_LITERS_PER_MINUTE (242), DUT_LITERS_PER_SECOND (64), DUT_LITERS_PER_SECOND_CUBIC_METER (170), DUT_LITERS_PER_SECOND_KILOWATTS (172), DUT_LITERS_PER_SECOND_SQUARE_METER (157), DUT_LUMENS (83), DUT_LUMENS_PER_WATT (176), DUT_LUX (77), DUT_MEGANEWTON_METERS (114), DUT_MEGANEWTON_METERS_PER_METER (142), DUT_MEGANEWTONS (90), DUT_MEGANEWTONS_PER_METER (98), DUT_MEGANEWTONS_PER_SQUARE_METER (106), DUT_MEGAPASCALS (50), DUT_METERS (0), DUT_METERS_CENTIMETERS (9), DUT_METERS_PER_KILONEWTON (119), DUT_METERS_PER_SECOND (61), DUT_METERS_PER_SECOND_SQUARED (192), DUT_METERS_TO_THE_FOURTH_POWER (201), DUT_METERS_TO_THE_SIXTH_POWER (206), DUT_MICROINCHES_PER_INCH_FAHRENHEIT (239), DUT_MICROMETERS_PER_METER_CELSIUS (238), DUT_MILES_PER_HOUR (222), DUT_MILES_PER_SECOND_SQUARED (196), DUT_MILISECONDS (217), DUT_MILLIAMPERES (71), DUT_MILLIMETERS (2), DUT_MILLIMETERS_OF_MERCURY (53), DUT_MILLIMETERS_TO_THE_FOURTH_POWER (199), DUT_MILLIMETERS_TO_THE_SIXTH_POWER (204), DUT_MILLIVOLTS (74), DUT_MINUTES (219), DUT_NANOGRAMS_PER_PASCAL_SECOND_SQUARE_METER (229), DUT_NEWTON_METERS (111), DUT_NEWTON_METERS_PER_METER (139), DUT_NEWTONS (87), DUT_NEWTONS_PER_METER (95), DUT_NEWTONS_PER_SQUARE_METER (103), DUT_NEWTONS_PER_SQUARE_MILLIMETER (179), DUT_OHM_METERS (230), DUT_PASCAL_SECONDS (129), DUT_PASCALS (48), DUT_PASCALS_PER_METER (38), DUT_PER_MILLE (235), DUT_PERCENTAGE (19), DUT_POUND_FORCE_FEET (118), DUT_POUND_FORCE_FEET_PER_FOOT (146), DUT_POUNDS_FORCE (94), DUT_POUNDS_FORCE_PER_CUBIC_FOOT (135), DUT_POUNDS_FORCE_PER_FOOT (102), DUT_POUNDS_FORCE_PER_SQUARE_FOOT (110), DUT_POUNDS_FORCE_PER_SQUARE_INCH (51), DUT_POUNDS_MASS (191), DUT_POUNDS_MASS_PER_CUBIC_FOOT (29), DUT_POUNDS_MASS_PER_CUBIC_INCH (30), DUT_POUNDS_MASS_PER_FOOT (213), DUT_POUNDS_MASS_PER_FOOT_HOUR (147), DUT_POUNDS_MASS_PER_FOOT_SECOND (130), DUT_POUNDS_MASS_PER_SQUARE_FOOT (225), DUT_RADIANS (214), DUT_RADIANS_PER_SECOND (216), DUT_RANKINE (59), DUT_RANKINE_DIFFERENCE (246), DUT_RATIO_10 (158), DUT_RATIO_12 (159), DUT_RISE_OVER_10_FEET (183), DUT_RISE_OVER_120_INCHES (181), DUT_RISE_OVER_FOOT (162), DUT_RISE_OVER_INCHES (161), DUT_RISE_OVER_MMS (163), DUT_SECONDS (218), DUT_SLOPE_DEGREES (160), DUT_SQUARE_CENTIMETERS (21), DUT_SQUARE_CENTIMETERS_PER_METER (210), DUT_SQUARE_FEET (11), DUT_SQUARE_FEET_PER_FOOT (207), DUT_SQUARE_FEET_PER_KIP (122), DUT_SQUARE_FEET_PER_THOUSAND_BRITISH_THERMAL_UNITS_PER_HOUR (177), DUT_SQUARE_FEET_PER_TON_OF_REFRIGERATION (173), DUT_SQUARE_INCHES (20), DUT_SQUARE_INCHES_PER_FOOT (208), DUT_SQUARE_METER_KELVIN_PER_WATT (185), DUT_SQUARE_METERS (12), DUT_SQUARE_METERS_PER_KILONEWTON (121), DUT_SQUARE_METERS_PER_KILOWATTS (174), DUT_SQUARE_METERS_PER_METER (211), DUT_SQUARE_MILLIMETERS (22), DUT_SQUARE_MILLIMETERS_PER_METER (209), DUT_THERMS (36), DUT_TON_OF_REFRIGERATION (168), DUT_TONNE_FORCE_METERS (117), DUT_TONNE_FORCE_METERS_PER_METER (145), DUT_TONNES_FORCE (93), DUT_TONNES_FORCE_PER_METER (101), DUT_TONNES_FORCE_PER_SQUARE_METER (109), DUT_TONNES_MASS (190), DUT_UNDEFINED (-2), DUT_USTONNES_FORCE (241), DUT_USTONNES_MASS (240), DUT_VOLT_AMPERES (84), DUT_VOLTS (72), DUT_WATTS (39), DUT_WATTS_PER_CUBIC_FOOT (164), DUT_WATTS_PER_CUBIC_METER (165), DUT_WATTS_PER_METER_KELVIN (226), DUT_WATTS_PER_SQUARE_FOOT (45), DUT_WATTS_PER_SQUARE_METER (46), DUT_WATTS_PER_SQUARE_METER_KELVIN (154)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DUT_1_RATIO = None
    DUT_ACRES = None
    DUT_AMPERES = None
    DUT_ATMOSPHERES = None
    DUT_BARS = None
    DUT_BRITISH_THERMAL_UNITS = None
    DUT_BRITISH_THERMAL_UNITS_PER_HOUR = None
    DUT_BRITISH_THERMAL_UNITS_PER_HOUR_CUBIC_FOOT = None
    DUT_BRITISH_THERMAL_UNITS_PER_HOUR_FOOT_FAHRENHEIT = None
    DUT_BRITISH_THERMAL_UNITS_PER_HOUR_SQUARE_FOOT = None
    DUT_BRITISH_THERMAL_UNITS_PER_HOUR_SQUARE_FOOT_FAHRENHEIT = None
    DUT_BRITISH_THERMAL_UNITS_PER_POUND = None
    DUT_BRITISH_THERMAL_UNITS_PER_POUND_FAHRENHEIT = None
    DUT_BRITISH_THERMAL_UNITS_PER_SECOND = None
    DUT_BRITISH_THERMAL_UNIT_PER_FAHRENHEIT = None
    DUT_CALORIES = None
    DUT_CALORIES_PER_SECOND = None
    DUT_CANDELAS = None
    DUT_CANDELAS_PER_SQUARE_METER = None
    DUT_CANDLEPOWER = None
    DUT_CELSIUS = None
    DUT_CELSIUS_DIFFERENCE = None
    DUT_CENTIMETERS = None
    DUT_CENTIMETERS_PER_MINUTE = None
    DUT_CENTIMETERS_TO_THE_FOURTH_POWER = None
    DUT_CENTIMETERS_TO_THE_SIXTH_POWER = None
    DUT_CENTIPOISES = None
    DUT_CUBIC_CENTIMETERS = None
    DUT_CUBIC_FEET = None
    DUT_CUBIC_FEET_PER_KIP = None
    DUT_CUBIC_FEET_PER_MINUTE = None
    DUT_CUBIC_FEET_PER_MINUTE_CUBIC_FOOT = None
    DUT_CUBIC_FEET_PER_MINUTE_SQUARE_FOOT = None
    DUT_CUBIC_FEET_PER_MINUTE_TON_OF_REFRIGERATION = None
    DUT_CUBIC_INCHES = None
    DUT_CUBIC_METERS = None
    DUT_CUBIC_METERS_PER_HOUR = None
    DUT_CUBIC_METERS_PER_KILONEWTON = None
    DUT_CUBIC_METERS_PER_SECOND = None
    DUT_CUBIC_MILLIMETERS = None
    DUT_CUBIC_YARDS = None
    DUT_CURRENCY = None
    DUT_CUSTOM = None
    DUT_CYCLES_PER_SECOND = None
    DUT_DECANEWTONS = None
    DUT_DECANEWTONS_PER_METER = None
    DUT_DECANEWTONS_PER_SQUARE_METER = None
    DUT_DECANEWTON_METERS = None
    DUT_DECANEWTON_METERS_PER_METER = None
    DUT_DECIMAL_DEGREES = None
    DUT_DECIMAL_FEET = None
    DUT_DECIMAL_INCHES = None
    DUT_DECIMETERS = None
    DUT_DEGREES_AND_MINUTES = None
    DUT_FAHRENHEIT = None
    DUT_FAHRENHEIT_DIFFERENCE = None
    DUT_FEET_FRACTIONAL_INCHES = None
    DUT_FEET_OF_WATER = None
    DUT_FEET_OF_WATER_PER_100FT = None
    DUT_FEET_PER_KIP = None
    DUT_FEET_PER_MINUTE = None
    DUT_FEET_PER_SECOND = None
    DUT_FEET_PER_SECOND_SQUARED = None
    DUT_FEET_TO_THE_FOURTH_POWER = None
    DUT_FEET_TO_THE_SIXTH_POWER = None
    DUT_FIXED = None
    DUT_FOOTCANDLES = None
    DUT_FOOTLAMBERTS = None
    DUT_FRACTIONAL_INCHES = None
    DUT_GALLONS_US = None
    DUT_GALLONS_US_PER_HOUR = None
    DUT_GALLONS_US_PER_MINUTE = None
    DUT_GENERAL = None
    DUT_GRADS = None
    DUT_GRAINS_PER_HOUR_SQUARE_FOOT_INCH_MERCURY = None
    DUT_HECTARES = None
    DUT_HERTZ = None
    DUT_HORSEPOWER = None
    DUT_HOURS = None
    DUT_HOUR_SQUARE_FOOT_FAHRENHEIT_PER_BRITISH_THERMAL_UNIT = None
    DUT_INCHES_OF_MERCURY = None
    DUT_INCHES_OF_WATER = None
    DUT_INCHES_OF_WATER_PER_100FT = None
    DUT_INCHES_PER_SECOND_SQUARED = None
    DUT_INCHES_TO_THE_FOURTH_POWER = None
    DUT_INCHES_TO_THE_SIXTH_POWER = None
    DUT_INV_CELSIUS = None
    DUT_INV_FAHRENHEIT = None
    DUT_INV_KILONEWTONS = None
    DUT_INV_KIPS = None
    DUT_JOULES = None
    DUT_JOULES_PER_GRAM = None
    DUT_JOULES_PER_GRAM_CELSIUS = None
    DUT_JOULES_PER_KELVIN = None
    DUT_JOULES_PER_KILOGRAM_CELSIUS = None
    DUT_KELVIN = None
    DUT_KELVIN_DIFFERENCE = None
    DUT_KILOAMPERES = None
    DUT_KILOCALORIES = None
    DUT_KILOCALORIES_PER_SECOND = None
    DUT_KILOGRAMS_FORCE = None
    DUT_KILOGRAMS_FORCE_PER_METER = None
    DUT_KILOGRAMS_FORCE_PER_SQUARE_METER = None
    DUT_KILOGRAMS_MASS = None
    DUT_KILOGRAMS_MASS_PER_METER = None
    DUT_KILOGRAMS_MASS_PER_SQUARE_METER = None
    DUT_KILOGRAMS_PER_CUBIC_METER = None
    DUT_KILOGRAM_FORCE_METERS = None
    DUT_KILOGRAM_FORCE_METERS_PER_METER = None
    DUT_KILOJOULES = None
    DUT_KILOJOULES_PER_KELVIN = None
    DUT_KILOMETERS_PER_HOUR = None
    DUT_KILOMETERS_PER_SECOND_SQUARED = None
    DUT_KILONEWTONS = None
    DUT_KILONEWTONS_PER_CUBIC_METER = None
    DUT_KILONEWTONS_PER_METER = None
    DUT_KILONEWTONS_PER_SQUARE_CENTIMETER = None
    DUT_KILONEWTONS_PER_SQUARE_METER = None
    DUT_KILONEWTONS_PER_SQUARE_MILLIMETER = None
    DUT_KILONEWTON_METERS = None
    DUT_KILONEWTON_METERS_PER_DEGREE = None
    DUT_KILONEWTON_METERS_PER_DEGREE_PER_METER = None
    DUT_KILONEWTON_METERS_PER_METER = None
    DUT_KILOPASCALS = None
    DUT_KILOVOLTS = None
    DUT_KILOVOLT_AMPERES = None
    DUT_KILOWATTS = None
    DUT_KILOWATT_HOURS = None
    DUT_KIPS = None
    DUT_KIPS_PER_CUBIC_FOOT = None
    DUT_KIPS_PER_CUBIC_INCH = None
    DUT_KIPS_PER_FOOT = None
    DUT_KIPS_PER_INCH = None
    DUT_KIPS_PER_SQUARE_FOOT = None
    DUT_KIPS_PER_SQUARE_INCH = None
    DUT_KIP_FEET = None
    DUT_KIP_FEET_PER_DEGREE = None
    DUT_KIP_FEET_PER_DEGREE_PER_FOOT = None
    DUT_KIP_FEET_PER_FOOT = None
    DUT_LITERS = None
    DUT_LITERS_PER_MINUTE = None
    DUT_LITERS_PER_SECOND = None
    DUT_LITERS_PER_SECOND_CUBIC_METER = None
    DUT_LITERS_PER_SECOND_KILOWATTS = None
    DUT_LITERS_PER_SECOND_SQUARE_METER = None
    DUT_LUMENS = None
    DUT_LUMENS_PER_WATT = None
    DUT_LUX = None
    DUT_MEGANEWTONS = None
    DUT_MEGANEWTONS_PER_METER = None
    DUT_MEGANEWTONS_PER_SQUARE_METER = None
    DUT_MEGANEWTON_METERS = None
    DUT_MEGANEWTON_METERS_PER_METER = None
    DUT_MEGAPASCALS = None
    DUT_METERS = None
    DUT_METERS_CENTIMETERS = None
    DUT_METERS_PER_KILONEWTON = None
    DUT_METERS_PER_SECOND = None
    DUT_METERS_PER_SECOND_SQUARED = None
    DUT_METERS_TO_THE_FOURTH_POWER = None
    DUT_METERS_TO_THE_SIXTH_POWER = None
    DUT_MICROINCHES_PER_INCH_FAHRENHEIT = None
    DUT_MICROMETERS_PER_METER_CELSIUS = None
    DUT_MILES_PER_HOUR = None
    DUT_MILES_PER_SECOND_SQUARED = None
    DUT_MILISECONDS = None
    DUT_MILLIAMPERES = None
    DUT_MILLIMETERS = None
    DUT_MILLIMETERS_OF_MERCURY = None
    DUT_MILLIMETERS_TO_THE_FOURTH_POWER = None
    DUT_MILLIMETERS_TO_THE_SIXTH_POWER = None
    DUT_MILLIVOLTS = None
    DUT_MINUTES = None
    DUT_NANOGRAMS_PER_PASCAL_SECOND_SQUARE_METER = None
    DUT_NEWTONS = None
    DUT_NEWTONS_PER_METER = None
    DUT_NEWTONS_PER_SQUARE_METER = None
    DUT_NEWTONS_PER_SQUARE_MILLIMETER = None
    DUT_NEWTON_METERS = None
    DUT_NEWTON_METERS_PER_METER = None
    DUT_OHM_METERS = None
    DUT_PASCALS = None
    DUT_PASCALS_PER_METER = None
    DUT_PASCAL_SECONDS = None
    DUT_PERCENTAGE = None
    DUT_PER_MILLE = None
    DUT_POUNDS_FORCE = None
    DUT_POUNDS_FORCE_PER_CUBIC_FOOT = None
    DUT_POUNDS_FORCE_PER_FOOT = None
    DUT_POUNDS_FORCE_PER_SQUARE_FOOT = None
    DUT_POUNDS_FORCE_PER_SQUARE_INCH = None
    DUT_POUNDS_MASS = None
    DUT_POUNDS_MASS_PER_CUBIC_FOOT = None
    DUT_POUNDS_MASS_PER_CUBIC_INCH = None
    DUT_POUNDS_MASS_PER_FOOT = None
    DUT_POUNDS_MASS_PER_FOOT_HOUR = None
    DUT_POUNDS_MASS_PER_FOOT_SECOND = None
    DUT_POUNDS_MASS_PER_SQUARE_FOOT = None
    DUT_POUND_FORCE_FEET = None
    DUT_POUND_FORCE_FEET_PER_FOOT = None
    DUT_RADIANS = None
    DUT_RADIANS_PER_SECOND = None
    DUT_RANKINE = None
    DUT_RANKINE_DIFFERENCE = None
    DUT_RATIO_10 = None
    DUT_RATIO_12 = None
    DUT_RISE_OVER_10_FEET = None
    DUT_RISE_OVER_120_INCHES = None
    DUT_RISE_OVER_FOOT = None
    DUT_RISE_OVER_INCHES = None
    DUT_RISE_OVER_MMS = None
    DUT_SECONDS = None
    DUT_SLOPE_DEGREES = None
    DUT_SQUARE_CENTIMETERS = None
    DUT_SQUARE_CENTIMETERS_PER_METER = None
    DUT_SQUARE_FEET = None
    DUT_SQUARE_FEET_PER_FOOT = None
    DUT_SQUARE_FEET_PER_KIP = None
    DUT_SQUARE_FEET_PER_THOUSAND_BRITISH_THERMAL_UNITS_PER_HOUR = None
    DUT_SQUARE_FEET_PER_TON_OF_REFRIGERATION = None
    DUT_SQUARE_INCHES = None
    DUT_SQUARE_INCHES_PER_FOOT = None
    DUT_SQUARE_METERS = None
    DUT_SQUARE_METERS_PER_KILONEWTON = None
    DUT_SQUARE_METERS_PER_KILOWATTS = None
    DUT_SQUARE_METERS_PER_METER = None
    DUT_SQUARE_METER_KELVIN_PER_WATT = None
    DUT_SQUARE_MILLIMETERS = None
    DUT_SQUARE_MILLIMETERS_PER_METER = None
    DUT_THERMS = None
    DUT_TONNES_FORCE = None
    DUT_TONNES_FORCE_PER_METER = None
    DUT_TONNES_FORCE_PER_SQUARE_METER = None
    DUT_TONNES_MASS = None
    DUT_TONNE_FORCE_METERS = None
    DUT_TONNE_FORCE_METERS_PER_METER = None
    DUT_TON_OF_REFRIGERATION = None
    DUT_UNDEFINED = None
    DUT_USTONNES_FORCE = None
    DUT_USTONNES_MASS = None
    DUT_VOLTS = None
    DUT_VOLT_AMPERES = None
    DUT_WATTS = None
    DUT_WATTS_PER_CUBIC_FOOT = None
    DUT_WATTS_PER_CUBIC_METER = None
    DUT_WATTS_PER_METER_KELVIN = None
    DUT_WATTS_PER_SQUARE_FOOT = None
    DUT_WATTS_PER_SQUARE_METER = None
    DUT_WATTS_PER_SQUARE_METER_KELVIN = None
    value__ = None


class DistanceMeasuredFrom(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates if the distance is measured from the top or bottom of the wall.
    
    enum DistanceMeasuredFrom, values: Base (0), Top (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Base = None
    Top = None
    value__ = None


class DistributionOfNormals(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumeration containing the choices of how normal vectors are assigned
       and distributed along the surface of a polymesh. Planar faces would typically
       have only normal vector associated, but curved faces can have a different
       normal either for each facet (triangle) or each point of the tessellated polymesh.
    
    enum DistributionOfNormals, values: AtEachPoint (0), OnEachFacet (2), OnePerFace (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AtEachPoint = None
    OnEachFacet = None
    OnePerFace = None
    value__ = None


class DividedPath(Element, IDisposable):
    """ An element that consists of a set of points distributed along a path which consists of a connected set of curves and edges. """
    @staticmethod
    def AreCurveReferencesConnected(document, curveReferences):
        """ AreCurveReferencesConnected(document: Document, curveReferences: IList[Reference]) -> bool """
        pass

    @staticmethod
    def Create(document, curveReferences, intersectors=None):
        """
        Create(document: Document, curveReferences: IList[Reference]) -> DividedPath
        Create(document: Document, curveReferences: IList[Reference], intersectors: ICollection[ElementId]) -> DividedPath
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def Flip(self):
        """
        Flip(self: DividedPath)
            Toggle the flipped value
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetIntersectingElements(self):
        """
        GetIntersectingElements(self: DividedPath) -> ICollection[ElementId]
        
            Get the elements whose intersection with path produces points.
        """
        pass

    @staticmethod
    def IsCurveReferenceValid(document, curveReference):
        """
        IsCurveReferenceValid(document: Document, curveReference: Reference) -> bool
        
            This returns true if the reference represents a curve or edge that can be used 
             to create a divided path.
        
        
            document: The document.
            curveReference: The reference.
            Returns: True if the reference can be used to create a divided path, false otherwise.
        """
        pass

    @staticmethod
    def IsIntersectorValidForCreation(document, intersector):
        """
        IsIntersectorValidForCreation(document: Document, intersector: ElementId) -> bool
        
            This returns true if the intersector is an element that can be used to 
             intersect with a newly created divided path.
        
        
            document: The document.
            intersector: The intersector.
            Returns: True if the reference can be used to create a divided path, false otherwise.
        """
        pass

    def IsIntersectorValidForDividedPath(self, intersector):
        """
        IsIntersectorValidForDividedPath(self: DividedPath, intersector: ElementId) -> bool
        
            This returns true if the intersector is an element that can be used to 
             intersect with the divided path.
        
        
            intersector: The intersector.
            Returns: True if the reference can be used to create a divided path, false otherwise.
        """
        pass

    def IsValidBeginningIndent(self, beginningIndent):
        """
        IsValidBeginningIndent(self: DividedPath, beginningIndent: float) -> bool
        
            Checks that the indent value does not cause the beginningIndent and endIndent 
             to overlop
        """
        pass

    def IsValidEndIndent(self, endIndent):
        """
        IsValidEndIndent(self: DividedPath, endIndent: float) -> bool
        
            Checks that the indent value does not cause the beginningIndent and endIndent 
             to overlop
        """
        pass

    @staticmethod
    def IsValidFixedNumberOfPoints(fixedNumberOfPoints):
        """
        IsValidFixedNumberOfPoints(fixedNumberOfPoints: int) -> bool
        
            Identifies if the indicated number of points is valid for assignment
           to a 
             DividedPath with a layout type 'FixedNumber'.
        """
        pass

    def IsValidMeasurementType(self, measurementType):
        """
        IsValidMeasurementType(self: DividedPath, measurementType: DividedPathMeasurementType) -> bool
        
            Checks that the measurement type enumeration value is valid
        """
        pass

    def IsValidSpacingRuleJustification(self, justification):
        """
        IsValidSpacingRuleJustification(self: DividedPath, justification: SpacingRuleJustification) -> bool
        
            Checks that the justification enumeration value is valid
        """
        pass

    def IsValidSpacingRuleLayout(self, layout):
        """
        IsValidSpacingRuleLayout(self: DividedPath, layout: SpacingRuleLayout) -> bool
        
            Checks that the spacing rule layout enumeration value is valid
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    @staticmethod
    def SeparateReferencesIntoConnectedReferences(document, curveReferences):
        """ SeparateReferencesIntoConnectedReferences(document: Document, curveReferences: IList[Reference]) -> IList[IList[Reference]] """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetIntersectingElements(self, intersectors):
        """ SetIntersectingElements(self: DividedPath, intersectors: ICollection[ElementId]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BeginningIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The beginningIndent is an offset distance from the beginning of the
   first curve that determines the beginning of the range over which
   the layout is applied.
   The measurement type determines how the distance is measured.

Get: BeginningIndent(self: DividedPath) -> float

Set: BeginningIndent(self: DividedPath) = value
"""

    DisplayNodeNumbers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Controls whether the node numbers are shown when the divided path is selected

Get: DisplayNodeNumbers(self: DividedPath) -> bool

Set: DisplayNodeNumbers(self: DividedPath) = value
"""

    DisplayNodes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Controls whether the points of the divided path are visible

Get: DisplayNodes(self: DividedPath) -> bool

Set: DisplayNodes(self: DividedPath) = value
"""

    DisplayReferenceCurves = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Controls whether the curves in the path are visible

Get: DisplayReferenceCurves(self: DividedPath) -> bool

Set: DisplayReferenceCurves(self: DividedPath) = value
"""

    Distance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The distance between points that are distributed along the path according to the selected layout.
   When the layout is set to 'FixedDistance' this value can be set to desired distance.
   The measurement type determines how the distance is measured.

Get: Distance(self: DividedPath) -> float

Set: Distance(self: DividedPath) = value
"""

    EndIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The endIndent is an offset distance from the end of the
   last curve that determines the end of the range over which
   the layout is applied.
   The measurement type determines how the distance is measured.

Get: EndIndent(self: DividedPath) -> float

Set: EndIndent(self: DividedPath) = value
"""

    FixedNumberOfPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of points used when the layout is set to 'FixedNumber'.

Get: FixedNumberOfPoints(self: DividedPath) -> int

Set: FixedNumberOfPoints(self: DividedPath) = value
"""

    Flipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """If the divided path is flipped the nodes are numbered in the reverse order.
   It also switches the ends from which beginningIndent and endIndent are measured from.

Get: Flipped(self: DividedPath) -> bool

"""

    IsClosedLoop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not the path forms a closed loop.

Get: IsClosedLoop(self: DividedPath) -> bool

"""

    IsCyclical = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the first and last point coincide
   False otherwise.

Get: IsCyclical(self: DividedPath) -> bool

"""

    MaximumDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The maximum distance is used when the layout is set to 'MaximumSpacing'.
   When that layout rule is used the distance between points will not exceed this value.
   The measurement type determines how the distance is measured.

Get: MaximumDistance(self: DividedPath) -> float

Set: MaximumDistance(self: DividedPath) = value
"""

    MeasurementType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The measurement type determines how distances are calculated.
   Either along a straight line between two points ('ChordLength')
   or along the segment of the path that connects them. ('SegmentLength').

Get: MeasurementType(self: DividedPath) -> DividedPathMeasurementType

Set: MeasurementType(self: DividedPath) = value
"""

    MinimumDistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The minimum distance is used when the layout is set to 'MinimumSpacing'.
   When that layout rule is used the distance between points will not fall below this value.
   The measurement type determines how the distance is measured.

Get: MinimumDistance(self: DividedPath) -> float

Set: MinimumDistance(self: DividedPath) = value
"""

    NumberOfPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The total number of points of the divided surface.
   This combines the layout points and the intersection points.

Get: NumberOfPoints(self: DividedPath) -> int

"""

    SpacingRuleJustification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """When the layout is set to 'FixedDistance' the points may not cover the
   entire range of the path.  The justification determines whether
   the points are centered on the range, or shifted towards the start or end of the range.

Get: SpacingRuleJustification(self: DividedPath) -> SpacingRuleJustification

Set: SpacingRuleJustification(self: DividedPath) = value
"""

    SpacingRuleLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The layout determines how points are distributed along the path.

Get: SpacingRuleLayout(self: DividedPath) -> SpacingRuleLayout

Set: SpacingRuleLayout(self: DividedPath) = value
"""

    TotalPathLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sum of the curve lengths.

Get: TotalPathLength(self: DividedPath) -> float

"""



class DividedPathMeasurementType(Enum, IComparable, IFormattable, IConvertible):
    """
    DividedPath measurement type.
    
    enum DividedPathMeasurementType, values: ChordLength (0), SegmentLength (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ChordLength = None
    SegmentLength = None
    value__ = None


class DividedSurface(Element, IDisposable):
    """
    An element that represents a mesh on the surface of another element, a family instance, an import instance or a geometry combination,
       and a tile pattern built on that mesh.
    """
    def AddIntersectionElement(self, newIntersectionElemId):
        """
        AddIntersectionElement(self: DividedSurface, newIntersectionElemId: ElementId)
            Adds an intersection element to the divided surface.
        
            newIntersectionElemId: The intersection element to be added.
        """
        pass

    @staticmethod
    def CanBeDivided(document, reference):
        """
        CanBeDivided(document: Document, reference: Reference) -> bool
        
            This returns true if the reference represents a face that can be used to create 
             a divided surface.
        
        
            document: The document.
            reference: The reference.
            Returns: True if the reference can be used to create a divided surface, false otherwise.
        """
        pass

    def CanBeIntersectionElement(self, id):
        """
        CanBeIntersectionElement(self: DividedSurface, id: ElementId) -> bool
        
            Checks if the element can be an intersection reference.
        
            id: The element to be checked.
            Returns: True if the element can be an intersection reference., false otherwise.
        """
        pass

    @staticmethod
    def Create(document, faceReference):
        """
        Create(document: Document, faceReference: Reference) -> DividedSurface
        
            Creates a new instance of a divided surface with a default layout.
        
            document: The document.
            faceReference: Reference that represents a face.
            Returns: The newly created divided surface.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetAllIntersectionElements(self):
        """
        GetAllIntersectionElements(self: DividedSurface) -> ICollection[ElementId]
        
            Gets all intersection elements which produce division lines.
            Returns: The intersection elements.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetDividedSurfaceForReference(document, faceReference):
        """
        GetDividedSurfaceForReference(document: Document, faceReference: Reference) -> DividedSurface
        
            Get a divided surface for a given reference.  Returns null if the reference 
             does not host a divided surface.
        
        
            document: The document.
            faceReference: Reference that represents a face.
            Returns: The newly created divided surface.
        """
        pass

    def GetGridNodeLocation(self, gridNode):
        """
        GetGridNodeLocation(self: DividedSurface, gridNode: GridNode) -> GridNodeLocation
        
            Specify whether a particular grid node is 
        interior to the surface, on the 
             boundary, or outside
        the boundary.
        """
        pass

    def GetGridNodeReference(self, gridNode):
        """
        GetGridNodeReference(self: DividedSurface, gridNode: GridNode) -> Reference
        
            Get a reference to the geometric point
        associated with a grid node.
        """
        pass

    def GetGridNodeUV(self, gridNode):
        """
        GetGridNodeUV(self: DividedSurface, gridNode: GridNode) -> UV
        
            Get the position of a grid node in UV
        coordinates in the surface.
        """
        pass

    def GetGridSegmentReference(self, gridNode, gridSegmentDirection):
        """
        GetGridSegmentReference(self: DividedSurface, gridNode: GridNode, gridSegmentDirection: GridSegmentDirection) -> Reference
        
            Get a reference to a line segment connecting
        two adjacent grid nodes.
        """
        pass

    @staticmethod
    def GetReferencesWithDividedSurfaces(host):
        """
        GetReferencesWithDividedSurfaces(host: Element) -> IList[Reference]
        
            For a given host element get references to all the faces that host a divided 
             surface
        
        
            host: The element that hosts the divided surfaces
            Returns: References that host a divided surface
        """
        pass

    def GetTileFamilyInstance(self, gridNode, tileIndex):
        """
        GetTileFamilyInstance(self: DividedSurface, gridNode: GridNode, tileIndex: int) -> FamilyInstance
        
            Get a reference to a tile element
        associated with a given seed node.
            Returns: A FamilyInstance object. Returns ll if
        the ObjectType property is not a 
             FamilySymbol.
        Returns ll
        if the grid node is not a "seed node", or
        if the 
             tile is omitted due to boundary conditions.
        """
        pass

    def GetTileReference(self, gridNode, tileIndex):
        """
        GetTileReference(self: DividedSurface, gridNode: GridNode, tileIndex: int) -> Reference
        
            Get a reference to one of the tile surfaces
        associated with a given seed node.
        
            tileIndex: An integer between 0 and T-1,
        where T is 
             Autodesk.Revit.DB.TilePattern.TilesPerSeedNode.
        
            Returns: A reference to a Face (surface). Returns ll
        if the grid node is not a "seed 
             node", or
        if the tile is omitted due to boundary conditions.
        """
        pass

    def IsSeedNode(self, gridNode):
        """
        IsSeedNode(self: DividedSurface, gridNode: GridNode) -> bool
        
            Reports whether a grid node is a "seed node," a node
        that is associated with 
             one or more tiles.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveAllIntersectionElements(self):
        """
        RemoveAllIntersectionElements(self: DividedSurface)
            Removes all the intersection elements from a divided surface.
        """
        pass

    def RemoveIntersectionElement(self, referenceElemIdToRemove):
        """
        RemoveIntersectionElement(self: DividedSurface, referenceElemIdToRemove: ElementId)
            Removes an intersection element from a divided surface.
        
            referenceElemIdToRemove: The intersection element to be removed.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllGridRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Angle of rotation applied to the U- and V- directions together.

Get: AllGridRotation(self: DividedSurface) -> float

Set: AllGridRotation(self: DividedSurface) = value
"""

    BorderTile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determines the handling of tiles that overlap the surface's
boundary.

Get: BorderTile(self: DividedSurface) -> BorderTile

Set: BorderTile(self: DividedSurface) = value
"""

    ComponentRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The rotation of the pattern by a multiple
of 90 degrees.

Get: ComponentRotation(self: DividedSurface) -> ComponentRotation

Set: ComponentRotation(self: DividedSurface) = value
"""

    Host = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element whose surface has been divided.

Get: Host(self: DividedSurface) -> Element

"""

    HostReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A reference to the divided face on the host.

Get: HostReference(self: DividedSurface) -> Reference

"""

    IsComponentFlipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the pattern is flipped.

Get: IsComponentFlipped(self: DividedSurface) -> bool

Set: IsComponentFlipped(self: DividedSurface) = value
"""

    IsComponentMirrored = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the pattern is mirror-imaged.

Get: IsComponentMirrored(self: DividedSurface) -> bool

Set: IsComponentMirrored(self: DividedSurface) = value
"""

    NumberOfUGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the number of U-gridlines used on the
surface.

Get: NumberOfUGridlines(self: DividedSurface) -> int

"""

    NumberOfVGridlines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the number of V-gridlines used on the
surface.

Get: NumberOfVGridlines(self: DividedSurface) -> int

"""

    UPatternIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset applied to the pattern by an
integral number of grid nodes in the U-direction.

Get: UPatternIndent(self: DividedSurface) -> int

Set: UPatternIndent(self: DividedSurface) = value
"""

    USpacingRule = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Access to the rule for laying out the first series of equidistant
parallel lines on the surface.

Get: USpacingRule(self: DividedSurface) -> SpacingRule

"""

    VPatternIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset applied to the pattern by an 
integral number of grid nodes in the V-direction.

Get: VPatternIndent(self: DividedSurface) -> int

Set: VPatternIndent(self: DividedSurface) = value
"""

    VSpacingRule = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Access to the rule for laying out the second series of equidistant
parallel lines on the surface.

Get: VSpacingRule(self: DividedSurface) -> SpacingRule

"""



class Document(object, IDisposable):
    """ An object that represents an open Autodesk Revit project. """
    def AutoJoinElements(self):
        """
        AutoJoinElements(self: Document)
            Forces the elements in the Revit document to automatically join to their 
             neighbors where appropriate.
        """
        pass

    def CanEnableWorksharing(self):
        """
        CanEnableWorksharing(self: Document) -> bool
        
            Checks if worksharing can be enabled in the document.
            Returns: True if worksharing can be enabled in the document, False otherwise.
        """
        pass

    def Close(self, saveModified=None):
        """
        Close(self: Document, saveModified: bool) -> bool
        
            Closes the document with the option to save.
        
            saveModified: Indicates if the current document should be saved before close operation.
            Returns: False if closing procedure fails or if saving of a modified document was 
             requested (saveModified = True) but failed. 
        Also returns False if closing is 
             cancelled by an external application during 'DocumentClosing' event. 
        When 
             function succeeds, True is returned.
        
        Close(self: Document) -> bool
        
            Closes the document, save the changes if there are.
            Returns: False if either closing procedure fails or if saving of a modified document 
             failed. 
        Also returns False if closing is cancelled by an external application 
             during 'DocumentClosing' event. 
        When function succeeds, True is returned.
        """
        pass

    def CombineElements(self, members):
        """
        CombineElements(self: Document, members: CombinableElementArray) -> GeomCombination
        
            Combine a set of combinable elements into a geometry combination.
        
            members: A list of combinable elements to be combined.
            Returns: If successful, the newly created geometry combination is returned, otherwise an
             
        exception with error information will be thrown.
        """
        pass

    def ConvertDetailToModelCurves(self, view, detailCurves):
        """
        ConvertDetailToModelCurves(self: Document, view: View, detailCurves: DetailCurveArray) -> ModelCurveArray
        
            Converts a group of DetailCurves to equivalent ModelCurves.
        
            view: The view where the new lines will be created.
        The lines are projected on the 
             view workplane.
        The view workplane must be parallel to the view plane.
        
            detailCurves: The detail curve array to be converted.
        """
        pass

    def ConvertModelToDetailCurves(self, view, modelCurves):
        """
        ConvertModelToDetailCurves(self: Document, view: View, modelCurves: ModelCurveArray) -> DetailCurveArray
        
            Converts a group of ModelCurves to equivalent DetailCurves.
        
            view: The view where the new lines will be created.  
        The lines are projected on the 
             view plane.
        If the lines are not parallel to the view plane, lines are 
             foreshortened and arcs are converted to ellipses.
        Splines are modified.
        
            modelCurves: The model curve array to be converted.
        """
        pass

    def ConvertModelToSymbolicCurves(self, view, modelCurves):
        """
        ConvertModelToSymbolicCurves(self: Document, view: View, modelCurves: ModelCurveArray) -> SymbolicCurveArray
        
            Converts a group of ModelCurves to equivalent SymbolicCurves.
        
            view: The view where the new lines will be created. 
        The lines are projected on the 
             view workplane.
        The view workplane must be parallel to the view plane.
        If the 
             lines are not parallel to the view plane, lines are foreshortened and arcs are 
             converted to ellipses.
        Splines are modified.
        
            modelCurves: The model curve array to be converted.
        """
        pass

    def ConvertSymbolicToModelCurves(self, view, symbolicCurve):
        """
        ConvertSymbolicToModelCurves(self: Document, view: View, symbolicCurve: SymbolicCurveArray) -> ModelCurveArray
        
            Converts a group of SymbolicCurves to equivalent ModelCurves.
        
            view: The view where the new lines will be created.
        The lines are projected on the 
             view workplane.
        The view workplane must be parallel to the view plane.
        
            symbolicCurve: The symbolic curve array to be converted.
        """
        pass

    def Delete(self, *__args):
        """
        Delete(self: Document, elementId: ElementId) -> ICollection[ElementId]
        
            Deletes an element from the document given the id of that element.
        
            elementId: Id of the element to delete.
            Returns: The deleted element id set.
        Delete(self: Document, elementIds: ICollection[ElementId]) -> ICollection[ElementId]
        """
        pass

    def Dispose(self):
        """ Dispose(self: Document) """
        pass

    def EditFamily(self, loadedFamily):
        """
        EditFamily(self: Document, loadedFamily: Family) -> Document
        
            Gets the document of a loaded family to edit.
        
            loadedFamily: The loaded family in current document.
            Returns: Reference of the document of the family.
        """
        pass

    def EnableWorksharing(self, worksetNameGridLevel, worksetName):
        """
        EnableWorksharing(self: Document, worksetNameGridLevel: str, worksetName: str)
            Enables worksharing in the document.
        
            worksetNameGridLevel: Name of workset for grids and levels.
            worksetName: Name of workset for all other elements.
        """
        pass

    def Equals(self, obj):
        """
        Equals(self: Document, obj: object) -> bool
        
            Determines whether the specified System.Object equals to this System.Object.
        """
        pass

    def Export(self, folder, name, *__args):
        """
        Export(self: Document, folder: str, name: str, views: ViewSet, options: FBXExportOptions) -> bool
        
            Exports the document in 3D-Studio Max (FBX) format.
        
            folder: Output folder, into which file(s) will be exported. The folder must exist.
            name: Either the name of a single file or a prefix for a set of files.
                      
                  If ll or empty, automatic naming will be used.
        
            views: Selection of views to be exported.Only 3D views are allowed.
            options: Options applicable to the FBX format.
            Returns: Function returns true only if all specified views are exported successfully. 
        
             The function returns False if exporting of any view fails, even if some views 
             might have been exported successfully.
        
        Export(self: Document, folder: str, name: str, views: ICollection[ElementId], options: DWGExportOptions) -> bool
        Export(self: Document, folder: str, name: str, views: ICollection[ElementId], options: DXFExportOptions) -> bool
        Export(self: Document, folder: str, name: str, view: View3D, grossAreaPlan: ViewPlan, options: BuildingSiteExportOptions) -> bool
        
            Exports the document in the format of Civil Engineering design applications.
        
            folder: Output folder, into which file will be exported. The folder must exist.
            name: The name for the exported civil file. 
                           If ll or empty, 
             automatic naming will be used."
        
            view: 3D View to be exported.
            grossAreaPlan: All the areas on the view plan will be exported, it must be 'Gross Building' 
             area plan. It must not be ll.
                                    To check whether its 
             area scheme is Gross Building, use IsGrossBuildingArea property of 
             Autodesk.Revit.DB.AreaScheme.
        
            options: Various options applicable to the format of Civil Engineering design 
             applications.
                              If ll, all options will be set to their 
             respective default values.
        
            Returns: True if successful, otherwise False.
        Export(self: Document, folder: str, name: str, views: ViewSet, options: DWFExportOptions) -> bool
        
            Exports the current view or a selection of views in DWF format.
        
            folder: Output folder, into which file(s) will be exported. The folder must exist.
            name: Either the name of a single file or a prefix for a set of files.
                      
                  If ll or empty, automatic naming will be used.
        
            views: Selection of views to be exported.
            options: Various options applicable to the DWF format.
                           If ll, all 
             options will be set to their respective default values.
        
            Returns: Function returns true only if all specified views are exported successfully. 
             Returns False if exporting of any view fails, 
        even if some views might have 
             been exported successfully.
        
        Export(self: Document, folder: str, name: str, views: ViewSet, options: DWFXExportOptions) -> bool
        
            Exports the current view or a selection of views in DWFX format.
        
            folder: Output folder, into which file(s) will be exported. The folder must exist.
            name: Either the name of a single file or a prefix for a set of files.
                      
                  If ll or empty, automatic naming will be used.
        
            views: Selection of views to be exported.
            options: Various options applicable to the DWFX format.
                           If ll, all 
             options will be set to their respective default values.
        
            Returns: Function returns true only if all specified views are exported successfully.
        
             The function returns False if exporting of any view fails, even if some views 
             might have been exported successfully.
        
        Export(self: Document, folder: str, name: str, options: NavisworksExportOptions)
            Exports a Revit project to the Navisworks .nwc format.
        
            folder: The name of the folder for the exported file.
            name: The name of the exported file.  If it doesn't end in '.nwc', this extension 
             will be added automatically.
        
            options: Options which control the contents of the export.
        Export(self: Document, folder: str, name: str, options: MassGBXMLExportOptions)
            Exports a gbXML file from a mass model document.
        
            folder: Indicates the path of a folder where to export the gbXML file.
            name: Indicates the name of the gbXML file to export. If it doesn't end with ".xml", 
             extension ".xml" will be added automatically. The name cannot contain any of 
             the following characters: \/:*?"<>|. Empty name is not acceptable.
        
            options: Options which control the contents of the export.
        Export(self: Document, folder: str, name: str, options: GBXMLExportOptions) -> bool
        
            Export the model in gbXML (green-building) format.
        
            folder: Indicates the path of a folder where to export the gbXML file.
            name: Indicates the name of the gbXML file to export. If it doesn't end with ".xml", 
             extension ".xml" will be added automatically. The name cannot contain any of 
             the following characters: \/:*?"<>|. Empty name is not acceptable.
        
            options: Options which control the contents of the export.
            Returns: True if successful, otherwise False.
        Export(self: Document, folder: str, name: str, views: ICollection[ElementId], options: DGNExportOptions) -> bool
        Export(self: Document, folder: str, name: str, views: ICollection[ElementId], options: SATExportOptions) -> bool
        Export(self: Document, folder: str, name: str, options: IFCExportOptions) -> bool
        
            Exports the document to the Industry Standard Classes (IFC) format.
        
            folder: Output folder into which the file will be exported. The folder must exist.
            name: Either the name of a single file or a prefix for a set of files.
           If empty, 
             automatic naming will be used.
        
            options: Various options applicable to the IFC format.
           If ll, all options will be 
             set to their respective default values.
        
            Returns: True if successful, otherwise False.
        """
        pass

    def ExportImage(self, options):
        """
        ExportImage(self: Document, options: ImageExportOptions)
            Exports a view or set of views into an image file.
        
            options: The options which govern the image export.
        """
        pass

    def GetDefaultElementTypeId(self, defaultTypeId):
        """
        GetDefaultElementTypeId(self: Document, defaultTypeId: ElementTypeGroup) -> ElementId
        
            Gets the default element type id with the given DefaultElementType id.
        
            defaultTypeId: The default element type id.
            Returns: The element type id.
        """
        pass

    def GetDefaultFamilyTypeId(self, familyCategoryId):
        """
        GetDefaultFamilyTypeId(self: Document, familyCategoryId: ElementId) -> ElementId
        
            Gets the default family type id with the given family category id.
        
            familyCategoryId: The family category id.
            Returns: The default family type id.
        """
        pass

    def GetDocumentPreviewSettings(self):
        """
        GetDocumentPreviewSettings(self: Document) -> DocumentPreviewSettings
        
            Returns the preview settings for the given document.
            Returns: The preview settings.
        """
        pass

    @staticmethod
    def GetDocumentVersion(doc):
        """
        GetDocumentVersion(doc: Document) -> DocumentVersion
        
            Gets the DocumentVersion that corresponds to a document.
        
            doc: The document whose DocumentVersion will be returned.
            Returns: The DocumentVersion corresponding to the given document.
        """
        pass

    def GetElement(self, *__args):
        """
        GetElement(self: Document, reference: Reference) -> Element
        
            Gets the Element referenced by the input reference.
        
            reference: The reference, whose referenced Element will be retrieved from the model.
            Returns: The element referenced by the input argument.
        GetElement(self: Document, uniqueId: str) -> Element
        
            Gets the Element referenced by a unique id string.
        
            uniqueId: The element unique id, whose referenced Element will be retrieved from the 
             model.
           Autodesk.Revit.DB.Element.UniqueId
        
            Returns: The element referenced by the input argument.
        GetElement(self: Document, id: ElementId) -> Element
        
            Gets the Element referenced by the input string name.
        
            id: The ElementId, whose referenced Element will be retrieved from the model.
            Returns: The element referenced by the input argument.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: Document) -> int
        
            Gets the hash code of this document instance.
        """
        pass

    def GetPaintedMaterial(self, elementId, face):
        """
        GetPaintedMaterial(self: Document, elementId: ElementId, face: Face) -> ElementId
        
            Get the material painted on the element's face. Returns invalidElementId if the 
             face is not painted.
        
        
            elementId: The element that the face belongs to.
            face: The painted element's face.
            Returns: The material's Id painted on the element's face.
        """
        pass

    def GetPrintSettingIds(self):
        """
        GetPrintSettingIds(self: Document) -> ICollection[ElementId]
        
            Retrieves all Print Settings of current project.
            Returns: The ElementIds of all print setting elements
        """
        pass

    def GetRoomAtPoint(self, point, phase=None):
        """
        GetRoomAtPoint(self: Document, point: XYZ, phase: Phase) -> Room
        
            Gets a room containing the point.
        
            point: Point to be checked.
            phase: Phase in which the room exists.
            Returns: The room containing the point.
        GetRoomAtPoint(self: Document, point: XYZ) -> Room
        
            Gets a room containing the point.
        
            point: Point to be checked.
            Returns: The room containing the point.
        """
        pass

    def GetSpaceAtPoint(self, point, phase=None):
        """
        GetSpaceAtPoint(self: Document, point: XYZ, phase: Phase) -> Space
        
            Gets a space containing the point.
        
            point: Point to be checked.
            phase: Phase in which the space exists.
            Returns: The space containing the point.
        GetSpaceAtPoint(self: Document, point: XYZ) -> Space
        
            Gets a space containing the point.
        
            point: Point to be checked.
            Returns: The space containing the point.
        """
        pass

    def GetUnits(self):
        """
        GetUnits(self: Document) -> Units
        
            Gets the Units object.
            Returns: The Units object.
        """
        pass

    def GetWorksetId(self, id):
        """
        GetWorksetId(self: Document, id: ElementId) -> WorksetId
        
            Get Id of the Workset which owns the element.
        
            id: Id of the element.
            Returns: Id of the Workset which owns the element.
        """
        pass

    def GetWorksetTable(self):
        """
        GetWorksetTable(self: Document) -> WorksetTable
        
            Get the WorksetTable of this document.
            Returns: The WorksetTable of this document.
        """
        pass

    def GetWorksharingCentralModelPath(self):
        """
        GetWorksharingCentralModelPath(self: Document) -> ModelPath
        
            Gets the central model path of the worksharing model.
            Returns: The central model path, or null if the document is not workshared.
        """
        pass

    def HasAllChangesFromCentral(self):
        """
        HasAllChangesFromCentral(self: Document) -> bool
        
            Returns whether the model in the current session is up to date with central.
            Returns: True means up to date; false means out of date.
            If central is locked but 
             Revit can determine that
           the model in the current session is out of date
          
              without opening central, this method will return false
           instead of throwing 
             CentralModelContentionException.
        """
        pass

    def Import(self, file, options, *__args):
        """
        Import(self: Document, file: str, options: DWGImportOptions, pDBView: View) -> (bool, ElementId)
        
            Imports a DWG or DXF file to the document.
        
            file: Full path of the file to import. File must exist and must be a valid DWG or DXF 
             file.
        
            options: Various options applicable to the DWG or DXF format. If ll, all options will be 
             set to their respective default values.
        
            pDBView: The view into which the file wil be imported.
            Returns: True if successful, otherwise False.
        Import(self: Document, file: str, options: GBXMLImportOptions) -> bool
        
            Imports a Green-Building XML file into the document.
        
            file: Full path of the file to import. File must exist.
            options: Various options applicable to GBXml import. If ll, all options will be set to 
             their respective default values.
        
            Returns: True if successful, otherwise False.
        Import(self: Document, file: str, options: ImageImportOptions, view: View) -> (bool, Element)
        
            Imports an image (a bitmap) into the document.
        
            file: Full path of the file to import. File must exist.
            options: Various options applicable to an image.
        If ll, all options will be set to 
             their respective default values.
        
            view: The view into which the image is going to be imported.
            Returns: True if successful, otherwise False.
        Import(self: Document, file: str, options: DGNImportOptions, pDBView: View) -> (bool, ElementId)
        
            Imports a DGN file to the document.
        
            file: Full path of the file to import. File must exist and must be a valid DGN file.
            options: Various options applicable to the DGN format. If ll, all options will be set to 
             their respective default values.
        
            pDBView: The view into which the file will be imported.
            Returns: True if successful, otherwise False.
        Import(self: Document, file: str, options: SKPImportOptions, pDBView: View) -> ElementId
        
            Imports an SKP file into the document.
        
            file: Full path of the file to link. File must exist and must be a valid SAT file.
            options: Various import options applicable to the SKP format. If ll, all options will be 
             set to their respective default values.
        
            pDBView: The view into which the file will be linked.
            Returns: Returns the element Id of the linked instance.
        Import(self: Document, file: str, options: SATImportOptions, pDBView: View) -> ElementId
        
            Imports an SAT file into the document.
        
            file: Full path of the file to link. File must exist and must be a valid SAT file.
            options: Various import options applicable to the SAT format. If ll, all options will be 
             set to their respective default values.
        
            pDBView: The view into which the file will be linked.
            Returns: Returns the element Id of the linked instance.
        """
        pass

    def IsDefaultElementTypeIdValid(self, defaultTypeId, typeId):
        """
        IsDefaultElementTypeIdValid(self: Document, defaultTypeId: ElementTypeGroup, typeId: ElementId) -> bool
        
            Checks whether the element type id is valid for the give DefaultElmentType id.
        
            defaultTypeId: The default element type id.
            typeId: The element type id.
            Returns: True if the element type id is valid for the give DefaultElmentType id, false 
             otherwise.
        """
        pass

    def IsDefaultFamilyTypeIdValid(self, familyCategoryId, familyTypeId):
        """
        IsDefaultFamilyTypeIdValid(self: Document, familyCategoryId: ElementId, familyTypeId: ElementId) -> bool
        
            Checks whether the family type id is valid for the give family category.
        
            familyCategoryId: The family category id.
            familyTypeId: The default family type id.
            Returns: True if the family type id is valid for the give family category, false 
             otherwise.
        """
        pass

    def IsPainted(self, elementId, face):
        """
        IsPainted(self: Document, elementId: ElementId, face: Face) -> bool
        
            Checks if the element's face is painted with a material.
        
            elementId: The element that the face belongs to.
            face: The painted element's face.
            Returns: True if the element's face is painted.
        """
        pass

    def Link(self, file, options, pDBView=None, elementId=None):
        """
        Link(self: Document, file: str, options: SATImportOptions, pDBView: View) -> ElementId
        
            Links an SAT file into the document.
        
            file: Full path of the file to link. File must exist and must be a valid SAT file.
            options: Various import options applicable to the SAT format. If ll, all options will be 
             set to their respective default values.
        
            pDBView: The view into which the file will be linked.
            Returns: Returns the element Id of the linked instance.
        Link(self: Document, file: str, options: DWGImportOptions, pDBView: View) -> (bool, ElementId)
        
            Links a DWG or DXF file to the document.
        
            file: Full path of the file to link. File must exist and must be a valid DWG or DXF 
             file.
        
            options: Various import options applicable to the DWG or DXF format. If ll, all options 
             will be set to their respective default values.
        
            pDBView: The view into which the file will be linked.
            Returns: True if successful, otherwise False.
        Link(self: Document, file: str, options: SKPImportOptions, pDBView: View) -> ElementId
        
            Links an SKP file into the document.
        
            file: Full path of the file to link. File must exist and must be a valid SAT file.
            options: Various import options applicable to the SKP format. If ll, all options will be 
             set to their respective default values.
        
            pDBView: The view into which the file will be linked.
            Returns: Returns the element Id of the linked instance.
        Link(self: Document, file: str, options: DWFImportOptions) -> IList[ElementId]
        
            Links Markups in a DWF file to the document.
        
            file: Full path of the file to link. File must exist and must be a valid DWF file.
            options: Various link options applicable to the DWF format.
            Returns: A collection of link instance element ids created by the markup link.
        Link(self: Document, file: str, options: DGNImportOptions, pDBView: View) -> (bool, ElementId)
        
            Links a DGN file to the document.
        
            file: Full path of the file to link. File must exist and must be a valid DGN file.
            options: Various import options applicable to the DGN format. If ll, all options will be 
             set to their respective default values.
        
            pDBView: The view into which the file will be linked.
            Returns: True if successful, otherwise False.
        """
        pass

    def LoadFamily(self, *__args):
        """
        LoadFamily(self: Document, filename: str) -> (bool, Family)
        
            Loads an entire family and all its types/symbols into the document and provides 
             a reference
        to the loaded family.
        
        
            filename: The fully qualified filename of the Family file, usually ending in .rfa.
            Returns: True if the entire family was loaded successfully into the project, otherwise 
             False.
        
        LoadFamily(self: Document, filename: str) -> bool
        
            Loads an entire family and all its types/symbols into the document.
        
            filename: The fully qualified filename of the Family file, usually ending in .rfa.
            Returns: True if the entire family was loaded successfully into the project, otherwise 
             False.
        
        LoadFamily(self: Document, filename: str, familyLoadOptions: IFamilyLoadOptions) -> (bool, Family)
        
            Loads an entire family and all its types/symbols into the document and provides 
             a reference
        to the loaded family.
        
        
            filename: The fully qualified filename of the Family file, usually ending in .rfa.
            familyLoadOptions: The interface implementation to use when loading a family into the document.
            Returns: True if the entire family was loaded successfully into the project, otherwise 
             False.
        
        LoadFamily(self: Document, targetDocument: Document, familyLoadOptions: IFamilyLoadOptions) -> Family
        
            Loads the contents of this family document into another document.
        
            targetDocument: The target document which the family will be loaded into.
            familyLoadOptions: The interface implementation to use when responding to conflicts during the 
             load operation.
        
            Returns: Reference of the family in the target document.
        LoadFamily(self: Document, targetDocument: Document) -> Family
        
            Loads the contents of this family document into another document.
        
            targetDocument: The target document where the family will be loaded.
            Returns: Reference of the family in the target document.
        """
        pass

    def LoadFamilySymbol(self, filename, name, *__args):
        """
        LoadFamilySymbol(self: Document, filename: str, name: str) -> bool
        
            Loads only a specified family type/symbol from a family file into the document.
        
            filename: The fully qualified filename of the Family file, usually ending in .rfa.
            name: The name of the type/symbol to be loaded, such as "W11x14".
            Returns: True if the family type/symbol was loaded successfully into the project, 
             otherwise False.
        
        LoadFamilySymbol(self: Document, filename: str, name: str) -> (bool, FamilySymbol)
        
            Loads only the specified family type/symbol from a family file into the 
             document and
        provides a reference to the loaded family symbol.
        
        
            filename: The fully qualified filename of the Family file, usually ending in .rfa.
            name: The name of the type/symbol to be loaded, such as "W11x14".
            Returns: True if the family type/symbol was loaded successfully into the project, 
             otherwise False.
        
        LoadFamilySymbol(self: Document, filename: str, name: str, familyLoadOptions: IFamilyLoadOptions) -> (bool, FamilySymbol)
        
            Loads only the specified family type/symbol from a family file into the 
             document and
        provides a reference to the loaded family symbol.
        
        
            filename: The fully qualified filename of the Family file, usually ending in .rfa.
            name: The name of the type/symbol to be loaded, such as "W11x14".
            familyLoadOptions: The interface implementation to use when loading a family into the document.
            Returns: True if the family type/symbol was loaded successfully into the project, 
             otherwise False.
        """
        pass

    def MakeTransientElements(self, maker):
        """
        MakeTransientElements(self: Document, maker: ITransientElementMaker)
            This method encapsulates the process of creating transient elements in the 
             document.
        
        
            maker: An instance of a class that implements the  
             Autodesk.Revit.DB.ITransientElementMaker interface.
           The maker will be 
             called to create element(s) which would become transient.
        """
        pass

    def Paint(self, elementId, face, *__args):
        """
        Paint(self: Document, elementId: ElementId, face: Face, familyParameter: FamilyParameter)
            Paint the element's face with specified material.
        
            elementId: The element that the face belongs to.
            face: The painted element's face.
            familyParameter: The family parameter associated with a material.
        Paint(self: Document, elementId: ElementId, face: Face, materialId: ElementId)
            Paint the element's face with specified material.
        
            elementId: The element that the face belongs to.
            face: The painted element's face.
            materialId: The material to be painted on the face
        """
        pass

    def PostFailure(self, failure):
        """
        PostFailure(self: Document, failure: FailureMessage) -> FailureMessageKey
        
            Posts a failure to be displayed to the user at the end of transaction.
        
            failure: The failure to be posted.
            Returns: A unique key that identifies posted failure message in a document. If exactly 
             the same error is posted more than once,
           and not removed between the 
             postings, returned key will be the same every time.
        """
        pass

    def Print(self, views, *__args):
        """
        Print(self: Document, views: ViewSet, useCurrentPrintSettings: bool)
            Prints a set of views with default view template and default print settings.
        
            views: The set of views which need to be printed.
            useCurrentPrintSettings: If true, print the view with the current print setting,
        otherwise with the 
             print setting of the document of the view.
        
        Print(self: Document, views: ViewSet)
            Prints a set of views with default view template and default print settings.
        
            views: The set of views which need to be printed.
        Print(self: Document, views: ViewSet, viewTemplate: View, useCurrentPrintSettings: bool)
            Prints a set of views with a specified view template and default print settings.
        
            views: The set of views which need to be printed.
            viewTemplate: The view template which apply to the set of views.
            useCurrentPrintSettings: If true, print the view with the current print setting,
        otherwise with the 
             print setting of the document of the view.
        
        Print(self: Document, views: ViewSet, viewTemplate: View)
            Prints a set of views with a specified view template and default print settings.
        
            views: The set of views which need to be printed.
            viewTemplate: The view template which apply to the set of views.
        """
        pass

    def Regenerate(self):
        """
        Regenerate(self: Document)
            Updates the elements in the Revit document to reflect all changes.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Document, disposing: bool) """
        pass

    def ReleaseUnmanagedResources_(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources_(self: Document, disposing: bool) """
        pass

    def ReloadLatest(self, reloadOptions):
        """
        ReloadLatest(self: Document, reloadOptions: ReloadLatestOptions)
            Fetches changes from central (due to one or more synchronizations with central)
             
           and merges them into the current session.
        
        
            reloadOptions: Various options to control behavior of reloadLatest.
        """
        pass

    def RemovePaint(self, elementId, face):
        """
        RemovePaint(self: Document, elementId: ElementId, face: Face)
            Remove the material painted on the element's face.
           If the face is currently 
             not painted,it will do nothing.
        
        
            elementId: The element that the painted face belongs to.
            face: The painted element's face.
        """
        pass

    def Save(self, options=None):
        """
        Save(self: Document)
            Saves the document.
        Save(self: Document, options: SaveOptions)
            Saves the document.
        
            options: Options to control the Save operation.
        """
        pass

    def SaveAs(self, *__args):
        """
        SaveAs(self: Document, filepath: str)
            Saves the document to a given file path.
        
            filepath: File name and path to be saved as. Either a relative or absolute path can be 
             provided.
        
        SaveAs(self: Document, filepath: str, options: SaveAsOptions)
            Saves the document to a given file path.
        
            filepath: File name and path to be saved as. Either a relative or absolute path can be 
             provided.
        
            options: Options to govern the SaveAs operation.
        SaveAs(self: Document, path: ModelPath, options: SaveAsOptions)
            Saves the document to a given path.
        
            path: Name and path to be saved as. For a file path, either a relative or absolute 
             path can be provided.
        
            options: Options to govern the SaveAs operation.
        """
        pass

    def SaveToProjectAsImage(self, options):
        """
        SaveToProjectAsImage(self: Document, options: ImageExportOptions) -> ElementId
        
            Creates an image view from the currently active view.
        
            options: The options which govern the image creation.
            Returns: Id of the newly created view if the operation succeeded, invalid element id 
             otherwise.
        """
        pass

    def SeparateElements(self, members):
        """
        SeparateElements(self: Document, members: CombinableElementArray)
            Separate a set of combinable elements out of combinations they currently belong 
             to.
        
        
            members: A list of combinable elements to be separated.
        """
        pass

    def SetDefaultElementTypeId(self, defaultTypeId, typeId):
        """
        SetDefaultElementTypeId(self: Document, defaultTypeId: ElementTypeGroup, typeId: ElementId)
            Sets the default element type id of the given DefaultElementType id.
        
            defaultTypeId: The default element type id.
            typeId: The element type id.
        """
        pass

    def SetDefaultFamilyTypeId(self, familyCategoryId, familyTypeId):
        """
        SetDefaultFamilyTypeId(self: Document, familyCategoryId: ElementId, familyTypeId: ElementId)
            Sets the default family type id for the given family category.
        
            familyCategoryId: The family category id.
            familyTypeId: The default family type id.
        """
        pass

    def SetUnits(self, units):
        """
        SetUnits(self: Document, units: Units)
            Sets the units.
        
            units: The units.
        """
        pass

    def SynchronizeWithCentral(self, transactOptions, syncOptions):
        """
        SynchronizeWithCentral(self: Document, transactOptions: TransactWithCentralOptions, syncOptions: SynchronizeWithCentralOptions)
            Performs reload latest until the model in the current session is up to date and 
             then saves changes back to central.
           A save to central is performed even if 
             no changes were made.
        
        
            transactOptions: Options to customize behavior accessing the central model.
            syncOptions: Options to customize behavior of SynchronizeWithCentral.
        """
        pass

    def UnpostFailure(self, messageKey):
        """
        UnpostFailure(self: Document, messageKey: FailureMessageKey)
            Deletes the posted failure message associated with a given FailureMessageKey.
        
            messageKey: The key of the FailureMessage to be deleted.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ActiveProjectLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the active project location.

Get: ActiveProjectLocation(self: Document) -> ProjectLocation

Set: ActiveProjectLocation(self: Document) = value
"""

    ActiveView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The document's active view.

Get: ActiveView(self: Document) -> View

"""

    Application = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Application in which the Document resides.

Get: Application(self: Document) -> Application

"""

    Create = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An object that can be used to create new instances of Autodesk Revit API elements
within a project.

Get: Create(self: Document) -> Document

"""

    DisplayUnitSystem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provides access to display unit type with in the document.

Get: DisplayUnitSystem(self: Document) -> DisplayUnit

"""

    FamilyCreate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An object that can be used to create new instances of Autodesk Revit API elements
within a family document.

Get: FamilyCreate(self: Document) -> FamilyItemFactory

"""

    FamilyManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The family manager object provides access to family types and parameters.

Get: FamilyManager(self: Document) -> FamilyManager

"""

    IsDetached = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if a workshared document is detached.
   Also, see Autodesk.Revit.DB.Document.IsWorkshared

Get: IsDetached(self: Document) -> bool

"""

    IsFamilyDocument = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the current document is a family document.

Get: IsFamilyDocument(self: Document) -> bool

"""

    IsLinked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if a document is a linked RVT.

Get: IsLinked(self: Document) -> bool

"""

    IsModifiable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The document's state of modifiability.

Get: IsModifiable(self: Document) -> bool

"""

    IsModified = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The state of changes made to the document.

Get: IsModified(self: Document) -> bool

"""

    IsReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the document is read-only or can possibly be modified.

Get: IsReadOnly(self: Document) -> bool

"""

    IsReadOnlyFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Signals whether the document was opened from a read-only file.

Get: IsReadOnlyFile(self: Document) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: Document) -> bool

"""

    IsWorkshared = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if worksharing (i.e. editing permissions and multiple worksets) have been enabled in the document.
   Also, see Autodesk.Revit.DB.Document.IsDetached

Get: IsWorkshared(self: Document) -> bool

"""

    MassDisplayTemporaryOverride = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This setting controls temporary display in views of objects with mass category or subcategories.

Get: MassDisplayTemporaryOverride(self: Document) -> MassDisplayTemporaryOverrideType

Set: MassDisplayTemporaryOverride(self: Document) = value
"""

    MullionTypes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property is used to retrieve all the mullion types in current system.

Get: MullionTypes(self: Document) -> MullionTypeSet

"""

    OwnerFamily = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the Family of this Family Document.

Get: OwnerFamily(self: Document) -> Family

"""

    PanelTypes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves a set of PanelType objects that contains all the panel types that are currently loaded into the
project.

Get: PanelTypes(self: Document) -> PanelTypeSet

"""

    ParameterBindings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves an object from which mappings between parameter definitions and categories can
be found.

Get: ParameterBindings(self: Document) -> BindingMap

"""

    PathName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fully qualified path of the document's disk file.

Get: PathName(self: Document) -> str

"""

    Phases = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves all the object that represent phases within the project.

Get: Phases(self: Document) -> PhaseArray

"""

    PrintManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the PrintManager of current project.

Get: PrintManager(self: Document) -> PrintManager

"""

    ProjectInformation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Return the Project Information of the current project.

Get: ProjectInformation(self: Document) -> ProjectInfo

"""

    ProjectLocations = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve all the project locations associated with this project

Get: ProjectLocations(self: Document) -> ProjectLocationSet

"""

    ReactionsAreUpToDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Reports if the analytical model has regenerated in a document with reaction loads.

Get: ReactionsAreUpToDate(self: Document) -> bool

"""

    Settings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provides access to general application settings, such as Categories.

Get: Settings(self: Document) -> Settings

"""

    SiteLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the site location information.

Get: SiteLocation(self: Document) -> SiteLocation

"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The document's title.

Get: Title(self: Document) -> str

"""

    WorksharingCentralGUID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The central GUID of the server-based model.

Get: WorksharingCentralGUID(self: Document) -> Guid

"""


    DocumentClosing = None
    DocumentPrinted = None
    DocumentPrinting = None
    DocumentSaved = None
    DocumentSavedAs = None
    DocumentSaving = None
    DocumentSavingAs = None
    ViewPrinted = None
    ViewPrinting = None


class DocumentPreviewSettings(object, IDisposable):
    """ Contains the settings related to the saving of preview images for a given document. """
    def Dispose(self):
        """ Dispose(self: DocumentPreviewSettings) """
        pass

    def ForceViewUpdate(self, forceViewUpdate):
        """
        ForceViewUpdate(self: DocumentPreviewSettings, forceViewUpdate: bool)
            Sets Revit to update the preview view if necessary.
        
            forceViewUpdate: True to force update of the preview view.  False to skip update if necessary 
             (the default).
        """
        pass

    def IsViewIdValidForPreview(self, viewId):
        """
        IsViewIdValidForPreview(self: DocumentPreviewSettings, viewId: ElementId) -> bool
        
            Identifies if the view id is valid as a preview view id.
        
            viewId: The view id.
            Returns: True if the view id is valid for preview, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DocumentPreviewSettings, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: DocumentPreviewSettings) -> bool

"""

    IsViewUpdateForced = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if Revit will update the preview view if necessary.

Get: IsViewUpdateForced(self: DocumentPreviewSettings) -> bool

"""

    PreviewViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The view id that will be used to generate the preview.

Get: PreviewViewId(self: DocumentPreviewSettings) -> ElementId

Set: PreviewViewId(self: DocumentPreviewSettings) = value
"""



class DocumentSet(APIObject, IDisposable, IEnumerable):
    """
    A set that can contain any documents.
    
    DocumentSet()
    """
    def Clear(self):
        """
        Clear(self: DocumentSet)
            Removes every item from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: DocumentSet, item: Document) -> bool
        
            Tests for the existence of an item within the set.
        
            item: The item to be searched for.
            Returns: The Contains method returns True if the item is within the set, otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: DocumentSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: DocumentSet, item: Document) -> int
        
            Removes a specified object from the set.
        
            item: The item to be erased.
            Returns: The number of items that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: DocumentSet) -> DocumentSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: DocumentSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: DocumentSet, item: Document) -> bool
        
            Insert the specified item into the set.
        
            item: The item to be inserted into the set.
            Returns: Returns whether the item was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DocumentSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: DocumentSet) -> DocumentSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: DocumentSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the set.

Get: Size(self: DocumentSet) -> int

"""



class DocumentSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a set of documents.
    
    DocumentSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: DocumentSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: DocumentSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DocumentSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: DocumentSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: DocumentSetIterator) -> object

"""



class DocumentType(Enum, IComparable, IFormattable, IConvertible):
    """
    Types of Revit documents.
    
    enum DocumentType, values: BuildingComponent (4), Family (1), IFC (3), Other (100), Project (0), Template (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BuildingComponent = None
    Family = None
    IFC = None
    Other = None
    Project = None
    Template = None
    value__ = None


class DocumentValidation(object):
    """ Utility functions with document validation """
    @staticmethod
    def CanDeleteElement(document, elementId):
        """
        CanDeleteElement(document: Document, elementId: ElementId) -> bool
        
            Indicates if an element can be deleted.
        
            document: The document.
            elementId: The id of the element to check.
            Returns: True if the element can be deleted, false otherwise.
        """
        pass

    __all__ = [
        'CanDeleteElement',
    ]


class DocumentVersion(object, IDisposable):
    """ This class uniquely identifies an edition of a given document. """
    def Dispose(self):
        """ Dispose(self: DocumentVersion) """
        pass

    def IsEqual(self, other):
        """
        IsEqual(self: DocumentVersion, other: DocumentVersion) -> bool
        
            Checks whether two DocumentVersions are identical.
           They are identical if 
             both the GUID and number of saves
           are equal. If two DocumentVersions are 
             identical, they
           come from the same document, with the same set of changes.
        
        
            other: The DocumentVersion to compare to this DocumentVersion.
            Returns: True if the two DocumentVersions are equal. False otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DocumentVersion, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: DocumentVersion) -> bool

"""

    NumberOfSaves = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of times the document has been saved. The save number and GUID
   are both necessary to uniquely identify a document version.

Get: NumberOfSaves(self: DocumentVersion) -> int

"""

    VersionGUID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The GUID portion of the DocumentVersion. The GUID is updated when changes
   are made to the document, but may not update with every change to the document.
   The GUID and save number are both necessary to uniquely identify a document version.

Get: VersionGUID(self: DocumentVersion) -> Guid

"""



class Domain(Enum, IComparable, IFormattable, IConvertible):
    """
    Enumeration of connector domain types
    
    enum Domain, values: DomainCableTrayConduit (4), DomainElectrical (2), DomainHvac (1), DomainPiping (3), DomainUndefined (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DomainCableTrayConduit = None
    DomainElectrical = None
    DomainHvac = None
    DomainPiping = None
    DomainUndefined = None
    value__ = None


class DoubleArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains doubles.
    
    DoubleArray()
    """
    def Append(self, item):
        """ Append(self: DoubleArray, item: float) -> float """
        pass

    def Clear(self):
        """
        Clear(self: DoubleArray)
            Removes every double from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: DoubleArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: DoubleArray) -> DoubleArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: DoubleArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """ Insert(self: DoubleArray, item: float, index: int) -> float """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DoubleArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: DoubleArray) -> DoubleArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: DoubleArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of doubles that are in the array.

Get: Size(self: DoubleArray) -> int

"""



class DoubleArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to an array of doubles.
    
    DoubleArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: DoubleArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: DoubleArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DoubleArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: DoubleArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: DoubleArrayIterator) -> object

"""



class ParameterValue(object, IDisposable):
    """ A class that holds a value of a parameter element. """
    def Copy(self):
        """
        Copy(self: ParameterValue) -> ParameterValue
        
            Makes an identical copy of the given parameter value.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ParameterValue) """
        pass

    def IsEqual(self, other):
        """
        IsEqual(self: ParameterValue, other: ParameterValue) -> bool
        
            Tests equality with another instance of the same class.
        
            other: The instance to compare with
        """
        pass

    def IsSameType(self, other):
        """
        IsSameType(self: ParameterValue, other: ParameterValue) -> bool
        
            Tests another instance is of the same value type.
        
            other: The instance to compare with
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ParameterValue, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ParameterValue) -> bool

"""



class DoubleParameterValue(ParameterValue, IDisposable):
    """
    A class that holds a Double value of a parameter element.
    
    DoubleParameterValue(value: float)
    DoubleParameterValue()
    """
    def Dispose(self):
        """ Dispose(self: ParameterValue, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ParameterValue, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, value=None):
        """
        __new__(cls: type, value: float)
        __new__(cls: type)
        """
        pass

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The stored value

Get: Value(self: DoubleParameterValue) -> float

Set: Value(self: DoubleParameterValue) = value
"""



class DuplicateTypeAction(Enum, IComparable, IFormattable, IConvertible):
    """
    This enumerated type defines the action to be taken when there are types with the same name being pasted.
    
    enum DuplicateTypeAction, values: Abort (2), UseDestinationTypes (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Abort = None
    UseDestinationTypes = None
    value__ = None


class DuplicateTypeNamesHandlerArgs(object, IDisposable):
    """ A structure that provides information about an attempt to copy types with names that already exist in the destination document. """
    def Dispose(self):
        """ Dispose(self: DuplicateTypeNamesHandlerArgs) """
        pass

    def GetTypeIds(self):
        """
        GetTypeIds(self: DuplicateTypeNamesHandlerArgs) -> ICollection[ElementId]
        
            Returns ids of the types with duplicate names.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DuplicateTypeNamesHandlerArgs, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Document = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The document that contains the types with duplicate names.

Get: Document(self: DuplicateTypeNamesHandlerArgs) -> Document

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: DuplicateTypeNamesHandlerArgs) -> bool

"""



class DWFExportOptions(CADExportOptions):
    """
    DWF Export options.
    
    DWFExportOptions()
    """
    CropBoxVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether to export crop box.

Get: CropBoxVisible(self: DWFExportOptions) -> bool

Set: CropBoxVisible(self: DWFExportOptions) = value
"""

    ExportingAreas = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether to also export areas and rooms' geometry.

Get: ExportingAreas(self: DWFExportOptions) -> bool

Set: ExportingAreas(self: DWFExportOptions) = value
"""

    ExportObjectData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether to include properties associated with elements.

Get: ExportObjectData(self: DWFExportOptions) -> bool

Set: ExportObjectData(self: DWFExportOptions) = value
"""

    ExportTexture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether to export texture.

Get: ExportTexture(self: DWFExportOptions) -> bool

Set: ExportTexture(self: DWFExportOptions) = value
"""

    ImageFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Controls the compression level of images embedded.

Get: ImageFormat(self: DWFExportOptions) -> DWFImageFormat

Set: ImageFormat(self: DWFExportOptions) = value
"""

    ImageQuality = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Image quality level when compressed raster format(JPEG) is used.

Get: ImageQuality(self: DWFExportOptions) -> DWFImageQuality

Set: ImageQuality(self: DWFExportOptions) = value
"""

    MergedViews = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether to merge all views in one file.

Get: MergedViews(self: DWFExportOptions) -> bool

Set: MergedViews(self: DWFExportOptions) = value
"""

    PaperFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Standard paper format.

Get: PaperFormat(self: DWFExportOptions) -> ExportPaperFormat

Set: PaperFormat(self: DWFExportOptions) = value
"""

    PortraitLayout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Paper orientation - Portrait/Landscape.

Get: PortraitLayout(self: DWFExportOptions) -> bool

Set: PortraitLayout(self: DWFExportOptions) = value
"""

    StopOnError = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether export process should stop when a view fails to export.

Get: StopOnError(self: DWFExportOptions) -> bool

Set: StopOnError(self: DWFExportOptions) = value
"""



class DWFImageFormat(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible image format for DWF Export.
    
    enum DWFImageFormat, values: Lossless (0), Lossy (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Lossless = None
    Lossy = None
    value__ = None


class DWFImageQuality(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible image quality for DWF Export.
    
    enum DWFImageQuality, values: Default (10), High (13), Low (11), Medium (12)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Default = None
    High = None
    Low = None
    Medium = None
    value__ = None


class DWFImportOptions(object, IDisposable):
    """
    The import options used by importing DWF or DWFx format file.
    
    DWFImportOptions(option: DWFImportOptions)
    DWFImportOptions(views: IList[ElementId])
    """
    def Dispose(self):
        """ Dispose(self: DWFImportOptions) """
        pass

    def GetSheetViews(self):
        """
        GetSheetViews(self: DWFImportOptions) -> IList[ElementId]
        
            Get sheet views where DWF markups are imported.
            Returns: An array of sheet views
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: DWFImportOptions, disposing: bool) """
        pass

    def SetSheetViews(self, sheetViews):
        """ SetSheetViews(self: DWFImportOptions, sheetViews: IList[ElementId]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, option: DWFImportOptions)
        __new__(cls: type, views: IList[ElementId])
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: DWFImportOptions) -> bool

"""



class DWFXExportOptions(DWFExportOptions):
    """
    DWFX Export options.
    
    DWFXExportOptions()
    """

class DWGExportOptions(ACADExportOptions, IDisposable):
    """
    The export options used by exporting DWG format file.
    
    DWGExportOptions(option: DWGExportOptions)
    DWGExportOptions()
    """
    def Dispose(self):
        """ Dispose(self: BaseExportOptions, A_0: bool) """
        pass

    @staticmethod
    def GetPredefinedOptions(document, setup):
        """
        GetPredefinedOptions(document: Document, setup: str) -> DWGExportOptions
        
            Returns an instance DWGExportOptions containing settings from a predefined 
             export setup.
        
        
            document: A Revit project document to retrieve the setup from.
            setup: The name of a predefined export setup from the specified document.
            Returns: An instance of predefined DWGExportOptions, or ll if the name was not found.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BaseExportOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, option=None):
        """
        __new__(cls: type, option: DWGExportOptions)
        __new__(cls: type)
        """
        pass

    MergedViews = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether to merge all views in one file (via XRefs).
   Default value is false for mergedViews.

Get: MergedViews(self: DWGExportOptions) -> bool

Set: MergedViews(self: DWGExportOptions) = value
"""



class DWGImportOptions(BaseImportOptions, IDisposable):
    """
    The import options used by importing DWG or DXF format file.
    
    DWGImportOptions(option: DWGImportOptions)
    DWGImportOptions()
    """
    def Dispose(self):
        """ Dispose(self: BaseImportOptions, A_0: bool) """
        pass

    def GetLineWeights(self):
        """
        GetLineWeights(self: DWGImportOptions) -> IList[int]
        
            Gets array of line weights.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BaseImportOptions, disposing: bool) """
        pass

    def SetLineWeights(self, lineWeight):
        """ SetLineWeights(self: DWGImportOptions, lineWeight: IList[int]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, option=None):
        """
        __new__(cls: type, option: DWGImportOptions)
        __new__(cls: type)
        """
        pass


class DXFExportOptions(ACADExportOptions, IDisposable):
    """
    The export options used by exporting DXF format file.
    
    DXFExportOptions(option: DXFExportOptions)
    DXFExportOptions()
    """
    def Dispose(self):
        """ Dispose(self: BaseExportOptions, A_0: bool) """
        pass

    @staticmethod
    def GetPredefinedOptions(document, setup):
        """
        GetPredefinedOptions(document: Document, setup: str) -> DXFExportOptions
        
            Returns an instance DXFExportOptions containing settings from a predefined 
             export setup.
        
        
            document: A Revit project document to retrieve the setup from.
            setup: The name of a predefined export setup from the specified document.
            Returns: An instance of predefined DXFExportOptions, or ll if the name was not found.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BaseExportOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, option=None):
        """
        __new__(cls: type, option: DXFExportOptions)
        __new__(cls: type)
        """
        pass


class EaveCutterType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type to store type of EaveCutter.
    
    enum EaveCutterType, values: PlumbCut (33615), TwoCutPlumb (33619), TwoCutSquare (33618)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    PlumbCut = None
    TwoCutPlumb = None
    TwoCutSquare = None
    value__ = None


class Edge(GeometryObject, IDisposable):
    """ An edge of a 3d solid. """
    def AsCurve(self):
        """
        AsCurve(self: Edge) -> Curve
        
            Returns a curve that corresponds to the edge's parametric orientation.
            Returns: It can be an Arc, Line, or HermiteSpline.
        """
        pass

    def AsCurveFollowingFace(self, faceForDir):
        """
        AsCurveFollowingFace(self: Edge, faceForDir: Face) -> Curve
        
            Returns a curve that corresponds to this edge as oriented in its topological 
             direction on the specified face.
        
        
            faceForDir: Specifies the face, on which the curve will follow the topological direction of 
             the edge.
        
            Returns: It can be an Arc, Line, or HermiteSpline.
        """
        pass

    def ComputeDerivatives(self, parameter):
        """
        ComputeDerivatives(self: Edge, parameter: float) -> Transform
        
            Returns the vectors describing the edge at the specified parameter.
        
            parameter: The parameter to be evaluated.
            Returns: The transformation containing a tangent vector, derivative of tangent vector, 
             and bi-normal vector.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def Evaluate(self, param):
        """
        Evaluate(self: Edge, param: float) -> XYZ
        
            Evaluates a parameter on the edge.
        
            param: The parameter to be evaluated, in [0,1].
        """
        pass

    def EvaluateOnFace(self, param, face):
        """
        EvaluateOnFace(self: Edge, param: float, face: Face) -> UV
        
            Evaluates a parameter on the edge to produce UV coordinates on the face.
        
            param: The parameter to be evaluated, in [0,1].
            face: The face on which to perform the evaluation. Must belong to the edge.
        """
        pass

    def GetEndPointReference(self, index):
        """
        GetEndPointReference(self: Edge, index: int) -> Reference
        
            Returns a stable reference to the start or the end point of the edge.
        
            index: Use 0 for the start point; 1 for the end point.
            Returns: Reference to the point or ll if reference cannot be obtained.
        """
        pass

    def GetFace(self, index):
        """
        GetFace(self: Edge, index: int) -> Face
        
            Returns one of the two faces that meet at the edge.
        
            index: The index of the face (0 or 1).
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def Tessellate(self):
        """
        Tessellate(self: Edge) -> IList[XYZ]
        
            Returns a polyline approximation to the edge.
        """
        pass

    def TessellateOnFace(self, face):
        """
        TessellateOnFace(self: Edge, face: Face) -> IList[UV]
        
            Returns a polyline approximation to the edge in UV parameters of the face.
        
            face: The face on which to perform the tessellation. Must belong to the edge.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ApproximateLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the approximate length of the edge.

Get: ApproximateLength(self: Edge) -> float

"""

    Reference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns a stable reference to the edge.

Get: Reference(self: Edge) -> Reference

"""



class EdgeArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains edges.
    
    EdgeArray()
    """
    def Append(self, item):
        """
        Append(self: EdgeArray, item: Edge)
            Add the edge to the end of the array.
        
            item: The edge to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: EdgeArray)
            Removes every edge from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: EdgeArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: EdgeArray) -> EdgeArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: EdgeArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: EdgeArray, item: Edge, index: int)
            Insert the specified edge into the array.
        
            item: The edge to be inserted into the array.
            index: The edge will be inserted before this index.
            Returns: Returns whether the edge was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: EdgeArray) -> EdgeArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: EdgeArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of edges that are in the array.

Get: Size(self: EdgeArray) -> int

"""



class EdgeArrayArray(APIObject, IDisposable, IEnumerable):
    """
    An array of edge arrays.
    
    EdgeArrayArray()
    """
    def Append(self, item):
        """
        Append(self: EdgeArrayArray, item: EdgeArray)
            Add the edge array to the end of the array.
        
            item: The edge array to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: EdgeArrayArray)
            Removes every edge array from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: EdgeArrayArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: EdgeArrayArray) -> EdgeArrayArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: EdgeArrayArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: EdgeArrayArray, item: EdgeArray, index: int)
            Insert the specified edge array into the array.
        
            item: The edge array to be inserted into the array.
            index: The edge array will be inserted before this index.
            Returns: Returns whether the edge array was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: EdgeArrayArray) -> EdgeArrayArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: EdgeArrayArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of edge arrays that are in the array.

Get: Size(self: EdgeArrayArray) -> int

"""



class EdgeArrayArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to an array or edge arrays.
    
    EdgeArrayArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: EdgeArrayArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: EdgeArrayArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Reset(self):
        """
        Reset(self: EdgeArrayArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: EdgeArrayArrayIterator) -> object

"""



class EdgeArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to an edge array.
    
    EdgeArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: EdgeArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: EdgeArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Reset(self):
        """
        Reset(self: EdgeArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: EdgeArrayIterator) -> object

"""



class EditScope(object, IDisposable):
    """ The base class for a scope object that provides special access and limitations related to editing certain elements. """
    def Cancel(self):
        """
        Cancel(self: EditScope)
            Cancels the edit scope.
        """
        pass

    def Commit(self, failurePreprocessor):
        """
        Commit(self: EditScope, failurePreprocessor: IFailuresPreprocessor)
            Finishes the edit scope.
        
            failurePreprocessor: Callback to be invoked in the beginning of failure processing.
        """
        pass

    def Dispose(self):
        """ Dispose(self: EditScope) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: EditScope, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsActive = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tells if the EditScope is active. In other words, the EditScope has started but not committed/canceled yet.

Get: IsActive(self: EditScope) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: EditScope) -> bool

"""



class ElementArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains element objects.
    
    ElementArray()
    """
    def Append(self, item):
        """
        Append(self: ElementArray, item: Element)
            Add the element to the end of the array.
        
            item: The element to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: ElementArray)
            Removes every element from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ElementArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ElementArray) -> ElementArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ElementArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: ElementArray, item: Element, index: int)
            Insert the specified element into the array.
        
            item: The element to be inserted into the array.
            index: The element will be inserted before this index.
            Returns: Returns whether the element was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ElementArray) -> ElementArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: ElementArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of elements that are in the array.

Get: Size(self: ElementArray) -> int

"""



class ElementArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to an element array.
    
    ElementArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: ElementArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ElementArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: ElementArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ElementArrayIterator) -> object

"""



class ElementBinding(Binding, IDisposable):
    """ A base class for all types of binding that attach to an element. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Categories = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve or set the categories to which a parameter definition will be bound.

Get: Categories(self: ElementBinding) -> CategorySet

Set: Categories(self: ElementBinding) = value
"""



class ElementCategoryFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to match elements by their category.
    
    ElementCategoryFilter(category: BuiltInCategory, inverted: bool)
    ElementCategoryFilter(category: BuiltInCategory)
    ElementCategoryFilter(categoryId: ElementId, inverted: bool)
    ElementCategoryFilter(categoryId: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, category: BuiltInCategory, inverted: bool)
        __new__(cls: type, category: BuiltInCategory)
        __new__(cls: type, categoryId: ElementId, inverted: bool)
        __new__(cls: type, categoryId: ElementId)
        """
        pass

    CategoryId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The category id.

Get: CategoryId(self: ElementCategoryFilter) -> ElementId

"""



class ElementClassFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to match elements by their class.
    
    ElementClassFilter(type: Type, inverted: bool)
    ElementClassFilter(type: Type)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def GetElementClass(self):
        """
        GetElementClass(self: ElementClassFilter) -> Type
        
            The class for the filter.
            Returns: The class.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, type, inverted=None):
        """
        __new__(cls: type, type: Type, inverted: bool)
        __new__(cls: type, type: Type)
        """
        pass


class ElementDesignOptionFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to find elements contained within a particular design option.
    
    ElementDesignOptionFilter(designOptionId: ElementId, inverted: bool)
    ElementDesignOptionFilter(designOptionId: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, designOptionId, inverted=None):
        """
        __new__(cls: type, designOptionId: ElementId, inverted: bool)
        __new__(cls: type, designOptionId: ElementId)
        """
        pass

    DesignOptionId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The design option id.

Get: DesignOptionId(self: ElementDesignOptionFilter) -> ElementId

"""



class ElementId(object):
    """
    The ElementId object is used as a unique identification for an element within a
    single project.
    
    ElementId(parameterId: BuiltInParameter)
    ElementId(categoryId: BuiltInCategory)
    ElementId(id: int)
    """
    def Compare(self, id):
        """
        Compare(self: ElementId, id: ElementId) -> int
        
            Compares two element ids.
        
            id: The ElementId to be compared with this ElementId.
            Returns: -1 if this element id is less than id, 0 if equal, 1 if greater.
        """
        pass

    def Equals(self, obj):
        """
        Equals(self: ElementId, obj: object) -> bool
        
            Determines whether the specified System.Object is equal to the current 
             System.Object.
        
        
            obj: Another object.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: ElementId) -> int
        
            Gets the integer value of the id as hash code
        """
        pass

    def ToString(self):
        """
        ToString(self: ElementId) -> str
        
            Gets a String representation of the integer value of the id.
        """
        pass

    def __cmp__(self, *args): #cannot find CLR method
        """ x.__cmp__(y) <==> cmp(x,y) """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, parameterId: BuiltInParameter)
        __new__(cls: type, categoryId: BuiltInCategory)
        __new__(cls: type, id: int)
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    IntegerValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provides the value of the element id as an integer.

Get: IntegerValue(self: ElementId) -> int

"""


    InvalidElementId = None


class ElementIdParameterValue(ParameterValue, IDisposable):
    """
    A class that holds a ElementId value of a parameter element.
    
    ElementIdParameterValue(value: ElementId)
    ElementIdParameterValue()
    """
    def Dispose(self):
        """ Dispose(self: ParameterValue, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ParameterValue, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, value=None):
        """
        __new__(cls: type, value: ElementId)
        __new__(cls: type)
        """
        pass

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The stored value

Get: Value(self: ElementIdParameterValue) -> ElementId

Set: Value(self: ElementIdParameterValue) = value
"""



class ElementIntersectsFilter(ElementSlowFilter, IDisposable):
    """ A base class for filters used to match elements which intersect with geometry. """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    @staticmethod
    def IsCategorySupported(element):
        """
        IsCategorySupported(element: Element) -> bool
        
            Identifies if the input element is of a category supported by element 
             intersection filters.
        
        
            element: The element.
            Returns: True if the element category is supported, false otherwise.
        """
        pass

    @staticmethod
    def IsElementSupported(element):
        """
        IsElementSupported(element: Element) -> bool
        
            Identifies if the input element is supported by element intersection filters.
        
            element: The element.
            Returns: True if the element is supported, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ElementIntersectsElementFilter(ElementIntersectsFilter, IDisposable):
    """
    A filter to find elements that intersect the solid geometry of a given element.
    
    ElementIntersectsElementFilter(element: Element, inverted: bool)
    ElementIntersectsElementFilter(element: Element)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def GetElement(self):
        """
        GetElement(self: ElementIntersectsElementFilter) -> Element
        
            Gets the target element.
            Returns: The element.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, element, inverted=None):
        """
        __new__(cls: type, element: Element, inverted: bool)
        __new__(cls: type, element: Element)
        """
        pass


class ElementIntersectsSolidFilter(ElementIntersectsFilter, IDisposable):
    """
    A filter to find elements that intersect the given solid geometry.
    
    ElementIntersectsSolidFilter(solid: Solid, inverted: bool)
    ElementIntersectsSolidFilter(solid: Solid)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def GetSolid(self):
        """
        GetSolid(self: ElementIntersectsSolidFilter) -> Solid
        
            Gets the target solid geometry.
            Returns: The solid geometry.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, solid, inverted=None):
        """
        __new__(cls: type, solid: Solid, inverted: bool)
        __new__(cls: type, solid: Solid)
        """
        pass


class ElementIsCurveDrivenFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to match elements which are curve driven.
    
    ElementIsCurveDrivenFilter(inverted: bool)
    ElementIsCurveDrivenFilter()
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, inverted=None):
        """
        __new__(cls: type, inverted: bool)
        __new__(cls: type)
        """
        pass


class ElementIsElementTypeFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to match elements which are ElementTypes.
    
    ElementIsElementTypeFilter(inverted: bool)
    ElementIsElementTypeFilter()
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, inverted=None):
        """
        __new__(cls: type, inverted: bool)
        __new__(cls: type)
        """
        pass


class ElementLevelFilter(ElementSlowFilter, IDisposable):
    """
    A filter used to match elements by their associated level.
    
    ElementLevelFilter(levelId: ElementId, inverted: bool)
    ElementLevelFilter(levelId: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, levelId, inverted=None):
        """
        __new__(cls: type, levelId: ElementId, inverted: bool)
        __new__(cls: type, levelId: ElementId)
        """
        pass

    LevelId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the level that will be matched to elements' associated level.

Get: LevelId(self: ElementLevelFilter) -> ElementId

"""



class ElementLogicalFilter(ElementFilter, IDisposable):
    """ A filter used to logically combine two or more filters. """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ElementMulticategoryFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to find elements whose category matches any of a given set of categories.
    
    ElementMulticategoryFilter(categories: ICollection[BuiltInCategory], inverted: bool)
    ElementMulticategoryFilter(categories: ICollection[BuiltInCategory])
    ElementMulticategoryFilter(categoryIds: ICollection[ElementId], inverted: bool)
    ElementMulticategoryFilter(categoryIds: ICollection[ElementId])
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def GetCategoryIds(self):
        """
        GetCategoryIds(self: ElementMulticategoryFilter) -> ICollection[ElementId]
        
            Gets the category ids assigned to this filter.
            Returns: The category ids.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, categories: ICollection[BuiltInCategory], inverted: bool)
        __new__(cls: type, categories: ICollection[BuiltInCategory])
        __new__(cls: type, categoryIds: ICollection[ElementId], inverted: bool)
        __new__(cls: type, categoryIds: ICollection[ElementId])
        """
        pass


class ElementMulticlassFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to match elements by their class, where more than one class of element may be passed.
    
    ElementMulticlassFilter(typeList: IList[Type], inverted: bool)
    ElementMulticlassFilter(typeList: IList[Type])
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, typeList, inverted=None):
        """
        __new__(cls: type, typeList: IList[Type], inverted: bool)
        __new__(cls: type, typeList: IList[Type])
        """
        pass


class ElementOnPhaseStatus(Enum, IComparable, IFormattable, IConvertible):
    """
    The statuses that an element can have with respect to a given phase.
    
    enum ElementOnPhaseStatus, values: Demolished (3), Existing (2), Future (6), New (4), None (0), Past (1), Temporary (5)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Demolished = None
    Existing = None
    Future = None
    New = None
    None = None
    Past = None
    Temporary = None
    value__ = None


class ElementOwnerViewFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to match elements which are owned by a particular view.
    
    ElementOwnerViewFilter(viewId: ElementId, inverted: bool)
    ElementOwnerViewFilter(viewId: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, viewId, inverted=None):
        """
        __new__(cls: type, viewId: ElementId, inverted: bool)
        __new__(cls: type, viewId: ElementId)
        """
        pass

    ViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The view id.

Get: ViewId(self: ElementOwnerViewFilter) -> ElementId

"""



class ElementParameterFilter(ElementSlowFilter, IDisposable):
    """
    A filter used to match elements by one or more parameter filter rules.
    
    ElementParameterFilter(filterRules: IList[FilterRule], inverted: bool)
    ElementParameterFilter(filterRules: IList[FilterRule])
    ElementParameterFilter(filterRule: FilterRule, inverted: bool)
    ElementParameterFilter(filterRule: FilterRule)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def GetRules(self):
        """
        GetRules(self: ElementParameterFilter) -> IList[FilterRule]
        
            Returns the set of rules contained in this filter.
            Returns: A copy of the set of rules.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, filterRules: IList[FilterRule], inverted: bool)
        __new__(cls: type, filterRules: IList[FilterRule])
        __new__(cls: type, filterRule: FilterRule, inverted: bool)
        __new__(cls: type, filterRule: FilterRule)
        """
        pass


class ElementPhaseStatusFilter(ElementSlowFilter, IDisposable):
    """
    A filter used to match elements that have a given phase status on a given phase.
    
    ElementPhaseStatusFilter(phaseId: ElementId, phaseStatuses: ICollection[ElementOnPhaseStatus], inverted: bool)
    ElementPhaseStatusFilter(phaseId: ElementId, phaseStatuses: ICollection[ElementOnPhaseStatus])
    ElementPhaseStatusFilter(phaseId: ElementId, phaseStatus: ElementOnPhaseStatus, inverted: bool)
    ElementPhaseStatusFilter(phaseId: ElementId, phaseStatus: ElementOnPhaseStatus)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def GetPhaseStatuses(self):
        """
        GetPhaseStatuses(self: ElementPhaseStatusFilter) -> ICollection[ElementOnPhaseStatus]
        
            Returns the phase statuses assigned to this filter.
            Returns: The phase statuses.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, phaseId, *__args):
        """
        __new__(cls: type, phaseId: ElementId, phaseStatuses: ICollection[ElementOnPhaseStatus], inverted: bool)
        __new__(cls: type, phaseId: ElementId, phaseStatuses: ICollection[ElementOnPhaseStatus])
        __new__(cls: type, phaseId: ElementId, phaseStatus: ElementOnPhaseStatus, inverted: bool)
        __new__(cls: type, phaseId: ElementId, phaseStatus: ElementOnPhaseStatus)
        """
        pass

    PhaseId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The phase id.

Get: PhaseId(self: ElementPhaseStatusFilter) -> ElementId

"""



class ElementRecord(object, IDisposable):
    """ A record in the Revit database representing an element. """
    def Dispose(self):
        """ Dispose(self: ElementRecord) """
        pass

    def GetBoundingBox(self):
        """
        GetBoundingBox(self: ElementRecord) -> Outline
        
            Gets the bounding box of the element record.
            Returns: The bounding box outline. ll if there is no bounding box for this element.
        """
        pass

    def GetCategoryId(self):
        """
        GetCategoryId(self: ElementRecord) -> ElementId
        
            Gets the category id of the element record.
            Returns: The category id.
        """
        pass

    def GetDesignOptionId(self):
        """
        GetDesignOptionId(self: ElementRecord) -> ElementId
        
            Gets the design option id of the element record.
            Returns: The design option id.
        """
        pass

    def GetId(self):
        """
        GetId(self: ElementRecord) -> ElementId
        
            Gets the id of the element record.
            Returns: The element id.
        """
        pass

    def GetOwnerViewId(self):
        """
        GetOwnerViewId(self: ElementRecord) -> ElementId
        
            Gets the element id of the owner view record.
            Returns: The view record element id.
        """
        pass

    def HasBoundingBox(self):
        """
        HasBoundingBox(self: ElementRecord) -> bool
        
            Determines whether this element record has a bounding box.
            Returns: True if the element record has a bounding box or false otherwise.
        """
        pass

    def IsAnElementType(self):
        """
        IsAnElementType(self: ElementRecord) -> bool
        
            Identifies if the element record represents an ElementType.
            Returns: True if the element record represents an ElementType.
        """
        pass

    def IsCurveDriven(self):
        """
        IsCurveDriven(self: ElementRecord) -> bool
        
            Identifies if the element is curve driven.
            Returns: True if the element is curve driven.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementRecord, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ElementRecord) -> bool

"""

    WorksetId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get Id of the workset which owns the element.

Get: WorksetId(self: ElementRecord) -> WorksetId

"""



class ElementReferenceType(Enum, IComparable, IFormattable, IConvertible):
    """
    Element reference types.
    
    enum ElementReferenceType, values: REFERENCE_TYPE_CUT_EDGE (5), REFERENCE_TYPE_FOREIGN (3), REFERENCE_TYPE_INSTANCE (4), REFERENCE_TYPE_LINEAR (1), REFERENCE_TYPE_MESH (6), REFERENCE_TYPE_NONE (0), REFERENCE_TYPE_SURFACE (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    REFERENCE_TYPE_CUT_EDGE = None
    REFERENCE_TYPE_FOREIGN = None
    REFERENCE_TYPE_INSTANCE = None
    REFERENCE_TYPE_LINEAR = None
    REFERENCE_TYPE_MESH = None
    REFERENCE_TYPE_NONE = None
    REFERENCE_TYPE_SURFACE = None
    value__ = None


class ElementSet(APIObject, IDisposable, IEnumerable):
    """
    A set that contains element objects.
    
    ElementSet()
    """
    def Clear(self):
        """
        Clear(self: ElementSet)
            Removes every item element the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: ElementSet, item: Element) -> bool
        
            Tests for the existence of an element within the set.
        
            item: The element to be searched for.
            Returns: The Contains method returns True if the element is within the set, otherwise 
             False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ElementSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: ElementSet, item: Element) -> int
        
            Removes a specified element from the set.
        
            item: The element to be erased.
            Returns: The number of elements that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ElementSet) -> ElementSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ElementSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: ElementSet, item: Element) -> bool
        
            Insert the specified element into the set.
        
            item: The element to be inserted into the set.
            Returns: Returns whether the element was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ElementSet) -> ElementSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: ElementSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of elements that are in the set.

Get: Size(self: ElementSet) -> int

"""



class ElementSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to an element set.
    
    ElementSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: ElementSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ElementSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Reset(self):
        """
        Reset(self: ElementSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ElementSetIterator) -> object

"""



class ElementStructuralTypeFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to find elements matching a structural type.
    
    ElementStructuralTypeFilter(structuralType: StructuralType, inverted: bool)
    ElementStructuralTypeFilter(structuralType: StructuralType)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, structuralType, inverted=None):
        """
        __new__(cls: type, structuralType: StructuralType, inverted: bool)
        __new__(cls: type, structuralType: StructuralType)
        """
        pass

    StructuralType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The structural type.

Get: StructuralType(self: ElementStructuralTypeFilter) -> StructuralType

"""



class ElementTransformUtils(object):
    """ A collection of utilities allowing transformation of elements (e.g. move, rotate, mirror and copy). """
    @staticmethod
    def CanMirrorElement(ADoc, elemId):
        """
        CanMirrorElement(ADoc: Document, elemId: ElementId) -> bool
        
            Determines whether element can be mirrored.
        
            ADoc: The document where the element reside.
            elemId: The element identified by id.
            Returns: True if the element can be mirrored.
        """
        pass

    @staticmethod
    def CanMirrorElements(ADoc, elemIds):
        """ CanMirrorElements(ADoc: Document, elemIds: ICollection[ElementId]) -> bool """
        pass

    @staticmethod
    def CopyElement(document, elementToCopy, translation):
        """
        CopyElement(document: Document, elementToCopy: ElementId, translation: XYZ) -> ICollection[ElementId]
        
            Copies an element and places the copy at a location indicated by a given 
             transformation.
        
        
            document: The document that owns the element.
            elementToCopy: The id of the element to copy.
            translation: The translation vector for the new element.
            Returns: The ids of the newly created copied elements.  More than one element may be 
             created due to dependencies.
        """
        pass

    @staticmethod
    def CopyElements(*__args):
        """
        CopyElements(document: Document, elementsToCopy: ICollection[ElementId], translation: XYZ) -> ICollection[ElementId]
        CopyElements(sourceDocument: Document, elementsToCopy: ICollection[ElementId], destinationDocument: Document, transform: Transform, options: CopyPasteOptions) -> ICollection[ElementId]
        CopyElements(sourceView: View, elementsToCopy: ICollection[ElementId], destinationView: View, additionalTransform: Transform, options: CopyPasteOptions) -> ICollection[ElementId]
        """
        pass

    @staticmethod
    def GetTransformFromViewToView(sourceView, destinationView):
        """
        GetTransformFromViewToView(sourceView: View, destinationView: View) -> Transform
        
            Returns a transformation that is applied to elements when copying from one view 
             to another view.
        
        
            sourceView: The source view
            destinationView: The destination view
            Returns: The transformation from source view to destination view.
        """
        pass

    @staticmethod
    def MirrorElement(document, elementToMirror, plane):
        """
        MirrorElement(document: Document, elementToMirror: ElementId, plane: Plane)
            Creates a mirrored copy of an element about a given plane.
        
            document: The document that owns the element.
            elementToMirror: The element to mirror.
            plane: The mirror plane.
        """
        pass

    @staticmethod
    def MirrorElements(document, elementsToMirror, plane, mirrorCopies):
        """ MirrorElements(document: Document, elementsToMirror: ICollection[ElementId], plane: Plane, mirrorCopies: bool) -> IList[ElementId] """
        pass

    @staticmethod
    def MoveElement(document, elementToMove, translation):
        """
        MoveElement(document: Document, elementToMove: ElementId, translation: XYZ)
            Moves one element by a given transformation.
        
            document: The document that owns the elements.
            elementToMove: The id of the element to move.
            translation: The translation vector for the elements.
        """
        pass

    @staticmethod
    def MoveElements(document, elementsToMove, translation):
        """ MoveElements(document: Document, elementsToMove: ICollection[ElementId], translation: XYZ) """
        pass

    @staticmethod
    def RotateElement(document, elementToRotate, axis, angle):
        """
        RotateElement(document: Document, elementToRotate: ElementId, axis: Line, angle: float)
            Rotates an element about the given axis and angle.
        
            document: The document that owns the elements.
            elementToRotate: The element to rotate.
            axis: The axis of rotation.
            angle: The angle of rotation in radians.
        """
        pass

    @staticmethod
    def RotateElements(document, elementsToRotate, axis, angle):
        """ RotateElements(document: Document, elementsToRotate: ICollection[ElementId], axis: Line, angle: float) """
        pass

    __all__ = [
        'CanMirrorElement',
        'CanMirrorElements',
        'CopyElement',
        'CopyElements',
        'GetTransformFromViewToView',
        'MirrorElement',
        'MirrorElements',
        'MoveElement',
        'MoveElements',
        'RotateElement',
        'RotateElements',
    ]


class ElementTypeGroup(Enum, IComparable, IFormattable, IConvertible):
    """
    The element type group.
    
    enum ElementTypeGroup, values: AnalyticalLinkType (136), AngularDimensionType (37), ArcLengthDimensionType (38), AreaLoadType (82), AreaReinforcementType (87), AttachedDetailGroupType (34), BeamSystemType (54), BuildingPadType (43), CableTrayType (122), CalloutType (22), CeilingType (6), ColorFillType (143), ConduitType (123), ContourLabelingType (46), CorniceType (16), CurtainSystemType (58), DecalType (45), DetailGroupType (33), DiameterDimensionType (126), DuctInsulationType (120), DuctLiningType (121), DuctType (97), EdgeSlabType (50), EndTreatmentType (146), FabricAreaType (90), FabricSheetType (91), FasciaType (48), FilledRegionType (35), FlexDuctType (98), FlexPipeType (101), FloorType (4), FootingSlabType (5), GridType (8), GutterType (49), LevelType (9), LinearDimensionType (10), LineLoadType (83), ModelGroupType (32), ModelTextType (14), MultiReferenceAnnotationType (140), PathReinforcementType (88), PipeInsulationType (119), PipeType (100), PointLoadType (84), RadialDimensionType (36), RailingsTypeForRamps (1), RailingsTypeForStairs (0), RampType (28), RebarBarType (85), RebarContainerType (144), ReferenceViewerType (21), RepeatingDetailType (53), RevealType (17), RoofSoffitType (47), RoofType (3), SpotCoordinateType (106), SpotElevationType (11), SpotSlopeType (108), StairsBySketchType (7), StairsRailingType (30), StairsType (127), StructuralConnectionHandlerType (145), TagNoteType (13), TextNoteType (12), ViewportType (19), ViewType3D (62), ViewTypeCeilingPlan (72), ViewTypeCostReport (67), ViewTypeDetailView (74), ViewTypeDrafting (69), ViewTypeElevation (75), ViewTypeFloorPlan (71), ViewTypeGraphScheduleColumn (107), ViewTypeLegend (66), ViewTypeLoadsReport (78), ViewTypePanelSchedule (80), ViewTypePressureLossReport (79), ViewTypeRendering (64), ViewTypeSchedule (65), ViewTypeSection (73), ViewTypeSheet (68), ViewTypeStructuralElevation (76), ViewTypeStructuralPlan (70), ViewTypeWalkthrough (63), WallFoundationType (109), WallType (2), WireType (102)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AnalyticalLinkType = None
    AngularDimensionType = None
    ArcLengthDimensionType = None
    AreaLoadType = None
    AreaReinforcementType = None
    AttachedDetailGroupType = None
    BeamSystemType = None
    BuildingPadType = None
    CableTrayType = None
    CalloutType = None
    CeilingType = None
    ColorFillType = None
    ConduitType = None
    ContourLabelingType = None
    CorniceType = None
    CurtainSystemType = None
    DecalType = None
    DetailGroupType = None
    DiameterDimensionType = None
    DuctInsulationType = None
    DuctLiningType = None
    DuctType = None
    EdgeSlabType = None
    EndTreatmentType = None
    FabricAreaType = None
    FabricSheetType = None
    FasciaType = None
    FilledRegionType = None
    FlexDuctType = None
    FlexPipeType = None
    FloorType = None
    FootingSlabType = None
    GridType = None
    GutterType = None
    LevelType = None
    LinearDimensionType = None
    LineLoadType = None
    ModelGroupType = None
    ModelTextType = None
    MultiReferenceAnnotationType = None
    PathReinforcementType = None
    PipeInsulationType = None
    PipeType = None
    PointLoadType = None
    RadialDimensionType = None
    RailingsTypeForRamps = None
    RailingsTypeForStairs = None
    RampType = None
    RebarBarType = None
    RebarContainerType = None
    ReferenceViewerType = None
    RepeatingDetailType = None
    RevealType = None
    RoofSoffitType = None
    RoofType = None
    SpotCoordinateType = None
    SpotElevationType = None
    SpotSlopeType = None
    StairsBySketchType = None
    StairsRailingType = None
    StairsType = None
    StructuralConnectionHandlerType = None
    TagNoteType = None
    TextNoteType = None
    value__ = None
    ViewportType = None
    ViewType3D = None
    ViewTypeCeilingPlan = None
    ViewTypeCostReport = None
    ViewTypeDetailView = None
    ViewTypeDrafting = None
    ViewTypeElevation = None
    ViewTypeFloorPlan = None
    ViewTypeGraphScheduleColumn = None
    ViewTypeLegend = None
    ViewTypeLoadsReport = None
    ViewTypePanelSchedule = None
    ViewTypePressureLossReport = None
    ViewTypeRendering = None
    ViewTypeSchedule = None
    ViewTypeSection = None
    ViewTypeSheet = None
    ViewTypeStructuralElevation = None
    ViewTypeStructuralPlan = None
    ViewTypeWalkthrough = None
    WallFoundationType = None
    WallType = None
    WireType = None


class ElementWorksetFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to match elements which reside in a given workset.
    
    ElementWorksetFilter(worksetId: WorksetId, inverted: bool)
    ElementWorksetFilter(worksetId: WorksetId)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, worksetId, inverted=None):
        """
        __new__(cls: type, worksetId: WorksetId, inverted: bool)
        __new__(cls: type, worksetId: WorksetId)
        """
        pass

    WorksetId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The workset id.

Get: WorksetId(self: ElementWorksetFilter) -> WorksetId

"""



class ElevationMarker(Element, IDisposable):
    """ ElevationMarkers either host elevation ViewSection views or view references. """
    def CreateElevation(self, document, viewPlanId, index):
        """
        CreateElevation(self: ElevationMarker, document: Document, viewPlanId: ElementId, index: int) -> ViewSection
        
            Creates a new elevation ViewSection on the ElevationMarker at the desired index.
        
            document: The document to which the new elevation ViewSection will be added.
            viewPlanId: The id of a ViewPlan in which the ElevationMarker is visible.  The new 
             elevation ViewSection will derive its extents
           and inherit settings from the 
             ViewPlan.
        
            index: The index on the ElevationMarker where the new elevation ViewSection will be 
             placed.
           The index on the ElevationMarker must be valid and unused.
           View 
             direction is determined by the index.
        
            Returns: The new elevation ViewSection.
        """
        pass

    @staticmethod
    def CreateElevationMarker(document, viewFamilyTypeId, origin, initialViewScale):
        """
        CreateElevationMarker(document: Document, viewFamilyTypeId: ElementId, origin: XYZ, initialViewScale: int) -> ElevationMarker
        
            Creates a new ElevationMarker.
        
            document: The document to which the new ElevationMarker will be added.
            viewFamilyTypeId: This ViewFamilyType will be used by all elevations hosted on the new 
             ElevationMarker.
        
            origin: The desired origin for the ElevationMarker.
            initialViewScale: This view scale will be automatically applied to new elevations created on the 
             ElevationMarker.
           The scale is the ratio of true model size to paper size.
        
            Returns: The new ElevationMarker.
        """
        pass

    def CreateReferenceElevation(self, document, index, viewIdToReference):
        """
        CreateReferenceElevation(self: ElevationMarker, document: Document, index: int, viewIdToReference: ElementId)
            Creates a reference elevation on the ElevationMarker at the desired index.
        
            document: The document to which the new reference elevation will be added.
            index: The index on the ElevationMarker where the reference elevation will be placed.
            viewIdToReference: The view which will be referenced.
        """
        pass

    @staticmethod
    def CreateReferenceElevationMarker(document, viewFamilyTypeId, origin, viewPlanId):
        """
        CreateReferenceElevationMarker(document: Document, viewFamilyTypeId: ElementId, origin: XYZ, viewPlanId: ElementId) -> ElevationMarker
        
            Creates a new ElevationMarker.
        
            document: The document to which the new ElevationMarker will be added.
            viewFamilyTypeId: This ViewFamilyType will be used by all elevations hosted on the new 
             ElevationMarker.
        
            origin: The desired origin for the ElevationMarker.
            viewPlanId: The ViewPlan in which the reference ElevationMarker will appear.  Reference 
             ElevationMarkers only appear in one view.
        
            Returns: The new ElevationMarker.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetViewId(self, index):
        """
        GetViewId(self: ElevationMarker, index: int) -> ElementId
        
            Returns the ViewSection id for the index of the ElevationMarker.
        
            index: The index of the ElevationMarker for which a ViewSection id will be returned.
            Returns: ViewSection id of the view at the ElevationMarker index, invalid element id 
             otherwise.
        """
        pass

    def HasElevations(self):
        """
        HasElevations(self: ElevationMarker) -> bool
        
            Returns true if the ElevationMarker has at least one elevation view, false 
             otherwise.
        
            Returns: True if the ElevationMarker has at least one elevation view, false otherwise.
        """
        pass

    def IsAvailableIndex(self, index):
        """
        IsAvailableIndex(self: ElevationMarker, index: int) -> bool
        
            Returns true if a new elevation ViewSection can be placed at %index%, returns 
             false otherwise.
        
        
            index: The index of the ElevationMarker which will be checked.
            Returns: True if an elevation can be created at %index%, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CurrentViewCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current number of views hosted by this ElevationMarker.

Get: CurrentViewCount(self: ElevationMarker) -> int

"""

    IsReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if this is a reference ElevationMarker.
   Only reference elevations can be hosted by reference ElevationMarkers.

Get: IsReference(self: ElevationMarker) -> bool

"""

    MaximumViewCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The maximum number of views that can be hosted by this ElevationMarker.

Get: MaximumViewCount(self: ElevationMarker) -> int

"""



class Ellipse(Curve, IDisposable):
    """ A whole or partial ellipse. """
    @staticmethod
    def Create(center, xRadius, yRadius, xAxis, yAxis, startParameter, endParameter):
        """
        Create(center: XYZ, xRadius: float, yRadius: float, xAxis: XYZ, yAxis: XYZ, startParameter: float, endParameter: float) -> Ellipse
        
            Creates a new geometric ellipse or elliptical arc object.
        
            center: The center.
            xRadius: The x vector radius of the ellipse.
            yRadius: The y vector radius of the ellipse.
            xAxis: The x axis to define the ellipse plane.  Must be normalized.
            yAxis: The y axis to define the ellipse plane.   Must be normalized.
            startParameter: The raw parameter value at the start of the ellipse.
            endParameter: The raw parameter value at the end of the ellipse.
            Returns: The new ellipse or elliptical arc.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the center of the ellipse.

Get: Center(self: Ellipse) -> XYZ

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the normal to the plane in which the ellipse is defined.

Get: Normal(self: Ellipse) -> XYZ

"""

    RadiusX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the X vector radius of the ellipse.

Get: RadiusX(self: Ellipse) -> float

"""

    RadiusY = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Y vector radius of the ellipse.

Get: RadiusY(self: Ellipse) -> float

"""

    XDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The X direction.

Get: XDirection(self: Ellipse) -> XYZ

"""

    YDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Y direction.

Get: YDirection(self: Ellipse) -> XYZ

"""



class EndCapCondition(Enum, IComparable, IFormattable, IConvertible):
    """
    Used by CompoundStructure to describe which shell layers participate in end wrapping.
    
    enum EndCapCondition, values: Exterior (1), Interior (2), NoEndCap (3), None (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Exterior = None
    Interior = None
    NoEndCap = None
    None = None
    value__ = None


class ExclusionFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to exclude a set of elements automatically.
    
    ExclusionFilter(idsToExclude: ICollection[ElementId])
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def GetIdsToExclude(self):
        """
        GetIdsToExclude(self: ExclusionFilter) -> ICollection[ElementId]
        
            Returns the ids to be excluded by this filter.
            Returns: The collection of ids to exclude.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, idsToExclude):
        """ __new__(cls: type, idsToExclude: ICollection[ElementId]) """
        pass


class ExportColorMode(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing export color mode.
    
    enum ExportColorMode, values: IndexColors (0), TrueColor (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    IndexColors = None
    TrueColor = None
    value__ = None


class ExportColumnHeaders(Enum, IComparable, IFormattable, IConvertible):
    """
    Options for exporting column headers in schedule view export.
    
    enum ExportColumnHeaders, values: MultipleRows (2), None (0), OneRow (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    MultipleRows = None
    None = None
    OneRow = None
    value__ = None


class ExportDGNSettings(Element, IDisposable):
    """ This element contains DGN export settings which are saved in a Revit document. """
    @staticmethod
    def Create(document, name, options=None):
        """
        Create(document: Document, name: str) -> ExportDGNSettings
        
            Create a DGN export settings with default values.
        
            document: Document where created settings is saved.
            name: The name specified to this settings.
            Returns: The new DGN export settings instance.
        Create(document: Document, name: str, options: DGNExportOptions) -> ExportDGNSettings
        
            Create DGN export settings with specified values in DGNExportOptions.
        
            document: Document where created settings is saved.
            name: The name specified to this settings.
            options: The options which will be stored in these settings.
            Returns: The new DGN export settings instance.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetDGNExportOptions(self):
        """
        GetDGNExportOptions(self: ExportDGNSettings) -> DGNExportOptions
        
            Gets the options stored in the these settings.
            Returns: The options.
        """
        pass

    @staticmethod
    def ListNames(aDoc):
        """
        ListNames(aDoc: Document) -> IList[str]
        
            Returns a list of names of dgn export settings.
        
            aDoc: A Revit document to retrieve names from
            Returns: An array of strings representing names of predefined setups.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def SetDGNExportOptions(self, options):
        """
        SetDGNExportOptions(self: ExportDGNSettings, options: DGNExportOptions)
            Sets the options stored in these settings.
        
            options: The options.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ExportDWGSettings(Element, IDisposable):
    """ This element contains DWG/DXF export settings which are saved in a Revit document. """
    @staticmethod
    def Create(document, name, options=None):
        """
        Create(document: Document, name: str) -> ExportDWGSettings
        
            Create a DWG export settings with default values.
        
            document: Document where created settings is saved.
            name: The name specified to this settings.
            Returns: The new DWG export settings instance.
        Create(document: Document, name: str, options: DWGExportOptions) -> ExportDWGSettings
        
            Create a DWG export settings with default values.
        
            document: Document where created settings is saved.
            name: The name specified to this settings.
            options: Initialize settings by using values in DWGExportOptions.
            Returns: The new DWG export settings instance.
        Create(document: Document, name: str, options: DXFExportOptions) -> ExportDWGSettings
        
            Create a DWG export settings with default values.
        
            document: Document where created settings is saved.
            name: The name specified to this settings.
            options: Initialize settings by using values in DXFExportOptions.
            Returns: The new DWG export settings instance.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetDWGExportOptions(self):
        """
        GetDWGExportOptions(self: ExportDWGSettings) -> DWGExportOptions
        
            Gets the options stored in the these settings.
            Returns: The options.
        """
        pass

    def GetDXFExportOptions(self):
        """
        GetDXFExportOptions(self: ExportDWGSettings) -> DXFExportOptions
        
            Gets the options stored in the these settings.
            Returns: The options
        """
        pass

    @staticmethod
    def ListNames(aDoc):
        """
        ListNames(aDoc: Document) -> IList[str]
        
            Returns a list of names of dwg/dxf export settings.
        
            aDoc: A Revit document to retrieve names from.
            Returns: An array of strings representing names of predefined setups.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def SetDWGExportOptions(self, options):
        """
        SetDWGExportOptions(self: ExportDWGSettings, options: DWGExportOptions)
            Sets the options stored in these settings.
        
            options: The options.
        """
        pass

    def SetDXFExportOptions(self, options):
        """
        SetDXFExportOptions(self: ExportDWGSettings, options: DXFExportOptions)
            Sets the options stored in these settings.
        
            options: The options.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ExportEnergyModelType(Enum, IComparable, IFormattable, IConvertible):
    """
    This enum is used to define if energy model used for gbXML export should be based on rooms/spaces or building elements.
    
    enum ExportEnergyModelType, values: BuildingElement (1), SpatialElement (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BuildingElement = None
    SpatialElement = None
    value__ = None


class ExportFontInfo(object, IDisposable):
    """
    A value used to represent the info stored in an Autodesk.Revit.DB.ExportFontTable.
    
    ExportFontInfo(destinationFontName: str)
    ExportFontInfo()
    ExportFontInfo(other: ExportFontInfo)
    """
    def Dispose(self):
        """ Dispose(self: ExportFontInfo) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportFontInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, destinationFontName: str)
        __new__(cls: type)
        __new__(cls: type, other: ExportFontInfo)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DestinationFontName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The destination font name (the name of the font in the exported format).

Get: DestinationFontName(self: ExportFontInfo) -> str

Set: DestinationFontName(self: ExportFontInfo) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportFontInfo) -> bool

"""



class ExportFontKey(object, IDisposable):
    """
    A key used to represent an item stored in an Autodesk.Revit.DB.ExportFontTable.
    
    ExportFontKey(originalFontName: str)
    ExportFontKey()
    ExportFontKey(other: ExportFontKey)
    """
    def Dispose(self):
        """ Dispose(self: ExportFontKey) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportFontKey, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, originalFontName: str)
        __new__(cls: type)
        __new__(cls: type, other: ExportFontKey)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportFontKey) -> bool

"""

    OriginalFontName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The original font name.

Get: OriginalFontName(self: ExportFontKey) -> str

Set: OriginalFontName(self: ExportFontKey) = value
"""



class ExportFontTable(object, IEnumerable[KeyValuePair[ExportFontKey, ExportFontInfo]], IEnumerable, IDisposable):
    """
    A table supporting a mapping of Revit font names to font names that will be set
       in the target export format.
    
    ExportFontTable()
    """
    def Add(self, exportFontKey, exportFontInfo):
        """
        Add(self: ExportFontTable, exportFontKey: ExportFontKey, exportFontInfo: ExportFontInfo)
            Inserts a (key,info) pair into Export font table.
        
            exportFontKey: The export font key to be added.
            exportFontInfo: The export font info to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: ExportFontTable)
            Removes all contents stored in the table.
        """
        pass

    def ContainsKey(self, exportfontKey):
        """
        ContainsKey(self: ExportFontTable, exportfontKey: ExportFontKey) -> bool
        
            Checks whether a font key exists in the table.
        
            exportfontKey: The export font Key.
            Returns: True if the font key exists in the table.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ExportFontTable) """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ExportFontTable) -> IEnumerator[KeyValuePair[ExportFontKey, ExportFontInfo]]
        
            Returns an enumerator that iterates through a collection.
            Returns: An IEnumerator object that can be used to iterate through the collection.
        """
        pass

    def GetExportFontInfo(self, exportFontKey):
        """
        GetExportFontInfo(self: ExportFontTable, exportFontKey: ExportFontKey) -> ExportFontInfo
        
            Gets a copy of the font info associated to the input font key.
        
            exportFontKey: The export font Key.
            Returns: Returns the fontInfo for this key.
        """
        pass

    def GetFontTableIterator(self):
        """
        GetFontTableIterator(self: ExportFontTable) -> ExportFontTableIterator
        
            Returns a FontTableIterator that iterates through the collection.
            Returns: A FontTableIterator object that can be used to iterate through key-value pairs 
             in the collection.
        """
        pass

    def GetKeys(self):
        """
        GetKeys(self: ExportFontTable) -> IList[ExportFontKey]
        
            Returns a collection of the keys stored in this table.
            Returns: The collection of keys.
        """
        pass

    def GetValues(self):
        """
        GetValues(self: ExportFontTable) -> IList[ExportFontInfo]
        
            Returns a collection of the values stored in this table.
            Returns: The collection of values.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportFontTable, disposing: bool) """
        pass

    def Remove(self, exportFontKey):
        """
        Remove(self: ExportFontTable, exportFontKey: ExportFontKey)
            Removes the pair (key, info) by font key.
        
            exportFontKey: The export font key.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyValuePair[ExportFontKey, ExportFontInfo]](enumerable: IEnumerable[KeyValuePair[ExportFontKey, ExportFontInfo]], value: KeyValuePair[ExportFontKey, ExportFontInfo]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Count of the items contained in the collection.

Get: Count(self: ExportFontTable) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportFontTable) -> bool

"""



class ExportFontTableIterator(object, IEnumerator[KeyValuePair[ExportFontKey, ExportFontInfo]], IDisposable, IEnumerator):
    """ An iterator to a set of font table. """
    def Dispose(self):
        """ Dispose(self: ExportFontTableIterator) """
        pass

    def IsDone(self):
        """
        IsDone(self: ExportFontTableIterator) -> bool
        
            Identifies if the iteration has completed.
            Returns: True if the iteration has no more items.  False if there are more items to be 
             iterated.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ExportFontTableIterator) -> bool
        
            Increments the iterator to the next item.
            Returns: True if there is a next available item in this iterator.
           False if the 
             iterator has completed all available items.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportFontTableIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: ExportFontTableIterator)
            Resets the iterator to the initial state.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyValuePair[ExportFontKey, ExportFontInfo]](enumerator: IEnumerator[KeyValuePair[ExportFontKey, ExportFontInfo]], value: KeyValuePair[ExportFontKey, ExportFontInfo]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: ExportFontTableIterator) -> KeyValuePair[ExportFontKey, ExportFontInfo]

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportFontTableIterator) -> bool

"""



class ExportLayerInfo(object, IDisposable):
    """
    A value used to represent the info stored in the Autodesk.Revit.DB.ExportLayerTable.
    
    ExportLayerInfo()
    """
    def AddCutLayerModifier(self, layerModifier):
        """
        AddCutLayerModifier(self: ExportLayerInfo, layerModifier: LayerModifier)
            Adds a cut layer modifier to the layer info.
        
            layerModifier: The cut layer modifier.
        """
        pass

    def AddLayerModifier(self, layerModifier):
        """
        AddLayerModifier(self: ExportLayerInfo, layerModifier: LayerModifier)
            Adds a project layer modifier to the layer info.
        
            layerModifier: The project layer modifier.
        """
        pass

    def ClearCutLayerModifiers(self):
        """
        ClearCutLayerModifiers(self: ExportLayerInfo)
            Clears all the cut layer modifiers stored in the layer info.
        """
        pass

    def ClearLayerModifiers(self):
        """
        ClearLayerModifiers(self: ExportLayerInfo)
            Clears all the project layer modifiers stored in the layer info.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ExportLayerInfo) """
        pass

    def GetCutLayerModifiers(self):
        """
        GetCutLayerModifiers(self: ExportLayerInfo) -> IList[LayerModifier]
        
            Gets all the cut layer modifiers from the layer info.
            Returns: The cut layer modifier array.
        """
        pass

    def GetLayerModifiers(self):
        """
        GetLayerModifiers(self: ExportLayerInfo) -> IList[LayerModifier]
        
            Gets all the project layer modifiers from the layer info.
            Returns: The project layer modifier array.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLayerInfo, disposing: bool) """
        pass

    def RemoveCutLayerModifier(self, layerModifier):
        """
        RemoveCutLayerModifier(self: ExportLayerInfo, layerModifier: LayerModifier)
            Removes a cut layer modifier from the layer info.
        
            layerModifier: The cut layer modifier.
        """
        pass

    def RemoveLayerModifier(self, layerModifier):
        """
        RemoveLayerModifier(self: ExportLayerInfo, layerModifier: LayerModifier)
            Removes a project layer modifier from the layer info.
        
            layerModifier: The project layer modifier.
        """
        pass

    def SetCutLayerModifiers(self, cutLayermodifiers):
        """ SetCutLayerModifiers(self: ExportLayerInfo, cutLayermodifiers: IList[LayerModifier]) """
        pass

    def SetLayerModifiers(self, layermodifiers):
        """ SetLayerModifiers(self: ExportLayerInfo, layermodifiers: IList[LayerModifier]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    CategoryType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The category type which this layer belongs to.

Get: CategoryType(self: ExportLayerInfo) -> LayerCategoryType

Set: CategoryType(self: ExportLayerInfo) = value
"""

    ColorName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color name stored in value.
   For IFC export, the naming is to match the "colornumber" setting -- really, this stores a string
   that generates the colorNumber (for formats that don't use the color but need a second entry.)

Get: ColorName(self: ExportLayerInfo) -> str

Set: ColorName(self: ExportLayerInfo) = value
"""

    ColorNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color number stored in value.

Get: ColorNumber(self: ExportLayerInfo) -> int

Set: ColorNumber(self: ExportLayerInfo) = value
"""

    CutColorNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cut color number stored in value.

Get: CutColorNumber(self: ExportLayerInfo) -> int

Set: CutColorNumber(self: ExportLayerInfo) = value
"""

    CutLayerName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cut layer name stored in value.

Get: CutLayerName(self: ExportLayerInfo) -> str

Set: CutLayerName(self: ExportLayerInfo) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLayerInfo) -> bool

"""

    LayerName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The layer name stored in value.

Get: LayerName(self: ExportLayerInfo) -> str

Set: LayerName(self: ExportLayerInfo) = value
"""



class ExportLayerKey(object, IDisposable):
    """
    A key used to represent an item stored in an Autodesk.Revit.DB.ExportLayerTable.
    
    ExportLayerKey(categoryName: str, subCategoryName: str, num: SpecialType)
    ExportLayerKey()
    """
    def Dispose(self):
        """ Dispose(self: ExportLayerKey) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLayerKey, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, categoryName=None, subCategoryName=None, num=None):
        """
        __new__(cls: type, categoryName: str, subCategoryName: str, num: SpecialType)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    CategoryName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The category name.

Get: CategoryName(self: ExportLayerKey) -> str

Set: CategoryName(self: ExportLayerKey) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLayerKey) -> bool

"""

    SpecialType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The special type for layer key.

Get: SpecialType(self: ExportLayerKey) -> SpecialType

Set: SpecialType(self: ExportLayerKey) = value
"""

    SubCategoryName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The subcategrory Name.

Get: SubCategoryName(self: ExportLayerKey) -> str

Set: SubCategoryName(self: ExportLayerKey) = value
"""



class ExportLayerTable(object, IEnumerable[KeyValuePair[ExportLayerKey, ExportLayerInfo]], IEnumerable, IDisposable):
    """
    A table supporting a mapping of category and subcategory to layer name and other layer properties that will be set
       in the target export format.
    
    ExportLayerTable()
    """
    def Add(self, exportLayerKey, exportLayerInfo):
        """
        Add(self: ExportLayerTable, exportLayerKey: ExportLayerKey, exportLayerInfo: ExportLayerInfo)
            Inserts a (key,info) pair into Export layer table.
        
            exportLayerKey: The export layer key to be added.
            exportLayerInfo: The export layer info to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: ExportLayerTable)
            Removes all contents stored in the table.
        """
        pass

    def ContainsKey(self, exportlayerKey):
        """
        ContainsKey(self: ExportLayerTable, exportlayerKey: ExportLayerKey) -> bool
        
            Checks whether a layer key exists in the table.
        
            exportlayerKey: The export layer Key.
            Returns: True if the layer key exists in the table.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ExportLayerTable) """
        pass

    @staticmethod
    def GetAvaliableLayerModifierTypes(document, exportLayerKey):
        """
        GetAvaliableLayerModifierTypes(document: Document, exportLayerKey: ExportLayerKey) -> IList[ModifierType]
        
            Gets all the avaliable layer modifier types for the layer key.
        
            document: A Revit document to retrieve avaliable layer modifier types from.
            exportLayerKey: The export layer key to specify wich category and subCategory will be used to 
             get the layer modifier types.
        
            Returns: The layer modifier types.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ExportLayerTable) -> IEnumerator[KeyValuePair[ExportLayerKey, ExportLayerInfo]]
        
            Returns an enumerator that iterates through a collection.
            Returns: An IEnumerator object that can be used to iterate through the collection.
        """
        pass

    def GetExportLayerInfo(self, exportLayerKey):
        """
        GetExportLayerInfo(self: ExportLayerTable, exportLayerKey: ExportLayerKey) -> ExportLayerInfo
        
            Gets a copy of the layer info associated to the input pattern key.
        
            exportLayerKey: The export layer Key.
            Returns: Return the layerInfo for this key.
        """
        pass

    def GetKeys(self):
        """
        GetKeys(self: ExportLayerTable) -> IList[ExportLayerKey]
        
            Gets all the keys stored in the map.
            Returns: Return the key array.
        """
        pass

    def GetLayerTableIterator(self):
        """
        GetLayerTableIterator(self: ExportLayerTable) -> ExportLayerTableIterator
        
            Returns a LayerTableIterator that iterates through the collection.
            Returns: A LayerTableIterator object that can be used to iterate through key-value pairs 
             in the collection.
        """
        pass

    def GetValues(self):
        """
        GetValues(self: ExportLayerTable) -> IList[ExportLayerInfo]
        
            Returns all the values stored in the map.
            Returns: Return the info array.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLayerTable, disposing: bool) """
        pass

    def Remove(self, exportLayerKey):
        """
        Remove(self: ExportLayerTable, exportLayerKey: ExportLayerKey)
            Removes the pair (key, info) by pattern key.
        
            exportLayerKey: The export pattern key.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyValuePair[ExportLayerKey, ExportLayerInfo]](enumerable: IEnumerable[KeyValuePair[ExportLayerKey, ExportLayerInfo]], value: KeyValuePair[ExportLayerKey, ExportLayerInfo]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Count of the items contained in the collection.

Get: Count(self: ExportLayerTable) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLayerTable) -> bool

"""



class ExportLayerTableIterator(object, IEnumerator[KeyValuePair[ExportLayerKey, ExportLayerInfo]], IDisposable, IEnumerator):
    """ An iterator to a set of Layer table. """
    def Dispose(self):
        """ Dispose(self: ExportLayerTableIterator) """
        pass

    def IsDone(self):
        """
        IsDone(self: ExportLayerTableIterator) -> bool
        
            Identifies if the iteration has completed.
            Returns: True if the iteration has no more items.  False if there are more items to be 
             iterated.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ExportLayerTableIterator) -> bool
        
            Increments the iterator to the next item.
            Returns: True if there is a next available item in this iterator.
           False if the 
             iterator has completed all available items.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLayerTableIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: ExportLayerTableIterator)
            Resets the iterator to the initial state.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyValuePair[ExportLayerKey, ExportLayerInfo]](enumerator: IEnumerator[KeyValuePair[ExportLayerKey, ExportLayerInfo]], value: KeyValuePair[ExportLayerKey, ExportLayerInfo]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: ExportLayerTableIterator) -> KeyValuePair[ExportLayerKey, ExportLayerInfo]

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLayerTableIterator) -> bool

"""



class ExportLinetypeInfo(object, IDisposable):
    """
    A value used to represent the info stored in the Autodesk.Revit.DB.ExportLinetypeTable.
    
    ExportLinetypeInfo(destinationLinetypeName: str)
    ExportLinetypeInfo()
    ExportLinetypeInfo(other: ExportLinetypeInfo)
    """
    def Dispose(self):
        """ Dispose(self: ExportLinetypeInfo) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLinetypeInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, destinationLinetypeName: str)
        __new__(cls: type)
        __new__(cls: type, other: ExportLinetypeInfo)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DestinationLinetypeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The destination linetype name (the name of the linetype in the exported format).

Get: DestinationLinetypeName(self: ExportLinetypeInfo) -> str

Set: DestinationLinetypeName(self: ExportLinetypeInfo) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLinetypeInfo) -> bool

"""



class ExportLinetypeKey(object, IDisposable):
    """
    A key used to represent an item stored in an Autodesk.Revit.DB.ExportLinetypeTable.
    
    ExportLinetypeKey(originalLinetypeName: str)
    ExportLinetypeKey()
    ExportLinetypeKey(other: ExportLinetypeKey)
    """
    def Dispose(self):
        """ Dispose(self: ExportLinetypeKey) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLinetypeKey, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, originalLinetypeName: str)
        __new__(cls: type)
        __new__(cls: type, other: ExportLinetypeKey)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLinetypeKey) -> bool

"""

    OriginalLinetypeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The original linetype name.

Get: OriginalLinetypeName(self: ExportLinetypeKey) -> str

Set: OriginalLinetypeName(self: ExportLinetypeKey) = value
"""



class ExportLinetypeTable(object, IEnumerable[KeyValuePair[ExportLinetypeKey, ExportLinetypeInfo]], IEnumerable, IDisposable):
    """
    A table supporting a mapping of linetypes in Revit to linetype names that will be set
       in the target export format.
    
    ExportLinetypeTable()
    """
    def Add(self, exportLinetypeKey, exportLinetypeInfo):
        """
        Add(self: ExportLinetypeTable, exportLinetypeKey: ExportLinetypeKey, exportLinetypeInfo: ExportLinetypeInfo)
            Inserts a (key, info) pair into Export line type table.
        
            exportLinetypeKey: The export line type Key to be added.
            exportLinetypeInfo: The export line type info to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: ExportLinetypeTable)
            Removes all contents stored in Export line type table.
        """
        pass

    def ContainsKey(self, exportLinetypeKey):
        """
        ContainsKey(self: ExportLinetypeTable, exportLinetypeKey: ExportLinetypeKey) -> bool
        
            Checks whether a pattern key exists in the table.
        
            exportLinetypeKey: The export line type key.
            Returns: True if the line type exists in the table.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ExportLinetypeTable) """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ExportLinetypeTable) -> IEnumerator[KeyValuePair[ExportLinetypeKey, ExportLinetypeInfo]]
        
            Returns an enumerator that iterates through a collection.
            Returns: An IEnumerator object that can be used to iterate through the collection.
        """
        pass

    def GetExportLinetypeInfo(self, exportLinetypeKey):
        """
        GetExportLinetypeInfo(self: ExportLinetypeTable, exportLinetypeKey: ExportLinetypeKey) -> ExportLinetypeInfo
        
            Gets a copy of the ExportLinetypeInfo corresponding to the given 
             ExportLinetypeKey.
        
        
            exportLinetypeKey: The export line type Key.
            Returns: Returns the line type info for this key.
        """
        pass

    def GetKeys(self):
        """
        GetKeys(self: ExportLinetypeTable) -> IList[ExportLinetypeKey]
        
            Gets all the keys stored in the map.
            Returns: The keys.
        """
        pass

    def GetLinetypeTableIterator(self):
        """
        GetLinetypeTableIterator(self: ExportLinetypeTable) -> ExportLinetypeTableIterator
        
            Returns a ExportLinetypeTableIterator that iterates through the collection.
            Returns: A ExportLinetypeTableIterator object that can be used to iterate through 
             key-value pairs in the collection.
        """
        pass

    def GetValues(self):
        """
        GetValues(self: ExportLinetypeTable) -> IList[ExportLinetypeInfo]
        
            Returns all the values stored in the map.
            Returns: The info.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLinetypeTable, disposing: bool) """
        pass

    def Remove(self, exportLinetypeKey):
        """
        Remove(self: ExportLinetypeTable, exportLinetypeKey: ExportLinetypeKey)
            Removes the pair (key, info) corresponding to the given ExportLinetypeKey.
        
            exportLinetypeKey: The export line type key
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyValuePair[ExportLinetypeKey, ExportLinetypeInfo]](enumerable: IEnumerable[KeyValuePair[ExportLinetypeKey, ExportLinetypeInfo]], value: KeyValuePair[ExportLinetypeKey, ExportLinetypeInfo]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Count of the items contained in the collection.

Get: Count(self: ExportLinetypeTable) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLinetypeTable) -> bool

"""



class ExportLinetypeTableIterator(object, IEnumerator[KeyValuePair[ExportLinetypeKey, ExportLinetypeInfo]], IDisposable, IEnumerator):
    """ An iterator to a set of line type table. """
    def Dispose(self):
        """ Dispose(self: ExportLinetypeTableIterator) """
        pass

    def IsDone(self):
        """
        IsDone(self: ExportLinetypeTableIterator) -> bool
        
            Identifies if the iteration has completed.
            Returns: True if the iteration has no more items. False if there are more items to be 
             iterated.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ExportLinetypeTableIterator) -> bool
        
            Increments the iterator to the next item.
            Returns: True if the iteration has no more items. False if there are more items to be 
             iterated.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLinetypeTableIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: ExportLinetypeTableIterator)
            Resets the iterator to the initial state.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyValuePair[ExportLinetypeKey, ExportLinetypeInfo]](enumerator: IEnumerator[KeyValuePair[ExportLinetypeKey, ExportLinetypeInfo]], value: KeyValuePair[ExportLinetypeKey, ExportLinetypeInfo]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: ExportLinetypeTableIterator) -> KeyValuePair[ExportLinetypeKey, ExportLinetypeInfo]

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLinetypeTableIterator) -> bool

"""



class ExportLineweightInfo(object, IDisposable):
    """
    A value used to represent the info stored in the Autodesk.Revit.DB.ExportLineweightTable.
    
    ExportLineweightInfo(destinationLineweightName: str)
    ExportLineweightInfo()
    ExportLineweightInfo(other: ExportLineweightInfo)
    """
    def Dispose(self):
        """ Dispose(self: ExportLineweightInfo) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLineweightInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, destinationLineweightName: str)
        __new__(cls: type)
        __new__(cls: type, other: ExportLineweightInfo)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DestinationLineweightName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The destination lineweight name (the name of the line weight in the exported format)

Get: DestinationLineweightName(self: ExportLineweightInfo) -> str

Set: DestinationLineweightName(self: ExportLineweightInfo) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLineweightInfo) -> bool

"""



class ExportLineweightKey(object, IDisposable):
    """
    A key used to represent an item stored in an Autodesk.Revit.DB.ExportLineweightTable.
    
    ExportLineweightKey(originalLineweight: int)
    ExportLineweightKey()
    ExportLineweightKey(other: ExportLineweightKey)
    """
    def Dispose(self):
        """ Dispose(self: ExportLineweightKey) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLineweightKey, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, originalLineweight: int)
        __new__(cls: type)
        __new__(cls: type, other: ExportLineweightKey)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLineweightKey) -> bool

"""

    OriginalLineweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The original line weight.

Get: OriginalLineweight(self: ExportLineweightKey) -> int

Set: OriginalLineweight(self: ExportLineweightKey) = value
"""



class ExportLineweightTable(object, IEnumerable[KeyValuePair[ExportLineweightKey, ExportLineweightInfo]], IEnumerable, IDisposable):
    """
    A table supporting a mapping of line weights in Revit to line weight names that will be set
       in the target export format.
    
    ExportLineweightTable()
    """
    def Add(self, exportLineweightKey, exportLineweightInfo):
        """
        Add(self: ExportLineweightTable, exportLineweightKey: ExportLineweightKey, exportLineweightInfo: ExportLineweightInfo)
            Inserts a (key, info) pair into Export line weight table.
        
            exportLineweightKey: The export line weight Key to be added.
            exportLineweightInfo: The export line weight info to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: ExportLineweightTable)
            Removes all contents stored in Export line weight table.
        """
        pass

    def ContainsKey(self, exportLineweightKey):
        """
        ContainsKey(self: ExportLineweightTable, exportLineweightKey: ExportLineweightKey) -> bool
        
            Checks whether a line weight key exists in the table.
        
            exportLineweightKey: The export line weight key.
            Returns: True if the line weight exists in the table.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ExportLineweightTable) """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ExportLineweightTable) -> IEnumerator[KeyValuePair[ExportLineweightKey, ExportLineweightInfo]]
        
            Returns an enumerator that iterates through a collection.
            Returns: An IEnumerator object that can be used to iterate through the collection.
        """
        pass

    def GetExportLineweightInfo(self, exportLineweightKey):
        """
        GetExportLineweightInfo(self: ExportLineweightTable, exportLineweightKey: ExportLineweightKey) -> ExportLineweightInfo
        
            Gets a copy of the ExportLineweightInfo corresponding to the given 
             ExportLineweightKey.
        
        
            exportLineweightKey: The export line weight Key.
            Returns: Returns the line weight info for this key.
        """
        pass

    def GetKeys(self):
        """
        GetKeys(self: ExportLineweightTable) -> IList[ExportLineweightKey]
        
            Gets all the keys stored in the map.
            Returns: The keys.
        """
        pass

    def GetLineweightTableIterator(self):
        """
        GetLineweightTableIterator(self: ExportLineweightTable) -> ExportLineweightTableIterator
        
            Returns a ExportLineweightTableIterator that iterates through the collection.
            Returns: A ExportLineweightTableIterator object that can be used to iterate through 
             key-value pairs in the collection.
        """
        pass

    def GetValues(self):
        """
        GetValues(self: ExportLineweightTable) -> IList[ExportLineweightInfo]
        
            Returns all the values stored in the map.
            Returns: The info.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLineweightTable, disposing: bool) """
        pass

    def Remove(self, exportLineweightKey):
        """
        Remove(self: ExportLineweightTable, exportLineweightKey: ExportLineweightKey)
            Removes the pair (key, info) corresponding to the given ExportLineweightKey.
        
            exportLineweightKey: The export line weight key
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyValuePair[ExportLineweightKey, ExportLineweightInfo]](enumerable: IEnumerable[KeyValuePair[ExportLineweightKey, ExportLineweightInfo]], value: KeyValuePair[ExportLineweightKey, ExportLineweightInfo]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Count of the items contained in the collection.

Get: Count(self: ExportLineweightTable) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLineweightTable) -> bool

"""



class ExportLineweightTableIterator(object, IEnumerator[KeyValuePair[ExportLineweightKey, ExportLineweightInfo]], IDisposable, IEnumerator):
    """ An iterator to a set of line weight table. """
    def Dispose(self):
        """ Dispose(self: ExportLineweightTableIterator) """
        pass

    def IsDone(self):
        """
        IsDone(self: ExportLineweightTableIterator) -> bool
        
            Identifies if the iteration has completed.
            Returns: True if the iteration has no more items. False if there are more items to be 
             iterated.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ExportLineweightTableIterator) -> bool
        
            Increments the iterator to the next item.
            Returns: True if the iteration has no more items. False if there are more items to be 
             iterated.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportLineweightTableIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: ExportLineweightTableIterator)
            Resets the iterator to the initial state.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyValuePair[ExportLineweightKey, ExportLineweightInfo]](enumerator: IEnumerator[KeyValuePair[ExportLineweightKey, ExportLineweightInfo]], value: KeyValuePair[ExportLineweightKey, ExportLineweightInfo]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: ExportLineweightTableIterator) -> KeyValuePair[ExportLineweightKey, ExportLineweightInfo]

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportLineweightTableIterator) -> bool

"""



class ExportPaperFormat(Enum, IComparable, IFormattable, IConvertible):
    """
    Paper formats supported by DWF export
    
    enum ExportPaperFormat, values: ANSI_A (1), ANSI_B (2), ANSI_C (3), ANSI_D (4), ANSI_E (5), ARCH_A (15), ARCH_B (16), ARCH_C (17), ARCH_D (18), ARCH_E (19), ARCH_E1 (20), ARCH_E2 (21), ARCH_E3 (22), Default (0), ISO_A0 (10), ISO_A1 (9), ISO_A2 (8), ISO_A3 (7), ISO_A4 (6), ISO_B1 (14), ISO_B2 (13), ISO_B3 (12), ISO_B4 (11)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ANSI_A = None
    ANSI_B = None
    ANSI_C = None
    ANSI_D = None
    ANSI_E = None
    ARCH_A = None
    ARCH_B = None
    ARCH_C = None
    ARCH_D = None
    ARCH_E = None
    ARCH_E1 = None
    ARCH_E2 = None
    ARCH_E3 = None
    Default = None
    ISO_A0 = None
    ISO_A1 = None
    ISO_A2 = None
    ISO_A3 = None
    ISO_A4 = None
    ISO_B1 = None
    ISO_B2 = None
    ISO_B3 = None
    ISO_B4 = None
    value__ = None


class ExportPatternInfo(object, IDisposable):
    """
    A value used to represent the info stored in the Autodesk.Revit.DB.ExportPatternTable.
    
    ExportPatternInfo(destinationPatternName: str)
    ExportPatternInfo()
    ExportPatternInfo(other: ExportPatternInfo)
    """
    def Dispose(self):
        """ Dispose(self: ExportPatternInfo) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportPatternInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, destinationPatternName: str)
        __new__(cls: type)
        __new__(cls: type, other: ExportPatternInfo)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DestinationPatternName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The destination pattern name (the name of the pattern in the exported format).

Get: DestinationPatternName(self: ExportPatternInfo) -> str

Set: DestinationPatternName(self: ExportPatternInfo) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportPatternInfo) -> bool

"""



class ExportPatternKey(object, IDisposable):
    """
    A key used to represent an item stored in an Autodesk.Revit.DB.ExportPatternTable.
    
    ExportPatternKey(originalFillPatternType: FillPatternTarget, originalFillPatternName: str)
    ExportPatternKey()
    ExportPatternKey(other: ExportPatternKey)
    """
    def Dispose(self):
        """ Dispose(self: ExportPatternKey) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportPatternKey, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, originalFillPatternType: FillPatternTarget, originalFillPatternName: str)
        __new__(cls: type)
        __new__(cls: type, other: ExportPatternKey)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportPatternKey) -> bool

"""

    OriginalFillPatternName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The original FillPattern name.

Get: OriginalFillPatternName(self: ExportPatternKey) -> str

Set: OriginalFillPatternName(self: ExportPatternKey) = value
"""

    OriginalFillPatternType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The original FillPattern type.

Get: OriginalFillPatternType(self: ExportPatternKey) -> FillPatternTarget

Set: OriginalFillPatternType(self: ExportPatternKey) = value
"""



class ExportPatternTable(object, IEnumerable[KeyValuePair[ExportPatternKey, ExportPatternInfo]], IEnumerable, IDisposable):
    """
    A table supporting a mapping of FillPatterns in Revit to pattern names that will be set
       in the target export format.
    
    ExportPatternTable()
    """
    def Add(self, exportPatternKey, exportPatternInfo):
        """
        Add(self: ExportPatternTable, exportPatternKey: ExportPatternKey, exportPatternInfo: ExportPatternInfo)
            Inserts a (key,info) pair into Export pattern table.
        
            exportPatternKey: The export pattern key to be added.
            exportPatternInfo: The export pattern info to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: ExportPatternTable)
            Removes all contents stored in the table.
        """
        pass

    def ContainsKey(self, exportpatternKey):
        """
        ContainsKey(self: ExportPatternTable, exportpatternKey: ExportPatternKey) -> bool
        
            Checks whether a pattern key exists in the table.
        
            exportpatternKey: The export pattern Key.
            Returns: True if the pattern key exists in the table.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ExportPatternTable) """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ExportPatternTable) -> IEnumerator[KeyValuePair[ExportPatternKey, ExportPatternInfo]]
        
            Returns an enumerator that iterates through a collection.
            Returns: An IEnumerator object that can be used to iterate through the collection.
        """
        pass

    def GetExportPatternInfo(self, exportPatternKey):
        """
        GetExportPatternInfo(self: ExportPatternTable, exportPatternKey: ExportPatternKey) -> ExportPatternInfo
        
            Gets a copy of the pattern info associated to the input pattern key.
        
            exportPatternKey: The export pattern Key.
            Returns: Return the patternInfo for this key.
        """
        pass

    def GetKeys(self):
        """
        GetKeys(self: ExportPatternTable) -> IList[ExportPatternKey]
        
            Gets all the keys stored in the map.
            Returns: Return the key array.
        """
        pass

    def GetPatternTableIterator(self):
        """
        GetPatternTableIterator(self: ExportPatternTable) -> ExportPatternTableIterator
        
            Returns a PatternTableIterator that iterates through the collection.
            Returns: A PatternTableIterator object that can be used to iterate through key-value 
             pairs in the collection.
        """
        pass

    def GetValues(self):
        """
        GetValues(self: ExportPatternTable) -> IList[ExportPatternInfo]
        
            Returns all the values stored in the map.
            Returns: Return the info array.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportPatternTable, disposing: bool) """
        pass

    def Remove(self, exportPatternKey):
        """
        Remove(self: ExportPatternTable, exportPatternKey: ExportPatternKey)
            Removes the pair (key, info) by pattern key.
        
            exportPatternKey: The export pattern key.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyValuePair[ExportPatternKey, ExportPatternInfo]](enumerable: IEnumerable[KeyValuePair[ExportPatternKey, ExportPatternInfo]], value: KeyValuePair[ExportPatternKey, ExportPatternInfo]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    Count = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Count of the items contained in the collection.

Get: Count(self: ExportPatternTable) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportPatternTable) -> bool

"""



class ExportPatternTableIterator(object, IEnumerator[KeyValuePair[ExportPatternKey, ExportPatternInfo]], IDisposable, IEnumerator):
    """ An iterator to a set of Pattern table. """
    def Dispose(self):
        """ Dispose(self: ExportPatternTableIterator) """
        pass

    def IsDone(self):
        """
        IsDone(self: ExportPatternTableIterator) -> bool
        
            Identifies if the iteration has completed.
            Returns: True if the iteration has no more items.  False if there are more items to be 
             iterated.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ExportPatternTableIterator) -> bool
        
            Increments the iterator to the next item.
            Returns: True if there is a next available item in this iterator.
           False if the 
             iterator has completed all available items.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExportPatternTableIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: ExportPatternTableIterator)
            Resets the iterator to the initial state.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyValuePair[ExportPatternKey, ExportPatternInfo]](enumerator: IEnumerator[KeyValuePair[ExportPatternKey, ExportPatternInfo]], value: KeyValuePair[ExportPatternKey, ExportPatternInfo]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: ExportPatternTableIterator) -> KeyValuePair[ExportPatternKey, ExportPatternInfo]

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExportPatternTableIterator) -> bool

"""



class ExportRange(Enum, IComparable, IFormattable, IConvertible):
    """
    This enum is used to define what view, part of the view, or list of views will be exported.
    
    enum ExportRange, values: CurrentView (0), SetOfViews (2), VisibleRegionOfCurrentView (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CurrentView = None
    SetOfViews = None
    value__ = None
    VisibleRegionOfCurrentView = None


class ExportSheetType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible Sheet type.
    
    enum ExportSheetType, values: ST_Current (0), ST_Select (2), ST_Visible (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ST_Current = None
    ST_Select = None
    ST_Visible = None
    value__ = None


class ExportTextQualifier(Enum, IComparable, IFormattable, IConvertible):
    """
    Options for the text qualifier character in schedule view export.
    
    enum ExportTextQualifier, values: DoubleQuote (2), None (0), Quote (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DoubleQuote = None
    None = None
    Quote = None
    value__ = None


class ExportUnit(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible target units for CAD Export.
    
    enum ExportUnit, values: Centimeter (4), Default (0), Foot (2), Inch (1), Meter (5), Millimeter (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Centimeter = None
    Default = None
    Foot = None
    Inch = None
    Meter = None
    Millimeter = None
    value__ = None


class ExportUtils(object):
    """ This class provides utilities related to document export. """
    @staticmethod
    def GetExportId(document, elementId):
        """
        GetExportId(document: Document, elementId: ElementId) -> Guid
        
            Retrieves the GUID representing this element in DWF and IFC export.
        
            document: The document.
            elementId: The id of the element.
            Returns: The value of the GUID representing the element in the export context.
        """
        pass

    @staticmethod
    def GetGBXMLDocumentId(document):
        """
        GetGBXMLDocumentId(document: Document) -> Guid
        
            Retrieves the GUID representing this document in exported gbXML files.
        
            document: The document.
            Returns: The value of the GUID representing this document in gbXML export.
        """
        pass

    @staticmethod
    def GetNurbsSurfaceDataForFace(face):
        """
        GetNurbsSurfaceDataForFace(face: Face) -> NurbsSurfaceData
        
            Returns the necessary information to define a NURBS surface for a given Revit 
             HermiteFace or RuledFace.
        
        
            face: The HermiteFace or RuledFace to be converted.
            Returns: A class containing the necessary data to define a NURBS surface.
        """
        pass

    __all__ = [
        'GetExportId',
        'GetGBXMLDocumentId',
        'GetNurbsSurfaceDataForFace',
    ]


class ExternalDBApplicationResult(Enum, IComparable, IFormattable, IConvertible):
    """
    Informs Autodesk Revit of the status of your external db application after execution.
    
    enum ExternalDBApplicationResult, values: Failed (-1), Succeeded (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Failed = None
    Succeeded = None
    value__ = None


class ExternalDefinition(Definition, IDisposable):
    """ The ExternalDefinition object adds properties specific to Autodesk Revit shared parameter definitions. """
    def Dispose(self):
        """ Dispose(self: ExternalDefinition) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalDefinition, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The description of the parameter. The description will be used as tooltip in the Revit UI including in the properties palette.

Get: Description(self: ExternalDefinition) -> str

"""

    GUID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the GUID associated with the shared parameter definition.

Get: GUID(self: ExternalDefinition) -> Guid

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExternalDefinition) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The user visible name for the parameter.

Get: Name(self: ExternalDefinition) -> str

"""

    OwnerGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns or change the group ID of the external parameter definition.

Get: OwnerGroup(self: ExternalDefinition) -> DefinitionGroup

Set: OwnerGroup(self: ExternalDefinition) = value
"""

    ParameterGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the group ID of the parameter definition.

Get: ParameterGroup(self: ExternalDefinition) -> BuiltInParameterGroup

"""

    ParameterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the user visible interpretation of the parameter data.

Get: ParameterType(self: ExternalDefinition) -> ParameterType

"""

    UserModifiable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the parameter can be modified by the user interface.

Get: UserModifiable(self: ExternalDefinition) -> bool

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the parameter is visible in the Autodesk Revit user interface.

Get: Visible(self: ExternalDefinition) -> bool

"""



class ExternalDefinitionCreationOptions(object, IDisposable):
    """
    An option class used for creating a new shared parameter definition, including options such as name, type, visibility,
       Guid description and modifiable flag.
    
    ExternalDefinitionCreationOptions(name: str, type: ParameterType)
    """
    def Dispose(self):
        """ Dispose(self: ExternalDefinitionCreationOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalDefinitionCreationOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, name, type):
        """ __new__(cls: type, name: str, type: ParameterType) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The description of the parameter definition to be created. The description will be used as tooltip in the
   Revit UI including in the properties palette.
   The default is an empty string.

Get: Description(self: ExternalDefinitionCreationOptions) -> str

Set: Description(self: ExternalDefinitionCreationOptions) = value
"""

    GUID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The GUID to use for this parameter definition.
   If not explicitly set, a random GUID is used.

Get: GUID(self: ExternalDefinitionCreationOptions) -> Guid

Set: GUID(self: ExternalDefinitionCreationOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExternalDefinitionCreationOptions) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the parameter definition to be created.

Get: Name(self: ExternalDefinitionCreationOptions) -> str

Set: Name(self: ExternalDefinitionCreationOptions) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of the parameter definition to be created.

Get: Type(self: ExternalDefinitionCreationOptions) -> ParameterType

Set: Type(self: ExternalDefinitionCreationOptions) = value
"""

    UserModifiable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property indicates whether this parameter can be modified by UI user or not.
   True if the parameter will be modifiable by the user in the user interface, false if the parameter will display as read-only.
   The default is true.

Get: UserModifiable(self: ExternalDefinitionCreationOptions) -> bool

Set: UserModifiable(self: ExternalDefinitionCreationOptions) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the parameter is visible to the user, false if it is hidden and accessible only via the API.
   The default is true.

Get: Visible(self: ExternalDefinitionCreationOptions) -> bool

Set: Visible(self: ExternalDefinitionCreationOptions) = value
"""



class ExternalDefinitions(Definitions, IEnumerable[Definition], IEnumerable, IDisposable):
    """ Supports the creation of new shared parameters definitions. """
    def Dispose(self):
        """ Dispose(self: ExternalDefinitions, A_0: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class ExternalFileReference(object, IDisposable):
    """ A class that contains the details of a reference to a file outside of a given document. """
    def Dispose(self):
        """ Dispose(self: ExternalFileReference) """
        pass

    def GetAbsolutePath(self):
        """
        GetAbsolutePath(self: ExternalFileReference) -> ModelPath
        
            Returns an absolute path to the referenced file,
           regardless of whether the 
             PathType.Enum is relative or absolute.
        
            Returns: A full path to the linked model.
        """
        pass

    def GetLinkedFileStatus(self):
        """
        GetLinkedFileStatus(self: ExternalFileReference) -> LinkedFileStatus
        
            Returns a LinkedFileStatus.Enum corresponding to the
           load status of the 
             referenced file.
        """
        pass

    def GetPath(self):
        """
        GetPath(self: ExternalFileReference) -> ModelPath
        
            Gets the path of the link, relative or absolute according
           to the link's 
             settings
        
            Returns: The path of the link. This path will be relative for
           relatively-pathed 
             links.
        """
        pass

    def GetReferencingId(self):
        """
        GetReferencingId(self: ExternalFileReference) -> ElementId
        
            Gets the ElementId corresponding to the element which
           this 
             ExternalFileReference is associated with.
        """
        pass

    @staticmethod
    def IsValidExternalFileReference(data):
        """
        IsValidExternalFileReference(data: ExternalFileReference) -> bool
        
            Checks an ExternalFileReference to see if it is
           properly created.
        
            data: The ExternalFileReference to be checked
        """
        pass

    def IsValidPathTypeForExternalFileReference(self, pathType):
        """
        IsValidPathTypeForExternalFileReference(self: ExternalFileReference, pathType: PathType) -> bool
        
            Checks whether a PathType enum value will be valid to
           use with this 
             ExternalFileReference.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalFileReference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ExternalFileReferenceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of external file which this object
   references.

Get: ExternalFileReferenceType(self: ExternalFileReference) -> ExternalFileReferenceType

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExternalFileReference) -> bool

"""

    PathType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The path type of the link (relative, absolute, or server).

Get: PathType(self: ExternalFileReference) -> PathType

"""



class ExternalFileReferenceType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum class indicating kinds of external file references
    
    enum ExternalFileReferenceType, values: AssemblyCodeTable (7), CADLink (2), Decal (5), DWFMarkup (3), KeynoteTable (4), Material (6), None (0), RevitLink (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AssemblyCodeTable = None
    CADLink = None
    Decal = None
    DWFMarkup = None
    KeynoteTable = None
    Material = None
    None = None
    RevitLink = None
    value__ = None


class ExternalFileUtils(object):
    """ A utility class containing functions related to external file references. """
    @staticmethod
    def GetAllExternalFileReferences(aDoc):
        """
        GetAllExternalFileReferences(aDoc: Document) -> ICollection[ElementId]
        
            Gets the ids of all elements which are external file references.
        
            aDoc: A Revit Document.
            Returns: The ids of all elements which are external file references.
        """
        pass

    @staticmethod
    def GetExternalFileReference(aDoc, elemId):
        """
        GetExternalFileReference(aDoc: Document, elemId: ElementId) -> ExternalFileReference
        
            Gets the external file referencing data for the given element.
        
            aDoc: A Revit Document.
            elemId: The element whose external file reference we want.
            Returns: An object containing path and type information for the given element's external 
             file.
        """
        pass

    @staticmethod
    def IsExternalFileReference(aDoc, elemId):
        """
        IsExternalFileReference(aDoc: Document, elemId: ElementId) -> bool
        
            Determines whether the given element represents an external file.
        
            aDoc: A Revit Document.
            elemId: The element to be checked for an external file reference.
            Returns: True if the given element represents an external file; false otherwise.
        """
        pass

    __all__ = [
        'GetAllExternalFileReferences',
        'GetExternalFileReference',
        'IsExternalFileReference',
    ]


class ExternalResourceBrowserData(object, IDisposable):
    """
    Represents a collection of external resources and external resource folders to be presented as
       the content of a folder in the file browser in Revit.
    
    ExternalResourceBrowserData(document: Document, serverId: Guid, folderPath: str, matchOptions: ExternalResourceMatchOptions)
    """
    def AddResource(self, resourceName, *__args):
        """
        AddResource(self: ExternalResourceBrowserData, resourceName: str, referenceInformation: IDictionary[str, str])AddResource(self: ExternalResourceBrowserData, resourceName: str)
            Adds an external resource to the folder path by supplying the resource name.
        
            resourceName: The unique short name of external resource.
        AddResource(self: ExternalResourceBrowserData, resourceName: str, version: str, referenceInformation: IDictionary[str, str])AddResource(self: ExternalResourceBrowserData, resourceName: str, version: str)
            Adds an external resource to the folder path by supplying the resource name and 
             version.
        
        
            resourceName: The unique short name of external resource.
            version: The version of external resource.
        """
        pass

    def AddSubFolder(self, folderName):
        """
        AddSubFolder(self: ExternalResourceBrowserData, folderName: str)
            Adds a sub folder to the folder path with the given name.
        
            folderName: The name of the folder.
        """
        pass

    def CallingDocumentHasModelPath(self):
        """
        CallingDocumentHasModelPath(self: ExternalResourceBrowserData) -> bool
        
            Indicates whether the document requesting the external resource browser data 
             has a defined ModelPath.
        
            Returns: True if the document has a defined ModelPath.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ExternalResourceBrowserData) """
        pass

    def GetCallingDocumentModelPath(self):
        """
        GetCallingDocumentModelPath(self: ExternalResourceBrowserData) -> ModelPath
        
            Returns a copy of the ModelPath of the document that is requesting the external 
             resource browser data.
        
            Returns: A copy of the ModelPath of the document that is requesting the external 
             resource browser data.
        """
        pass

    def GetMatchOptions(self):
        """
        GetMatchOptions(self: ExternalResourceBrowserData) -> ExternalResourceMatchOptions
        
            Gets the match options used to filter external resources.
            Returns: The external resource match options.
        """
        pass

    def GetResources(self):
        """
        GetResources(self: ExternalResourceBrowserData) -> IList[ExternalResourceReference]
        
            Gets the external resources under the folder path of the browser data.
            Returns: The external resources under current folder of the browser data.
        """
        pass

    def GetSubFolders(self):
        """
        GetSubFolders(self: ExternalResourceBrowserData) -> IList[str]
        
            Gets the sub folders under the folder path of the browser data.
            Returns: The sub folders under folder path of the browser data.
        """
        pass

    def IsValidFolderName(self, folderName):
        """
        IsValidFolderName(self: ExternalResourceBrowserData, folderName: str) -> bool
        
            Checks whether the folder name is valid.
        
            folderName: The folder name to check.
            Returns: True if the name is a valid folder name, false otherwise.
        """
        pass

    def IsValidResouceName(self, resourceName):
        """
        IsValidResouceName(self: ExternalResourceBrowserData, resourceName: str) -> bool
        
            Checks whether the resource name is valid.
        
            resourceName: The resource name to check.
            Returns: True if the name is a valid resource name, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalResourceBrowserData, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, document, serverId, folderPath, matchOptions):
        """ __new__(cls: type, document: Document, serverId: Guid, folderPath: str, matchOptions: ExternalResourceMatchOptions) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    FolderPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current folder path to which the new resources and sub folder belong.

Get: FolderPath(self: ExternalResourceBrowserData) -> str

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExternalResourceBrowserData) -> bool

"""

    ServerId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Id of IExternalResourceServer which handles the external resource load.

Get: ServerId(self: ExternalResourceBrowserData) -> Guid

"""



class ExternalResourceLoadContent(object, IDisposable):
    """
    This class contains the actual content data and other results of an external resource load operation that are
       returned by an IExternalResourceServer to Revit.
    """
    def Dispose(self):
        """ Dispose(self: ExternalResourceLoadContent) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalResourceLoadContent, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExternalResourceLoadContent) -> bool

"""

    LoadStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A value to indicate the status of an external resource load operation.  IExternalResourceServers
   should set this in the LoadResource() method.

Get: LoadStatus(self: ExternalResourceLoadContent) -> ExternalResourceLoadStatus

Set: LoadStatus(self: ExternalResourceLoadContent) = value
"""

    Version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The version of the external data that the server is providing in this object.

Get: Version(self: ExternalResourceLoadContent) -> str

Set: Version(self: ExternalResourceLoadContent) = value
"""



class ExternalResourceLoadContext(object, IDisposable):
    """
    This class contains data describing the context related
       to an external resource load operation.
    """
    def CallingDocumentHasModelPath(self):
        """
        CallingDocumentHasModelPath(self: ExternalResourceLoadContext) -> bool
        
            Indicates whether the document requesting the external resource has a defined
         
               ModelPath.
        
            Returns: True if the document has a defined ModelPath.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ExternalResourceLoadContext) """
        pass

    def GetCallingDocumentModelPath(self):
        """
        GetCallingDocumentModelPath(self: ExternalResourceLoadContext) -> ModelPath
        
            Returns a copy of the ModelPath of the document that is requesting
           the 
             external resource.
        
            Returns: A copy of the ModelPath of the document that is requesting the external
           
             resource.
        """
        pass

    def GetCurrentlyLoadedReference(self):
        """
        GetCurrentlyLoadedReference(self: ExternalResourceLoadContext) -> ExternalResourceReference
        
            Returns a copy of the ExternalResourceReference currently
           in use by the 
             containing element.
        
            Returns: A copy of the ExternalResourceReference currently in use
           by the containing 
             element.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalResourceLoadContext, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExternalResourceLoadContext) -> bool

"""

    LoadOperationType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An enum value indicating whether the resource load was triggered by an
   automatic event (such as file open) or an explicit user action.

Get: LoadOperationType(self: ExternalResourceLoadContext) -> LoadOperationType

"""



class ExternalResourceLoadData(object, IDisposable):
    """
    This class contains the input and output data resulting from invoking an IExternalResourceServer's LoadResource method.After the call to LoadResource, the resulting ExternalResourceLoadData will be passed into
       IExternalResourceServer.HandleLoadResourceResults() so that appropriate UI can be displayed. Server providers can inspect the ExternalResourceLoadData to get an ExternalResourceLoadContent
       object of the subclass appropriate to the external resource. The class also contains a copy of the
       ExternalResourceReference, and information about the context of the load operation.
    """
    def Dispose(self):
        """ Dispose(self: ExternalResourceLoadData) """
        pass

    def GetExternalResourceReference(self):
        """
        GetExternalResourceReference(self: ExternalResourceLoadData) -> ExternalResourceReference
        
            Returns the ExternalResourceReference that identifies which resource should be 
             loaded.
        """
        pass

    def GetLoadContent(self):
        """
        GetLoadContent(self: ExternalResourceLoadData) -> ExternalResourceLoadContent
        
            Returns the ExternalResourceLoadContent resulting from this load operation.
            Returns: A reference to an ExternalResourceLoadContent object.
        """
        pass

    def GetLoadContext(self):
        """
        GetLoadContext(self: ExternalResourceLoadData) -> ExternalResourceLoadContext
        
            Returns an object containing information about the context of the load 
             operation.
        
            Returns: An object containing information about the context of the load operation.
        """
        pass

    def GetLoadRequestId(self):
        """
        GetLoadRequestId(self: ExternalResourceLoadData) -> Guid
        
            Returns the load operation GUID.
            Returns: The load operation GUID.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalResourceLoadData, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ErrorsReported = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the IExternalResourceUIServer has reported errors
   for this ExternalResourceLoadData. This value can be set by the
   IExternalResourceUIServer in HandleLoadResourceResults().

Get: ErrorsReported(self: ExternalResourceLoadData) -> bool

Set: ErrorsReported(self: ExternalResourceLoadData) = value
"""

    ExternalResourceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ExternalResourceType for which Revit is requesting data from the server.

Get: ExternalResourceType(self: ExternalResourceLoadData) -> ExternalResourceType

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExternalResourceLoadData) -> bool

"""

    LoadStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The success or failure status of the load attempt.

Get: LoadStatus(self: ExternalResourceLoadData) -> ExternalResourceLoadStatus

"""



class ExternalResourceLoadStatus(Enum, IComparable, IFormattable, IConvertible):
    """
    A flag to indicate the status of an ExternalResource load request.
    
    enum ExternalResourceLoadStatus, values: CannotFindServer (4), Failure (1), ResourceAlreadyCurrent (3), ServerThrewException (5), Success (0), Uninitialized (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CannotFindServer = None
    Failure = None
    ResourceAlreadyCurrent = None
    ServerThrewException = None
    Success = None
    Uninitialized = None
    value__ = None


class ExternalResourceMatchOptions(object, IDisposable):
    """
    Represents match options used to filter external resources when listing them from external resource server.
    
    ExternalResourceMatchOptions(resourceType: ExternalResourceType)
    """
    def Dispose(self):
        """ Dispose(self: ExternalResourceMatchOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalResourceMatchOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, resourceType):
        """ __new__(cls: type, resourceType: ExternalResourceType) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExternalResourceMatchOptions) -> bool

"""

    ResourceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The desired resource type which external resources should match.

Get: ResourceType(self: ExternalResourceMatchOptions) -> ExternalResourceType

"""



class ExternalResourceReference(object, IDisposable):
    """
    This class identifies an external resource provided by an IExternalResourceServer.
    
    ExternalResourceReference(other: ExternalResourceReference)
    ExternalResourceReference(serverId: Guid, referenceInformation: IDictionary[str, str], version: str, inSessionPath: str)
    """
    @staticmethod
    def CreateLocalResource(doc, resourceType, path, pathType):
        """
        CreateLocalResource(doc: Document, resourceType: ExternalResourceType, path: ModelPath, pathType: PathType) -> ExternalResourceReference
        
            Creates an ExternalResourceReference representing a local file managed
           by 
             Revit's built-in server.
        
        
            doc: The document containing the reference. If the PathType is relative,
           the 
             path will be made relative to the location of this Document. (If
           this 
             Document belongs to a workshared model,
           the reference will be relative to 
             the central model.)
        
            resourceType: The type of the external resource.
            path: A path to the external file. This path must be absolute. If the PathType is
           
             relative, then Revit will relativize the path according to the location
           of 
             the given Document.
        
            pathType: An enum indicating the type of path which the ExternalResourceReference should 
             use.
           The PathType must be PathType.Server if the reference is to a Revit 
             model on
           Revit Server. The PathType must be PathType.Absolute if the 
             reference is local
           but the host model or host's central model are on Revit 
             Server.
        
            Returns: The newly-created ExternalResourceReference.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ExternalResourceReference) """
        pass

    def GetReferenceInformation(self):
        """
        GetReferenceInformation(self: ExternalResourceReference) -> IDictionary[str, str]
        
            Returns a copy of an object containing previously-stored reference or lookup
          
              information about the specific resource provided by the server.
        
            Returns: A copy of a (String, String) map containing previously-stored reference or
           
             lookup information.
        """
        pass

    def GetResourceShortDisplayName(self):
        """
        GetResourceShortDisplayName(self: ExternalResourceReference) -> str
        
            Gets the short display name of the external resource.
            Returns: The short display name of the external resource.
        """
        pass

    def GetResourceVersionStatus(self):
        """
        GetResourceVersionStatus(self: ExternalResourceReference) -> ResourceVersionStatus
        
            Checks whether this ExternalResourceReference corresponds to the current 
             version of the resource.
        
            Returns: An enum indicating whether this reference represents the most recent version
          
              of the resource.
        """
        pass

    def HasValidDisplayPath(self):
        """
        HasValidDisplayPath(self: ExternalResourceReference) -> bool
        
            Checks whether this external Resource has a valid display path.
            Returns: True if the this external Resource has a valid display path. False otherwise.
        """
        pass

    def IsValidReference(self, resourceType):
        """
        IsValidReference(self: ExternalResourceReference, resourceType: ExternalResourceType) -> bool
        
            Checks whether the reference is in a valid format.
        
            resourceType: The type of resource which the ExternalResourceReference should
           correspond 
             to.
        
            Returns: True if this is a valid ExternalResourceReference. False otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalResourceReference, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, other: ExternalResourceReference)
        __new__(cls: type, serverId: Guid, referenceInformation: IDictionary[str, str], version: str, inSessionPath: str)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    InSessionPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The path stores the full display path which includes the server name plus the path provided by ExternalResourceServer.The path that Revit will present for user recognizing and browsing to this resource during one session of Revit.This property allows ExternalResourceServers to handle cases where the path to a resource may vary between Revit sessions.
   For example, if this ExternalResourceReference refers to a resource in a folder,
   this property can be used to store the current path of the resource. If the resource is moved to another folder later,
   the ExternalResourceServer could calculate the correct path for the resource from resource identification information
   when it is loaded and store it in this property,
   so that it will work correctly even if the rvt file is opened in a different location.

Get: InSessionPath(self: ExternalResourceReference) -> str

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExternalResourceReference) -> bool

"""

    ServerId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the server that Revit is expecting to provide the external resource.

Get: ServerId(self: ExternalResourceReference) -> Guid

"""

    Version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The version of the external data that was most recently loaded in Revit.

Get: Version(self: ExternalResourceReference) -> str

"""



class ExternalResourceServerExtensions(object, IDisposable):
    """ An object that contains overrides for external resource-specific methods. """
    def Dispose(self):
        """ Dispose(self: ExternalResourceServerExtensions) """
        pass

    def GetRevitLinkOperations(self):
        """
        GetRevitLinkOperations(self: ExternalResourceServerExtensions) -> RevitLinkOperations
        
            Gets the specific methods supported by the external resource of Revit Links.
            Returns: The specific methods supported by the external resource of Revit Links.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalResourceServerExtensions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExternalResourceServerExtensions) -> bool

"""



class ExternalResourceServerUtils(object):
    """ Contains utilities related to external resource server. """
    @staticmethod
    def IsValidShortName(serverId, serverName):
        """
        IsValidShortName(serverId: Guid, serverName: str) -> bool
        
            Checks whether the name is a valid short name for the external resource server.
        
            serverId: The id of the external resource server.
            serverName: The short name of the external resource server.
            Returns: True if the name is a valid short name, false otherwise.
        """
        pass

    @staticmethod
    def ServerSupportsAssemblyCodeData(extRef):
        """
        ServerSupportsAssemblyCodeData(extRef: ExternalResourceReference) -> bool
        
            Checks that the server referenced by the given ExternalResourceReference 
             supports
           AssemblyCodeData.
        
        
            extRef: The ExternalResourceReference to check.
            Returns: True if the ExternalResourceReference refers to a server that supports 
             AssemblyCodeData. False otherwise.
        """
        pass

    @staticmethod
    def ServerSupportsKeynotes(extRef):
        """
        ServerSupportsKeynotes(extRef: ExternalResourceReference) -> bool
        
            Checks that the server referenced by the given ExternalResourceReference 
             supports
           KeynoteTable data.
        
        
            extRef: The ExternalResourceReference to check.
            Returns: True if the ExternalResourceReference refers to a server that supports 
             keynotes.  False otherwise.
        """
        pass

    @staticmethod
    def ServerSupportsRevitLinks(extRef):
        """
        ServerSupportsRevitLinks(extRef: ExternalResourceReference) -> bool
        
            Checks that the server referenced by the given ExternalResourceReference 
             supports
           Revit links.
        
        
            extRef: The ExternalResourceReference to check.
            Returns: True if the ExternalResourceReference refers to a server that supports Revit 
             links. False otherwise.
        """
        pass

    __all__ = [
        'IsValidShortName',
        'ServerSupportsAssemblyCodeData',
        'ServerSupportsKeynotes',
        'ServerSupportsRevitLinks',
    ]


class ExternalResourceServiceUtils(object):
    """ Contains utilities related to external resource service. """
    @staticmethod
    def GetServersByType(type):
        """
        GetServersByType(type: ExternalResourceType) -> IList[IExternalResourceServer]
        
            Gets registered external resource servers which support the external resource 
             type.
        
        
            type: The external resource type for the servers to match
            Returns: A list of matched external resource servers
        """
        pass

    __all__ = [
        'GetServersByType',
    ]


class GuidEnum(object):
    """
    Base class of all GUID-based enum classes.
    
    GuidEnum(guid: Guid)
    """
    def Equals(self, obj):
        """
        Equals(self: GuidEnum, obj: object) -> bool
        
            Compares two Guid-based enum object based on their concrete class and GUID 
             value.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: GuidEnum) -> int
        
            Generates a hash code for this Guid-based enum object.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    @staticmethod # known case of __new__
    def __new__(self, guid):
        """
        __new__(cls: type, guid: str)
        __new__(cls: type, guid: Guid)
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    Guid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Guid of GUID-based enum object.

Get: Guid(self: GuidEnum) -> Guid

"""



class ExternalResourceType(GuidEnum):
    """
    A type class used to distinguish between different kinds of external resource.
    
    ExternalResourceType(guid: Guid)
    """
    @staticmethod # known case of __new__
    def __new__(self, guid):
        """ __new__(cls: type, guid: Guid) """
        pass


class ExternalResourceTypes(object):
    """ Provides a container of all Revit built-in ExternalResourceType instances. """
    BuiltInExternalResourceTypes = None
    __all__ = [
        'BuiltInExternalResourceTypes',
    ]


class ExternalResourceUIBrowseResultType(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the type of external resource browsing result.
    
    enum ExternalResourceUIBrowseResultType, values: FolderNotFound (1), ResourceNotFound (2), Success (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FolderNotFound = None
    ResourceNotFound = None
    Success = None
    value__ = None


class ExternalResourceUtils(object):
    """ A utility class containing functions related to external resource references. """
    @staticmethod
    def GetAllExternalResourceReferences(document, resourceType=None):
        """
        GetAllExternalResourceReferences(document: Document) -> ISet[ElementId]
        
            Gets the ids of all elements which refer to external resources.
        
            document: The Revit Document containing the external resource references.
            Returns: The ids of all elements which refer to external resources.
        GetAllExternalResourceReferences(document: Document, resourceType: ExternalResourceType) -> ISet[ElementId]
        
            Gets the ids of all elements which refer to a specific type of external 
             resource.
        
        
            document: The Revit Document containing the external resource references.
            resourceType: The type of external resource.
            Returns: The ids of all elements which refer to external resources of the specified type.
        """
        pass

    __all__ = [
        'GetAllExternalResourceReferences',
    ]


class Extrusion(GenericForm, IDisposable):
    """ A extrusion solid or void form. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    EndOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset of the end of the extrusion relative to the sketch plane.

Get: EndOffset(self: Extrusion) -> float

Set: EndOffset(self: Extrusion) = value
"""

    Sketch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Sketch of the Extrusion.

Get: Sketch(self: Extrusion) -> Sketch

"""

    StartOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset of the start of the extrusion relative to the sketch plane.

Get: StartOffset(self: Extrusion) -> float

Set: StartOffset(self: Extrusion) = value
"""



class ExtrusionAnalyzer(object, IDisposable):
    """
    This geometry utility allows you to attempt to "fit" a given piece of geometry into
       the shape of an extrusion.
    """
    def CalculateFaceAlignment(self):
        """
        CalculateFaceAlignment(self: ExtrusionAnalyzer) -> IDictionary[Face, ExtrusionAnalyzerFaceAlignment]
        
            Calculates the alignment status of each face of the solid.
            Returns: Maps each face of the solid to its alignment status.
        """
        pass

    @staticmethod
    def Create(solidGeometry, plane, direction):
        """
        Create(solidGeometry: Solid, plane: Plane, direction: XYZ) -> ExtrusionAnalyzer
        
            Creates an ExtrusionAnalyzer and computes and stores the solid's shadow.
        
            solidGeometry: The geometry to analyze.
            plane: The plane to use for the base plane for the extrusion.
            direction: The direction to use for the calculation for the extrusion.
           The direction 
             must be transverse to the base plane.
        
            Returns: The newly created ExtrusionAnalyzer object.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ExtrusionAnalyzer) """
        pass

    def GetExtrusionBase(self):
        """
        GetExtrusionBase(self: ExtrusionAnalyzer) -> Face
        
            Obtains the face that represents the base contour of the extrusion analysis.
            Returns: The face that represents the base contour.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExtrusionAnalyzer, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    EndParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The end parameter (distance along the extrusion direction from the input plane) calculated by the extrusion analysis.

Get: EndParameter(self: ExtrusionAnalyzer) -> float

"""

    ExtrusionDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The direction of extrusion specified for the extrusion analysis.

Get: ExtrusionDirection(self: ExtrusionAnalyzer) -> XYZ

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ExtrusionAnalyzer) -> bool

"""

    StartParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The start parameter (distance along the extrusion direction from the input plane) calculated by the extrusion analysis.

Get: StartParameter(self: ExtrusionAnalyzer) -> float

"""



class ExtrusionAnalyzerFaceAlignment(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates whether a face of the solid analyzed by ExtrusionAnalyzer is fully aligned, partially aligned, or unaligned with faces of the extrusion.
    
    enum ExtrusionAnalyzerFaceAlignment, values: FullyAligned (0), PartiallyAligned (1), Unaligned (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FullyAligned = None
    PartiallyAligned = None
    Unaligned = None
    value__ = None


class RoofBase(HostObject, IDisposable):
    """ Represents all kinds of Roofs. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    EaveCuts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve or set the EaveCutterType.

Get: EaveCuts(self: RoofBase) -> EaveCutterType

Set: EaveCuts(self: RoofBase) = value
"""

    FasciaDepth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve or set the FasciaDepth.

Get: FasciaDepth(self: RoofBase) -> float

Set: FasciaDepth(self: RoofBase) = value
"""

    RoofType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve or set the Type.

Get: RoofType(self: RoofBase) -> RoofType

Set: RoofType(self: RoofBase) = value
"""

    SlabShapeEditor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the SlabShapeEditor used for slab shape editing.

Get: SlabShapeEditor(self: RoofBase) -> SlabShapeEditor

"""



class ExtrusionRoof(RoofBase, IDisposable):
    """ Represents some kinds of Extrusion Roofs. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetProfile(self):
        """
        GetProfile(self: ExtrusionRoof) -> ModelCurveArray
        
            Retrieve the Profile of ExtrusionRoof.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CurtainGrids = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve all the CurtainGrid objects of a curtain Roof.

Get: CurtainGrids(self: ExtrusionRoof) -> CurtainGridSet

"""



class FabricationConfiguration(Element, IDisposable):
    """ This element contains the information about the fabrication configuration settings used by the project. """
    def CanBeSwapped(self):
        """
        CanBeSwapped(self: FabricationConfiguration) -> bool
        
            Checks if the fabrication configuration can be swapped.
            Returns: True if the fabrication configuration can be swapped, false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetAllFabricationConnectorDefinitions(self, domain, shape):
        """
        GetAllFabricationConnectorDefinitions(self: FabricationConfiguration, domain: ConnectorDomainType, shape: ConnectorProfileType) -> IList[int]
        
            Gets fabrication connector identifiers from the fabrication configuration, 
             filtered by shape and domain.
        
        
            domain: ConnectorDomainType to filter by. Pass ConnectorDomainType.Undefined to get all 
             connector domains.
        
            shape: ConnectorProfileType to filter by. Pass ConnectorProfileType.Invalid to get all 
             shapes.
        
            Returns: All the fabrication connector identifiers, filtered by shape and domain. The 
             return will be empty if no connectors are found.
        """
        pass

    def GetAllInsulationSpecifications(self, pFabPart):
        """
        GetAllInsulationSpecifications(self: FabricationConfiguration, pFabPart: FabricationPart) -> IList[int]
        
            Gets all insulation specification identifiers in the fabrication configuration.
        
            pFabPart: The fabrication part.
            Returns: An array of insulation specification identifiers.
        """
        pass

    def GetAllLoadedServices(self):
        """
        GetAllLoadedServices(self: FabricationConfiguration) -> IList[FabricationService]
        
            Returns all the loaded fabrication services.
            Returns: All the loaded fabrication services.
        """
        pass

    def GetAllMaterials(self, part):
        """
        GetAllMaterials(self: FabricationConfiguration, part: FabricationPart) -> IList[int]
        
            Gets all material identifiers in the fabrication configuration.
        
            part: The fabrication part.
            Returns: An array of material identifiers.
        """
        pass

    def GetAllServices(self):
        """
        GetAllServices(self: FabricationConfiguration) -> IList[FabricationService]
        
            Returns all fabrication services in the fabrication configuration.
            Returns: All fabrication services. The return will be empty if no services are found.
        """
        pass

    def GetAllSpecifications(self, part):
        """
        GetAllSpecifications(self: FabricationConfiguration, part: FabricationPart) -> IList[int]
        
            Gets all specification identifiers in the fabrication configuration.
        
            part: The fabrication part.
            Returns: An array of specification identifiers.
        """
        pass

    def GetAllUsedServices(self):
        """
        GetAllUsedServices(self: FabricationConfiguration) -> IList[FabricationService]
        
            Returns all the used fabrication services. A service is used if any fabrication 
             part in the service is created by user.
        
            Returns: All the used fabrication services.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetFabricationConfiguration(doc):
        """
        GetFabricationConfiguration(doc: Document) -> FabricationConfiguration
        
            Gets the fabrication configuration element in the document.
        
            doc: The document.
            Returns: The fabrication configuration element in the document.
        """
        pass

    def GetFabricationConfigurationInfo(self):
        """
        GetFabricationConfigurationInfo(self: FabricationConfiguration) -> FabricationConfigurationInfo
        
            Gets the information about the fabrication configuration of the project.
            Returns: The information about the fabrication configuration of the project.
        """
        pass

    def GetFabricationConnectorDomain(self, fabricationConnectorId):
        """
        GetFabricationConnectorDomain(self: FabricationConfiguration, fabricationConnectorId: int) -> ConnectorDomainType
        
            Gets the fabrication connector domain from its identifier.
        
            fabricationConnectorId: The fabrication connector identifier.
            Returns: The fabrication connector's domain.
        """
        pass

    def GetFabricationConnectorGroup(self, fabricationConnectorId):
        """
        GetFabricationConnectorGroup(self: FabricationConfiguration, fabricationConnectorId: int) -> str
        
            Gets the fabrication connector group from its identifier.
        
            fabricationConnectorId: The fabrication connector identifier.
            Returns: The fabrication connector's group.
        """
        pass

    def GetFabricationConnectorName(self, fabricationConnectorId):
        """
        GetFabricationConnectorName(self: FabricationConfiguration, fabricationConnectorId: int) -> str
        
            Gets the fabrication connector name from its identifier.
        
            fabricationConnectorId: The fabrication connector identifier.
            Returns: The fabrication connector's name.
        """
        pass

    def GetFabricationConnectorShape(self, fabricationConnectorId):
        """
        GetFabricationConnectorShape(self: FabricationConfiguration, fabricationConnectorId: int) -> ConnectorProfileType
        
            Gets the fabrication connector shape from its identifier.
        
            fabricationConnectorId: The fabrication connector identifier.
            Returns: The fabrication connector's shape.
        """
        pass

    def GetInsulationSpecificationAbbreviation(self, insulationSpecificationId):
        """
        GetInsulationSpecificationAbbreviation(self: FabricationConfiguration, insulationSpecificationId: int) -> str
        
            Gets insulation specification abbreviation.
        
            insulationSpecificationId: The insulation specification identifier.
        """
        pass

    def GetInsulationSpecificationGroup(self, specId):
        """
        GetInsulationSpecificationGroup(self: FabricationConfiguration, specId: int) -> str
        
            Gets the insulation specification group from its identifier.
        
            specId: The insulation specification identifier.
            Returns: The insulation specification group.
        """
        pass

    def GetInsulationSpecificationName(self, specId):
        """
        GetInsulationSpecificationName(self: FabricationConfiguration, specId: int) -> str
        
            Gets the insulation specification name from its identifier.
        
            specId: The insulation specification identifier.
            Returns: The insulation specification name.
        """
        pass

    def GetMaterialAbbreviation(self, materialId):
        """
        GetMaterialAbbreviation(self: FabricationConfiguration, materialId: int) -> str
        
            Gets the abreviation of the material or the insulation or the double wall 
             material.
        
        
            materialId: The material identifier.
        """
        pass

    def GetMaterialGroup(self, materialId):
        """
        GetMaterialGroup(self: FabricationConfiguration, materialId: int) -> str
        
            Gets material group from its identifier.
        
            materialId: The material identifier.
            Returns: The material group.
        """
        pass

    def GetMaterialName(self, materialId):
        """
        GetMaterialName(self: FabricationConfiguration, materialId: int) -> str
        
            Gets material name from its identifier.
        
            materialId: The material identifier.
            Returns: The material name without the group.
        """
        pass

    def GetMaterialThickness(self, materialId, gaugeId):
        """
        GetMaterialThickness(self: FabricationConfiguration, materialId: int, gaugeId: int) -> float
        
            Gets material thickness from its material/gauge identifiers.
        
            materialId: The material identifier.
            gaugeId: The gauge identifier within the specified material.
            Returns: The thickness of the material/gauge.
        """
        pass

    def GetProfile(self):
        """
        GetProfile(self: FabricationConfiguration) -> str
        
            Return the profile of the loaded fabrication configuration. Return empty string 
             for global profile.
        """
        pass

    def GetService(self, serviceId):
        """
        GetService(self: FabricationConfiguration, serviceId: int) -> FabricationService
        
            Get the service based on the service identifier from the fabrication 
             configuration in the current document.
        
        
            serviceId: The service identifier.
            Returns: The service based on the service identifier.
        """
        pass

    def GetSpecificationAbbreviation(self, specificationId):
        """
        GetSpecificationAbbreviation(self: FabricationConfiguration, specificationId: int) -> str
        
            Gets specification abreviation.
        
            specificationId: The specification identifier.
        """
        pass

    def GetSpecificationGroup(self, specId):
        """
        GetSpecificationGroup(self: FabricationConfiguration, specId: int) -> str
        
            Gets the specification group from its identifier.
        
            specId: The specification identifier.
            Returns: The specification group.
        """
        pass

    def GetSpecificationName(self, specId):
        """
        GetSpecificationName(self: FabricationConfiguration, specId: int) -> str
        
            Gets the specification name from its identifier.
        
            specId: The specification identifier.
            Returns: The specification name;
        """
        pass

    def HasValidConfiguration(self):
        """
        HasValidConfiguration(self: FabricationConfiguration) -> bool
        
            Checks whether a valid fabrication configuration has been set for the project.
            Returns: True if a valid fabrication configuration has been set for the project.
        """
        pass

    def LoadServices(self, serviceIds):
        """ LoadServices(self: FabricationConfiguration, serviceIds: IList[int]) -> IList[int] """
        pass

    def LocateFabricationConnector(self, group, name, domain, shape):
        """
        LocateFabricationConnector(self: FabricationConfiguration, group: str, name: str, domain: ConnectorDomainType, shape: ConnectorProfileType) -> int
        
            Gets the fabrication connector identifiers by group and name, filtered by shape 
             and domain.
        
        
            group: The fabrication connector group.
            name: The fabrication connector name.
            domain: ConnectorDomainType to filter by. Pass ConnectorDomainType::Undefined to get 
             all connector domains.
        
            shape: ConnectorProfileType to filter by. Pass ConnectorProfileType::Invalid to get 
             all shapes.
        
            Returns: Return the fabrication connector identifier. Returns -1 if not found.
        """
        pass

    def LocateInsulationSpecification(self, group, name):
        """
        LocateInsulationSpecification(self: FabricationConfiguration, group: str, name: str) -> int
        
            Gets the insulation specification by group and name.
        
            group: The insulation specification group.
            name: The insulation specification name.
            Returns: The insulation specification identifier. Returns -1 if not found.
        """
        pass

    def LocateMaterial(self, group, name):
        """
        LocateMaterial(self: FabricationConfiguration, group: str, name: str) -> int
        
            Gets material by group and name.
        
            group: The material group.
            name: The group name.
            Returns: The material identifier. Returns -1 if not found.
        """
        pass

    def LocateSpecification(self, group, name):
        """
        LocateSpecification(self: FabricationConfiguration, group: str, name: str) -> int
        
            Gets the specification identifier by group and name.
        
            group: The specification group.
            name: The specification name.
            Returns: The specification identifier. Returns -1 if not found.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def ReloadConfiguration(self):
        """
        ReloadConfiguration(self: FabricationConfiguration) -> ConfigurationReloadInfo
        
            Reloads the fabrication configuration from its source fabrication configuration.
            Returns: The information about the reload of the fabrication configuration.
        """
        pass

    def SetConfiguration(self, fabricationConfigurationInfo, profile=None):
        """
        SetConfiguration(self: FabricationConfiguration, fabricationConfigurationInfo: FabricationConfigurationInfo)
            Set the fabrication configuration with global profile.
        
            fabricationConfigurationInfo: The desired fabrication configuration.
        SetConfiguration(self: FabricationConfiguration, fabricationConfigurationInfo: FabricationConfigurationInfo, profile: str)
            Set the fabrication configuration with specific profile.
        
            fabricationConfigurationInfo: The desired fabrication configuration.
            profile: The desired profile of the fabrication configuration. Use empty string for the 
             global profile.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def UnloadServices(self, serviceIds):
        """ UnloadServices(self: FabricationConfiguration, serviceIds: IList[int]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FabricationConfigurationInfo(object, IDisposable):
    """ Represents an MEP object that holds the properties of an MEP fabrication configuration. """
    def Dispose(self):
        """ Dispose(self: FabricationConfigurationInfo) """
        pass

    @staticmethod
    def FindSourceFabricationConfiguration(fabricationConfiguration):
        """
        FindSourceFabricationConfiguration(fabricationConfiguration: FabricationConfigurationInfo) -> FabricationConfigurationInfo
        
            Finds the source fabrication configuration on disk which matches the input 
             fabrication configuration.
        
        
            fabricationConfiguration: The fabrication configuration to match.
            Returns: The matching source fabrication configuration.
        """
        pass

    @staticmethod
    def GetAllFabricationConfigurations():
        """
        GetAllFabricationConfigurations() -> IList[FabricationConfigurationInfo]
        
            Gets all added fabrication configurations.
            Returns: All added fabrication configurations.
        """
        pass

    def GetProfiles(self):
        """
        GetProfiles(self: FabricationConfigurationInfo) -> IList[str]
        
            Return the profiles in the fabrication configuration.
        """
        pass

    def IsValid(self):
        """
        IsValid(self: FabricationConfigurationInfo) -> bool
        
            Checks if the fabrication configuration is valid.
            Returns: True if the fabrication configuration is valid.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FabricationConfigurationInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The description of the fabrication configuration.

Get: Description(self: FabricationConfigurationInfo) -> str

"""

    GUID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The unique identification of the fabrication configuration.

Get: GUID(self: FabricationConfigurationInfo) -> Guid

"""

    IsLocked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks whether the fabrication configuration is locked. If true, the configuration is locked and cannot be removed.

Get: IsLocked(self: FabricationConfigurationInfo) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FabricationConfigurationInfo) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the fabrication configuration.

Get: Name(self: FabricationConfigurationInfo) -> str

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The path where the fabrication configuration is located.

Get: Path(self: FabricationConfigurationInfo) -> str

"""

    UnitSystem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The unit system of the fabrication configuration. Units can be UnitSystem.Metric or UnitSystem.Imperial.

Get: UnitSystem(self: FabricationConfigurationInfo) -> UnitSystem

"""

    Version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The version of the fabrication configuration.

Get: Version(self: FabricationConfigurationInfo) -> float

"""



class FabricationConnectorInfo(object, IDisposable):
    """ Fabrication connector information. """
    def Dispose(self):
        """ Dispose(self: FabricationConnectorInfo) """
        pass

    def HasDoubleWallConnector(self):
        """
        HasDoubleWallConnector(self: FabricationConnectorInfo) -> bool
        
            Checks if there are any double wall connectors fabricated.
            Returns: True if there are any double wall connectors fabricated.
        """
        pass

    def IsValid(self):
        """
        IsValid(self: FabricationConnectorInfo) -> bool
        
            Checks if the connector has fabrication parameters associated with it that can 
             be set.
        
            Returns: True if the connector has fabrication parameters associated with it that can be 
             set.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FabricationConnectorInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    BodyConnectorId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fabrication body connector Id.

Get: BodyConnectorId(self: FabricationConnectorInfo) -> int

Set: BodyConnectorId(self: FabricationConnectorInfo) = value
"""

    DoubleWallConnectorId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fabrication double wall connector Id.

Get: DoubleWallConnectorId(self: FabricationConnectorInfo) -> int

Set: DoubleWallConnectorId(self: FabricationConnectorInfo) = value
"""

    FabricationIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The index of the connector shown within the fabrication software.

Get: FabricationIndex(self: FabricationConnectorInfo) -> int

"""

    IsBodyConnectorLocked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fabrication body connector lock.

Get: IsBodyConnectorLocked(self: FabricationConnectorInfo) -> bool

Set: IsBodyConnectorLocked(self: FabricationConnectorInfo) = value
"""

    IsDoubleWallConnectorLocked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fabrication double wall connector lock.

Get: IsDoubleWallConnectorLocked(self: FabricationConnectorInfo) -> bool

Set: IsDoubleWallConnectorLocked(self: FabricationConnectorInfo) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FabricationConnectorInfo) -> bool

"""



class FabricationDimensionDefinition(object, IDisposable):
    """ Fabricaition dimension definition """
    def Dispose(self):
        """ Dispose(self: FabricationDimensionDefinition) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FabricationDimensionDefinition, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsModifiable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """If the fabrication dimension is modifiable by user.

Get: IsModifiable(self: FabricationDimensionDefinition) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FabricationDimensionDefinition) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fabrication dimension name.

Get: Name(self: FabricationDimensionDefinition) -> str

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fabrication dimension type.

Get: Type(self: FabricationDimensionDefinition) -> FabricationDimensionType

"""

    UnitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Fabrication dimension unit type.

Get: UnitType(self: FabricationDimensionDefinition) -> FabricationDimensionUnitType

"""



class FabricationDimensionType(Enum, IComparable, IFormattable, IConvertible):
    """
    Fabrication dimension type.
    
    enum FabricationDimensionType, values: Angle (4), Depth (2), Diameter (3), Internal (0), Length (5), Width (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Angle = None
    Depth = None
    Diameter = None
    Internal = None
    Length = None
    value__ = None
    Width = None


class FabricationDimensionUnitType(Enum, IComparable, IFormattable, IConvertible):
    """
    Fabrication dimension unit type.
    
    enum FabricationDimensionUnitType, values: Angular (2), Linear (1), NoUnits (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Angular = None
    Linear = None
    NoUnits = None
    value__ = None


class FabricationHostedInfo(object, IDisposable):
    """ The fabrication hosted element information. """
    def DisconnectFromHost(self):
        """
        DisconnectFromHost(self: FabricationHostedInfo)
            Disconnects the part from the host.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FabricationHostedInfo) """
        pass

    def GetBearerCenterline(self):
        """
        GetBearerCenterline(self: FabricationHostedInfo) -> Line
        
            Gets the centerline of the bearer. The method is applicable only for bearer 
             hanger.
        
            Returns: The centerline of the bearer.
        """
        pass

    def PlaceOnHost(self, hostId, hostConnector, distance):
        """
        PlaceOnHost(self: FabricationHostedInfo, hostId: ElementId, hostConnector: Connector, distance: float)
            Places the part on the specified host.
        
            hostId: Id of the host fabrication part.
            hostConnector: The connector of the host.
            distance: The distance from the connector to place the hosted part. Units are in feet 
             (ft).
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FabricationHostedInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    HostId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Id of the host.

Get: HostId(self: FabricationHostedInfo) -> ElementId

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FabricationHostedInfo) -> bool

"""



class FabricationPart(Element, IDisposable):
    """ Represents a fabrication component in the Autodesk Revit MEP product. """
    def AdjustEndLength(self, partConn, lengthToAdjust, totalLengthOnly):
        """
        AdjustEndLength(self: FabricationPart, partConn: Connector, lengthToAdjust: float, totalLengthOnly: bool) -> float
        
            Adjusts the length for the specified connector.
        
            partConn: # The connector of the fabrication part to adjust length.
            lengthToAdjust: The length to adjust.
            totalLengthOnly: True if adjust the total length only when adjust length.
            Returns: The adjusted length.
        """
        pass

    @staticmethod
    def AlignPartByConnectors(doc, partConn, toConn, axisRotation):
        """
        AlignPartByConnectors(doc: Document, partConn: Connector, toConn: Connector, axisRotation: float) -> bool
        
            Moves fabrication part by one of its connectors and aligns it to another 
             connector.
        
        
            doc: The document.
            partConn: The connector of the fabrication part to move and align by.
            toConn: The connector of the fabrication part or family to align to.
            axisRotation: Rotation around the direction of connection - angle between width vectors in 
             radians.
        
            Returns: True if alignment succeeds, false otherwise.
        """
        pass

    def CanAdjustEndLength(self, partConn):
        """
        CanAdjustEndLength(self: FabricationPart, partConn: Connector) -> bool
        
            Checks if the end of fabrication part can be adjusted.
        
            partConn: # The connector of the fabrication part to adjust length.
            Returns: True if the end of fabrication part can be adjusted.
        """
        pass

    @staticmethod
    def ConnectAndCouple(doc, partConn, toConn):
        """
        ConnectAndCouple(doc: Document, partConn: Connector, toConn: Connector) -> bool
        
            Makes a connection between the specified connectors and adds coupling if 
             necessary.
        
        
            doc: The document.
            partConn: The connector of the fabrication part.
            toConn: The connector of the fabrication part or family to connect to.
            Returns: True if connection succeeded, false otherwise.
        """
        pass

    @staticmethod
    def Create(document, button, *__args):
        """
        Create(document: Document, button: FabricationServiceButton, width: float, depth: float, levelId: ElementId) -> FabricationPart
        
            Creates a fabrication part element based on button and size.
        
            document: The document.
            button: The fabrication service button to use. Matches button condition based on the 
             specified size.
        
            width: The width of the part. Units are in feet (ft).
            depth: The depth of the part. Units are in feet (ft). It should be equal to width for 
             round part.
        
            levelId: The level identifier.
            Returns: The new fabrication part.
        Create(document: Document, button: FabricationServiceButton, condition: int, levelId: ElementId) -> FabricationPart
        
            Creates a fabrication part element based on button.
        
            document: The document.
            button: The fabrication service button to use.
            condition: The condition index.
            levelId: The level identifier.
            Returns: The new fabrication part.
        """
        pass

    @staticmethod
    def CreateHanger(document, button, *__args):
        """
        CreateHanger(document: Document, button: FabricationServiceButton, hostId: ElementId, hostConnector: Connector, distance: float, attachToStructure: bool) -> FabricationPart
        
            Creates a hanger on the fabrication part.
        
            document: The document.
            button: The fabrication service button to use. It finds the matching condition 
             automatically if the button has multiple condition.
        
            hostId: The host part id. The host should be one horizontal straight part.
            hostConnector: The connector of the host.
            distance: The distance from the input connector of the host part. Units are in feet (ft).
            attachToStructure: Attach to the nearest structural element. The structural element might be one 
             of Floor/Roof/Stair/Structure Framing.
        
            Returns: The newly-created fabrication hanger.
        CreateHanger(document: Document, button: FabricationServiceButton, condition: int, hostId: ElementId, hostConnector: Connector, distance: float, attachToStructure: bool) -> FabricationPart
        
            Creates a hanger on the fabrication part.
        
            document: The document.
            button: The fabrication service button to use.
            condition: The condition index. If the button has multiple conditions.
            hostId: The host part id. The host should be one horizontal straight part.
            hostConnector: The connector of the host.
            distance: The distance from the input connector of the host part. Units are in feet (ft).
            attachToStructure: Attach to the nearest structural element. The structural element might be one 
             of Floor/Roof/Stair/Structural Framing.
        
            Returns: The newly-created fabrication hanger.
        CreateHanger(document: Document, button: FabricationServiceButton, condition: int, levelId: ElementId) -> FabricationPart
        
            Creates a free placed hanger.
        
            document: The document.
            button: The fabrication service button to use.
            condition: The condition index. If the button has multiple conditions.
            levelId: The level identifier of the hanger.
            Returns: The newly-created fabrication hanger.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetCalculatedDimensionValue(self, dim):
        """
        GetCalculatedDimensionValue(self: FabricationPart, dim: FabricationDimensionDefinition) -> str
        
            Gets the calculated dimension value.
        
            dim: The fabrication dimension.
            Returns: The calculated dimension value.
        """
        pass

    def GetDimensionCalculatedOptions(self, dim):
        """
        GetDimensionCalculatedOptions(self: FabricationPart, dim: FabricationDimensionDefinition) -> IList[str]
        
            Gets the calculated options of the fabrication dimension.
        
            dim: The fabrication dimension.
            Returns: The calculated options of the fabrication dimension.
        """
        pass

    def GetDimensions(self):
        """
        GetDimensions(self: FabricationPart) -> IList[FabricationDimensionDefinition]
        
            Gets all fabrication dimensions.
            Returns: Returns an array of fabrication dimensions.
        """
        pass

    def GetDimensionValue(self, dim):
        """
        GetDimensionValue(self: FabricationPart, dim: FabricationDimensionDefinition) -> float
        
            Gets the value of the fabrication dimension, returns value in Revit internal 
             units.
        
        
            dim: The fabrication dimension.
            Returns: The dimension value.
        """
        pass

    def GetHostedInfo(self):
        """
        GetHostedInfo(self: FabricationPart) -> FabricationHostedInfo
        
            Gets the fabrication hosted element information.
            Returns: The fabrication hosted element information. Returns null if the fabrication 
             part does not have a host.
        """
        pass

    def GetProductListEntryCount(self):
        """
        GetProductListEntryCount(self: FabricationPart) -> int
        
            Gets the number of product entries for this part.
            Returns: Returns the number of product entries.
        """
        pass

    def GetProductListEntryName(self, index):
        """
        GetProductListEntryName(self: FabricationPart, index: int) -> str
        
            Gets the specified product list entry name.
        
            index: The product entry index.
            Returns: Returns the specified product entry name.
        """
        pass

    def GetRodInfo(self):
        """
        GetRodInfo(self: FabricationPart) -> FabricationRodInfo
        
            Gets the fabrication rod information.
            Returns: The fabrication rod information. Returns null if the fabrication part does not 
             have any rod.
        """
        pass

    def GetTransform(self):
        """
        GetTransform(self: FabricationPart) -> Transform
        
            Gets the transformation matrix of the fabrication part element.
            Returns: The transformation matrix of the fabrication part element.
        """
        pass

    def IsAHanger(self):
        """
        IsAHanger(self: FabricationPart) -> bool
        
            Checks whether it is a hanger.
            Returns: True if the part is a hanger. False otherwise.
        """
        pass

    def IsAStraight(self):
        """
        IsAStraight(self: FabricationPart) -> bool
        
            Checks whether it is a straight part.
            Returns: True if the part is a straight part. False otherwise.
        """
        pass

    def IsATap(self):
        """
        IsATap(self: FabricationPart) -> bool
        
            Checks if it is any sort of tap.
            Returns: True if it is any sort of tap.
        """
        pass

    def IsDimensionCalculated(self, dim):
        """
        IsDimensionCalculated(self: FabricationPart, dim: FabricationDimensionDefinition) -> bool
        
            Checks if the fabrication dimension is calculated.
        
            dim: The fabrication dimension.
            Returns: True if the fabrication dimension is calculated.
        """
        pass

    def IsProductList(self):
        """
        IsProductList(self: FabricationPart) -> bool
        
            Gets whether or not the fabrication part is a product list.
            Returns: Returns true if the fabrication part is a product list.
        """
        pass

    def IsProductListEntryCompatibleSize(self, productEntry):
        """
        IsProductListEntryCompatibleSize(self: FabricationPart, productEntry: int) -> bool
        
            Checks to see if this part can be changed to the specified product entry 
             without altering any connected dimensions.
        
        
            productEntry: The product entry index.
            Returns: Returns true if the part can be changed to the specified product entry without 
             altering any connected dimensions.
        """
        pass

    @staticmethod
    def OptimizeLengths(doc, partIds):
        """ OptimizeLengths(doc: Document, partIds: ISet[ElementId]) -> ISet[ElementId] """
        pass

    @staticmethod
    def PlaceAsTap(doc, tapPartConn, hostPartConn, distance, axisRotation, secondaryAxisRotation):
        """
        PlaceAsTap(doc: Document, tapPartConn: Connector, hostPartConn: Connector, distance: float, axisRotation: float, secondaryAxisRotation: float)
            Places the part by its connector to a specific position on the straight part at 
             the specified distance from the host part connector.
        
        
            doc: The document.
            tapPartConn: The connector of the part to place.
            hostPartConn: The connector of host part.
            distance: The distance to host part connector where to place the part.
            axisRotation: The axis rotation in radians.
            secondaryAxisRotation: The secondary axis rotation in radians.
        """
        pass

    @staticmethod
    def PlaceFittingAsCutIn(doc, straightId, fittingId, position, fittingConn, axisRotation):
        """
        PlaceFittingAsCutIn(doc: Document, straightId: ElementId, fittingId: ElementId, position: XYZ, fittingConn: Connector, axisRotation: float) -> bool
        
            Places the fitting on the straight part by cut in, use the fitting's focal 
             point as the insertion position.
        
        
            doc: The document.
            straightId: Id of the straight to be cut in.
            fittingId: Id of the fitting to cut in.
            position: The position to cut in the straight.
            fittingConn: The connector of the fitting to align with the primary connector of the 
             straight part.
        
            axisRotation: Rotation around the direction of connection - angle between width vectors in 
             radians.
        
            Returns: True if cuts in successfully.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    @staticmethod
    def Reposition(doc, partId):
        """
        Reposition(doc: Document, partId: ElementId)
            Repositions the fabrication straight part to another end of the run.
        
            doc: The document.
            partId: Id of the fabrication part to reposition.
        """
        pass

    @staticmethod
    def RotateConnectedPartByConnector(doc, conn, axisRotationBy):
        """
        RotateConnectedPartByConnector(doc: Document, conn: Connector, axisRotationBy: float)
            Rotates a connected fabrication part around the axis of the specified connector.
        
            doc: The document.
            conn: The connected connector of the fabrication part to be rotated.
            axisRotationBy: The angle in radians to rotate by.
        """
        pass

    @staticmethod
    def RotateConnectedTap(doc, tap, primaryAxisRotateBy, secondaryAxisRotateBy):
        """
        RotateConnectedTap(doc: Document, tap: FabricationPart, primaryAxisRotateBy: float, secondaryAxisRotateBy: float)
            Rotates a connected fabrication tap by the specified angles about the primary 
             and secondary axis.
        
        
            doc: The document.
            tap: The connected fabrication part tap to rotate.
            primaryAxisRotateBy: The primary axis rotation angle in radians to rotate by.
            secondaryAxisRotateBy: The secondary axis rotation angle in radians to rotate by.
        """
        pass

    def SetCalculatedDimensionValue(self, dim, value):
        """
        SetCalculatedDimensionValue(self: FabricationPart, dim: FabricationDimensionDefinition, value: str)
            Sets the calculated dimension value.
        
            dim: The fabrication dimension.
            value: The calculated dimension value.
        """
        pass

    def SetDimensionValue(self, dim, newValue):
        """
        SetDimensionValue(self: FabricationPart, dim: FabricationDimensionDefinition, newValue: float)
            Sets the fabrication dimension value. The value is in Revit internal units.
        
            dim: The fabrication dimension.
            newValue: The dimension value.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetPositionByEnd(self, connector, position):
        """
        SetPositionByEnd(self: FabricationPart, connector: Connector, position: XYZ)
            Positions the connector of the fabrication part element by the passed point.
        
            connector: The connector of the fabrication part element.
            position: The position to move to.
        """
        pass

    @staticmethod
    def StretchAndFit(document, stretchConnector, target, newPartIds):
        """ StretchAndFit(document: Document, stretchConnector: Connector, target: FabricationPartRouteEnd) -> (FabricationPartFitResult, ISet[ElementId]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Alias = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The alias of the fabrication part.

Get: Alias(self: FabricationPart) -> str

"""

    BottomOfPartElevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The associated elevation to the bottom of fabrication part off of the current level.

Get: BottomOfPartElevation(self: FabricationPart) -> float

"""

    ConnectorManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The connector manager of the fabrication part.

Get: ConnectorManager(self: FabricationPart) -> ConnectorManager

"""

    CutType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The cut type of the fabrication part.

Get: CutType(self: FabricationPart) -> int

"""

    DomainType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The domain type for the fabrication part.

Get: DomainType(self: FabricationPart) -> ConnectorDomainType

"""

    DoubleWallMaterial = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The double wall material identifier of the fabrication part.

Get: DoubleWallMaterial(self: FabricationPart) -> int

"""

    DoubleWallMaterialArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The double wall material area of the fabrication part. If the fabrication part is not double walled, returns zero.

Get: DoubleWallMaterialArea(self: FabricationPart) -> float

"""

    DoubleWallMaterialThickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The double wall material thickness of the fabrication part. If the fabrication part is not double walled, returns zero.

Get: DoubleWallMaterialThickness(self: FabricationPart) -> float

"""

    HasDoubleWall = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the fabrication part is double walled.

Get: HasDoubleWall(self: FabricationPart) -> bool

"""

    HasInsulation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the fabrication part is insulated.

Get: HasInsulation(self: FabricationPart) -> bool

"""

    HasLining = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the fabrication part is lined.

Get: HasLining(self: FabricationPart) -> bool

"""

    InsulationArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The insulation area of the fabrication part. If the fabrication part is not insulated, returns zero.

Get: InsulationArea(self: FabricationPart) -> float

"""

    InsulationSpecification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fabrication part insulation specification identifier.

Get: InsulationSpecification(self: FabricationPart) -> int

Set: InsulationSpecification(self: FabricationPart) = value
"""

    InsulationThickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The insulation thickness of the fabrication part. If the fabrication part is not insulated, returns zero.

Get: InsulationThickness(self: FabricationPart) -> float

"""

    InsulationType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The insulation type of the fabrication part.

Get: InsulationType(self: FabricationPart) -> str

"""

    IsBoughtOut = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the fabrication part is bought out.

Get: IsBoughtOut(self: FabricationPart) -> bool

"""

    ItemCustomId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The item custom identifier for the fabrication part.

Get: ItemCustomId(self: FabricationPart) -> int

"""

    ItemNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The item number that is used for identification, re-ordering from shop.

Get: ItemNumber(self: FabricationPart) -> str

Set: ItemNumber(self: FabricationPart) = value
"""

    LevelOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The associated level offset that indicates the distance from the center of the fabrication part to the current level.

Get: LevelOffset(self: FabricationPart) -> float

"""

    LiningArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The lining area of the fabrication part. If the fabrication part is not lined, returns zero.

Get: LiningArea(self: FabricationPart) -> float

"""

    LiningThickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The lining thickness of the fabrication part. If the fabrication part is not lined, returns zero.

Get: LiningThickness(self: FabricationPart) -> float

"""

    LiningType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The lining type of the fabrication part.

Get: LiningType(self: FabricationPart) -> str

"""

    Material = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fabrication material identifier.

Get: Material(self: FabricationPart) -> int

Set: Material(self: FabricationPart) = value
"""

    MaterialThickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The material thickness of the fabrication part.

Get: MaterialThickness(self: FabricationPart) -> float

"""

    Notes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The notes of the fabrication part.

Get: Notes(self: FabricationPart) -> str

Set: Notes(self: FabricationPart) = value
"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The origin of the fabrication part element.

Get: Origin(self: FabricationPart) -> XYZ

"""

    OverallSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The overall size of the fabrication part.

Get: OverallSize(self: FabricationPart) -> str

"""

    ProductCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current database id of the part within the fabrication database.

Get: ProductCode(self: FabricationPart) -> str

"""

    ProductDataRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The product data range of the fabrication part.

Get: ProductDataRange(self: FabricationPart) -> str

"""

    ProductFinishDescription = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The product finish description of the fabrication part.

Get: ProductFinishDescription(self: FabricationPart) -> str

"""

    ProductInstallType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The product install type of the fabrication part.

Get: ProductInstallType(self: FabricationPart) -> str

"""

    ProductListEntry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The product entry index of the fabrication part. A value of -1 indicates the fabrication part is not a product list.

Get: ProductListEntry(self: FabricationPart) -> int

Set: ProductListEntry(self: FabricationPart) = value
"""

    ProductLongDescription = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The product long description of the fabrication part.

Get: ProductLongDescription(self: FabricationPart) -> str

"""

    ProductMaterialDescription = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The product material description of the fabrication part.

Get: ProductMaterialDescription(self: FabricationPart) -> str

"""

    ProductName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The product name of the fabrication part.

Get: ProductName(self: FabricationPart) -> str

"""

    ProductOriginalEquipmentManufacture = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The product original equipment manufacture (OEM) of the fabrication part.

Get: ProductOriginalEquipmentManufacture(self: FabricationPart) -> str

"""

    ProductShortDescription = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The product short description of the fabrication part.

Get: ProductShortDescription(self: FabricationPart) -> str

"""

    ProductSizeDescription = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The product size description of the fabrication part.

Get: ProductSizeDescription(self: FabricationPart) -> str

"""

    ProductSpecificationDescription = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The product specification description of the fabrication part.

Get: ProductSpecificationDescription(self: FabricationPart) -> str

"""

    ServiceAbbreviation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The associated service abbreviation for the fabrication service.

Get: ServiceAbbreviation(self: FabricationPart) -> str

"""

    ServiceId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fabrication part service identifier. The service can only be changed to compatible services.

Get: ServiceId(self: FabricationPart) -> int

"""

    ServiceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the service associated with the fabrication part.

Get: ServiceName(self: FabricationPart) -> str

"""

    SheetMetalArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sheet metal area of the fabrication part.

Get: SheetMetalArea(self: FabricationPart) -> float

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The size of the fabrication part.

Get: Size(self: FabricationPart) -> str

"""

    Slope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The slope for the straight fabrication part.

Get: Slope(self: FabricationPart) -> float

"""

    Specification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fabrication part specification identifier.

Get: Specification(self: FabricationPart) -> int

Set: Specification(self: FabricationPart) = value
"""

    TopOfPartElevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The associated elevation to the top of fabrication part off of the current level.

Get: TopOfPartElevation(self: FabricationPart) -> float

"""

    ValidationStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The validation status of the fabrication part.

Get: ValidationStatus(self: FabricationPart) -> ValidationStatus

"""

    Vendor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The vendor of the fabrication part.

Get: Vendor(self: FabricationPart) -> str

"""

    VendorCode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The vendor code of the fabrication part.

Get: VendorCode(self: FabricationPart) -> str

"""

    Weight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The weight of the fabrication part.

Get: Weight(self: FabricationPart) -> float

"""



class FabricationPartType(ElementType, IDisposable):
    """ Represents a fabrication component type in the Autodesk Revit MEP product. """
    @staticmethod
    def Create(document, button, condition):
        """
        Create(document: Document, button: FabricationServiceButton, condition: int) -> FabricationPartType
        
            Creates a fabrication part type element based on a specific fabrication servic 
             button and condition.
        
        
            document: The document.
            button: The fabrication service button.
            condition: The condition index.
            Returns: The created fabrication part type element.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def Lookup(document, button, condition):
        """
        Lookup(document: Document, button: FabricationServiceButton, condition: int) -> ElementId
        
            Looks up an existing fabrication part type based on a specfic fabrication 
             service button and condition.
        
        
            document: The document.
            button: The fabrication service button.
            condition: The condition index.
            Returns: Identifier of the fabrication part type element or invalidElementId if no 
             fabrication part type exist for the
           specific fabrication service button and 
             condition
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FabricationRodInfo(object, IDisposable):
    """ The rod information of the fabrication part. """
    def AttachToHanger(self, hangerId, rodIndex, position):
        """
        AttachToHanger(self: FabricationRodInfo, hangerId: ElementId, rodIndex: int, position: XYZ)
            Attaches the hanger rod to another bearer hanger.
        
            hangerId: Id of the bearer hanger to which the rod attaches.
            rodIndex: The index of the rod.
            position: The position of the rod end. It should be on bearer centerline.
        """
        pass

    def AttachToStructure(self):
        """
        AttachToStructure(self: FabricationRodInfo)
            Attaches to the nearest structural element.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FabricationRodInfo) """
        pass

    def GetBearerExtension(self, rodIndex):
        """
        GetBearerExtension(self: FabricationRodInfo, rodIndex: int) -> float
        
            Gets the bearer extension. The method is applicable only for bearer hanger.
        
            rodIndex: The index of the rod.
        """
        pass

    def GetRodAttachedElementId(self, rodIndex):
        """
        GetRodAttachedElementId(self: FabricationRodInfo, rodIndex: int) -> LinkElementId
        
            Gets the id of the attached component for the specified rod.
        
            rodIndex: The index of the specified rod.
        """
        pass

    def GetRodEndPosition(self, rodIndex):
        """
        GetRodEndPosition(self: FabricationRodInfo, rodIndex: int) -> XYZ
        
            Gets the position of the rod end.
        
            rodIndex: The index of the rod.
            Returns: The position of the rod end.
        """
        pass

    def IsRodLockedWithHost(self, rodIndex):
        """
        IsRodLockedWithHost(self: FabricationRodInfo, rodIndex: int) -> bool
        
            Checks if the rod is locked with the host. The method is applicable only for 
             bearer hanger.
        
        
            rodIndex: The index of the rod.
            Returns: True if the rod is locked with its host.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FabricationRodInfo, disposing: bool) """
        pass

    def SetBearerExtension(self, rodIndex, length):
        """
        SetBearerExtension(self: FabricationRodInfo, rodIndex: int, length: float)
            Sets the bearer extension. The method is applicable only for bearer hanger.
        
            rodIndex: The index of the rod.
            length: The new length of bearer extension.
        """
        pass

    def SetRodEndPosition(self, rodIndex, position):
        """
        SetRodEndPosition(self: FabricationRodInfo, rodIndex: int, position: XYZ)
            Sets the position of the rod end. The method is applicable only for bearer 
             hanger.
        
        
            rodIndex: The index of the rod.
            position: The position of the rod end.
        """
        pass

    def SetRodLockedWithHost(self, rodIndex, locked):
        """
        SetRodLockedWithHost(self: FabricationRodInfo, rodIndex: int, locked: bool)
            Locks the rod with the host. The method is applicable only for bearer hanger.
        
            rodIndex: The index of the rod.
            locked: Locks the rod with the host.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsAttachedToStructure = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks if the hanger is attached to structure.

Get: IsAttachedToStructure(self: FabricationRodInfo) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FabricationRodInfo) -> bool

"""

    RodCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of rods.

Get: RodCount(self: FabricationRodInfo) -> int

"""



class FabricationService(object, IDisposable):
    """ This object contains information about a fabrication service. """
    def Dispose(self):
        """ Dispose(self: FabricationService) """
        pass

    def GetButton(self, groupIndex, buttonIndex):
        """
        GetButton(self: FabricationService, groupIndex: int, buttonIndex: int) -> FabricationServiceButton
        
            Gets the service button for a given group index and button index from the 
             service.
        
        
            groupIndex: The group index.
            buttonIndex: The button index.
            Returns: The service button
        """
        pass

    def GetButtonCount(self, group):
        """
        GetButtonCount(self: FabricationService, group: int) -> int
        
            Gets the number of buttons for a given group in the service.
        
            group: The index of the group
            Returns: The number of buttons.
        """
        pass

    def GetGroupName(self, group):
        """
        GetGroupName(self: FabricationService, group: int) -> str
        
            Gets the name of a group based on group index.
        
            group: The index of the group.
            Returns: The name of the group.
        """
        pass

    def IsValidButtonIndex(self, groupIndex, buttonIndex):
        """
        IsValidButtonIndex(self: FabricationService, groupIndex: int, buttonIndex: int) -> bool
        
            Validates the button index.
        
            groupIndex: The group index.
            buttonIndex: The button index to check.
            Returns: True if larger or equal to 0 and less than GroupCount.
        """
        pass

    def IsValidGroupIndex(self, groupIndex):
        """
        IsValidGroupIndex(self: FabricationService, groupIndex: int) -> bool
        
            Validates the group index.
        
            groupIndex: The group index to check.
            Returns: True if larger or equal to 0 and less than GroupCount.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FabricationService, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Abbreviation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The short name of service.

Get: Abbreviation(self: FabricationService) -> str

"""

    FabricationSystemName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fabrication system name of the service.

Get: FabricationSystemName(self: FabricationService) -> str

"""

    GroupCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of groups in the service.

Get: GroupCount(self: FabricationService) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FabricationService) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the service.

Get: Name(self: FabricationService) -> str

"""

    ServiceId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The service identifier of the service.

Get: ServiceId(self: FabricationService) -> int

"""



class FabricationServiceButton(object, IDisposable):
    """ The object contains information about a fabricaton button. """
    def ContainsFabricationPartType(self, partType):
        """
        ContainsFabricationPartType(self: FabricationServiceButton, partType: FabricationPartType) -> bool
        
            Checks to see if the fabrication part type exists on one of the button 
             conditions.
        
        
            partType: The fabrication part type to check.
            Returns: Returns true if the fabrication part type exists on the fabrication service 
             button.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FabricationServiceButton) """
        pass

    def GetConditionDescription(self, condition):
        """
        GetConditionDescription(self: FabricationServiceButton, condition: int) -> str
        
            Gets the description for the condition size range.
        
            condition: The index of the condition in the service button.
            Returns: A user-defined string that describes the condition range, as defined in the 
             fabrication configuration.
           For example, this may describe the size of the 
             range or describe the type of fitting.
        """
        pass

    def GetConditionImage(self, condition):
        """ GetConditionImage(self: FabricationServiceButton, condition: int) -> Bitmap """
        pass

    def GetConditionLowerValue(self, condition):
        """
        GetConditionLowerValue(self: FabricationServiceButton, condition: int) -> float
        
            Gets the condition lower value (valid if greater or equal) for a given 
             condition index.
        
        
            condition: The condition index.
            Returns: The condition lower value.
        """
        pass

    def GetConditionName(self, condition):
        """
        GetConditionName(self: FabricationServiceButton, condition: int) -> str
        
            Gets the name of the specified condition on the fabrication service button.
        
            condition: The condition index.
            Returns: The name of the specified condition on the fabrication service button.
        """
        pass

    def GetConditionUpperValue(self, condition):
        """
        GetConditionUpperValue(self: FabricationServiceButton, condition: int) -> float
        
            Gets the condition upper value (valid if less) for a given condition index.
        
            condition: The condition index.
            Returns: The condition upper value.
        """
        pass

    def GetImage(self):
        """
        GetImage(self: FabricationServiceButton) -> Bitmap
        
            Gets the image for fabrication service button.
            Returns: System.Drawing.Bitmap represents the fabrication service button image. ll if 
             there is no preview image.
        """
        pass

    def IsUnrestrictedCondition(self, condition):
        """
        IsUnrestrictedCondition(self: FabricationServiceButton, condition: int) -> bool
        
            Checks if the condition is unrestricted.
        
            condition: The condition index.
            Returns: True if the condition is unrestricted.
        """
        pass

    def IsValid(self):
        """
        IsValid(self: FabricationServiceButton) -> bool
        
            Checks if the button contains only valid fittings.
            Returns: True if the button contains only valid fittings.
        """
        pass

    @staticmethod
    def IsValidConditionIndex(button, condition):
        """
        IsValidConditionIndex(button: FabricationServiceButton, condition: int) -> bool
        
            Validates if the given condition index is valid or not.
        
            button: The button to check.
            condition: The condition index.
            Returns: True if larger or equal to 0 and less than ConditionCount.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FabricationServiceButton, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ButtonIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The button index for this button.

Get: ButtonIndex(self: FabricationServiceButton) -> int

"""

    Code = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The code of the button.

Get: Code(self: FabricationServiceButton) -> str

"""

    ConditionCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of conditions.

Get: ConditionCount(self: FabricationServiceButton) -> int

"""

    GroupIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The group index for this button.

Get: GroupIndex(self: FabricationServiceButton) -> int

"""

    IsAHanger = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks if the fabrication service button is hanger.

Get: IsAHanger(self: FabricationServiceButton) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FabricationServiceButton) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the button.

Get: Name(self: FabricationServiceButton) -> str

"""

    ServiceId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fabrication service identifier for the fabrication service this button belongs to.

Get: ServiceId(self: FabricationServiceButton) -> int

"""



class FaceArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains faces.
    
    FaceArray()
    """
    def Append(self, item):
        """
        Append(self: FaceArray, item: Face)
            Add the face to the end of the array.
        
            item: The face to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: FaceArray)
            Removes every face from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FaceArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: FaceArray) -> FaceArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: FaceArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: FaceArray, item: Face, index: int)
            Insert the specified face into the array.
        
            item: The face to be inserted into the array.
            index: The face will be inserted before this index.
            Returns: Returns whether the face was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FaceArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: FaceArray) -> FaceArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: FaceArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of faces that are in the array.

Get: Size(self: FaceArray) -> int

"""



class FaceArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a face array.
    
    FaceArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: FaceArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: FaceArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FaceArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: FaceArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: FaceArrayIterator) -> object

"""



class FaceIntersectionFaceResult(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing the possible results of a face-face intersection calculation.
    
    enum FaceIntersectionFaceResult, values: Intersecting (0), NonIntersecting (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Intersecting = None
    NonIntersecting = None
    value__ = None


class FaceNode(RenderNode, IDisposable):
    """ An output node that represents a Face. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def GetFace(self):
        """
        GetFace(self: FaceNode) -> Face
        
            Returns the Face object corresponding to the node.
            Returns: The face.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FaceSecondDerivatives(object, IDisposable):
    """ Contains second partial derivatives of a face at a specified point. """
    def Dispose(self):
        """ Dispose(self: FaceSecondDerivatives) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FaceSecondDerivatives, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FaceSecondDerivatives) -> bool

"""

    MixedDerivative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The mixed derivative.

Get: MixedDerivative(self: FaceSecondDerivatives) -> XYZ

"""

    UUDerivative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The second derivative with respect to U.

Get: UUDerivative(self: FaceSecondDerivatives) -> XYZ

"""

    VVDerivative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The second derivative with respect to V.

Get: VVDerivative(self: FaceSecondDerivatives) -> XYZ

"""



class FaceSplitter(Element, IDisposable):
    """ Represents an element that splits a face. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    SplitElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the element whose face is split by this element.

Get: SplitElementId(self: FaceSplitter) -> ElementId

"""



class FacetingUtils(object):
    """
    This class is used to convertTrianglesToQuads a triangulated structure into a structure in which some of the triangles
       have been consolidated into quadrilaterals.
    """
    @staticmethod
    def ConvertTrianglesToQuads(triangulation):
        """
        ConvertTrianglesToQuads(triangulation: TriangulationInterface) -> IList[TriOrQuadFacet]
        
            Replaces pairs of adjacent, coplanar triangles by quadrilaterals.
        
            triangulation: A triangulated face, shell, or solid.
            Returns: A collection of triangles and quadrilaterals representing the original 
             triangulated object.
        """
        pass

    __all__ = [
        'ConvertTrianglesToQuads',
    ]


class FaceWall(HostObject, IDisposable):
    """ A wall attached to a non-vertical massing face. """
    @staticmethod
    def Create(document, wallType, locationLine, faceReference):
        """
        Create(document: Document, wallType: ElementId, locationLine: WallLocationLine, faceReference: Reference) -> FaceWall
        
            Creates a new instance of a wall attached to a non-vertical massing face.
        
            document: The document.
            wallType: The wall type.  This must be a wall type accepted by 
             IsWallTypeValidForFaceWall()
        
            locationLine: The alignment of the wall location line.
            faceReference: The reference from the massing face.  This must pass 
             IsValidFaceReferenceForFaceWall()
        
            Returns: The newly created face wall.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def IsValidFaceReferenceForFaceWall(document, faceReference):
        """
        IsValidFaceReferenceForFaceWall(document: Document, faceReference: Reference) -> bool
        
            Identifies if a reference may be used as the parent of a face wall.
        
            document: The document.
            faceReference: The reference.
            Returns: True if the reference is valid as a parent to a face wall, false otherwise.
        """
        pass

    @staticmethod
    def IsWallTypeValidForFaceWall(document, wallType):
        """
        IsWallTypeValidForFaceWall(document: Document, wallType: ElementId) -> bool
        
            Identifies if a wall type may be applied to a face wall.
        
            document: The document.
            wallType: The wall type.
            Returns: True if the wall type is valid for face wall, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FailureDefinition(object, IDisposable):
    """ Defines persistent information about a failure. """
    def AddResolutionType(self, type, caption, classOfResolution):
        """
        AddResolutionType(self: FailureDefinition, type: FailureResolutionType, caption: str, classOfResolution: Type) -> FailureDefinition
        
            Adds a type of possible resolution for the failure.
        
            type: Type of the resolution to add. The type of resolution can be used only once for 
             the FailureDefinition.
        
            caption: A simple description of the resolution.
            classOfResolution: The runtime class of the resolution. Used to ensure that the actual 
             FailureResoution object added to the instance of FailureMessage
           belongs to 
             an applicable class.
        
            Returns: The FailureDefinition.
        """
        pass

    @staticmethod
    def CreateFailureDefinition(id, severity, messageString):
        """
        CreateFailureDefinition(id: FailureDefinitionId, severity: FailureSeverity, messageString: str) -> FailureDefinition
        
            Creates an instance of a FailureDefinition.
        
            id: Unique identifier of the failure.
            severity: The severity of the failure. Cannot be FailureSeverity::None.
            messageString: A user-visible string describing the failure.
            Returns: The created FailureDefinition instance.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FailureDefinition) """
        pass

    def GetApplicableResolutionTypes(self):
        """
        GetApplicableResolutionTypes(self: FailureDefinition) -> IList[FailureResolutionType]
        
            Retrieves a list of resolution types applicable to the failure.
            Returns: The list of resolution types applicable to the failure.
        """
        pass

    def GetDefaultResolutionType(self):
        """
        GetDefaultResolutionType(self: FailureDefinition) -> FailureResolutionType
        
            Retrieves the default resolution type for the failure.
            Returns: The Default resolution type for the failure.
        """
        pass

    def GetDescriptionText(self):
        """
        GetDescriptionText(self: FailureDefinition) -> str
        
            Retrieves the description text of the failure.
            Returns: The description text.
        """
        pass

    def GetResolutionCaption(self, type):
        """
        GetResolutionCaption(self: FailureDefinition, type: FailureResolutionType) -> str
        
            Retrieves the caption for a specific resolution type.
        
            type: The resolution type.
            Returns: The caption of the resolution.
        """
        pass

    def HasResolutions(self):
        """
        HasResolutions(self: FailureDefinition) -> bool
        
            Checks if the FailureDefinition has at least one resolution.
            Returns: True if at least one resolution is defined in the FailureDefinition.
        """
        pass

    def IsResolutionApplicable(self, type):
        """
        IsResolutionApplicable(self: FailureDefinition, type: FailureResolutionType) -> bool
        
            Checks if the given resolution type is applicable to the failure.
        
            type: The resolution type to check.
            Returns: True if the given resolution type is applicable to the failure, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FailureDefinition, disposing: bool) """
        pass

    def SetDefaultResolutionType(self, type):
        """
        SetDefaultResolutionType(self: FailureDefinition, type: FailureResolutionType) -> FailureDefinition
        
            Sets the default resolution type for the failure.
        
            type: The type of resolution to be used as default.
            Returns: The FailureDefinition.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FailureDefinition) -> bool

"""

    Severity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The severity of the failure.

Get: Severity(self: FailureDefinition) -> FailureSeverity

"""



class FailureDefinitionAccessor(object, IDisposable):
    """ A class that provides access to the details of a FailureDefinition after the definition has been defined. """
    def Dispose(self):
        """ Dispose(self: FailureDefinitionAccessor) """
        pass

    def GetApplicableResolutionTypes(self):
        """
        GetApplicableResolutionTypes(self: FailureDefinitionAccessor) -> IList[FailureResolutionType]
        
            Retrieves a list of resolution types applicable to the failure.
            Returns: The list of resolution types applicable to the failure.
        """
        pass

    def GetDefaultResolutionType(self):
        """
        GetDefaultResolutionType(self: FailureDefinitionAccessor) -> FailureResolutionType
        
            Retrieves the default resolution type for the failure.
            Returns: The default resolution type for the failure.
        """
        pass

    def GetDescriptionText(self):
        """
        GetDescriptionText(self: FailureDefinitionAccessor) -> str
        
            Retrieves the description text of the failure.
            Returns: The description text.
        """
        pass

    def GetId(self):
        """
        GetId(self: FailureDefinitionAccessor) -> FailureDefinitionId
        
            Retrieves the unique identifier of the FailureDefinition.
            Returns: The unique identifier of the FailureDefinition.
        """
        pass

    def GetResolutionCaption(self, type):
        """
        GetResolutionCaption(self: FailureDefinitionAccessor, type: FailureResolutionType) -> str
        
            Retrieves the caption for a specific resolution type.
        
            type: The resolution type.
            Returns: The caption of the resolution.
        """
        pass

    def GetSeverity(self):
        """
        GetSeverity(self: FailureDefinitionAccessor) -> FailureSeverity
        
            Retrieves severity of the failure.
            Returns: The severity of the failure.
        """
        pass

    def HasResolutions(self):
        """
        HasResolutions(self: FailureDefinitionAccessor) -> bool
        
            Checks if the FailureDefinition has at least one resolution.
            Returns: True if at least one resolution is defined in the FailureDefinition.
        """
        pass

    def IsResolutionApplicable(self, type):
        """
        IsResolutionApplicable(self: FailureDefinitionAccessor, type: FailureResolutionType) -> bool
        
            Checks if the given resolution type is applicable to the failure.
        
            type: The resolution type to check.
            Returns: True if the given resolution type is applicable to the failure, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FailureDefinitionAccessor, disposing: bool) """
        pass

    def SetDefaultResolutionType(self, type):
        """
        SetDefaultResolutionType(self: FailureDefinitionAccessor, type: FailureResolutionType)
            Sets the default resolution type for the failure.
        
            type: The type of resolution to be used as default.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FailureDefinitionAccessor) -> bool

"""



class FailureDefinitionId(GuidEnum):
    """
    The unique identifier of a FailureDefinition.
    
    FailureDefinitionId(guid: Guid)
    """
    @staticmethod # known case of __new__
    def __new__(self, guid):
        """ __new__(cls: type, guid: Guid) """
        pass


class FailureDefinitionRegistry(object, IDisposable):
    """ The global registry for all FailureDefinitions in the Revit session. """
    def Dispose(self):
        """ Dispose(self: FailureDefinitionRegistry) """
        pass

    def FindFailureDefinition(self, id):
        """
        FindFailureDefinition(self: FailureDefinitionRegistry, id: FailureDefinitionId) -> FailureDefinitionAccessor
        
            Finds a specific FailureDefinition by a given FailureDefinitionId.
        
            id: The id of the FailureDefinition.
            Returns: The accessor of the found FailureDefinition, or null, if the FailureDefinition 
             was not found.
        """
        pass

    def ListAllFailureDefinitions(self):
        """
        ListAllFailureDefinitions(self: FailureDefinitionRegistry) -> IList[FailureDefinitionAccessor]
        
            Retrieves all the registered FailureDefinitions.
            Returns: All the registered FailureDefinitions.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FailureDefinitionRegistry, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FailureDefinitionRegistry) -> bool

"""



class FailureHandlingOptions(object, IDisposable):
    """
    Options to control how failures (if any occurred during the transaction)
       should be handled at the time the transaction is being ended.
    """
    def Dispose(self):
        """ Dispose(self: FailureHandlingOptions) """
        pass

    def GetClearAfterRollback(self):
        """
        GetClearAfterRollback(self: FailureHandlingOptions) -> bool
        
            Obtains the flag indicating if all posted failures should be removed silently 
             when transaction is being rolled back.
        
            Returns: True to clear posted failures silently if the transaction is being rolled back, 
             false to keep these failures in place (they may be displayed to the user).
        """
        pass

    def GetDelayedMiniWarnings(self):
        """
        GetDelayedMiniWarnings(self: FailureHandlingOptions) -> bool
        
            Obtains the flag indicating if showing of mini-warning dialog should be delayed 
             until the end of next transaction.
        
            Returns: True to delay the display of the mini-warning dialog until the end of the next 
             transation, false to display them as this transaction is completed.
        """
        pass

    def GetFailuresPreprocessor(self):
        """
        GetFailuresPreprocessor(self: FailureHandlingOptions) -> IFailuresPreprocessor
        
            Gets the callback to be invoked in the beginning of failure processing.
            Returns: The callback to be invoked in the beginning of failure processing.
        """
        pass

    def GetForcedModalHandling(self):
        """
        GetForcedModalHandling(self: FailureHandlingOptions) -> bool
        
            Obtains the flag indicating if the error handling dialog shown at the end of 
             the failing transaction should be modal.
        
            Returns: True if the options force Revit to use a modal error dialog, false if it allows 
             use of a non-blocking dialog for warnings resulting from this transaction.
        """
        pass

    def GetTransactionFinalizer(self):
        """
        GetTransactionFinalizer(self: FailureHandlingOptions) -> ITransactionFinalizer
        
            Gets the callback to be executed after transaction is completed.
            Returns: The callback to be executed after transaction is completed.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FailureHandlingOptions, disposing: bool) """
        pass

    def SetClearAfterRollback(self, bFlag):
        """
        SetClearAfterRollback(self: FailureHandlingOptions, bFlag: bool) -> FailureHandlingOptions
        
            Sets a flag indicating that Revit should clear all posted failures silently 
             when the failing transaction is being rolled back intentionally.  If
           not 
             set, the failures may still be displayed to the user during rollback.
        
        
            bFlag: True to clear posted failures silently if the transaction is being rolled back, 
             false to keep these failures in place (they may be displayed to the user).
        
            Returns: This FailureHandlingOptions object.
        """
        pass

    def SetDelayedMiniWarnings(self, bFlag):
        """
        SetDelayedMiniWarnings(self: FailureHandlingOptions, bFlag: bool) -> FailureHandlingOptions
        
            Sets a flag indicating if Revit should delay the display of the mini-warning 
             dialog (if one is to be shown as a result of warnings in the current 
             transaction)
           until the end of the next transaction.
        
        
            bFlag: True to delay the display of the mini-warning dialog until the end of the next 
             transation, false to display them as this transaction is completed.
        
            Returns: This FailureHandlingOptions object.
        """
        pass

    def SetFailuresPreprocessor(self, preprocessor):
        """
        SetFailuresPreprocessor(self: FailureHandlingOptions, preprocessor: IFailuresPreprocessor) -> FailureHandlingOptions
        
            Sets the callback to be invoked in the beginning of failure processing.
        
            preprocessor: The callback to be invoked in the beginning of failure processing.
            Returns: This FailureHandlingOptions object.
        """
        pass

    def SetForcedModalHandling(self, bFlag):
        """
        SetForcedModalHandling(self: FailureHandlingOptions, bFlag: bool) -> FailureHandlingOptions
        
            Sets a flag indicating whether Revit will show a modal (blocking) error dialog 
             if the transaction failed to finish.
        
        
            bFlag: True to force Revit to use a modal error dialog, false to allow a non-blocking 
             dialog for warnings resulting from this transaction.
        
            Returns: This FailureHandlingOptions object.
        """
        pass

    def SetTransactionFinalizer(self, finalizer):
        """
        SetTransactionFinalizer(self: FailureHandlingOptions, finalizer: ITransactionFinalizer) -> FailureHandlingOptions
        
            Sets the callback to be executed after the transaction is completed.
        
            finalizer: The callback to be executed after the transaction is completed.
            Returns: This FailureHandlingOptions object.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FailureHandlingOptions) -> bool

"""



class FailureMessage(object, IDisposable):
    """
    Represents a message describing a failure of an operation in Revit.
    
    FailureMessage(id: FailureDefinitionId)
    """
    def AddResolution(self, type, resolution):
        """
        AddResolution(self: FailureMessage, type: FailureResolutionType, resolution: FailureResolution) -> FailureMessage
        
            Adds a resolution for the failure.
        
            type: The type of the resolution.
            resolution: The resolution.
            Returns: The FailureMessage.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FailureMessage) """
        pass

    def GetAdditionalElements(self):
        """
        GetAdditionalElements(self: FailureMessage) -> ICollection[ElementId]
        
            Retrieves list of the additional reference elements for the failure.
            Returns: The additional elements.
        """
        pass

    def GetDefaultResolutionCaption(self):
        """
        GetDefaultResolutionCaption(self: FailureMessage) -> str
        
            Retrieves the caption of the default resolution of the failure.
            Returns: The caption of the default resolution of the failure.
        """
        pass

    def GetDescriptionText(self):
        """
        GetDescriptionText(self: FailureMessage) -> str
        
            Retrieves the description text of the failure.
            Returns: The description text.
        """
        pass

    def GetFailingElements(self):
        """
        GetFailingElements(self: FailureMessage) -> ICollection[ElementId]
        
            Retrieves list of the elements that have caused the failure.
            Returns: The elements that have caused the failure.
        """
        pass

    def GetFailureDefinitionId(self):
        """
        GetFailureDefinitionId(self: FailureMessage) -> FailureDefinitionId
        
            Retrieves the id of the failure definition for the failure.
            Returns: The id of the FailureDefinition for the failure.
        """
        pass

    def GetSeverity(self):
        """
        GetSeverity(self: FailureMessage) -> FailureSeverity
        
            Retrieves the severity of the failure.
            Returns: The severity of the failure.
        """
        pass

    def HasResolutionOfType(self, type):
        """
        HasResolutionOfType(self: FailureMessage, type: FailureResolutionType) -> bool
        
            Checks if failure has a resolution of a given type.
        
            type: The type of resolution.
            Returns: True if the failure has a type of resolutions, else false.
        """
        pass

    def HasResolutions(self):
        """
        HasResolutions(self: FailureMessage) -> bool
        
            Checks if the failure has any resolutions.
            Returns: True if the failure has any resolutions, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FailureMessage, disposing: bool) """
        pass

    def SetAdditionalElement(self, additionalElement):
        """
        SetAdditionalElement(self: FailureMessage, additionalElement: ElementId) -> FailureMessage
        
            Sets the additional reference element for the failure.
        
            additionalElement: The additional element.
            Returns: The FailureMessage.
        """
        pass

    def SetAdditionalElements(self, additionalElements):
        """ SetAdditionalElements(self: FailureMessage, additionalElements: ICollection[ElementId]) -> FailureMessage """
        pass

    def SetFailingElement(self, id):
        """
        SetFailingElement(self: FailureMessage, id: ElementId) -> FailureMessage
        
            Sets the element that has caused the failure.
        
            id: The element that has caused the failure.
            Returns: The FailureMessage.
        """
        pass

    def SetFailingElements(self, idsToShow):
        """ SetFailingElements(self: FailureMessage, idsToShow: ICollection[ElementId]) -> FailureMessage """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, id):
        """ __new__(cls: type, id: FailureDefinitionId) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FailureMessage) -> bool

"""



class FailureMessageAccessor(object, IDisposable):
    """ Restricted accessor for FailureMessage. """
    def CloneFailureMessage(self):
        """
        CloneFailureMessage(self: FailureMessageAccessor) -> FailureMessage
        
            Creates a copy of the FailureMessage.
            Returns: Copy of the FailureMesassge.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FailureMessageAccessor) """
        pass

    def GetAdditionalElementIds(self):
        """
        GetAdditionalElementIds(self: FailureMessageAccessor) -> ICollection[ElementId]
        
            Retrieves Ids of Elements that have not caused the failure but are related to 
             it
           Checks if the failure has resolution of a given resolution type.
        
            Returns: Ids of Elements related to the failure
        """
        pass

    def GetCurrentResolutionType(self):
        """
        GetCurrentResolutionType(self: FailureMessageAccessor) -> FailureResolutionType
        
            Retrieves the type of resolution to be used to resolve the failure.
            Returns: The type of failure resolution to be used to resolve the failure.
        """
        pass

    def GetDefaultResolutionCaption(self):
        """
        GetDefaultResolutionCaption(self: FailureMessageAccessor) -> str
        
            Retrieves the caption of default resolution of the failure.
            Returns: The caption of default resolution of the failure.
        """
        pass

    def GetDescriptionText(self):
        """
        GetDescriptionText(self: FailureMessageAccessor) -> str
        
            Retrieves the description of the failure.
            Returns: The description text.
        """
        pass

    def GetFailingElementIds(self):
        """
        GetFailingElementIds(self: FailureMessageAccessor) -> ICollection[ElementId]
        
            Retrieves Ids of Elements that have caused the failure.
            Returns: Ids of Elements that have caused the failure.
        """
        pass

    def GetFailureDefinitionId(self):
        """
        GetFailureDefinitionId(self: FailureMessageAccessor) -> FailureDefinitionId
        
            Retrieves the Id of the FailureDefinition of the failure.
            Returns: The Id of the FailureDefinition of the failure.
        """
        pass

    def GetNumberOfResolutions(self):
        """
        GetNumberOfResolutions(self: FailureMessageAccessor) -> int
        
            Retrieves number of resolutions that can be used to resolve failure.
            Returns: Number of resolutions that can be used to resolve failure
        """
        pass

    def GetSeverity(self):
        """
        GetSeverity(self: FailureMessageAccessor) -> FailureSeverity
        
            Retrieves the severity of the failure.
            Returns: The severity of the failure.
        """
        pass

    def HasResolutionOfType(self, type):
        """
        HasResolutionOfType(self: FailureMessageAccessor, type: FailureResolutionType) -> bool
        
            Checks if failure has a resolution of a given type.
        
            type: The type of resolution.
            Returns: True if failure has a resolution of a given type, false otherwise.
        """
        pass

    def HasResolutions(self):
        """
        HasResolutions(self: FailureMessageAccessor) -> bool
        
            Checks if the failure has any resolutions.
            Returns: True if the failure has any resolutions, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FailureMessageAccessor, disposing: bool) """
        pass

    def SetCurrentResolutionType(self, resolutionType):
        """
        SetCurrentResolutionType(self: FailureMessageAccessor, resolutionType: FailureResolutionType)
            Sets the type of a resolution to be used to resolve the failure.
        
            resolutionType: The type of failure resolution to be used to resolve the failure.
        """
        pass

    def ShouldMergeWithMessage(self, messageToMergeWith):
        """
        ShouldMergeWithMessage(self: FailureMessageAccessor, messageToMergeWith: FailureMessageAccessor) -> bool
        
            Checks if the FailureMessage should be merged with the other FailureMessage for 
             better user experience.
        
            Returns: True if messages should be merged
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FailureMessageAccessor) -> bool

"""



class FailureMessageKey(object, IDisposable):
    """
    A unique key assigned to each posted failure message
    
    FailureMessageKey()
    """
    def Dispose(self):
        """ Dispose(self: FailureMessageKey) """
        pass

    def Equals(self, obj):
        """
        Equals(self: FailureMessageKey, obj: object) -> bool
        
            Determines whether the specified System.Object is equal to the current 
             System.Object.
        
        
            obj: Another object.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: FailureMessageKey) -> int
        
            Gets the integer value of the id as hash code
        """
        pass

    def IsEqual(self, other):
        """
        IsEqual(self: FailureMessageKey, other: FailureMessageKey) -> bool
        
            Checks it this key is equal to the other.
        
            other: The key to compare with.
            Returns: True if keys are equal, false otherwise.
        """
        pass

    def IsValid(self):
        """
        IsValid(self: FailureMessageKey) -> bool
        
            Checks if the failure message key is valid
            Returns: True if the failure message key is valid
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FailureMessageKey, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FailureMessageKey) -> bool

"""



class FailureProcessingResult(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type representing the result achieved by any of the available types of failure handlers:
       FailuresPreprocessor, the handler of FailuresProcessing event or a FailuresProcessor.
    
    enum FailureProcessingResult, values: Continue (0), ProceedWithCommit (1), ProceedWithRollBack (2), WaitForUserInput (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Continue = None
    ProceedWithCommit = None
    ProceedWithRollBack = None
    value__ = None
    WaitForUserInput = None


class FailureResolutionType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enumeration to classify FailureResolutions by nature of operation they perform on failing Elements.
    
    enum FailureResolutionType, values: CreateElements (2), Default (1), DeleteElements (3), DetachElements (7), FixElements (6), Invalid (0), MoveElements (5), Others (100000), QuitEditMode (8), SaveDocument (11), SetValue (10), ShowElements (12), SkipElements (4), UnlockConstraints (9)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CreateElements = None
    Default = None
    DeleteElements = None
    DetachElements = None
    FixElements = None
    Invalid = None
    MoveElements = None
    Others = None
    QuitEditMode = None
    SaveDocument = None
    SetValue = None
    ShowElements = None
    SkipElements = None
    UnlockConstraints = None
    value__ = None


class FailuresAccessor(object, IDisposable):
    """ An interface class that provides access to failure information posted in a document and methods to resolve these failures. """
    def CanCommitPendingTransaction(self):
        """
        CanCommitPendingTransaction(self: FailuresAccessor) -> bool
        
            Checks if pending failure processing can be finished by committing a pending 
             transaction.
        
            Returns: True if there is a pending transaction and this transaction is allowed to be 
             committed.
        """
        pass

    def CanRollBackPendingTransaction(self):
        """
        CanRollBackPendingTransaction(self: FailuresAccessor) -> bool
        
            Checks if pending failure processing can be finished by rolling back a pending 
             transaction.
        
            Returns: True if there is a pending transaction and this transaction is allowed to be 
             rolled back
        """
        pass

    def CommitPendingTransaction(self):
        """
        CommitPendingTransaction(self: FailuresAccessor) -> TransactionStatus
        
            Finishes pending failures processing by committing the pending transaction.
            Returns: Result of attempt to commit the pending transaction.
        """
        pass

    def DeleteAllWarnings(self):
        """
        DeleteAllWarnings(self: FailuresAccessor)
            Deletes all FailureMessages of severity "Warning" currently posted in a 
             document.
        """
        pass

    def DeleteElements(self, idsToDelete):
        """ DeleteElements(self: FailuresAccessor, idsToDelete: IList[ElementId]) """
        pass

    def DeleteWarning(self, failure):
        """
        DeleteWarning(self: FailuresAccessor, failure: FailureMessageAccessor)
            Deletes one specific failure message of severity "Warning".
        
            failure: The accessor to the warning to be deleted.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FailuresAccessor) """
        pass

    def GetAttemptedResolutionTypes(self, failure):
        """
        GetAttemptedResolutionTypes(self: FailuresAccessor, failure: FailureMessageAccessor) -> IList[FailureResolutionType]
        
            Returns list of the failure resolution types attempted for the failure in the 
             current transaction.
        
        
            failure: The failure.
            Returns: The list of the types of failure resolutions attempted for the failure.
        """
        pass

    def GetDocument(self):
        """
        GetDocument(self: FailuresAccessor) -> Document
        
            Provides access to a document for which failures are being processed or 
             preprocessed.
        
            Returns: The document for which failures preprocessing or processing is being performed.
        """
        pass

    def GetFailureHandlingOptions(self):
        """
        GetFailureHandlingOptions(self: FailuresAccessor) -> FailureHandlingOptions
        
            Provides access to the failure handling options for the transaction currently 
             being finished.
        
            Returns: The failure handling options for transaction currently being finished.
        """
        pass

    def GetFailureMessages(self, severity=None):
        """
        GetFailureMessages(self: FailuresAccessor) -> IList[FailureMessageAccessor]
        
            Provides access to the individual failure messages currently posted in the 
             document.
        
            Returns: The accessors to the individual failure messages posted in the document.
        GetFailureMessages(self: FailuresAccessor, severity: FailureSeverity) -> IList[FailureMessageAccessor]
        
            Provides access to the individual failure messages if a given severity 
             currently posted in the document.
        
        
            severity: The failure severity for which failure messages are requested.
           If the 
             requested severity is None, an empty collection is returned.
        
            Returns: Accessors to the individual failure messages of a given severity posted in the 
             document.
        """
        pass

    def GetSeverity(self):
        """
        GetSeverity(self: FailuresAccessor) -> FailureSeverity
        
            Provides access to the current failure severity.
            Returns: The highest severity of a failure message currently posted in the document.
        """
        pass

    def GetTransactionName(self):
        """
        GetTransactionName(self: FailuresAccessor) -> str
        
            Retrieves the name of the transaction for which failures are being processed.
            Returns: The name of the transaction for which failures are being processed.
        """
        pass

    def IsActive(self):
        """
        IsActive(self: FailuresAccessor) -> bool
        
            Method allows to check if this instance of the accessor is currently active.
            Returns: True if this instance is currently active and can be used.
        """
        pass

    def IsElementsDeletionPermitted(self, idsToDelete=None, reason=None):
        """
        IsElementsDeletionPermitted(self: FailuresAccessor) -> bool
        
            Checks if resolution of the failures by deleting failure elements is permitted.
            Returns: True if resolution of the failures by deleting failure elements is permitted.
        IsElementsDeletionPermitted(self: FailuresAccessor, idsToDelete: IList[ElementId]) -> bool
        IsElementsDeletionPermitted(self: FailuresAccessor, idsToDelete: IList[ElementId]) -> (bool, str)
        """
        pass

    def IsFailureResolutionPermitted(self, failure=None, resolutionType=None):
        """
        IsFailureResolutionPermitted(self: FailuresAccessor) -> bool
        
            Checks if resolution of failures is permitted.
            Returns: True if resolutions of failures is permitted.
        IsFailureResolutionPermitted(self: FailuresAccessor, failure: FailureMessageAccessor) -> bool
        
            Checks if default resolution of the failure is permitted.
        
            failure: The accessor to the failure to be resolved.
            Returns: True if default resolution of the failure is permitted
        IsFailureResolutionPermitted(self: FailuresAccessor, failure: FailureMessageAccessor, resolutionType: FailureResolutionType) -> bool
        
            Checks if resolution of the failure using given resolution type is permitted.
        
            failure: Accessor to the failure to be resolved.
            resolutionType: Type of the failure resolution to be used.
            Returns: True if resolution of the failure using given resolution type is permitted.
        """
        pass

    def IsPending(self):
        """
        IsPending(self: FailuresAccessor) -> bool
        
            Checks if the failure processing is pending.
            Returns: True if the failures processing is in the pending state.
        """
        pass

    def IsTransactionBeingCommitted(self):
        """
        IsTransactionBeingCommitted(self: FailuresAccessor) -> bool
        
            Checks if the transaction for which failures are processed is being committed 
             or rolled back.
        
            Returns: True if current transaction is being committed, false if the transaction is 
             being rolled back.
        """
        pass

    def JournalFailures(self, failures):
        """ JournalFailures(self: FailuresAccessor, failures: IList[FailureMessageAccessor]) """
        pass

    def PostFailure(self, failure):
        """
        PostFailure(self: FailuresAccessor, failure: FailureMessage)
            Posts an additional failure message to be processed for the current transaction.
        
            failure: Failure message to post.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FailuresAccessor, disposing: bool) """
        pass

    def ReplaceFailures(self, failure):
        """
        ReplaceFailures(self: FailuresAccessor, failure: FailureMessage)
            Deletes all failure messages currently posted in a document and replaces them 
             with one "generic" failure.
        
        
            failure: FailureMessage that should replace all currently posted messages. It must have 
             severity DocumentCorruption.
        """
        pass

    def ResolveFailure(self, failure):
        """
        ResolveFailure(self: FailuresAccessor, failure: FailureMessageAccessor)
            Resolves one failure using the failure resolution type last set for it.
        
            failure: The accessor to the failure to be resolved.
        """
        pass

    def ResolveFailures(self, failures):
        """ ResolveFailures(self: FailuresAccessor, failures: IList[FailureMessageAccessor]) """
        pass

    def RollBackPendingTransaction(self):
        """
        RollBackPendingTransaction(self: FailuresAccessor) -> TransactionStatus
        
            Finishes pending failures processing by rolling back the pending transaction.
            Returns: Result of attempt to roll back the pending transaction.
        """
        pass

    def SetFailureHandlingOptions(self, options):
        """
        SetFailureHandlingOptions(self: FailuresAccessor, options: FailureHandlingOptions)
            Sets failure handling options for the transaction currently being finished.
        
            options: The failure handling options to be set for the transaction currently being 
             finished.
        """
        pass

    def SetTransactionName(self, transactionName):
        """
        SetTransactionName(self: FailuresAccessor, transactionName: str)
            Changes the name of the transaction for which failures are being processed.
        
            transactionName: The name of the transaction to set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FailuresAccessor) -> bool

"""



class FailureSeverity(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum represents severity of a failure.
    
    enum FailureSeverity, values: DocumentCorruption (3), Error (2), None (0), Warning (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DocumentCorruption = None
    Error = None
    None = None
    value__ = None
    Warning = None


class Family(Element, IDisposable):
    """ An element that represents a custom family (not a system family) in Autodesk Revit. """
    def CanHaveStructuralSection(self):
        """
        CanHaveStructuralSection(self: Family) -> bool
        
            Identifies if this Family can have a structural section.
            Returns: True if the Family can have structural section, false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def ExtractPartAtom(self, xmlFilePath):
        """
        ExtractPartAtom(self: Family, xmlFilePath: str)
            Writes a PartAtom XML from the contents of a family object.
        
            xmlFilePath: The xml file to be saved.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetFamilySymbolIds(self):
        """
        GetFamilySymbolIds(self: Family) -> ISet[ElementId]
        
            Gets the ids of the FamilySymbols owned by this Family.
            Returns: The ids of the FamilySymbols.
        """
        pass

    def GetFamilyTypeParameterValues(self, parameterId):
        """
        GetFamilyTypeParameterValues(self: Family, parameterId: ElementId) -> ISet[ElementId]
        
            Returns all applicable values for a FamilyType parameter of this family.
        
            parameterId: A valid Id of a FamilyType parameter defined for this family.
            Returns: Ids of all applicable Autodesk.Revit.DB.ElementType and 
             Autodesk.Revit.DB.NestedFamilyTypeReference elements.
        """
        pass

    def HasLargeSketches(self):
        """
        HasLargeSketches(self: Family) -> bool
        
            Checks whether the family contains sketches with a large number of elements.
        """
        pass

    def IsAppropriateCategoryId(self, categoryId):
        """
        IsAppropriateCategoryId(self: Family, categoryId: ElementId) -> bool
        
            Identifies if the input category id can be assigned as the new category for 
             this family.
        
        
            categoryId: The category id.
            Returns: True if the input category id can be assigned as the new category for this 
             family, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CurtainPanelHorizontalSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """For Curtain Panel families, the horizontal spacing of the
driving mesh.

Get: CurtainPanelHorizontalSpacing(self: Family) -> float

Set: CurtainPanelHorizontalSpacing(self: Family) = value
"""

    CurtainPanelTilePattern = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """For Curtain Panel families, the choice of tile pattern.

Get: CurtainPanelTilePattern(self: Family) -> TilePatternsBuiltIn

"""

    CurtainPanelVerticalSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """For Curtain Panel families, the vertical spacing of the
driving mesh.

Get: CurtainPanelVerticalSpacing(self: Family) -> float

Set: CurtainPanelVerticalSpacing(self: Family) = value
"""

    FamilyCategory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or sets a Category object that represents the category or sub category in which the elements
( this family could generate ) reside.

Get: FamilyCategory(self: Family) -> Category

Set: FamilyCategory(self: Family) = value
"""

    FamilyCategoryId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the category or sub category in which the elements that this family could generate reside.

Get: FamilyCategoryId(self: Family) -> ElementId

Set: FamilyCategoryId(self: Family) = value
"""

    FamilyPlacementType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the type of placement required by a given family.

Get: FamilyPlacementType(self: Family) -> FamilyPlacementType

"""

    IsConceptualMassFamily = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the Family is a Conceptual Mass family.

Get: IsConceptualMassFamily(self: Family) -> bool

"""

    IsCurtainPanelFamily = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the Family is a Curtain Panel family. Curtain Panel family
symbols are used as the ObjectTypes of 
Autodesk.Revit.DB.DividedSurface elements.

Get: IsCurtainPanelFamily(self: Family) -> bool

"""

    IsEditable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the family supports editing, false otherwise.

Get: IsEditable(self: Family) -> bool

"""

    IsInPlace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the family is an in-place family, false if the family is a loadable family.

Get: IsInPlace(self: Family) -> bool

"""

    IsOwnerFamily = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the family is the owner family for its own editable document, false otherwise.

Get: IsOwnerFamily(self: Family) -> bool

"""

    IsParametric = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether the family contains parametric relations
   between some of its elements.

Get: IsParametric(self: Family) -> bool

"""

    IsUserCreated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determine whether the family has been defined by the user.

Get: IsUserCreated(self: Family) -> bool

"""

    ShowSpatialElementCalculationPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """For families that can have a calculation point for spatial elements, 
hide or show the calculation point. 
Autodesk.Revit.DB.SpatialElementCalculationPoint elements.

Get: ShowSpatialElementCalculationPoint(self: Family) -> bool

Set: ShowSpatialElementCalculationPoint(self: Family) = value
"""

    StructuralCodeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The family's structural code name.

Get: StructuralCodeName(self: Family) -> str

Set: StructuralCodeName(self: Family) = value
"""

    StructuralFamilyNameKey = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The family's structural section shape name key.

Get: StructuralFamilyNameKey(self: Family) -> str

Set: StructuralFamilyNameKey(self: Family) = value
"""

    StructuralMaterialType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The family's structural material type.

Get: StructuralMaterialType(self: Family) -> StructuralMaterialType

"""

    StructuralSectionShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The family's structural section shape.

Get: StructuralSectionShape(self: Family) -> StructuralSectionShape

Set: StructuralSectionShape(self: Family) = value
"""



class FamilyElementVisibility(APIObject, IDisposable):
    """
    Provides access to the visibility parameters of family elements in family document.
    
    FamilyElementVisibility(visibilityType: FamilyElementVisibilityType)
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, visibilityType):
        """ __new__(cls: type, visibilityType: FamilyElementVisibilityType) """
        pass

    IsShownInCoarse = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the instance is display with Coarse detail level in the view 
of project document.

Get: IsShownInCoarse(self: FamilyElementVisibility) -> bool

Set: IsShownInCoarse(self: FamilyElementVisibility) = value
"""

    IsShownInFine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the instance is display with Fine detail level in the view 
of project document.

Get: IsShownInFine(self: FamilyElementVisibility) -> bool

Set: IsShownInFine(self: FamilyElementVisibility) = value
"""

    IsShownInFrontBack = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the instance is display in Front/Back view of project document.

Get: IsShownInFrontBack(self: FamilyElementVisibility) -> bool

Set: IsShownInFrontBack(self: FamilyElementVisibility) = value
"""

    IsShownInLeftRight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the instance is display in Left/Right view of project document.

Get: IsShownInLeftRight(self: FamilyElementVisibility) -> bool

Set: IsShownInLeftRight(self: FamilyElementVisibility) = value
"""

    IsShownInMedium = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the instance is display with Medium detail level in the view 
of project document.

Get: IsShownInMedium(self: FamilyElementVisibility) -> bool

Set: IsShownInMedium(self: FamilyElementVisibility) = value
"""

    IsShownInPlanRCPCut = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the instance is displayed when cut in Plan/RCP (if the category permits).

Get: IsShownInPlanRCPCut(self: FamilyElementVisibility) -> bool

Set: IsShownInPlanRCPCut(self: FamilyElementVisibility) = value
"""

    IsShownInTopBottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the instance is display in Plan/RCP view of project document.

Get: IsShownInTopBottom(self: FamilyElementVisibility) -> bool

Set: IsShownInTopBottom(self: FamilyElementVisibility) = value
"""

    IsShownOnlyWhenCut = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the instance is displayed only if it has been cut.

Get: IsShownOnlyWhenCut(self: FamilyElementVisibility) -> bool

Set: IsShownOnlyWhenCut(self: FamilyElementVisibility) = value
"""

    VisibilityType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the instance is Model or View specific.

Get: VisibilityType(self: FamilyElementVisibility) -> FamilyElementVisibilityType

"""



class FamilyElementVisibilityType(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the Visibility type of generic forms.
    
    enum FamilyElementVisibilityType, values: Model (0), ViewSpecific (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Model = None
    value__ = None
    ViewSpecific = None


class FamilyHostingBehavior(Enum, IComparable, IFormattable, IConvertible):
    """
    Types of hosts into/onto which a family can be hosted.
       For informative purposes only. Does not affect anything in Revit!
    
    enum FamilyHostingBehavior, values: Ceiling (3), Face (5), Floor (2), None (0), Roof (4), Wall (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Ceiling = None
    Face = None
    Floor = None
    None = None
    Roof = None
    value__ = None
    Wall = None


class FamilyInstanceFilter(ElementSlowFilter, IDisposable):
    """
    A filter used to find elements that are family instances of the given family symbol.
    
    FamilyInstanceFilter(document: Document, familySymbolId: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, document, familySymbolId):
        """ __new__(cls: type, document: Document, familySymbolId: ElementId) """
        pass

    FamilySymbolId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The family symbol id.

Get: FamilySymbolId(self: FamilyInstanceFilter) -> ElementId

"""



class FamilyManager(APIObject, IDisposable):
    """ The family manager object to manage the family types and parameters in family document. """
    def AddParameter(self, *__args):
        """
        AddParameter(self: FamilyManager, familyDefinition: ExternalDefinition, parameterGroup: BuiltInParameterGroup, isInstance: bool) -> FamilyParameter
        
            Add a new shared parameter to the family.
        
            familyDefinition: The definition of the loaded shared parameter.
            parameterGroup: The group to which the family parameter belongs.
            isInstance: Indicates if the new parameter is instance or type.
            Returns: If creation was successful the new shared parameter is returned, 
        otherwise an 
             exception with failure information will be thrown.
        
        AddParameter(self: FamilyManager, parameterName: str, parameterGroup: BuiltInParameterGroup, parameterType: ParameterType, isInstance: bool) -> FamilyParameter
        
            Add a new family parameter with a given name.
        
            parameterName: The name of the new family parameter.
            parameterGroup: The group to which the family parameter belongs.
            parameterType: The type of new family parameter.
            isInstance: Indicates if the new family parameter is instance or type.
            Returns: If creation was successful the new parameter is returned, 
        otherwise an 
             exception with failure information will be thrown.
        
        AddParameter(self: FamilyManager, parameterName: str, parameterGroup: BuiltInParameterGroup, familyCategory: Category, isInstance: bool) -> FamilyParameter
        
            Add a new family type parameter to control the type of a nested family within 
             another family.
        
        
            parameterName: The name of the new family parameter.
            parameterGroup: The group to which the family parameter belongs.
            familyCategory: The category to which the new family parameter binds.
            isInstance: Indicates if the new family parameter is instance or type.
            Returns: If creation was successful the new parameter is returned, 
        otherwise an 
             exception with failure information will be thrown.
        """
        pass

    def AssociateElementParameterToFamilyParameter(self, elementParameter, familyParameter):
        """
        AssociateElementParameterToFamilyParameter(self: FamilyManager, elementParameter: Parameter, familyParameter: FamilyParameter)
            Associates or disassociates the element parameter to an existing family 
             parameter.
        
        
            elementParameter: The parameter of an element in family.
            familyParameter: The existing family parameter. If the input to this argument is ll,
        it will 
             disassociate the element parameter from any family parameters.
        """
        pass

    def CanElementParameterBeAssociated(self, elementParameter):
        """
        CanElementParameterBeAssociated(self: FamilyManager, elementParameter: Parameter) -> bool
        
            Indicates if this element parameter can be associated with a family parameter.
        """
        pass

    def DeleteCurrentType(self):
        """
        DeleteCurrentType(self: FamilyManager)
            Remove the current family type.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def GetAssociatedFamilyParameter(self, elementParameter):
        """
        GetAssociatedFamilyParameter(self: FamilyManager, elementParameter: Parameter) -> FamilyParameter
        
            Gets the associated family parameter of an element parameter.
        
            elementParameter: The parameter of an element in family.
            Returns: The associated family parameter if there is an association between them, 
             returns ll if not.
        """
        pass

    def GetParameters(self):
        """
        GetParameters(self: FamilyManager) -> IList[FamilyParameter]
        
            Gets the parameters associated to family types in order.
            Returns: A collection containing all family parameters.
        """
        pass

    def IsParameterLockable(self, familyParameter):
        """
        IsParameterLockable(self: FamilyManager, familyParameter: FamilyParameter) -> bool
        
            For Conceptual Mass and Curtain Panel families,
        indicate whether the specified 
             parameter can be locked.
        
            Returns: True if the family is a Conceptual Mass or Curtain
        Panel Family and the 
             parameter drives one or more
        dimensions; false otherwise.
        """
        pass

    def IsParameterLocked(self, familyParameter):
        """
        IsParameterLocked(self: FamilyManager, familyParameter: FamilyParameter) -> bool
        
            For Conceptual Mass and Curtain Panel families,
        indicate whether the specified 
             dimension-driving
        parameter is locked.
        
            Returns: True if the parameter is lockable
        and is locked; false otherwise.
        """
        pass

    def IsUserAssignableParameterGroup(self, parameterGroup):
        """
        IsUserAssignableParameterGroup(self: FamilyManager, parameterGroup: BuiltInParameterGroup) -> bool
        
            Checks if the given parameter group can be assigned to new parameters.
            Returns: True if the parameter group can be assigned to new parameters, false otherwise.
        """
        pass

    def MakeInstance(self, familyParameter):
        """
        MakeInstance(self: FamilyManager, familyParameter: FamilyParameter)
            Set the family parameter as an instance parameter.
        """
        pass

    def MakeNonReporting(self, familyParameter):
        """
        MakeNonReporting(self: FamilyManager, familyParameter: FamilyParameter)
            Set the reporting family parameter as a regular/driving parameter.
        """
        pass

    def MakeReporting(self, familyParameter):
        """
        MakeReporting(self: FamilyManager, familyParameter: FamilyParameter)
            Set the family parameter as a reporting parameter.
        """
        pass

    def MakeType(self, familyParameter):
        """
        MakeType(self: FamilyManager, familyParameter: FamilyParameter)
            Set the family parameter as a type parameter.
        """
        pass

    def NewType(self, typeName):
        """
        NewType(self: FamilyManager, typeName: str) -> FamilyType
        
            Add a new family type with a given name and makes it be the current type.
        
            typeName: The name of new family type.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def RemoveParameter(self, familyParameter):
        """
        RemoveParameter(self: FamilyManager, familyParameter: FamilyParameter)
            Remove an existing family parameter from the family.
        
            familyParameter: The family parameter.
        """
        pass

    def RenameCurrentType(self, typeName):
        """
        RenameCurrentType(self: FamilyManager, typeName: str)
            Rename the current family type.
        
            typeName: The new name of the current family type.
        """
        pass

    def RenameParameter(self, familyParameter, name):
        """
        RenameParameter(self: FamilyManager, familyParameter: FamilyParameter, name: str)
            Rename a family parameter.
        
            familyParameter: The family parameter.
            name: The new name.
        """
        pass

    def ReorderParameters(self, parameters):
        """ ReorderParameters(self: FamilyManager, parameters: IList[FamilyParameter]) """
        pass

    def ReplaceParameter(self, currentParameter, *__args):
        """
        ReplaceParameter(self: FamilyManager, currentParameter: FamilyParameter, familyDefinition: ExternalDefinition, parameterGroup: BuiltInParameterGroup, isInstance: bool) -> FamilyParameter
        
            Replace a family parameter with a shared parameter.
        
            currentParameter: The current family parameter.
            familyDefinition: The definition of the loaded shared parameter.
            parameterGroup: The group to which the new shared parameter belongs.
            isInstance: Indicates if the new parameter is instance or type.
            Returns: If replacement was successful the new shared parameter is returned, 
        otherwise 
             an exception with failure information will be thrown.
        
        ReplaceParameter(self: FamilyManager, currentParameter: FamilyParameter, parameterName: str, parameterGroup: BuiltInParameterGroup, isInstance: bool) -> FamilyParameter
        
            Replace a shared family parameter with a new non-shared family parameter.
        
            currentParameter: The current family parameter.
            parameterName: The name of the new family parameter.
            parameterGroup: The group to which the new family parameter belongs.
            isInstance: Indicates if the new parameter is instance or type.
            Returns: If replacement was successful the new family parameter is returned, 
        otherwise 
             an exception with failure information will be thrown.
        """
        pass

    def Set(self, familyParameter, value):
        """
        Set(self: FamilyManager, familyParameter: FamilyParameter, value: str)
            Set the string value of a family parameter of the current family type.
        
            familyParameter: A family parameter of the current type.
            value: The new value for family parameter.
        Set(self: FamilyManager, familyParameter: FamilyParameter, value: int)
            Set the integer value of a family parameter of the current family type.
        
            familyParameter: A family parameter of the current type.
            value: The new value for family parameter.
        Set(self: FamilyManager, familyParameter: FamilyParameter, value: ElementId)
            Set the ElementId value of a family parameter of the current family type.
        
            familyParameter: A family parameter of the current type.
            value: The new value for family parameter.
        Set(self: FamilyManager, familyParameter: FamilyParameter, value: float)
            Set the double value of a family parameter of the current family type.
        
            familyParameter: A family parameter of the current type.
            value: The new value for family parameter.
        """
        pass

    def SetDescription(self, familyParameter, description):
        """
        SetDescription(self: FamilyManager, familyParameter: FamilyParameter, description: str)
            Set the description for an existing family parameter. 
        The description will be 
             used as tooltip in the Revit UI including in the properties palette.
        
        
            familyParameter: The family parameter.
            description: The description of the family parameter.
        """
        pass

    def SetFormula(self, familyParameter, formula):
        """
        SetFormula(self: FamilyManager, familyParameter: FamilyParameter, formula: str)
            Set the formula of a family parameter.
        
            familyParameter: The family parameter.
            formula: The formula string, input ll to clean the formula of the parameter.
        """
        pass

    def SetParameterLocked(self, familyParameter, locked):
        """
        SetParameterLocked(self: FamilyManager, familyParameter: FamilyParameter, locked: bool)
            For Conceptual Mass and Curtain Panel families,
        lock or unlock a 
             dimension-driving
        parameter.
        """
        pass

    def SetValueString(self, familyParameter, value):
        """
        SetValueString(self: FamilyManager, familyParameter: FamilyParameter, value: str)
            Set the string value of a family parameter of the current family type.
        
            familyParameter: The family parameter of current type.
            value: The new value string for family parameter.
        """
        pass

    def SortParameters(self, order):
        """
        SortParameters(self: FamilyManager, order: ParametersOrder)
            Sorts the family parameters according to the desired sort order.
        
            order: The desired sort order.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CurrentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current family type.

Get: CurrentType(self: FamilyManager) -> FamilyType

Set: CurrentType(self: FamilyManager) = value
"""

    Parameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All family parameters in this family.

Get: Parameters(self: FamilyManager) -> FamilyParameterSet

"""

    Types = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All family types in the family.

Get: Types(self: FamilyManager) -> FamilyTypeSet

"""



class FamilyParameter(APIObject, IDisposable):
    """ The family parameter object. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AssociatedParameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The parameters from elements in the family which are associated to this parameter.

Get: AssociatedParameters(self: FamilyParameter) -> ParameterSet

"""

    CanAssignFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if this parameter can be assigned a formula.

Get: CanAssignFormula(self: FamilyParameter) -> bool

"""

    Definition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The definition.

Get: Definition(self: FamilyParameter) -> Definition

"""

    DisplayUnitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The display unit type.

Get: DisplayUnitType(self: FamilyParameter) -> DisplayUnitType

"""

    Formula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The formula.

Get: Formula(self: FamilyParameter) -> str

"""

    GUID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The globally unique identifier

Get: GUID(self: FamilyParameter) -> Guid

"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the family parameter.

Get: Id(self: FamilyParameter) -> ElementId

"""

    IsDeterminedByFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the parameter is determined by formula.

Get: IsDeterminedByFormula(self: FamilyParameter) -> bool

"""

    IsInstance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the parameter is instance or type.

Get: IsInstance(self: FamilyParameter) -> bool

"""

    IsReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the object is read-only or modifiable.

Get: IsReadOnly(self: FamilyParameter) -> bool

"""

    IsReporting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the parameter is a reporting parameter.

Get: IsReporting(self: FamilyParameter) -> bool

"""

    IsShared = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the parameter is a shared parameter.

Get: IsShared(self: FamilyParameter) -> bool

"""

    StorageType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The storage type describes the type that is used internally within the parameter to store its value.

Get: StorageType(self: FamilyParameter) -> StorageType

"""

    UserModifiable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the interactive user can modify the value of this parameter.

Get: UserModifiable(self: FamilyParameter) -> bool

"""



class FamilyParameterSet(APIObject, IDisposable, IEnumerable):
    """
    A set that contains FamilyParameter objects.
    
    FamilyParameterSet()
    """
    def Clear(self):
        """
        Clear(self: FamilyParameterSet)
            Removes every item from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """ Contains(self: FamilyParameterSet, item: FamilyParameter) -> bool """
        pass

    def Dispose(self):
        """ Dispose(self: FamilyParameterSet, A_0: bool) """
        pass

    def Erase(self, item):
        """ Erase(self: FamilyParameterSet, item: FamilyParameter) -> int """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: FamilyParameterSet) -> FamilyParameterSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: FamilyParameterSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """ Insert(self: FamilyParameterSet, item: FamilyParameter) -> bool """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FamilyParameterSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: FamilyParameterSet) -> FamilyParameterSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: FamilyParameterSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the set.

Get: Size(self: FamilyParameterSet) -> int

"""



class FamilyParameterSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a FamilyParameter set.
    
    FamilyParameterSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: FamilyParameterSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: FamilyParameterSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FamilyParameterSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: FamilyParameterSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: FamilyParameterSetIterator) -> object

"""



class FamilyPlacementType(Enum, IComparable, IFormattable, IConvertible):
    """
    The type of placement required for a given family.
    
    enum FamilyPlacementType, values: Adaptive (8), CurveBased (5), CurveBasedDetail (6), CurveDrivenStructural (7), Invalid (9), OneLevelBased (0), OneLevelBasedHosted (1), TwoLevelsBased (2), ViewBased (3), WorkPlaneBased (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Adaptive = None
    CurveBased = None
    CurveBasedDetail = None
    CurveDrivenStructural = None
    Invalid = None
    OneLevelBased = None
    OneLevelBasedHosted = None
    TwoLevelsBased = None
    value__ = None
    ViewBased = None
    WorkPlaneBased = None


class FamilyPointLocation(APIObject, IDisposable):
    """ Data corresponding to the point locations in certain types of Family Symbols. """
    def Dispose(self):
        """ Dispose(self: FamilyPointLocation, A_0: bool) """
        pass

    def GetLocation(self):
        """
        GetLocation(self: FamilyPointLocation) -> Transform
        
            Gets the location of the point.
            Returns: The location of the point.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FamilyPointLocation, disposing: bool)ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FamilyPointLocation) -> bool

"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The location of the point.

Get: Location(self: FamilyPointLocation) -> Transform

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the corresponding reference point in the Family document.

Get: Name(self: FamilyPointLocation) -> str

"""



class FamilyPointPlacementReference(APIObject, IDisposable):
    """
    This object represents data corresponding to the placement references in a
    certain types of Family Instances (see examples listed below).
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def getCDA(self, *args): #cannot find CLR method
        """ getCDA(self: FamilyPointPlacementReference) -> ControlledDocAccess* """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The location of the point.

Get: Location(self: FamilyPointPlacementReference) -> Transform

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the corresponding reference point in the Family document.

Get: Name(self: FamilyPointPlacementReference) -> str

"""

    PointReference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The reference on which the point depends on.

Get: PointReference(self: FamilyPointPlacementReference) -> Reference

"""



class FamilySizeTable(object, IDisposable):
    """ Contains size information for a family. """
    def AsValueString(self, row, column):
        """
        AsValueString(self: FamilySizeTable, row: int, column: int) -> str
        
            Gets the table cell value as a string.
        
            row: The table row.
            column: The table column.
            Returns: The table cell value as a string.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FamilySizeTable) """
        pass

    def GetColumnHeader(self, index):
        """
        GetColumnHeader(self: FamilySizeTable, index: int) -> FamilySizeTableColumn
        
            Gets a column of the table at at given index.
        
            index: Index of the column.
            Returns: The column at the given index.
        """
        pass

    def IsValidColumnIndex(self, index):
        """
        IsValidColumnIndex(self: FamilySizeTable, index: int) -> bool
        
            Checks if the column index is valid.
        
            index: The index of the column.
            Returns: True if the column index is valid, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FamilySizeTable, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FamilySizeTable) -> bool

"""

    NumberOfColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Number of columns in the table.

Get: NumberOfColumns(self: FamilySizeTable) -> int

"""

    NumberOfRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Number of rows in the table.

Get: NumberOfRows(self: FamilySizeTable) -> int

"""



class FamilySizeTableColumn(object, IDisposable):
    """ Contains column information for a FamilySizeTable. """
    def Dispose(self):
        """ Dispose(self: FamilySizeTableColumn) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FamilySizeTableColumn, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DisplayUnitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Display unit type of the column.

Get: DisplayUnitType(self: FamilySizeTableColumn) -> DisplayUnitType

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FamilySizeTableColumn) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The column name.

Get: Name(self: FamilySizeTableColumn) -> str

"""

    UnitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Unit type of the column.

Get: UnitType(self: FamilySizeTableColumn) -> UnitType

"""



class FamilySizeTableErrorInfo(object, IDisposable):
    """
    Error information generated from the CSV file import of a FamilySizeTable.
    
    FamilySizeTableErrorInfo()
    """
    def Dispose(self):
        """ Dispose(self: FamilySizeTableErrorInfo) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FamilySizeTableErrorInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    FamilySizeTableErrorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The error type.

Get: FamilySizeTableErrorType(self: FamilySizeTableErrorInfo) -> FamilySizeTableErrorType

"""

    FilePath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The path of the imported CSV file.

Get: FilePath(self: FamilySizeTableErrorInfo) -> str

"""

    InvalidColumnIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The index of the invalid column.

Get: InvalidColumnIndex(self: FamilySizeTableErrorInfo) -> int

"""

    InvalidHeaderText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The invalid header text.

Get: InvalidHeaderText(self: FamilySizeTableErrorInfo) -> str

"""

    InvalidRowIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The index of the invalid row.

Get: InvalidRowIndex(self: FamilySizeTableErrorInfo) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FamilySizeTableErrorInfo) -> bool

"""



class FamilySizeTableErrorType(Enum, IComparable, IFormattable, IConvertible):
    """
    The set of errors that can be returned when importing a FamilySizeTable from a CSV file.
    
    enum FamilySizeTableErrorType, values: CannotOpenFile (1), CannotParseColumnHeader (4), CannotReadFile (2), FileNotFound (0), IncorrectNumberOfColumns (5), InvalidHeaderSeparator (3), Undefined (-1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CannotOpenFile = None
    CannotParseColumnHeader = None
    CannotReadFile = None
    FileNotFound = None
    IncorrectNumberOfColumns = None
    InvalidHeaderSeparator = None
    Undefined = None
    value__ = None


class FamilySizeTableManager(object, IDisposable):
    """ Manages importing, exporting, and querying size data through the FamilySizeTable class. """
    @staticmethod
    def CreateFamilySizeTableManager(document, familyId):
        """
        CreateFamilySizeTableManager(document: Document, familyId: ElementId) -> bool
        
            Adds FamilySizeTableManager to a Family.
           A FamilySizeTableManager and 
             FamilySizeTables are only needed when
           importing, exporting, or removing 
             size data previously stored in CSV files.
        
        
            document: Family owned document or project document.
            familyId: ElementId of the Family.
            Returns: True if successful, false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FamilySizeTableManager) """
        pass

    def ExportSizeTable(self, tableName, filePath):
        """
        ExportSizeTable(self: FamilySizeTableManager, tableName: str, filePath: str) -> bool
        
            Exports the size table to  aCSV file.
        
            tableName: The bool name to export.
            filePath: The CSV file to export to.
            Returns: True if successful, false otherwise..
        """
        pass

    def GetAllSizeTableNames(self):
        """
        GetAllSizeTableNames(self: FamilySizeTableManager) -> IList[str]
        
            Get the FamilySizeTable names in a family.
            Returns: Array of size table names.
        """
        pass

    @staticmethod
    def GetFamilySizeTableManager(document, familyId):
        """
        GetFamilySizeTableManager(document: Document, familyId: ElementId) -> FamilySizeTableManager
        
            Gets a FamilySizeTableManager from a Family
        
            document: Family owned document or a project document
            familyId: ElementId of the  Family.
            Returns: The FamilySizeTableManager of the Family.
        """
        pass

    def GetSizeTable(self, tableName):
        """
        GetSizeTable(self: FamilySizeTableManager, tableName: str) -> FamilySizeTable
        
            Get a FamilySizeTable by name.
        
            tableName: The FamilySizeTable name.
            Returns: The FamilySizeTable of a given name.
        """
        pass

    def HasSizeTable(self, tableName):
        """
        HasSizeTable(self: FamilySizeTableManager, tableName: str) -> bool
        
            Checks if a FamilySizeTable of a given name exists.
        
            tableName: The name of the FamilySizeTable.
            Returns: True if the FamilySizeTable exists, false otherwise.
        """
        pass

    def ImportSizeTable(self, document, filePath, errorInfo):
        """
        ImportSizeTable(self: FamilySizeTableManager, document: Document, filePath: str, errorInfo: FamilySizeTableErrorInfo) -> bool
        
            Imports a FamilySizeTable from a CSV file.
        
            document: Family owned document or project document.
            filePath: The CSV file path.
            errorInfo: An error object to be written to if errors occur.
            Returns: True if successful, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FamilySizeTableManager, disposing: bool) """
        pass

    def RemoveSizeTable(self, tableName):
        """
        RemoveSizeTable(self: FamilySizeTableManager, tableName: str) -> bool
        
            Removes the FamilySizeTable of a given name.
        
            tableName: The FamilySizeTable name.
            Returns: True if successful, false otherwise.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FamilySizeTableManager) -> bool

"""

    NumberOfSizeTables = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of FamilySizeTables in a family.

Get: NumberOfSizeTables(self: FamilySizeTableManager) -> int

"""



class FamilySource(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes which version of the family to be loaded.
    
    enum FamilySource, values: Family (1), Project (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Family = None
    Project = None
    value__ = None


class FamilySymbolFilter(ElementQuickFilter, IDisposable):
    """
    A filter used to find all family symbols of the given family.
    
    FamilySymbolFilter(familyId: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, familyId):
        """ __new__(cls: type, familyId: ElementId) """
        pass

    FamilyId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The family id.

Get: FamilyId(self: FamilySymbolFilter) -> ElementId

"""



class FamilySymbolProfile(SweepProfile, IDisposable):
    """ Represents a family symbol based profile for sweep or swept blend elements. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Angle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The angle of the rotation of the profile in radians.

Get: Angle(self: FamilySymbolProfile) -> float

Set: Angle(self: FamilySymbolProfile) = value
"""

    IsFlipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the symbol profile is flipped or not.

Get: IsFlipped(self: FamilySymbolProfile) -> bool

Set: IsFlipped(self: FamilySymbolProfile) = value
"""

    Profile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the family symbol of the profile.

Get: Profile(self: FamilySymbolProfile) -> FamilySymbol

Set: Profile(self: FamilySymbolProfile) = value
"""

    XOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset of the profile to the origin of the sketch plane in the X direction.

Get: XOffset(self: FamilySymbolProfile) -> float

Set: XOffset(self: FamilySymbolProfile) = value
"""

    YOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset of the profile to the origin of the sketch plane in the Y direction.

Get: YOffset(self: FamilySymbolProfile) -> float

Set: YOffset(self: FamilySymbolProfile) = value
"""



class FamilyThermalProperties(object, IDisposable):
    """
    A class that contains thermal properties for specific types of families
       (doors, windows, and curtain wall panels).
    
    FamilyThermalProperties()
    """
    def Dispose(self):
        """ Dispose(self: FamilyThermalProperties) """
        pass

    @staticmethod
    def Find(pADoc, constructionId):
        """
        Find(pADoc: Document, constructionId: str) -> FamilyThermalProperties
        
            Finds the thermal properties by the 'id' property of a constructionType node in 
             Constructions.xml.
        
        
            pADoc: The document.
            constructionId: The 'id' property of a constructionType node in Constructions.xml
            Returns: The thermal properties found, or ll if no match was found.
        """
        pass

    def IsValid(self):
        """
        IsValid(self: FamilyThermalProperties) -> bool
        
            Confirms that the thermal properties are correctly set for assignment to a 
             FamilySymbol.
        
            Returns: True if the thermal properties are valid, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FamilyThermalProperties, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AnalyticConstructionName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The construction gbXML name.
   This value corresponds to the 'Name' property of a constructionType node in Constructions.xml.

Get: AnalyticConstructionName(self: FamilyThermalProperties) -> str

"""

    AnalyticConstructionTypeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The construction gbXML type.
   This value corresponds to the 'id' property of a constructionType node in Constructions.xml.

Get: AnalyticConstructionTypeId(self: FamilyThermalProperties) -> str

"""

    HeatTransferCoefficient = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The heat transfer coefficient value (U-Value).
   The units are watts per meter-squared kelvin (W/(m^2*K)).

Get: HeatTransferCoefficient(self: FamilyThermalProperties) -> float

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FamilyThermalProperties) -> bool

"""

    SolarHeatGainCoefficient = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The solar heat gain coefficient.

Get: SolarHeatGainCoefficient(self: FamilyThermalProperties) -> float

"""

    ThermalResistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The calculated thermal resistance value (R-Value).
   The units are meter-squared kelvin per watt ((m^2*K)/Watt).

Get: ThermalResistance(self: FamilyThermalProperties) -> float

"""

    VisualLightTransmittance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The visual light transmittance.

Get: VisualLightTransmittance(self: FamilyThermalProperties) -> float

"""



class FamilyType(APIObject, IDisposable):
    """ The family type object provides read access to the values of family parameters for this type. """
    def AsDouble(self, familyParameter):
        """
        AsDouble(self: FamilyType, familyParameter: FamilyParameter) -> Nullable[float]
        
            Provides access to the double precision number of the given family parameter.
            Returns: The double value contained in the parameter. Returns ll
        if the storage type of 
             the input argument is not double type or this parameter has no value.
        """
        pass

    def AsElementId(self, familyParameter):
        """
        AsElementId(self: FamilyType, familyParameter: FamilyParameter) -> ElementId
        
            Provides access to the Autodesk::Revit::DB::ElementId^ stored in the given 
             family parameter.
        
            Returns: The Autodesk::Revit::DB::ElementId^ contained in the parameter.Returns an 
             invalid element id
        if the storage type of the input argument is 
             Autodesk::Revit::DB::ElementId^ type or this parameter has no value.
        """
        pass

    def AsInteger(self, familyParameter):
        """
        AsInteger(self: FamilyType, familyParameter: FamilyParameter) -> Nullable[int]
        
            Provides access to the integer number of the given family parameter.
            Returns: The integer value contained in the parameter. Returns ll
        if the storage type 
             of the input argument is not integer type or this parameter has no value.
        """
        pass

    def AsString(self, familyParameter):
        """
        AsString(self: FamilyType, familyParameter: FamilyParameter) -> str
        
            Provides access to the string contents of the given family parameter.
            Returns: The string contained in the parameter. Returns ll if the storage type of the 
             input
        argument is not string type or this parameter has no value.
        """
        pass

    def AsValueString(self, familyParameter):
        """
        AsValueString(self: FamilyType, familyParameter: FamilyParameter) -> str
        
            Provides access to value as a string with unit in the given family parameter.
            Returns: The string that represents the parameter value with unit.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def HasValue(self, familyParameter):
        """
        HasValue(self: FamilyType, familyParameter: FamilyParameter) -> bool
        
            Indicates if this family parameter has an assigned value or not.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the family type.

Get: Name(self: FamilyType) -> str

"""



class FamilyTypeSet(APIObject, IDisposable, IEnumerable):
    """
    A set that contains FamilyType objects.
    
    FamilyTypeSet()
    """
    def Clear(self):
        """
        Clear(self: FamilyTypeSet)
            Removes every item from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """ Contains(self: FamilyTypeSet, item: FamilyType) -> bool """
        pass

    def Dispose(self):
        """ Dispose(self: FamilyTypeSet, A_0: bool) """
        pass

    def Erase(self, item):
        """ Erase(self: FamilyTypeSet, item: FamilyType) -> int """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: FamilyTypeSet) -> FamilyTypeSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: FamilyTypeSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """ Insert(self: FamilyTypeSet, item: FamilyType) -> bool """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FamilyTypeSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: FamilyTypeSet) -> FamilyTypeSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: FamilyTypeSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the set.

Get: Size(self: FamilyTypeSet) -> int

"""



class FamilyTypeSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a FamilyType set.
    
    FamilyTypeSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: FamilyTypeSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: FamilyTypeSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FamilyTypeSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: FamilyTypeSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: FamilyTypeSetIterator) -> object

"""



class FamilyUtils(object):
    """ Contains utilities related to family operations. """
    @staticmethod
    def ConvertFamilyToFaceHostBased(document, familyId):
        """
        ConvertFamilyToFaceHostBased(document: Document, familyId: ElementId)
            Converts a family to be face host based.
        
            document: The document containing the family to be converted.
            familyId: The family id.
        """
        pass

    @staticmethod
    def FamilyCanConvertToFaceHostBased(document, familyId):
        """
        FamilyCanConvertToFaceHostBased(document: Document, familyId: ElementId) -> bool
        
            Indicates whether the family can be converted to face host based.
        
            document: The document.
            familyId: The element id of the family.
            Returns: True if the family can be converted to face-based.
           Otherwise false, which 
             will be returned if there any family instances exist in the project, the family 
             is already face-based, or the family does not have a host.
           Also, false is 
             returned if the family does not belong to one of the following categories:
           
             OST_CommunicationDevicesOST_DataDevicesOST_DuctTerminalOST_ElectricalEquipmentOS
             T_ElectricalFixturesOST_FireAlarmDevicesOST_LightingDevicesOST_LightingFixturesO
             ST_MechanicalEquipmentOST_NurseCallDevicesOST_PlumbingFixturesOST_SecurityDevice
             sOST_SprinklersOST_TelephoneDevices
        """
        pass

    @staticmethod
    def GetProfileSymbols(document, profileFamilyUsage, oneCurveLoopOnly):
        """
        GetProfileSymbols(document: Document, profileFamilyUsage: ProfileFamilyUsage, oneCurveLoopOnly: bool) -> ICollection[ElementId]
        
            Gets the profile Family Symbols of the document.
        
            document: The document.
            profileFamilyUsage: The profile family usage.
            oneCurveLoopOnly: Whether or not to return only profiles with one curve loop.
            Returns: The set of profile Family Symbol element ids.
        """
        pass

    __all__ = [
        'ConvertFamilyToFaceHostBased',
        'FamilyCanConvertToFaceHostBased',
        'GetProfileSymbols',
    ]


class FBXExportOptions(object):
    """
    3D-Studio Max (FBX) Export options.
    
    FBXExportOptions()
    """
    LevelsOfDetailValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The value of the levels of detail.

Get: LevelsOfDetailValue(self: FBXExportOptions) -> int

Set: LevelsOfDetailValue(self: FBXExportOptions) = value
"""

    StopOnError = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether export process should stop when a view fails to export.

Get: StopOnError(self: FBXExportOptions) -> bool

Set: StopOnError(self: FBXExportOptions) = value
"""

    UseLevelsOfDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to use levels of detail, false otherwise.

Get: UseLevelsOfDetail(self: FBXExportOptions) -> bool

Set: UseLevelsOfDetail(self: FBXExportOptions) = value
"""

    WithoutBoundaryEdges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to export without boundary edges, false otherwise.

Get: WithoutBoundaryEdges(self: FBXExportOptions) -> bool

Set: WithoutBoundaryEdges(self: FBXExportOptions) = value
"""



class ModelPath(object, IDisposable):
    """ A path to a file stored on a disk or on a server. """
    def Compare(self, otherPath):
        """
        Compare(self: ModelPath, otherPath: ModelPath) -> int
        
            Compares this ModelPath with another
        
            otherPath: The path to compare against.
            Returns: A signed integer indicating the lexical relationship between
           two 
             ModelPaths. Value is less than zero if this path is less than
           the given 
             path; zero if the two are the same; and more than zero otherwise
        """
        pass

    def Dispose(self):
        """ Dispose(self: ModelPath) """
        pass

    def GetModelGUID(self):
        """
        GetModelGUID(self: ModelPath) -> Guid
        
            A GUID identifying the A360 model.
        """
        pass

    def GetProjectGUID(self):
        """
        GetProjectGUID(self: ModelPath) -> Guid
        
            A GUID identifying the A360 project to which the model is associated.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ModelPath, disposing: bool) """
        pass

    def __cmp__(self, *args): #cannot find CLR method
        """ x.__cmp__(y) <==> cmp(x,y) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    CentralServerPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A path to the location of the central Revit server.

Get: CentralServerPath(self: ModelPath) -> str

"""

    Empty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether this path is empty

Get: Empty(self: ModelPath) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ModelPath) -> bool

"""

    ServerPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether this path is a server path (as opposed to a file path or cloud path)

Get: ServerPath(self: ModelPath) -> bool

"""



class FilePath(ModelPath, IDisposable):
    """
    This class represents a path on a disk or network location, but
       not a path to a Revit server location.
    
    FilePath(path: str)
    """
    def Dispose(self):
        """ Dispose(self: ModelPath, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ModelPath, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, path):
        """ __new__(cls: type, path: str) """
        pass


class FilledRegion(Element, IDisposable):
    """ A filled region element. """
    @staticmethod
    def Create(document, typeId, viewId, boundaries):
        """ Create(document: Document, typeId: ElementId, viewId: ElementId, boundaries: IList[CurveLoop]) -> FilledRegion """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetBoundaries(self):
        """
        GetBoundaries(self: FilledRegion) -> IList[CurveLoop]
        
            Gets the boundaries.
            Returns: The filled region boundaries.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetValidLineStyleIdsForFilledRegion(document):
        """
        GetValidLineStyleIdsForFilledRegion(document: Document) -> IList[ElementId]
        
            Gets the line style Ids which are permitted to be assigned to a filled region.
        
            document: The document.
            Returns: The valid line style Ids.
        """
        pass

    @staticmethod
    def IsValidFilledRegionTypeId(document, typeId):
        """
        IsValidFilledRegionTypeId(document: Document, typeId: ElementId) -> bool
        
            Indicates whether the given Id is a valid filled region type Id.
        
            document: The document.
            typeId: The filled region type Id.
            Returns: True if it is a valid filled region type Id, false otherwise.
        """
        pass

    @staticmethod
    def IsValidLineStyleIdForFilledRegion(document, lineStyleId):
        """
        IsValidLineStyleIdForFilledRegion(document: Document, lineStyleId: ElementId) -> bool
        
            Indicates whether the given Id is a valid line style Id.
        
            document: The document.
            lineStyleId: The line style Id.
            Returns: True if it is a valid line style Id, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetLineStyleId(self, lineStyleId):
        """
        SetLineStyleId(self: FilledRegion, lineStyleId: ElementId)
            Sets the line style Id for all boundaries.
        
            lineStyleId: The line style Id.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsMasking = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the filled region is masking or not.

Get: IsMasking(self: FilledRegion) -> bool

"""



class FilledRegionBackground(Enum, IComparable, IFormattable, IConvertible):
    """
    The filled region background types.
    
    enum FilledRegionBackground, values: Opaque (0), Transparent (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Opaque = None
    Transparent = None
    value__ = None


class LineAndTextAttrSymbol(ElementType, IDisposable):
    """ An object that represents a dimension style. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilledRegionType(LineAndTextAttrSymbol, IDisposable):
    """ A filled region attributes element. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def IsValidLineWeight(lineWeight):
        """
        IsValidLineWeight(lineWeight: int) -> bool
        
            Indicates whether the given line weight value is valid.
        
            lineWeight: The line weight.
            Returns: True if it is a valid line weight value, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Background = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The background.

Get: Background(self: FilledRegionType) -> FilledRegionBackground

Set: Background(self: FilledRegionType) = value
"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the fill pattern.

Get: Color(self: FilledRegionType) -> Color

Set: Color(self: FilledRegionType) = value
"""

    FillPatternId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fill pattern Id.

Get: FillPatternId(self: FilledRegionType) -> ElementId

Set: FillPatternId(self: FilledRegionType) = value
"""

    LineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The line weight of the fill pattern.

Get: LineWeight(self: FilledRegionType) -> int

Set: LineWeight(self: FilledRegionType) = value
"""



class FillGrid(object, IDisposable):
    """
    Represents a grid line in a fill pattern.
    
    FillGrid(angle: float, spacing: float)
    FillGrid()
    FillGrid(other: FillGrid)
    """
    def CalculateLengthPerArea(self):
        """
        CalculateLengthPerArea(self: FillGrid) -> float
        
            Calculates length of the pattern per unit area.
            Returns: The length per area.
        """
        pass

    def CalculateLinesPerLength(self):
        """
        CalculateLinesPerLength(self: FillGrid) -> float
        
            Calculates the number of solid lines of the pattern per unit length.
            Returns: The solid lines per length.
        """
        pass

    def CalculateStrokesPerArea(self):
        """
        CalculateStrokesPerArea(self: FillGrid) -> float
        
            Calculates the number of the segments of the pattern per unit area.
            Returns: The strokes per area.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FillGrid) """
        pass

    def GetHatchingDirection(self):
        """
        GetHatchingDirection(self: FillGrid) -> UV
        
            Provides the hatching propagation. Hatching is inverted.
            Returns: The direction of hatching.
        """
        pass

    def GetPointLineZone(self, point, nearestPoint=None):
        """
        GetPointLineZone(self: FillGrid, point: UV) -> int
        
            Gets the index of fill grid line closest to the input 2d point.
        
            point: Input point.
            Returns: The index of fill grid line.
        GetPointLineZone(self: FillGrid, point: UV) -> (int, UV)
        
            Gets the index of fill grid line and the point on the grid line nearest to the 
             input point.
        
        
            point: Input point.
            Returns: The index of fill grid line.
        """
        pass

    def GetSegmentDirection(self):
        """
        GetSegmentDirection(self: FillGrid) -> UV
        
            Provides the segment direction.
            Returns: The direction of segment.
        """
        pass

    def GetSegments(self):
        """
        GetSegments(self: FillGrid) -> IList[float]
        
            Gets the segments of the fill grid.
            Returns: The segments.
        """
        pass

    def IsEqual(self, other):
        """
        IsEqual(self: FillGrid, other: FillGrid) -> bool
        
            Check if two fill grids are equal.
        
            other: The fill grid to be compared.
            Returns: True if the two fill grids are equal, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FillGrid, disposing: bool) """
        pass

    def SetSegments(self, segArr):
        """ SetSegments(self: FillGrid, segArr: IList[float]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, angle: float, spacing: float)
        __new__(cls: type)
        __new__(cls: type, other: FillGrid)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Angle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets and sets the angle of the fill grid.

Get: Angle(self: FillGrid) -> float

Set: Angle(self: FillGrid) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FillGrid) -> bool

"""

    Offset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets and sets the offset of the fill grid.

Get: Offset(self: FillGrid) -> float

Set: Offset(self: FillGrid) = value
"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets and sets the origin of the fill grid.

Get: Origin(self: FillGrid) -> UV

Set: Origin(self: FillGrid) = value
"""

    Shift = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets and sets the shift of the fill grid.

Get: Shift(self: FillGrid) -> float

Set: Shift(self: FillGrid) = value
"""



class FillPattern(object, IDisposable):
    """
    Represents a fill pattern object.
    
    FillPattern(name: str, target: FillPatternTarget, orientation: FillPatternHostOrientation, angle: float, spacing1: float, spacing2: float)
    FillPattern(name: str, target: FillPatternTarget, orientation: FillPatternHostOrientation, angle: float, spacing1: float)
    FillPattern(name: str, target: FillPatternTarget, orientation: FillPatternHostOrientation)
    FillPattern()
    FillPattern(other: FillPattern)
    """
    def Dispose(self):
        """ Dispose(self: FillPattern) """
        pass

    def ExpandDots(self):
        """
        ExpandDots(self: FillPattern) -> bool
        
            Corrects pattern dots to make them be drawn properly for Revit.
            Returns: Indicates whether any dots were in fact expanded.
        """
        pass

    def GetFillGrid(self, gridIdx):
        """
        GetFillGrid(self: FillPattern, gridIdx: int) -> FillGrid
        
            Gets the specified fill grid.
        
            gridIdx: The index of the fill grid.
            Returns: The fill grid.
        """
        pass

    def GetFillGrids(self):
        """
        GetFillGrids(self: FillPattern) -> IList[FillGrid]
        
            Gets all fill grids in this fill pattern
            Returns: The fill grids.
        """
        pass

    def IsEqual(self, other):
        """
        IsEqual(self: FillPattern, other: FillPattern) -> bool
        
            Check if the contents in two fill patterns are equal.
        
            other: The fill pattern to be compared.
            Returns: True for equal, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FillPattern, disposing: bool) """
        pass

    def SetFillGrid(self, gridIdx, fillGrid):
        """
        SetFillGrid(self: FillPattern, gridIdx: int, fillGrid: FillGrid)
            Sets the fill grid.
        
            gridIdx: The index of the fill grid.
            fillGrid: The fill grid to be used.
        """
        pass

    def SetFillGrids(self, fillGrids):
        """ SetFillGrids(self: FillPattern, fillGrids: IList[FillGrid]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, name: str, target: FillPatternTarget, orientation: FillPatternHostOrientation, angle: float, spacing1: float, spacing2: float)
        __new__(cls: type, name: str, target: FillPatternTarget, orientation: FillPatternHostOrientation, angle: float, spacing1: float)
        __new__(cls: type, name: str, target: FillPatternTarget, orientation: FillPatternHostOrientation)
        __new__(cls: type)
        __new__(cls: type, other: FillPattern)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    GridCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the count of the fill grids in this fill pattern.

Get: GridCount(self: FillPattern) -> int

"""

    HostOrientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Orientation to host layer.

Get: HostOrientation(self: FillPattern) -> FillPatternHostOrientation

Set: HostOrientation(self: FillPattern) = value
"""

    IsSolidFill = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Check if the fill pattern is a solid fill pattern.

Get: IsSolidFill(self: FillPattern) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FillPattern) -> bool

"""

    LengthPerArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets length of all lines that placed on unit area.

Get: LengthPerArea(self: FillPattern) -> float

"""

    LinesPerLength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of solid lines that placed in unit length.

Get: LinesPerLength(self: FillPattern) -> float

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the fill pattern.

Get: Name(self: FillPattern) -> str

Set: Name(self: FillPattern) = value
"""

    StrokesPerArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of strokes that placed on unit area.

Get: StrokesPerArea(self: FillPattern) -> float

"""

    Target = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Target of this fill pattern applied to.

Get: Target(self: FillPattern) -> FillPatternTarget

Set: Target(self: FillPattern) = value
"""



class FillPatternElement(Element, IDisposable):
    """ An element that represents a fill pattern. """
    @staticmethod
    def Create(document, fillPattern):
        """
        Create(document: Document, fillPattern: FillPattern) -> FillPatternElement
        
            Creates a new FillPatternElement.
        
            document: The document in which to create the FillPatternElement.
            fillPattern: The FillPattern associated to the newly created FillPatternElement.
            Returns: The newly created FillPatternElement.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetFillPattern(self):
        """
        GetFillPattern(self: FillPatternElement) -> FillPattern
        
            Gets the FillPattern associated to this element.
            Returns: A copy of FillPattern object.
        """
        pass

    @staticmethod
    def GetFillPatternElementByName(document, target, name):
        """
        GetFillPatternElementByName(document: Document, target: FillPatternTarget, name: str) -> FillPatternElement
        
            Retrieves the FillPatternElement by its name.
        
            document: The document in which to retrieve the FillPatternElement.
            target: The FillPatternTarget of the FillPatternElement.
            name: The name of the FillPatternElement.
            Returns: The FillPatternElement.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetFillPattern(self, newFillPattern):
        """
        SetFillPattern(self: FillPatternElement, newFillPattern: FillPattern)
            Sets the FillPattern associated to this element.
        
            newFillPattern: The new FillPattern object.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FillPatternHostOrientation(Enum, IComparable, IFormattable, IConvertible):
    """
    The types of orientations for fill patterns.
    
    enum FillPatternHostOrientation, values: AsText (1), ToHost (2), ToView (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AsText = None
    ToHost = None
    ToView = None
    value__ = None


class FillPatternTarget(Enum, IComparable, IFormattable, IConvertible):
    """
    The type of the fill pattern.
    
    enum FillPatternTarget, values: Drafting (0), Model (1), None (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Drafting = None
    Model = None
    None = None
    value__ = None


class FilterableValueProvider(object, IDisposable):
    """
    Defines the interface for classes that extract values from elements
       in a Revit project for testing against filter rules.
    """
    def Dispose(self):
        """ Dispose(self: FilterableValueProvider) """
        pass

    def GetAssociatedGlobalParameterValue(self, element):
        """
        GetAssociatedGlobalParameterValue(self: FilterableValueProvider, element: Element) -> ElementId
        
            Gets a global parameter value associated with a parameter from the given 
             element.
        
        
            element: The element to query.
            Returns: The associated global parameter.
        """
        pass

    def GetDoubleValue(self, element):
        """
        GetDoubleValue(self: FilterableValueProvider, element: Element) -> float
        
            Gets a double-precision numeric value from the given element.
        
            element: The element to query.
            Returns: The double-precision numeric value from the element.
        """
        pass

    def GetElementIdValue(self, element):
        """
        GetElementIdValue(self: FilterableValueProvider, element: Element) -> ElementId
        
            Gets an ElementId value from the given element.
        
            element: The element to query.
            Returns: The ElementId value from the element.
        """
        pass

    def GetIntegerValue(self, element):
        """
        GetIntegerValue(self: FilterableValueProvider, element: Element) -> int
        
            Gets an integer value from the given element.
        
            element: The element to query.
            Returns: The integer value from the element.
        """
        pass

    def GetStringValue(self, element):
        """
        GetStringValue(self: FilterableValueProvider, element: Element) -> str
        
            Gets a string value from the given element.
        
            element: The element to query.
            Returns: The string value from the element.
        """
        pass

    def IsDoubleValueSupported(self, element):
        """
        IsDoubleValueSupported(self: FilterableValueProvider, element: Element) -> bool
        
            Determines whether the provide can provide a double-precision numeric value for 
             the given element.
        
        
            element: The element to query.
            Returns: True if the provider can return a double-precision numeric value for the given 
             element, false otherwise.
        """
        pass

    def IsElementIdValueSupported(self, element):
        """
        IsElementIdValueSupported(self: FilterableValueProvider, element: Element) -> bool
        
            Determines whether the provide can provide an ElementId value for the given 
             element.
        
        
            element: The element to query.
            Returns: True if the provider can return an ElementId value for the given element, false 
             otherwise.
        """
        pass

    def IsIntegerValueSupported(self, element):
        """
        IsIntegerValueSupported(self: FilterableValueProvider, element: Element) -> bool
        
            Determines whether the provide can provide an integer value for the given 
             element.
        
        
            element: The element to query.
            Returns: True if the provider can return an integer value for the given element, false 
             otherwise.
        """
        pass

    def IsStringValueSupported(self, element):
        """
        IsStringValueSupported(self: FilterableValueProvider, element: Element) -> bool
        
            Determines whether the provide can provide a string value for the given element.
        
            element: The element to query.
            Returns: True if the provider can return a string value for the given element, false 
             otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterableValueProvider, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FilterableValueProvider) -> bool

"""



class FilterRule(object, IDisposable):
    """ Defines a boolean operation that can be used to cull elements from a document. """
    def Dispose(self):
        """ Dispose(self: FilterRule) """
        pass

    def ElementPasses(self, element):
        """
        ElementPasses(self: FilterRule, element: Element) -> bool
        
            Derived classes override this method to implement the test that determines
           
             whether the given element passes this rule or not.
        
        
            element: The element to test against the rule.
            Returns: True if the element satisfies the rule, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterRule, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FilterRule) -> bool

"""



class FilterCategoryRule(FilterRule, IDisposable):
    """
    A filter rule that matches elements of a set of categories.
    
    FilterCategoryRule(categories: ICollection[ElementId])
    """
    @staticmethod
    def AllCategoriesFilterable(categories):
        """ AllCategoriesFilterable(categories: ICollection[ElementId]) -> bool """
        pass

    def Dispose(self):
        """ Dispose(self: FilterRule, A_0: bool) """
        pass

    def GetCategories(self):
        """
        GetCategories(self: FilterCategoryRule) -> ICollection[ElementId]
        
            Gets the rule's categories.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterRule, disposing: bool) """
        pass

    def SetCategories(self, categories):
        """ SetCategories(self: FilterCategoryRule, categories: ICollection[ElementId]) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, categories):
        """ __new__(cls: type, categories: ICollection[ElementId]) """
        pass


class FilterValueRule(FilterRule, IDisposable):
    """ A rule that filters on a particular value of an element. """
    def Dispose(self):
        """ Dispose(self: FilterRule, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterRule, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterNumericValueRule(FilterValueRule, IDisposable):
    """ Base for all classes that use a FilterNumericRuleEvaluator to perform their comparisons """
    def Dispose(self):
        """ Dispose(self: FilterRule, A_0: bool) """
        pass

    def GetEvaluator(self):
        """
        GetEvaluator(self: FilterNumericValueRule) -> FilterNumericRuleEvaluator
        
            Gets the evaluator that implements the test for this rule.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterRule, disposing: bool) """
        pass

    def SetEvaluator(self, evaluator):
        """
        SetEvaluator(self: FilterNumericValueRule, evaluator: FilterNumericRuleEvaluator)
            Sets the evaluator that implements the test for this rule.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterDoubleRule(FilterNumericValueRule, IDisposable):
    """
    A filter rule that operates on double-precision numeric values in a Revit project.
    
    FilterDoubleRule(valueProvider: FilterableValueProvider, evaluator: FilterNumericRuleEvaluator, ruleValue: float, epsilon: float)
    """
    def Dispose(self):
        """ Dispose(self: FilterRule, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterRule, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, valueProvider, evaluator, ruleValue, epsilon):
        """ __new__(cls: type, valueProvider: FilterableValueProvider, evaluator: FilterNumericRuleEvaluator, ruleValue: float, epsilon: float) """
        pass

    Epsilon = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The tolerance within which two floating-point values may be considered equal.

Get: Epsilon(self: FilterDoubleRule) -> float

Set: Epsilon(self: FilterDoubleRule) = value
"""

    RuleValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The user-supplied value against which values from a Revit document will be tested.

Get: RuleValue(self: FilterDoubleRule) -> float

Set: RuleValue(self: FilterDoubleRule) = value
"""



class FilteredElementCollector(object, IEnumerable[Element], IEnumerable, IDisposable):
    """
    This class is used to search, filter and iterate through a set of elements.
    
    FilteredElementCollector(document: Document, viewId: ElementId)
    FilteredElementCollector(document: Document, elementIds: ICollection[ElementId])
    FilteredElementCollector(document: Document)
    """
    def ContainedInDesignOption(self, designOptionId):
        """
        ContainedInDesignOption(self: FilteredElementCollector, designOptionId: ElementId) -> FilteredElementCollector
        
            Applies an ElementDesignOptionFilter to the collector.
        
            designOptionId: The design option id.
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FilteredElementCollector) """
        pass

    def Excluding(self, idsToExclude):
        """ Excluding(self: FilteredElementCollector, idsToExclude: ICollection[ElementId]) -> FilteredElementCollector """
        pass

    def FirstElement(self):
        """
        FirstElement(self: FilteredElementCollector) -> Element
        
            Returns the first element to pass the filter(s).
            Returns: The first element.
        """
        pass

    def FirstElementId(self):
        """
        FirstElementId(self: FilteredElementCollector) -> ElementId
        
            Returns the id of the first element to pass the filter(s).
            Returns: The first element id.
        """
        pass

    def GetElementCount(self):
        """
        GetElementCount(self: FilteredElementCollector) -> int
        
            Gets the number of elements in your current filter.
            Returns: The number of elements
        """
        pass

    def GetElementIdIterator(self):
        """
        GetElementIdIterator(self: FilteredElementCollector) -> FilteredElementIdIterator
        
            Returns an element id iterator to the elements passing the filters.
        """
        pass

    def GetElementIterator(self):
        """
        GetElementIterator(self: FilteredElementCollector) -> FilteredElementIterator
        
            Returns an element iterator to the elements passing the filters.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: FilteredElementCollector) -> IEnumerator[Element]
        
            Returns an enumerator that iterates through a collection.
            Returns: An IEnumerator object that can be used to iterate through the collection.
        """
        pass

    def IntersectWith(self, other):
        """
        IntersectWith(self: FilteredElementCollector, other: FilteredElementCollector) -> FilteredElementCollector
        
            Intersects the set of elements passing the filter in this collector
           with 
             the set of elements passing the filter in another collector.
        
        
            other: The other collector
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    @staticmethod
    def IsViewValidForElementIteration(document, viewId):
        """
        IsViewValidForElementIteration(document: Document, viewId: ElementId) -> bool
        
            Identifies if the particular element is valid for iteration of drawn elements.
        
            document: The document.
            viewId: The view id.
            Returns: True if the element is valid for iteration.
        """
        pass

    def OfCategory(self, category):
        """
        OfCategory(self: FilteredElementCollector, category: BuiltInCategory) -> FilteredElementCollector
        
            Applies an ElementCategoryFilter to the collector.
        
            category: The category.
            Returns: This collector.
        """
        pass

    def OfCategoryId(self, categoryId):
        """
        OfCategoryId(self: FilteredElementCollector, categoryId: ElementId) -> FilteredElementCollector
        
            Applies an ElementCategoryFilter to the collector.
        
            categoryId: The category id.
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def OfClass(self, type):
        """
        OfClass(self: FilteredElementCollector, type: Type) -> FilteredElementCollector
        
            Applies an ElementClassFilter to the collector.
        
            type: The element type.
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def OwnedByView(self, viewId):
        """
        OwnedByView(self: FilteredElementCollector, viewId: ElementId) -> FilteredElementCollector
        
            Applies an ElementOwnerViewFilter to the collector.
        
            viewId: The view id of the owner view.
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilteredElementCollector, disposing: bool) """
        pass

    def ToElementIds(self):
        """
        ToElementIds(self: FilteredElementCollector) -> ICollection[ElementId]
        
            Returns the complete set of element ids that pass the filter(s).
            Returns: The complete set of element ids.
        """
        pass

    def ToElements(self):
        """
        ToElements(self: FilteredElementCollector) -> IList[Element]
        
            Returns the complete set of elements that pass the filter(s).
            Returns: The complete set of element ids.
        """
        pass

    def UnionWith(self, other):
        """
        UnionWith(self: FilteredElementCollector, other: FilteredElementCollector) -> FilteredElementCollector
        
            Unites the set of elements passing the filter in this collector
           with the 
             set of elements passing the filter in another collector.
        
        
            other: The other collector
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def WhereElementIsCurveDriven(self):
        """
        WhereElementIsCurveDriven(self: FilteredElementCollector) -> FilteredElementCollector
        
            Applies an ElementIsCurveDrivenFilter to the collector.
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def WhereElementIsElementType(self):
        """
        WhereElementIsElementType(self: FilteredElementCollector) -> FilteredElementCollector
        
            Applies an ElementIsElementTypeFilter to the collector.
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def WhereElementIsNotElementType(self):
        """
        WhereElementIsNotElementType(self: FilteredElementCollector) -> FilteredElementCollector
        
            Applies an inverted ElementIsElementTypeFilter to the collector.
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def WhereElementIsViewIndependent(self):
        """
        WhereElementIsViewIndependent(self: FilteredElementCollector) -> FilteredElementCollector
        
            Applies an ElementOwnerViewFilter to the collector.
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def WherePasses(self, filter):
        """
        WherePasses(self: FilteredElementCollector, filter: ElementFilter) -> FilteredElementCollector
        
            Applies an element filter to the collector.
        
            filter: The element filter.
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Element](enumerable: IEnumerable[Element], value: Element) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    @staticmethod # known case of __new__
    def __new__(self, document, *__args):
        """
        __new__(cls: type, document: Document, viewId: ElementId)
        __new__(cls: type, document: Document, elementIds: ICollection[ElementId])
        __new__(cls: type, document: Document)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FilteredElementCollector) -> bool

"""



class FilteredElementIdIterator(object, IEnumerator[ElementId], IDisposable, IEnumerator):
    """ An iterator to a set of element ids filtered by the settings of a FilteredElementCollector. """
    def Dispose(self):
        """ Dispose(self: FilteredElementIdIterator) """
        pass

    def GetCurrent(self):
        """
        GetCurrent(self: FilteredElementIdIterator) -> ElementId
        
            The current element id found by the iterator.
            Returns: The element id.
        """
        pass

    def IsDone(self):
        """
        IsDone(self: FilteredElementIdIterator) -> bool
        
            Identifies if the iteration has completed.
            Returns: True if the iteration has no more matching elements.  False if there are more 
             element ids to be iterated.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: FilteredElementIdIterator) -> bool
        
            Increments the iterator to the next element id passing the filter.
            Returns: True if there is another available element id passing the filter in this 
             iterator.
           False if the iterator has completed all available element ids.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilteredElementIdIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: FilteredElementIdIterator)
            Resets the iterator to the beginning.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[ElementId](enumerator: IEnumerator[ElementId], value: ElementId) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: FilteredElementIdIterator) -> ElementId

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FilteredElementIdIterator) -> bool

"""



class FilteredElementIterator(object, IEnumerator[Element], IDisposable, IEnumerator):
    """ An iterator to a set of element ids filtered by the settings of a FilteredElementCollector. """
    def Dispose(self):
        """ Dispose(self: FilteredElementIterator) """
        pass

    def GetCurrent(self):
        """
        GetCurrent(self: FilteredElementIterator) -> Element
        
            The current element found by the iterator.
            Returns: The element.
        """
        pass

    def IsDone(self):
        """
        IsDone(self: FilteredElementIterator) -> bool
        
            Identifies if the iteration has completed.
            Returns: True if the iteration has no more matching elements.  False if there are more 
             element ids to be iterated.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: FilteredElementIterator) -> bool
        
            Increments the iterator to the next element passing the filter.
            Returns: True if there is another available element passing the filter in this iterator.
             
           False if the iterator has completed all available elements.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilteredElementIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: FilteredElementIterator)
            Resets the iterator to the beginning.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Element](enumerator: IEnumerator[Element], value: Element) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: FilteredElementIterator) -> Element

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FilteredElementIterator) -> bool

"""



class FilteredWorksetCollector(object, IEnumerable[Workset], IEnumerable, IDisposable):
    """
    This class is used to search, filter and iterate through a set of worksets.
    
    FilteredWorksetCollector(document: Document)
    """
    def Dispose(self):
        """ Dispose(self: FilteredWorksetCollector) """
        pass

    def FirstWorkset(self):
        """
        FirstWorkset(self: FilteredWorksetCollector) -> Workset
        
            Returns the first workset to pass the filter(s).
            Returns: The first workset.
        """
        pass

    def FirstWorksetId(self):
        """
        FirstWorksetId(self: FilteredWorksetCollector) -> WorksetId
        
            Returns the id of the first workset to pass the filter(s).
            Returns: The first workset id.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: FilteredWorksetCollector) -> IEnumerator[Workset]
        
            Returns an enumerator that iterates through a collection.
            Returns: An IEnumerator object that can be used to iterate through the collection.
        """
        pass

    def GetWorksetIdIterator(self):
        """
        GetWorksetIdIterator(self: FilteredWorksetCollector) -> FilteredWorksetIdIterator
        
            Returns a FilteredWorksetIdIterator to the worksets passing the current filter.
        """
        pass

    def GetWorksetIterator(self):
        """
        GetWorksetIterator(self: FilteredWorksetCollector) -> FilteredWorksetIterator
        
            Returns a FilteredWorksetIterator to the worksets passing the current filter.
        """
        pass

    def OfKind(self, worksetKind):
        """
        OfKind(self: FilteredWorksetCollector, worksetKind: WorksetKind) -> FilteredWorksetCollector
        
            Applies a WorksetKindFilter to the collector.
        
            worksetKind: The WorksetKind of the workset.
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilteredWorksetCollector, disposing: bool) """
        pass

    def ToWorksetIds(self):
        """
        ToWorksetIds(self: FilteredWorksetCollector) -> ICollection[WorksetId]
        
            Returns the complete set of workset ids that pass the filter(s).
            Returns: The complete set of workset ids.
        """
        pass

    def ToWorksets(self):
        """
        ToWorksets(self: FilteredWorksetCollector) -> IList[Workset]
        
            Returns the complete set of worksets that pass the filter(s).
            Returns: The complete array of worksets.
        """
        pass

    def WherePasses(self, filter):
        """
        WherePasses(self: FilteredWorksetCollector, filter: WorksetFilter) -> FilteredWorksetCollector
        
            Applies a workset filter to the collector.
        
            filter: The workset filter.
            Returns: A handle to this collector.  This is the same collector that has just been 
             modified, returned
           so you can chain multiple calls together in one line.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Workset](enumerable: IEnumerable[Workset], value: Workset) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    @staticmethod # known case of __new__
    def __new__(self, document):
        """ __new__(cls: type, document: Document) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FilteredWorksetCollector) -> bool

"""



class FilteredWorksetIdIterator(object, IEnumerator[WorksetId], IDisposable, IEnumerator):
    """ An iterator to a set of workset ids filtered by the settings of a FilteredWorksetCollector. """
    def Dispose(self):
        """ Dispose(self: FilteredWorksetIdIterator) """
        pass

    def GetCurrent(self):
        """
        GetCurrent(self: FilteredWorksetIdIterator) -> WorksetId
        
            The current workset id found by the iterator.
            Returns: The workset id.
        """
        pass

    def IsDone(self):
        """
        IsDone(self: FilteredWorksetIdIterator) -> bool
        
            Identifies if the iteration has completed.
            Returns: True if the iteration has no more matching worksets.  False if there are more 
             workset ids to be iterated.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: FilteredWorksetIdIterator) -> bool
        
            Increments the iterator to the next workset id passing the filter.
            Returns: True if there is another available workset id passing the filter in this 
             iterator.
           False if the iterator has completed all available workset ids.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilteredWorksetIdIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: FilteredWorksetIdIterator)
            Resets the iterator to the beginning.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[WorksetId](enumerator: IEnumerator[WorksetId], value: WorksetId) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: FilteredWorksetIdIterator) -> WorksetId

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FilteredWorksetIdIterator) -> bool

"""



class FilteredWorksetIterator(object, IEnumerator[Workset], IDisposable, IEnumerator):
    """ An iterator to a set of worksets filtered by the settings of a FilteredWorksetCollector. """
    def Dispose(self):
        """ Dispose(self: FilteredWorksetIterator) """
        pass

    def GetCurrent(self):
        """
        GetCurrent(self: FilteredWorksetIterator) -> Workset
        
            The current workset found by the iterator.
            Returns: The workset.
        """
        pass

    def IsDone(self):
        """
        IsDone(self: FilteredWorksetIterator) -> bool
        
            Identifies if the iteration has completed.
            Returns: True if the iteration has no more matching worksets.  False if there are more 
             worksets to be iterated.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: FilteredWorksetIterator) -> bool
        
            Increments the iterator to the next workset passing the filter.
            Returns: True if there is another available workset passing the filter in this iterator.
             
           False if the iterator has completed all available worksets.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilteredWorksetIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: FilteredWorksetIterator)
            Resets the iterator to the beginning.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Workset](enumerator: IEnumerator[Workset], value: Workset) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: FilteredWorksetIterator) -> Workset

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FilteredWorksetIterator) -> bool

"""



class FilterElement(Element, IDisposable):
    """ The base class for filter elements in the document. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def IsNameUnique(*__args):
        """
        IsNameUnique(self: FilterElement, name: str) -> bool
        
            Determines whether a potential filter element name is unique.
        
            name: The candidate name.
        IsNameUnique(aDocument: Document, name: str) -> bool
        
            Determines whether the given name could be applied to a new FilterElement,
           
             or if it could not be applied because the name is already in use.
        
        
            aDocument: The document in which the name is being tested for uniqueness.
            name: The name tested for uniqueness.
            Returns: Returns true if the name is unique, and false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterElementIdRule(FilterNumericValueRule, IDisposable):
    """
    A filter rule that operates on ElementId values in a Revit project.
    
    FilterElementIdRule(valueProvider: FilterableValueProvider, evaluator: FilterNumericRuleEvaluator, ruleValue: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: FilterRule, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterRule, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, valueProvider, evaluator, ruleValue):
        """ __new__(cls: type, valueProvider: FilterableValueProvider, evaluator: FilterNumericRuleEvaluator, ruleValue: ElementId) """
        pass

    RuleValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The user-supplied value against which values from a Revit document will be tested.

Get: RuleValue(self: FilterElementIdRule) -> ElementId

Set: RuleValue(self: FilterElementIdRule) = value
"""



class FilterGlobalParameterAssociationRule(FilterNumericValueRule, IDisposable):
    """
    A filter rule that operates on global parameters ElementId values in a Revit project.
    
    FilterGlobalParameterAssociationRule(valueProvider: FilterableValueProvider, evaluator: FilterNumericRuleEvaluator, ruleValue: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: FilterRule, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterRule, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, valueProvider, evaluator, ruleValue):
        """ __new__(cls: type, valueProvider: FilterableValueProvider, evaluator: FilterNumericRuleEvaluator, ruleValue: ElementId) """
        pass

    RuleValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The user-supplied global parameter value against which values from a Revit document will be tested.

Get: RuleValue(self: FilterGlobalParameterAssociationRule) -> ElementId

Set: RuleValue(self: FilterGlobalParameterAssociationRule) = value
"""



class FilterIntegerRule(FilterNumericValueRule, IDisposable):
    """
    A filter rule that operates on integer values in a Revit project.
    
    FilterIntegerRule(valueProvider: FilterableValueProvider, evaluator: FilterNumericRuleEvaluator, ruleValue: int)
    """
    def Dispose(self):
        """ Dispose(self: FilterRule, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterRule, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, valueProvider, evaluator, ruleValue):
        """ __new__(cls: type, valueProvider: FilterableValueProvider, evaluator: FilterNumericRuleEvaluator, ruleValue: int) """
        pass

    RuleValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The user-supplied value against which values from a Revit document will be tested.

Get: RuleValue(self: FilterIntegerRule) -> int

Set: RuleValue(self: FilterIntegerRule) = value
"""



class FilterInverseRule(FilterRule, IDisposable):
    """
    A filter rule that inverts the boolean values returned by the rule it contains.
    
    FilterInverseRule(innerRule: FilterRule)
    """
    def Dispose(self):
        """ Dispose(self: FilterRule, A_0: bool) """
        pass

    def GetInnerRule(self):
        """
        GetInnerRule(self: FilterInverseRule) -> FilterRule
        
            Gets the rule being inverted.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterRule, disposing: bool) """
        pass

    def SetInnerRule(self, innerRule):
        """
        SetInnerRule(self: FilterInverseRule, innerRule: FilterRule)
            Gets the rule being inverted.
        
            innerRule: The rule to invert.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, innerRule):
        """ __new__(cls: type, innerRule: FilterRule) """
        pass


class FilterNumericRuleEvaluator(object, IDisposable):
    """ Base for all classes that compare numeric values from Revit to a user-supplied filter value. """
    def Dispose(self):
        """ Dispose(self: FilterNumericRuleEvaluator) """
        pass

    def Evaluate(self, lhs, rhs, epsilon=None):
        """
        Evaluate(self: FilterNumericRuleEvaluator, lhs: float, rhs: float, epsilon: float) -> bool
        
            Derived classes override this method to implement the test that determines
           
             whether the two given double-precision values satisfy the desired condition or 
             not.
        
        
            lhs: A value from an element in the document.
            rhs: The user-supplied value against which values from the document are tested.
            epsilon: Defines the tolerance within which two values may be considered equal.
            Returns: True if the given arguments satisfy the condition, otherwise false.
        Evaluate(self: FilterNumericRuleEvaluator, lhs: int, rhs: int) -> bool
        
            Derived classes should override this method to implement the desired test.
        
            lhs: A value from an element in the document.
            rhs: The user-supplied value against which values from the document are tested.
            Returns: True if lhs, rhs satisfy the condition implemented by this evaluator.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterNumericRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FilterNumericRuleEvaluator) -> bool

"""



class FilterNumericEquals(FilterNumericRuleEvaluator, IDisposable):
    """
    Tests whether numeric values from the document are equal to a certain value
    
    FilterNumericEquals()
    """
    def Dispose(self):
        """ Dispose(self: FilterNumericRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterNumericRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterNumericGreater(FilterNumericRuleEvaluator, IDisposable):
    """
    Tests whether numeric values from the document are greater than a certain value
    
    FilterNumericGreater()
    """
    def Dispose(self):
        """ Dispose(self: FilterNumericRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterNumericRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterNumericGreaterOrEqual(FilterNumericRuleEvaluator, IDisposable):
    """
    Tests whether numeric values from the document are greater than or equal to a certain value
    
    FilterNumericGreaterOrEqual()
    """
    def Dispose(self):
        """ Dispose(self: FilterNumericRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterNumericRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterNumericLess(FilterNumericRuleEvaluator, IDisposable):
    """
    Tests whether numeric values from the document are less than a certain value
    
    FilterNumericLess()
    """
    def Dispose(self):
        """ Dispose(self: FilterNumericRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterNumericRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterNumericLessOrEqual(FilterNumericRuleEvaluator, IDisposable):
    """
    Tests whether numeric values from the document are less than or equal to a certain value
    
    FilterNumericLessOrEqual()
    """
    def Dispose(self):
        """ Dispose(self: FilterNumericRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterNumericRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterStringRuleEvaluator(object, IDisposable):
    """ Base for all classes that compare string values from Revit to a user-supplied filter value """
    def Dispose(self):
        """ Dispose(self: FilterStringRuleEvaluator) """
        pass

    def Evaluate(self, lhs, rhs, caseSensitive):
        """
        Evaluate(self: FilterStringRuleEvaluator, lhs: str, rhs: str, caseSensitive: bool) -> bool
        
            Derived classes override this method to implement the test that determines
           
             whether the two given string values satisfy the desired condition or not.
        
        
            lhs: A value from an element in the document.
            rhs: The user-supplied value against which values from the document are tested.
            caseSensitive: If true, string comparisons are done case-sensitively.
            Returns: True if the given arguments satisfy the condition, otherwise false.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterStringRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FilterStringRuleEvaluator) -> bool

"""



class FilterStringBeginsWith(FilterStringRuleEvaluator, IDisposable):
    """
    Tests whether string values from the document begin with a certain string.
    
    FilterStringBeginsWith()
    """
    def Dispose(self):
        """ Dispose(self: FilterStringRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterStringRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterStringContains(FilterStringRuleEvaluator, IDisposable):
    """
    Tests whether string values from the document contain a certain string.
    
    FilterStringContains()
    """
    def Dispose(self):
        """ Dispose(self: FilterStringRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterStringRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterStringEndsWith(FilterStringRuleEvaluator, IDisposable):
    """
    Tests whether string values from the document end with a certain string.
    
    FilterStringEndsWith()
    """
    def Dispose(self):
        """ Dispose(self: FilterStringRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterStringRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterStringEquals(FilterStringRuleEvaluator, IDisposable):
    """
    Tests whether string values from the document match a certain string.
    
    FilterStringEquals()
    """
    def Dispose(self):
        """ Dispose(self: FilterStringRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterStringRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterStringGreater(FilterStringRuleEvaluator, IDisposable):
    """
    Tests whether string values from the document would sort after a certain string.
    
    FilterStringGreater()
    """
    def Dispose(self):
        """ Dispose(self: FilterStringRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterStringRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterStringGreaterOrEqual(FilterStringRuleEvaluator, IDisposable):
    """
    Tests whether string values from the document would sort after or match a certain string.
    
    FilterStringGreaterOrEqual()
    """
    def Dispose(self):
        """ Dispose(self: FilterStringRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterStringRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterStringLess(FilterStringRuleEvaluator, IDisposable):
    """
    Tests whether string values from the document would sort before a certain string.
    
    FilterStringLess()
    """
    def Dispose(self):
        """ Dispose(self: FilterStringRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterStringRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterStringLessOrEqual(FilterStringRuleEvaluator, IDisposable):
    """
    Tests whether string values from the document would sort before or match a certain string.
    
    FilterStringLessOrEqual()
    """
    def Dispose(self):
        """ Dispose(self: FilterStringRuleEvaluator, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterStringRuleEvaluator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class FilterStringRule(FilterValueRule, IDisposable):
    """
    A filter rule that operates on string values in a Revit project.
    
    FilterStringRule(valueProvider: FilterableValueProvider, evaluator: FilterStringRuleEvaluator, ruleString: str, caseSensitive: bool)
    """
    def Dispose(self):
        """ Dispose(self: FilterRule, A_0: bool) """
        pass

    def GetEvaluator(self):
        """
        GetEvaluator(self: FilterStringRule) -> FilterStringRuleEvaluator
        
            Gets the evaluator that implements the test for this rule.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterRule, disposing: bool) """
        pass

    def SetEvaluator(self, evaluator):
        """
        SetEvaluator(self: FilterStringRule, evaluator: FilterStringRuleEvaluator)
            Sets the evaluator that implements the test for this rule.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, valueProvider, evaluator, ruleString, caseSensitive):
        """ __new__(cls: type, valueProvider: FilterableValueProvider, evaluator: FilterStringRuleEvaluator, ruleString: str, caseSensitive: bool) """
        pass

    RuleString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The user-supplied string against which strings from a Revit document will be tested.

Get: RuleString(self: FilterStringRule) -> str

Set: RuleString(self: FilterStringRule) = value
"""



class FindReferenceTarget(Enum, IComparable, IFormattable, IConvertible):
    """
    The type of reference to find
    
    enum FindReferenceTarget, values: All (31), Curve (8), Edge (4), Element (1), Face (16), Mesh (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    All = None
    Curve = None
    Edge = None
    Element = None
    Face = None
    Mesh = None
    value__ = None


class FitDirectionType(Enum, IComparable, IFormattable, IConvertible):
    """
    This enum is used to define the direction to fit the number of pixels defined by PixelSize.
    
    enum FitDirectionType, values: Horizontal (0), Vertical (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Horizontal = None
    value__ = None
    Vertical = None


class FittingAndAccessoryCalculationType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum of fitting and accessory pressure drop calculation type.
    
    enum FittingAndAccessoryCalculationType, values: CalculateDefaultSettings (2), CalculatePressureDrop (1), Undefined (0), ValidateCurrentSettings (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CalculateDefaultSettings = None
    CalculatePressureDrop = None
    Undefined = None
    ValidateCurrentSettings = None
    value__ = None


class FittingAngleUsage(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type representing the options for how to limit the angle values applicable to fitting content.
    
    enum FittingAngleUsage, values: UseAnAngleIncrement (1), UseAnyAngle (0), UseSpecificAngles (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    UseAnAngleIncrement = None
    UseAnyAngle = None
    UseSpecificAngles = None
    value__ = None


class Floor(CeilingAndFloor, IDisposable):
    """ An object that represents a Floor within the Autodesk Revit project. """
    def Dispose(self):
        """ Dispose(self: CeilingAndFloor, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetNormalAtVerticalProjectionPoint(self, modelLocation, floorFace):
        """
        GetNormalAtVerticalProjectionPoint(self: Floor, modelLocation: XYZ, floorFace: FloorFace) -> XYZ
        
            Return a surface normal on either the top or bottom face of a floor slab at a 
             point corresponding to the vertical 
        projection of an arbitrary point in 
             project space.
        
        
            modelLocation: A point in project coordinates whose vertical projection will determine the 
             location at which
        the normal will be taken.
        
            floorFace: A flag determining whether the top or bottom face of the floor should be used.
            Returns: Normal vector on the slab at the projection point.
        """
        pass

    def GetSpanDirectionSymbolIds(self):
        """
        GetSpanDirectionSymbolIds(self: Floor) -> ICollection[ElementId]
        
            Retrieves span direction symbol ElementIds.
            Returns: A collection of Element Ids of span direction symbol elements
        """
        pass

    def GetVerticalProjectionPoint(self, modelLocation, floorFace):
        """
        GetVerticalProjectionPoint(self: Floor, modelLocation: XYZ, floorFace: FloorFace) -> XYZ
        
            Return a surface point on either the top or bottom face of a floor slab 
             corresponding to the vertical projection
        of an arbitrary point in project 
             space.
        
        
            modelLocation: A point in project coordinates that will be projected to the slab top or bottom 
             face.
        
            floorFace: A flag determining whether the top or bottom face of the floor should be used.
            Returns: Slab surface point for the vertically projected model point.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    FloorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves/set an object that represents the type of the floor.

Get: FloorType(self: Floor) -> FloorType

Set: FloorType(self: Floor) = value
"""

    SlabShapeEditor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the SlabShapeEditor used for slab shape editing.

Get: SlabShapeEditor(self: Floor) -> SlabShapeEditor

"""

    SpanDirectionAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the span direction angle of the floor

Get: SpanDirectionAngle(self: Floor) -> float

Set: SpanDirectionAngle(self: Floor) = value
"""



class FloorFace(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing floor face types (top or bottom)
    
    enum FloorFace, values: Bottom (1), Top (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Bottom = None
    Top = None
    value__ = None


class FloorType(HostObjAttributes, IDisposable):
    """ An object that specifies the type of a floor in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsFoundationSlab = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns whether the element FloorAttributes type is FoundationSlab.

Get: IsFoundationSlab(self: FloorType) -> bool

"""

    StructuralMaterialId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the identifier of the material that defines the element's structural analysis properties.

Get: StructuralMaterialId(self: FloorType) -> ElementId

Set: StructuralMaterialId(self: FloorType) = value
"""

    ThermalProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The calculated and settable thermal properties of the FloorType

Get: ThermalProperties(self: FloorType) -> ThermalProperties

"""



class FlowDirectionType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing direction types for a connector.
    
    enum FlowDirectionType, values: Bidirectional (0), In (1), Out (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Bidirectional = None
    In = None
    Out = None
    value__ = None


class FolderItemInfo(object, IDisposable):
    """ Contains data for each folder item in the organization settings of the project browser including folder parameter Id and folder name. """
    def Dispose(self):
        """ Dispose(self: FolderItemInfo) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FolderItemInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The folder parameter Id

Get: ElementId(self: FolderItemInfo) -> ElementId

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FolderItemInfo) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The folder name

Get: Name(self: FolderItemInfo) -> str

"""



class FootPrintRoof(RoofBase, IDisposable):
    """ Represents kinds of FootPrintRoofs. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetProfiles(self):
        """
        GetProfiles(self: FootPrintRoof) -> ModelCurveArrArray
        
            Retrieve all the curveLoops of FootPrintRoof.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CurtainGrids = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve all the CurtainGrid objects of a FootPrintRoof.

Get: CurtainGrids(self: FootPrintRoof) -> CurtainGridSet

"""



class Form(GenericForm, IDisposable):
    """ An object that represents a Form within the Autodesk Revit Massing Family. """
    def AddEdge(self, *__args):
        """
        AddEdge(self: Form, faceReference: Reference, point: XYZ)
            Add an edge to the form, connecting two edges on different profiles, by a 
             specified face of the form and a point on face.
        
        
            faceReference: The geometry reference of face
            point: A point on the face, defining the position of edge to be created.
        AddEdge(self: Form, startEdgeReference: Reference, startParam: float, endEdgeReference: Reference, endParam: float)
            Add an edge to the form, connecting two edges on same/different profile, by a 
             pair of specified edge/param.
        
        
            startEdgeReference: The geometry reference of start edge
            startParam: The param on start edge to specify the location.
            endEdgeReference: The geometry reference of end edge
            endParam: The param on end edge to specify the location.
        AddEdge(self: Form, startPointReference: Reference, endPointReference: Reference)
            Add an edge to the form, connecting two edges on same/different profile, by a 
             pair of specified points.
        
        
            startPointReference: The geometry reference of start point
            endPointReference: The geometry reference of end point
        """
        pass

    def AddProfile(self, edgeReference, param):
        """
        AddProfile(self: Form, edgeReference: Reference, param: float) -> int
        
            Add a profile into the form, by a specified edge/param.
        
            edgeReference: The geometry reference of edge.
            param: The param on edge to specify the location.
            Returns: Index of newly created profile.
        """
        pass

    def CanManipulateProfile(self, profileIndex):
        """
        CanManipulateProfile(self: Form, profileIndex: int) -> bool
        
            Tell if a profile can be deleted/moved/rotated.
        
            profileIndex: Index to specify the profile.
        """
        pass

    def CanManipulateSubElement(self, subElementReference):
        """
        CanManipulateSubElement(self: Form, subElementReference: Reference) -> bool
        
            Tell if a sub element can be deleted/moved/rotated/scaled.
        
            subElementReference: The geometry reference of face/edge/curve/vertex
        """
        pass

    def ConstrainProfiles(self, masterProfileIndex):
        """
        ConstrainProfiles(self: Form, masterProfileIndex: int)
            Constrain form profiles using the specified profile as master. This is an 
             advanced version of property "AreProfilesConstrained", allowing specify the 
             master profile.
        
        
            masterProfileIndex: Index to specify the profile used as master profile.
        """
        pass

    def DeleteProfile(self, profileIndex):
        """
        DeleteProfile(self: Form, profileIndex: int)
            Delete a profile of the form.
        
            profileIndex: Index to specify the profile.
        """
        pass

    def DeleteSubElement(self, subElementReference):
        """
        DeleteSubElement(self: Form, subElementReference: Reference)
            Delete a face/edge/curve/vertex of the form, specified by a reference.
        
            subElementReference: The geometry reference of face/edge/curve/vertex
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetControlPoints(self, curveOrEdgeOrFaceReference):
        """
        GetControlPoints(self: Form, curveOrEdgeOrFaceReference: Reference) -> ReferenceArray
        
            Given an edge or a curve or a face, return all control points lying on it (in 
             form of geometry references).
        
        
            curveOrEdgeOrFaceReference: The reference of an edge or curve or face.
            Returns: Reference array containing all control points lying on it.
        """
        pass

    def GetCurvesAndEdgesReference(self, pointReference):
        """
        GetCurvesAndEdgesReference(self: Form, pointReference: Reference) -> ReferenceArray
        
            Given a point, return all edges and curves that it is lying on.
        
            pointReference: The reference of a point.
            Returns: Reference array containing all edges and curves that the point is lying on.
        """
        pass

    def GetPathCurveIndexByCurveReference(self, curveReference):
        """
        GetPathCurveIndexByCurveReference(self: Form, curveReference: Reference) -> int
        
            Given a reference to certain curve in the path, return its index.
        
            curveReference: Reference to the curve in path
        """
        pass

    def GetProfileAndCurveLoopIndexFromReference(self, curveOrEdgeReference, profileIndex, curveLoopIndex):
        """
        GetProfileAndCurveLoopIndexFromReference(self: Form, curveOrEdgeReference: Reference, profileIndex: int, curveLoopIndex: int) -> (int, int)
        
            Given a reference to certain curve or edge, get the index of its profile and 
             curve loop respectively.
        
        
            curveOrEdgeReference: Reference to a curve/edge that is part of one profile
            profileIndex: Profile index for output
            curveLoopIndex: Curve loop index for output
        """
        pass

    def IsAutoCreaseEdge(self, edgeReference):
        """
        IsAutoCreaseEdge(self: Form, edgeReference: Reference) -> bool
        
            Tell if an edge is an auto-crease on a top/bottom cap face.
        
            edgeReference: The reference of the edge to be checked.
        """
        pass

    def IsBeginningFace(self, faceReference):
        """
        IsBeginningFace(self: Form, faceReference: Reference) -> bool
        
            Given a face, tell if it is a beginning cap face.
        
            faceReference: The reference of the  face to be checked.
        """
        pass

    def IsConnectingEdge(self, edgeReference):
        """
        IsConnectingEdge(self: Form, edgeReference: Reference) -> bool
        
            Tell if an edge is a connecting edge on a side face. Connecting edges connect 
             vertices on different profiles.
        
        
            edgeReference: The reference of the edge to be checked.
        """
        pass

    def IsCurveReference(self, curveReference):
        """
        IsCurveReference(self: Form, curveReference: Reference) -> bool
        
            Tell if the pick is the reference to a curve of the form.
        
            curveReference: Reference to be checked.
        """
        pass

    def IsEdgeReference(self, edgeReference):
        """
        IsEdgeReference(self: Form, edgeReference: Reference) -> bool
        
            Tell if the pick is the reference to an edge of the form.
        
            edgeReference: Reference to be checked.
        """
        pass

    def IsEndFace(self, faceReference):
        """
        IsEndFace(self: Form, faceReference: Reference) -> bool
        
            Given a face, tell if it is an end cap face.
        
            faceReference: The reference of the face to be checked.
        """
        pass

    def IsFaceReference(self, faceReference):
        """
        IsFaceReference(self: Form, faceReference: Reference) -> bool
        
            Tell if the pick is the reference to a face of the form.
        
            faceReference: Reference to be checked.
        """
        pass

    def IsProfileEdge(self, curveOrEdgeReference):
        """
        IsProfileEdge(self: Form, curveOrEdgeReference: Reference) -> bool
        
            Tell if an edge or curve is generated from a profile.
        
            curveOrEdgeReference: The reference of the edge or curve to be checked.
        """
        pass

    def IsReferenceOnlyProfile(self, profileIndex):
        """
        IsReferenceOnlyProfile(self: Form, profileIndex: int) -> bool
        
            Tell if the profile is made by referencing existing geometry in the Revit model.
        
            profileIndex: Index to specify the profile to be checked.
        """
        pass

    def IsSideFace(self, faceReference):
        """
        IsSideFace(self: Form, faceReference: Reference) -> bool
        
            Given a face, tell if it is a side face.
        
            faceReference: The reference of the  face to be checked.
        """
        pass

    def IsVertexReference(self, vertexReference):
        """
        IsVertexReference(self: Form, vertexReference: Reference) -> bool
        
            Tell if the pick is the reference to a vertex of the form.
        
            vertexReference: Reference to be checked.
        """
        pass

    def MoveProfile(self, profileIndex, offset):
        """
        MoveProfile(self: Form, profileIndex: int, offset: XYZ)
            Move a profile of the form, specified by a reference, and an offset vector.
        
            profileIndex: Index to specify the profile.
            offset: The vector by which the element is to be moved.
        """
        pass

    def MoveSubElement(self, subElementReference, offset):
        """
        MoveSubElement(self: Form, subElementReference: Reference, offset: XYZ)
            Move a face/edge/curve/vertex of the form, specified by a reference, and an 
             offset vector.
        
        
            subElementReference: The geometry reference of face/edge/curve/vertex
            offset: The vector by which the element is to be moved.
        """
        pass

    def Rehost(self, *__args):
        """
        Rehost(self: Form, hostRef: Reference, location: XYZ)
            Rehost Form to edge, face or curve.
        
            hostRef: The geometry reference on which to rehost the form.
            location: The location to which to Rehost the form.
        Rehost(self: Form, sketchPlane: SketchPlane, location: XYZ)
            Rehost Form to sketch plane
        
            sketchPlane: The sketch plane on which to rehost the form.
            location: The location to which to Rehost the form.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RotateProfile(self, profileIndex, axis, angle):
        """
        RotateProfile(self: Form, profileIndex: int, axis: Line, angle: float)
            Rotate a profile of the form, by a specified angle around a given axis.
        
            profileIndex: Index to specify the profile.
            axis: An unbounded line that represents the axis of rotation.
            angle: The angle, in radians, by which the element is to be rotated around the 
             specified axis.
        """
        pass

    def RotateSubElement(self, subElementReference, axis, angle):
        """
        RotateSubElement(self: Form, subElementReference: Reference, axis: Line, angle: float)
            Rotate a face/edge/curve/vertex of the form, by a specified angle around a 
             given axis.
        
        
            subElementReference: The geometry reference of face/edge/curve/vertex
            axis: An unbounded line that represents the axis of rotation.
            angle: The angle, in radians, by which the element is to be rotated around the 
             specified axis.
        """
        pass

    def ScaleProfile(self, profileIndex, factor, origin):
        """
        ScaleProfile(self: Form, profileIndex: int, factor: float, origin: XYZ)
            Scale a profile of the form, by a specified origin and scale factor.
        
            profileIndex: Index to specify the profile.
            factor: The scale factor, it should be large than zero.
            origin: The origin where scale happens.
        """
        pass

    def ScaleSubElement(self, subElementReference, factor, origin):
        """
        ScaleSubElement(self: Form, subElementReference: Reference, factor: float, origin: XYZ)
            Scale a face/edge/curve/vertex of the form, by a specified origin and scale 
             factor.
        
        
            subElementReference: The geometry reference of face/edge/curve/vertex
            factor: The scale factor, it should be large than zero.
            origin: The origin where scale happens.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AreProfilesConstrained = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get/set if the form's profiles are constrained.

Get: AreProfilesConstrained(self: Form) -> bool

Set: AreProfilesConstrained(self: Form) = value
"""

    BaseOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve/set the base offset of the form object. It is only valid for locked form.

Get: BaseOffset(self: Form) -> float

Set: BaseOffset(self: Form) = value
"""

    HasOneOrMoreReferenceProfiles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tell if the form has any reference profile.

Get: HasOneOrMoreReferenceProfiles(self: Form) -> bool

"""

    HasOpenGeometry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tell if the form has an open geometry.

Get: HasOpenGeometry(self: Form) -> bool

"""

    IsInXRayMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get/set if the form is in X-Ray mode.

Get: IsInXRayMode(self: Form) -> bool

Set: IsInXRayMode(self: Form) = value
"""

    PathCurveCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of curves in the form path.

Get: PathCurveCount(self: Form) -> int

"""

    ProfileCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of profiles in the form.

Get: ProfileCount(self: Form) -> int

"""

    TopOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve/set the top offset of the form object. It is only valid for locked form.

Get: TopOffset(self: Form) -> float

Set: TopOffset(self: Form) = value
"""



class FormArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains form objects.
    
    FormArray()
    """
    def Append(self, item):
        """ Append(self: FormArray, item: Form) """
        pass

    def Clear(self):
        """
        Clear(self: FormArray)
            Removes every form from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FormArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: FormArray) -> FormArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: FormArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """ Insert(self: FormArray, item: Form, index: int) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FormArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: FormArray) -> FormArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: FormArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of forms that are in the array.

Get: Size(self: FormArray) -> int

"""



class FormArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a form array.
    
    FormArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: FormArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: FormArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FormArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: FormArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: FormArrayIterator) -> object

"""



class FormatOptions(object, IDisposable):
    """
    Options for formatting numbers with units.
    
    FormatOptions(other: FormatOptions)
    FormatOptions(displayUnit: DisplayUnitType, unitSymbol: UnitSymbolType, accuracy: float)
    FormatOptions(displayUnit: DisplayUnitType, accuracy: float)
    FormatOptions(displayUnit: DisplayUnitType, unitSymbol: UnitSymbolType)
    FormatOptions(displayUnit: DisplayUnitType)
    FormatOptions()
    """
    def CanHaveUnitSymbol(self, displayUnit=None):
        """
        CanHaveUnitSymbol(displayUnit: DisplayUnitType) -> bool
        
            Checks whether a unit symbol can be specified for a given display unit.
        
            displayUnit: The display unit.
            Returns: True if a unit symbol can be specified, false otherwise.
        CanHaveUnitSymbol(self: FormatOptions) -> bool
        
            Checks whether a unit symbol can be specified for the display unit in this 
             FormatOptions.
        
            Returns: True if a unit symbol can be specified, false otherwise.
        """
        pass

    def CanSuppressLeadingZeros(self, displayUnit=None):
        """
        CanSuppressLeadingZeros(displayUnit: DisplayUnitType) -> bool
        
            Checks whether leading zeros can be suppressed for a given display unit.
        
            displayUnit: The display unit.
            Returns: True if leading zeros can be suppressed, false otherwise.
        CanSuppressLeadingZeros(self: FormatOptions) -> bool
        
            Checks whether leading zeros can be suppressed for the display unit in this 
             FormatOptions.
        
            Returns: True if leading zeros can be suppressed, false otherwise.
        """
        pass

    def CanSuppressSpaces(self, displayUnit=None):
        """
        CanSuppressSpaces(displayUnit: DisplayUnitType) -> bool
        
            Checks whether spaces can be suppressed for a given display unit.
        
            displayUnit: The display unit.
            Returns: True if spaces can be suppressed, false otherwise.
        CanSuppressSpaces(self: FormatOptions) -> bool
        
            Checks whether spaces can be suppressed for the display unit in this 
             FormatOptions.
        
            Returns: True if spaces can be suppressed, false otherwise.
        """
        pass

    def CanSuppressTrailingZeros(self, displayUnit=None):
        """
        CanSuppressTrailingZeros(displayUnit: DisplayUnitType) -> bool
        
            Checks whether trailing zeros can be suppressed for a given display unit.
        
            displayUnit: The display unit.
            Returns: True if trailing zeros can be suppressed, false otherwise.
        CanSuppressTrailingZeros(self: FormatOptions) -> bool
        
            Checks whether trailing zeros can be suppressed for the display unit in this 
             FormatOptions.
        
            Returns: True if trailing zeros can be suppressed, false otherwise.
        """
        pass

    def CanUsePlusPrefix(self, displayUnit=None):
        """
        CanUsePlusPrefix(displayUnit: DisplayUnitType) -> bool
        
            Checks whether a plus prefix can be displayed for a given display unit.
        
            displayUnit: The display unit.
            Returns: True if a plus prefix can be displayed, false otherwise.
        CanUsePlusPrefix(self: FormatOptions) -> bool
        
            Checks whether a plus prefix can be displayed for the display unit in this 
             FormatOptions.
        
            Returns: True if a plus prefix can be displayed, false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FormatOptions) """
        pass

    def GetValidUnitSymbols(self, displayUnit=None):
        """
        GetValidUnitSymbols(displayUnit: DisplayUnitType) -> IList[UnitSymbolType]
        
            Gets all valid unit symbols for a given display unit.
        
            displayUnit: The display unit.
            Returns: The valid unit symbols.
        GetValidUnitSymbols(self: FormatOptions) -> IList[UnitSymbolType]
        
            Gets all valid unit symbols for the display unit in this FormatOptions.
            Returns: The valid unit symbols.
        """
        pass

    def IsValidAccuracy(self, *__args):
        """
        IsValidAccuracy(displayUnit: DisplayUnitType, accuracy: float) -> bool
        
            Checks whether an accuracy is valid for a given display unit.
        
            displayUnit: The display unit.
            accuracy: The accuracy to check.
            Returns: True if the accuracy is valid, false otherwise.
        IsValidAccuracy(self: FormatOptions, accuracy: float) -> bool
        
            Checks whether an accuracy is valid for the display unit in this FormatOptions.
        
            accuracy: The accuracy to check.
            Returns: True if the accuracy is valid, false otherwise.
        """
        pass

    def IsValidForUnitType(self, unitType):
        """
        IsValidForUnitType(self: FormatOptions, unitType: UnitType) -> bool
        
            Checks whether this FormatOptions is valid for a given unit type.
        
            unitType: The unit type.
            Returns: True if the FormatOptions is valid, false otherwise.
        """
        pass

    def IsValidUnitSymbol(self, *__args):
        """
        IsValidUnitSymbol(displayUnit: DisplayUnitType, unitSymbol: UnitSymbolType) -> bool
        
            Checks whether a unit symbol is valid for a given display unit.
        
            displayUnit: The display unit.
            unitSymbol: The unit symbol to check.
            Returns: True if the unit symbol is valid, false otherwise.
        IsValidUnitSymbol(self: FormatOptions, unitSymbol: UnitSymbolType) -> bool
        
            Checks whether a unit symbol is valid for the display unit in this 
             FormatOptions.
        
        
            unitSymbol: The unit symbol to check.
            Returns: True if the unit symbol is valid, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FormatOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, other: FormatOptions)
        __new__(cls: type, displayUnit: DisplayUnitType, unitSymbol: UnitSymbolType, accuracy: float)
        __new__(cls: type, displayUnit: DisplayUnitType, accuracy: float)
        __new__(cls: type, displayUnit: DisplayUnitType, unitSymbol: UnitSymbolType)
        __new__(cls: type, displayUnit: DisplayUnitType)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Accuracy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The accuracy to which values will be rounded.

Get: Accuracy(self: FormatOptions) -> float

Set: Accuracy(self: FormatOptions) = value
"""

    DisplayUnits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The units and display format used to format values.

Get: DisplayUnits(self: FormatOptions) -> DisplayUnitType

Set: DisplayUnits(self: FormatOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FormatOptions) -> bool

"""

    RoundingMethod = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The method used to round values: round to nearest, round up, or round down.

Get: RoundingMethod(self: FormatOptions) -> RoundingMethod

Set: RoundingMethod(self: FormatOptions) = value
"""

    SuppressLeadingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if leading zeros should be suppressed in feet and fractional inches.

Get: SuppressLeadingZeros(self: FormatOptions) -> bool

Set: SuppressLeadingZeros(self: FormatOptions) = value
"""

    SuppressSpaces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if spaces around the dash should be suppressed in feet and fractional inches.

Get: SuppressSpaces(self: FormatOptions) -> bool

Set: SuppressSpaces(self: FormatOptions) = value
"""

    SuppressTrailingZeros = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if trailing zeros after the decimal point should be
   suppressed.

Get: SuppressTrailingZeros(self: FormatOptions) -> bool

Set: SuppressTrailingZeros(self: FormatOptions) = value
"""

    UnitSymbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The unit symbol that should be displayed to indicate the units of the value.

Get: UnitSymbol(self: FormatOptions) -> UnitSymbolType

Set: UnitSymbol(self: FormatOptions) = value
"""

    UseDefault = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether default or custom formatting should be used.

Get: UseDefault(self: FormatOptions) -> bool

Set: UseDefault(self: FormatOptions) = value
"""

    UseDigitGrouping = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if digit grouping symbols should be displayed.

Get: UseDigitGrouping(self: FormatOptions) -> bool

Set: UseDigitGrouping(self: FormatOptions) = value
"""

    UsePlusPrefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if a plus sign prefix should be displayed for positive and zero values.

Get: UsePlusPrefix(self: FormatOptions) -> bool

Set: UsePlusPrefix(self: FormatOptions) = value
"""



class FormatStatus(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type indicating the formatting status of a range of characters
       in FormattedText
    
    enum FormatStatus, values: All (1), Mixed (2), None (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    All = None
    Mixed = None
    None = None
    value__ = None


class FormattedText(object, IDisposable):
    """
    FormattedText is used to create, edit and format text in a Autodesk.Revit.DB.TextNote
       or to query the text and format properties of a Autodesk.Revit.DB.TextNode
    
    FormattedText(plainText: str)
    FormattedText()
    """
    def AsTextRange(self):
        """
        AsTextRange(self: FormattedText) -> TextRange
        
            Returns a Autodesk.Revit.DB.TextRange object that represents the entire text.
            Returns: The Autodesk.Revit.DB.TextRange object that represents the entire text.
        """
        pass

    def Dispose(self):
        """ Dispose(self: FormattedText) """
        pass

    def Find(self, searchString, startIndex, matchCase, matchWholeWord):
        """
        Find(self: FormattedText, searchString: str, startIndex: int, matchCase: bool, matchWholeWord: bool) -> TextRange
        
            Returns a text range identifying the first occurrence of the given string 
             within the text,
           starting from a given index.
        
        
            searchString: The text to search for.
            startIndex: The start index to search within the text.
            matchCase: True if the case must match when searching the formatted text, false to search 
             in a case-insensitive manner.
        
            matchWholeWord: True if the match must be a whole word when searching the formatted text, false 
             otherwise.
        
            Returns: The text range identified.
        """
        pass

    def GetAllCapsStatus(self, textRange=None):
        """
        GetAllCapsStatus(self: FormattedText, textRange: TextRange) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             set of characters in a given text range are in all caps.
        
        
            textRange: The given text range.
            Returns: The format status of all caps on characters Autodesk.Revit.DB.FormatStatus.
        GetAllCapsStatus(self: FormattedText) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             of characters in the entire text are in all caps.
        
            Returns: The format status of all caps on characters Autodesk.Revit.DB.FormatStatus.
        """
        pass

    def GetBoldStatus(self, textRange=None):
        """
        GetBoldStatus(self: FormattedText, textRange: TextRange) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             set of characters in a given text range are bold.
        
        
            textRange: The given text range.
            Returns: The format status of bold on characters Autodesk.Revit.DB.FormatStatus.
        GetBoldStatus(self: FormattedText) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             of characters in the entire text are bold.
        
            Returns: The format status of bold on characters Autodesk.Revit.DB.FormatStatus.
        """
        pass

    def GetIndentLevel(self, textRange):
        """
        GetIndentLevel(self: FormattedText, textRange: TextRange) -> int
        
            Returns the indent level of the paragraphs in the text range.
        
            textRange: The given text range.
            Returns: The indentation level of the paragraphs in the range.
        """
        pass

    def GetItalicStatus(self, textRange=None):
        """
        GetItalicStatus(self: FormattedText, textRange: TextRange) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             set of characters in a given text range are italic.
        
        
            textRange: The given text range.
            Returns: The format status of italic on characters Autodesk.Revit.DB.FormatStatus.
        GetItalicStatus(self: FormattedText) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             of characters in the entire text are italic.
        
            Returns: The format status of italic on characters Autodesk.Revit.DB.FormatStatus.
        """
        pass

    def GetListStartNumber(self, textRange):
        """
        GetListStartNumber(self: FormattedText, textRange: TextRange) -> int
        
            Returns the list start number of the paragraphs in a given text range.
        
            textRange: The given text range.
            Returns: The list start number of the text range.
        """
        pass

    def GetListType(self, textRange):
        """
        GetListType(self: FormattedText, textRange: TextRange) -> ListType
        
            Returns the Autodesk.Revit.DB.ListType of a paragraph.
        
            textRange: The given text range.
            Returns: The Autodesk.Revit.DB.ListType of the paragraph.
        """
        pass

    def GetMaximumIndentLevel(self):
        """
        GetMaximumIndentLevel(self: FormattedText) -> int
        
            Returns the maximum allowed indent level
        """
        pass

    def GetMaximumListStartNumber(self):
        """
        GetMaximumListStartNumber(self: FormattedText) -> int
        
            Returns the maximum allowed list start number.
        """
        pass

    def GetMinimumListStartNumber(self):
        """
        GetMinimumListStartNumber(self: FormattedText) -> int
        
            Returns the minumum allowed list start number.
        """
        pass

    def GetPlainText(self, textRange=None):
        """
        GetPlainText(self: FormattedText) -> str
        
            Returns the entire text in a plain text form.
            Returns: The entire text in a plain text form.
        GetPlainText(self: FormattedText, textRange: TextRange) -> str
        
            Returns a substring of the text in a plain text form. The start and end of the 
             substring is identified
           by a given Autodesk.Revit.DB.TextRange.
        
        
            textRange: The given Autodesk.Revit.DB.TextRange.
            Returns: The substring of the text in a plain text form.
        """
        pass

    def GetSubscriptStatus(self, textRange=None):
        """
        GetSubscriptStatus(self: FormattedText, textRange: TextRange) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             set of characters in a given text range are subscripted.
        
        
            textRange: The given text range.
            Returns: The format status of subscript on characters Autodesk.Revit.DB.FormatStatus.
        GetSubscriptStatus(self: FormattedText) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             of characters in the entire text are subscripted.
        
            Returns: The format status of subscript on characters Autodesk.Revit.DB.FormatStatus.
        """
        pass

    def GetSuperscriptStatus(self, textRange=None):
        """
        GetSuperscriptStatus(self: FormattedText, textRange: TextRange) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             set of characters in a given text range are superscripted.
        
        
            textRange: The given text range.
            Returns: The format status of superscript on characters Autodesk.Revit.DB.FormatStatus.
        GetSuperscriptStatus(self: FormattedText) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             of characters in the entire text are superscripted.
        
            Returns: The format status of superscript on characters Autodesk.Revit.DB.FormatStatus.
        """
        pass

    def GetUnderlineStatus(self, textRange=None):
        """
        GetUnderlineStatus(self: FormattedText, textRange: TextRange) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             set of characters in a given text range are underlined.
        
        
            textRange: The given text range.
            Returns: The format status of underline on characters Autodesk.Revit.DB.FormatStatus.
        GetUnderlineStatus(self: FormattedText) -> FormatStatus
        
            Returns whether Autodesk.Revit.DB.FormatStatus.All, 
             Autodesk.Revit.DB.FormatStatus.None or a Autodesk.Revit.DB.FormatStatus.Mixed 
             of characters in the entire text are underlined.
        
            Returns: The format status of underline on characters Autodesk.Revit.DB.FormatStatus.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FormattedText, disposing: bool) """
        pass

    def SetAllCapsStatus(self, *__args):
        """
        SetAllCapsStatus(self: FormattedText, textRange: TextRange, isAllCaps: bool)
            Sets the characters in a given text range to be in all caps or not.
        
            textRange: The given text range.
            isAllCaps: The desired all caps status of characters in the given text range.
           True 
             will render all characters in all caps.
           False will revert the characters 
             back to their original mixed case.
        
        SetAllCapsStatus(self: FormattedText, isAllCaps: bool)
            Sets the characters in the entire text to be in all caps or not.
        
            isAllCaps: The desired all caps status of characters in the entire text.
           True to set 
             all capped, false to set not all capped.
        """
        pass

    def SetBoldStatus(self, *__args):
        """
        SetBoldStatus(self: FormattedText, textRange: TextRange, isBold: bool)
            Sets the characters in a given text range to be bold or not bold.
        
            textRange: The given text range.
            isBold: The desired bold status of characters in the given text range.
           True to set 
             bold, false to set not bold.
        
        SetBoldStatus(self: FormattedText, isBold: bool)
            Sets the characters in the entire text to be bold or not bold.
        
            isBold: The desired bold status of characters in the entire text.
           True to set bold, 
             false to set not bold.
        """
        pass

    def SetIndentLevel(self, textRange, level):
        """
        SetIndentLevel(self: FormattedText, textRange: TextRange, level: int)
            Sets the number of tab stops that the paragraph should be indented.
        
            textRange: The given text range.
            level: The level set on the paragraph.
        """
        pass

    def SetItalicStatus(self, *__args):
        """
        SetItalicStatus(self: FormattedText, textRange: TextRange, isItalic: bool)
            Sets the characters in a given text range to be italic or not italic.
        
            textRange: The given text range.
            isItalic: The desired italic status of characters in the given text range.
           True to 
             set italic, false to set not italic.
        
        SetItalicStatus(self: FormattedText, isItalic: bool)
            Sets the characters in the entire text to be italic or not italic.
        
            isItalic: The desired italic status of characters in the entire text.
           True to set 
             italic, false to set not italic.
        """
        pass

    def SetListStartNumber(self, textRange, value):
        """
        SetListStartNumber(self: FormattedText, textRange: TextRange, value: int)
            Sets the list start number on the paragraphs in a given text range.
        
            textRange: The given text range.
            value: The list start number to be set on the text range.
        """
        pass

    def SetListType(self, textRange, listType):
        """
        SetListType(self: FormattedText, textRange: TextRange, listType: ListType)
            Sets the Autodesk.Revit.DB.ListType of a paragraph.
        
            textRange: The given text range.
            listType: The Autodesk.Revit.DB.ListType to set on the paragraph.
        """
        pass

    def SetPlainText(self, *__args):
        """
        SetPlainText(self: FormattedText, plainText: str)
            Sets the entire text with the given text in a plain text form.
        
            plainText: The given text in a plain text form.
        SetPlainText(self: FormattedText, textRange: TextRange, plainText: str)
            Sets the text with the given text in a plain text form in a range.
        
            textRange: The given text range.
            plainText: The given text in a plain text form.
        """
        pass

    def SetSubscriptStatus(self, *__args):
        """
        SetSubscriptStatus(self: FormattedText, textRange: TextRange, isSubscript: bool)
            Sets the characters in a given text range to be subscript or not subscript.
        
            textRange: The given text range.
            isSubscript: The desired subscript status of characters in the given text range.
           True to 
             set subscript, false to set not subscript.
        
        SetSubscriptStatus(self: FormattedText, isSubscript: bool)
            Sets the characters in the entire text to be subscript or not subscript.
        
            isSubscript: The desired subscript status of characters in the entire text.
           True to set 
             subscript, false to set not subscript.
        """
        pass

    def SetSuperscriptStatus(self, *__args):
        """
        SetSuperscriptStatus(self: FormattedText, textRange: TextRange, isSuperscript: bool)
            Sets the characters in a given text range to be superscript or not superscript.
        
            textRange: The given text range.
            isSuperscript: The desired superscript status of characters in the given text range.
           True 
             to set superscript, false to set not superscript.
        
        SetSuperscriptStatus(self: FormattedText, isSuperscript: bool)
            Sets the characters in the entire text to be superscript or not superscript.
        
            isSuperscript: The desired superscript status of characters in the entire text.
           True to 
             set superscript, false to set not superscript.
        """
        pass

    def SetUnderlineStatus(self, *__args):
        """
        SetUnderlineStatus(self: FormattedText, textRange: TextRange, isUnderlined: bool)
            Sets the characters in a given text range to be underlined or not underlined.
        
            textRange: The given text range.
            isUnderlined: The desired underline status of characters in the given text range.
           True to 
             set underlined, false to set not underlined.
        
        SetUnderlineStatus(self: FormattedText, isUnderlined: bool)
            Sets the characters in the entire text to be underlined or not underlined.
        
            isUnderlined: The desired underline status of characters in the entire text.
           True to set 
             underlined, false to set not underlined.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, plainText=None):
        """
        __new__(cls: type, plainText: str)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FormattedText) -> bool

"""



class FormattedTextRun(object, IDisposable):
    """ A structure that defines a single run of a formatted text. """
    def Dispose(self):
        """ Dispose(self: FormattedTextRun) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FormattedTextRun, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    BaselineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies the style of the text as related to the baseline position.

Get: BaselineStyle(self: FormattedTextRun) -> TextBaselineStyle

"""

    Bold = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this text run uses Bold text.

Get: Bold(self: FormattedTextRun) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FormattedTextRun) -> bool

"""

    Italic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this text run uses Italic text.

Get: Italic(self: FormattedTextRun) -> bool

"""

    ListStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies the style of a paragraph if the paragraph is a list.

Get: ListStyle(self: FormattedTextRun) -> TextListStyle

"""

    NewLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this text run starts on a new line.

Get: NewLine(self: FormattedTextRun) -> bool

"""

    NewParagraph = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this text run starts a new paragraph.

Get: NewParagraph(self: FormattedTextRun) -> bool

"""

    TabNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """For a text run that starts at a tab stop, this value indicates the number of the tab stop.

Get: TabNumber(self: FormattedTextRun) -> int

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text segment in this text run.

Get: Text(self: FormattedTextRun) -> str

"""

    Underlined = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this text run uses Underlined text.

Get: Underlined(self: FormattedTextRun) -> bool

"""



class FormatUtils(object):
    """ A utility class for formatting numbers with units. """
    @staticmethod
    def Format(document, unitType, value):
        """
        Format(document: Document, unitType: UnitType, value: float) -> str
        
            Formats a number with units into a string based on the units formatting 
             settings for a document.
        
        
            document: The document whose Units object will be used for the units formatting settings.
            unitType: The unit type of the value to format.
            value: The value to format, in Revit's internal units.
            Returns: The formatted string.
        """
        pass

    __all__ = [
        'Format',
    ]


class FormatValueOptions(object, IDisposable):
    """
    Options for formatting numbers with units into strings.
    
    FormatValueOptions()
    """
    def Dispose(self):
        """ Dispose(self: FormatValueOptions) """
        pass

    def GetFormatOptions(self):
        """
        GetFormatOptions(self: FormatValueOptions) -> FormatOptions
        
            Gets the FormatOptions to optionally override the default settings in the Units 
             class.
        
            Returns: A copy of the FormatOptions.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FormatValueOptions, disposing: bool) """
        pass

    def SetFormatOptions(self, formatOptions):
        """
        SetFormatOptions(self: FormatValueOptions, formatOptions: FormatOptions)
            Sets the FormatOptions to optionally override the default settings in the Units 
             class.
        
        
            formatOptions: The FormatOptions.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AppendUnitSymbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if a unit symbol should be appended regardless of the settings in the FormatOptions.

Get: AppendUnitSymbol(self: FormatValueOptions) -> bool

Set: AppendUnitSymbol(self: FormatValueOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: FormatValueOptions) -> bool

"""



class FormUtils(object):
    """ Define Form utility functions """
    @staticmethod
    def CanBeDissolved(ADoc, elements):
        """ CanBeDissolved(ADoc: Document, elements: ICollection[ElementId]) -> bool """
        pass

    @staticmethod
    def DissolveForms(ADoc, elements, BondingPointSet=None):
        """
        DissolveForms(ADoc: Document, elements: ICollection[ElementId]) -> (ICollection[ElementId], ICollection[ElementId])
        DissolveForms(ADoc: Document, elements: ICollection[ElementId]) -> ICollection[ElementId]
        """
        pass

    __all__ = [
        'CanBeDissolved',
        'DissolveForms',
    ]


class Frame(object, IDisposable):
    """
    A Frame comprises three vectors at a base point in 3D space.
    
    Frame(origin: XYZ, vec1: XYZ, vec2: XYZ, vec3: XYZ)
    Frame()
    """
    @staticmethod
    def CanDefineRevitGeometry(frameOfReference):
        """
        CanDefineRevitGeometry(frameOfReference: Frame) -> bool
        
            Tests whether the supplied Frame object may be used to define a Revit curve or 
             surface.
           In order to satisfy the requirements the Frame must be orthonormal
             
           and its origin is expected to lie within the Revit design limits 
             Autodesk.Revit.DB.XYZ.IsWithinLengthLimits(Autodesk.Revit.DB.XYZ).
        
        
            frameOfReference: Frame to be validated.
            Returns: True if this Frame may be used as a local frame of reference, false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Frame) """
        pass

    def IsOrthogonal(self):
        """
        IsOrthogonal(self: Frame) -> bool
        
            Determines if this frame's basis vectors are orthogonal.
            Returns: True if this frame's basis vectors are orthogonal, false if not.
        """
        pass

    def IsOrthonormal(self):
        """
        IsOrthonormal(self: Frame) -> bool
        
            Determines if this frame's basis vectors are orthonormal.
            Returns: True if this frame's basis vectors are orthonormal, false if not.
        """
        pass

    def IsRightHanded(self):
        """
        IsRightHanded(self: Frame) -> bool
        
            Determine if this frame's basis is right-handed.
            Returns: True if this frame's basis is right-handed, false if not.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Frame, disposing: bool) """
        pass

    def Transform(self, trf):
        """
        Transform(self: Frame, trf: Transform)
            Applies the input transform to this frame.
        
            trf: The transform to apply to the frame.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, origin=None, vec1=None, vec2=None, vec3=None):
        """
        __new__(cls: type, origin: XYZ, vec1: XYZ, vec2: XYZ, vec3: XYZ)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    BasisX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The first basis vector of the frame.

Get: BasisX(self: Frame) -> XYZ

Set: BasisX(self: Frame) = value
"""

    BasisY = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The second basis vector of the frame.

Get: BasisY(self: Frame) -> XYZ

Set: BasisY(self: Frame) = value
"""

    BasisZ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The third basis vector of the frame.

Get: BasisZ(self: Frame) -> XYZ

Set: BasisZ(self: Frame) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: Frame) -> bool

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The frame's base point.

Get: Origin(self: Frame) -> XYZ

Set: Origin(self: Frame) = value
"""



class FreeFormElement(GenericForm, IDisposable):
    """ A Free Form Element that contains non-parametric geometry created from an input solid outline. """
    def CanOffsetFace(self, face):
        """
        CanOffsetFace(self: FreeFormElement, face: Face) -> bool
        
            Determines if the input face of the FreeFormElement can be offset.
        
            face: The face to be checked.
            Returns: True if the face can be offset, false otherwise.
        """
        pass

    @staticmethod
    def Create(document, geometry):
        """
        Create(document: Document, geometry: Solid) -> FreeFormElement
        
            Creates a new FreeFormElement from a copy of the input geometry.
        
            document: The document in which the element is to be created.
            geometry: The input geometry.
            Returns: returns a new FreeFormElement
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetFaceOffset(self, face, offset):
        """
        SetFaceOffset(self: FreeFormElement, face: Face, offset: float)
            Offsets a planar face of the free form element a certain distance in the normal 
             direction.
        
        
            face: The face to offset.
            offset: The magnitude of the offset. A positive value offsets out of the input solid. A 
             negative value offsets into the solid shape.
        """
        pass

    def UpdateSolidGeometry(self, newGeometry):
        """
        UpdateSolidGeometry(self: FreeFormElement, newGeometry: Solid)
            Updates the geometry of the FreeForm element to the given shape preserving 
             References to the existing geometry where possible (see remarks for rules).
        
        
            newGeometry: The new geometry to set in the FreeForm element.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class GBXMLExportOptions(object, IDisposable):
    """
    Green-Building XML Export options. Not used currently. Reserved for future use.
    
    GBXMLExportOptions()
    """
    def Dispose(self):
        """ Dispose(self: GBXMLExportOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GBXMLExportOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ExportEnergyModelType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The energy model type from which gbXML will be exported.

Get: ExportEnergyModelType(self: GBXMLExportOptions) -> ExportEnergyModelType

Set: ExportEnergyModelType(self: GBXMLExportOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: GBXMLExportOptions) -> bool

"""



class GBXMLImportOptions(object):
    """
    Import options for Green-Building XML format.
    
    GBXMLImportOptions()
    """

class GenericImportOptions(object):
    """ Generic Import options. """
    RefPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Reference point (in Revit) to which the image is going to be inserted.

Get: RefPoint(self: GenericImportOptions) -> XYZ

Set: RefPoint(self: GenericImportOptions) = value
"""



class GeomCombination(CombinableElement, IDisposable):
    """ An element created by Join and Cut operations applied to combinable elements in an Autodesk Revit family document. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All elements that are joined in this geometry combination.

Get: AllMembers(self: GeomCombination) -> CombinableElementArray

"""



class GeomCombinationSet(APIObject, IDisposable, IEnumerable):
    """
    A set that contains GeomCombination objects.
    
    GeomCombinationSet()
    """
    def Clear(self):
        """
        Clear(self: GeomCombinationSet)
            Removes every item GeomCombination the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: GeomCombinationSet, item: GeomCombination) -> bool
        
            Tests for the existence of an GeomCombination within the set.
        
            item: The element to be searched for.
            Returns: The Contains method returns True if the GeomCombination is within the set, 
             otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: GeomCombinationSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: GeomCombinationSet, item: GeomCombination) -> int
        
            Removes a specified GeomCombination from the set.
        
            item: The GeomCombination to be erased.
            Returns: The number of GeomCombinations that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: GeomCombinationSet) -> GeomCombinationSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: GeomCombinationSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: GeomCombinationSet, item: GeomCombination) -> bool
        
            Insert the specified element into the set.
        
            item: The GeomCombination to be inserted into the set.
            Returns: Returns whether the GeomCombination was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeomCombinationSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: GeomCombinationSet) -> GeomCombinationSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: GeomCombinationSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of GeomCombinations that are in the set.

Get: Size(self: GeomCombinationSet) -> int

"""



class GeomCombinationSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a GeomCombination set.
    
    GeomCombinationSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: GeomCombinationSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: GeomCombinationSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeomCombinationSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: GeomCombinationSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: GeomCombinationSetIterator) -> object

"""



class GeometryCreationUtilities(object):
    """ A utility that allows construction of basic solid shapes. """
    @staticmethod
    def CreateBlendGeometry(firstLoop, secondLoop, vertexPairs, solidOptions=None):
        """
        CreateBlendGeometry(firstLoop: CurveLoop, secondLoop: CurveLoop, vertexPairs: ICollection[VertexPair]) -> Solid
        CreateBlendGeometry(firstLoop: CurveLoop, secondLoop: CurveLoop, vertexPairs: ICollection[VertexPair], solidOptions: SolidOptions) -> Solid
        """
        pass

    @staticmethod
    def CreateExtrusionGeometry(profileLoops, extrusionDir, extrusionDist, solidOptions=None):
        """
        CreateExtrusionGeometry(profileLoops: IList[CurveLoop], extrusionDir: XYZ, extrusionDist: float) -> Solid
        CreateExtrusionGeometry(profileLoops: IList[CurveLoop], extrusionDir: XYZ, extrusionDist: float, solidOptions: SolidOptions) -> Solid
        """
        pass

    @staticmethod
    def CreateFixedReferenceSweptGeometry(sweepPath, pathAttachmentCrvIdx, pathAttachmentParam, profileLoops, fixedReferenceDirection, solidOptions=None):
        """
        CreateFixedReferenceSweptGeometry(sweepPath: CurveLoop, pathAttachmentCrvIdx: int, pathAttachmentParam: float, profileLoops: IList[CurveLoop], fixedReferenceDirection: XYZ) -> Solid
        CreateFixedReferenceSweptGeometry(sweepPath: CurveLoop, pathAttachmentCrvIdx: int, pathAttachmentParam: float, profileLoops: IList[CurveLoop], fixedReferenceDirection: XYZ, solidOptions: SolidOptions) -> Solid
        """
        pass

    @staticmethod
    def CreateLoftGeometry(profileLoops, solidOptions):
        """ CreateLoftGeometry(profileLoops: IList[CurveLoop], solidOptions: SolidOptions) -> Solid """
        pass

    @staticmethod
    def CreateRevolvedGeometry(coordinateFrame, profileLoops, startAngle, endAngle, solidOptions=None):
        """
        CreateRevolvedGeometry(coordinateFrame: Frame, profileLoops: IList[CurveLoop], startAngle: float, endAngle: float) -> Solid
        CreateRevolvedGeometry(coordinateFrame: Frame, profileLoops: IList[CurveLoop], startAngle: float, endAngle: float, solidOptions: SolidOptions) -> Solid
        """
        pass

    @staticmethod
    def CreateSweptBlendGeometry(pathCurve, pathParams, profileLoops, vertexPairs, solidOptions=None):
        """
        CreateSweptBlendGeometry(pathCurve: Curve, pathParams: IList[float], profileLoops: IList[CurveLoop], vertexPairs: IList[ICollection[VertexPair]]) -> Solid
        CreateSweptBlendGeometry(pathCurve: Curve, pathParams: IList[float], profileLoops: IList[CurveLoop], vertexPairs: IList[ICollection[VertexPair]], solidOptions: SolidOptions) -> Solid
        """
        pass

    @staticmethod
    def CreateSweptGeometry(sweepPath, pathAttachmentCrvIdx, pathAttachmentParam, profileLoops, solidOptions=None):
        """
        CreateSweptGeometry(sweepPath: CurveLoop, pathAttachmentCrvIdx: int, pathAttachmentParam: float, profileLoops: IList[CurveLoop]) -> Solid
        CreateSweptGeometry(sweepPath: CurveLoop, pathAttachmentCrvIdx: int, pathAttachmentParam: float, profileLoops: IList[CurveLoop], solidOptions: SolidOptions) -> Solid
        """
        pass

    __all__ = [
        'CreateBlendGeometry',
        'CreateExtrusionGeometry',
        'CreateFixedReferenceSweptGeometry',
        'CreateLoftGeometry',
        'CreateRevolvedGeometry',
        'CreateSweptBlendGeometry',
        'CreateSweptGeometry',
    ]


class GeometryElement(GeometryObject, IDisposable, IEnumerable[GeometryObject], IEnumerable):
    """ Geometric representation of an element. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def GetBoundingBox(self):
        """
        GetBoundingBox(self: GeometryElement) -> BoundingBoxXYZ
        
            Retrieves a box that encloses the geometry element.
            Returns: The bounding box.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: GeometryElement) -> IEnumerator[GeometryObject]
        
            Returns an enumerator that iterates through the collection.
            Returns: An IEnumerator(GeometryObject) object that can be used to iterate through the 
             collection.
        """
        pass

    def GetTransformed(self, transform):
        """
        GetTransformed(self: GeometryElement, transform: Transform) -> GeometryElement
        
            Returns a transformed copy of the geometry in this element.
        
            transform: The transformation to apply to the geometry.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[GeometryObject](enumerable: IEnumerable[GeometryObject], value: GeometryObject) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    MaterialElement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Element describing the material from which this element is composed.

Get: MaterialElement(self: GeometryElement) -> Material

"""



class GeometryInstance(GeometryObject, IDisposable):
    """
    An instance of another element (symbol), specially positioned by this
    element.
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def GetInstanceGeometry(self, transform=None):
        """
        GetInstanceGeometry(self: GeometryInstance) -> GeometryElement
        
            Computes the geometric representation of the instance.
            Returns: An element which contains the computed geometry for the instance.
        GetInstanceGeometry(self: GeometryInstance, transform: Transform) -> GeometryElement
        
            Computes a transformation of the geometric representation of the instance.
        
            transform: The transformation to apply to the geometry.
            Returns: An element which contains the computed geometry for the transformed instance.
        """
        pass

    def GetSymbolGeometry(self, transform=None):
        """
        GetSymbolGeometry(self: GeometryInstance) -> GeometryElement
        
            Computes the geometric representation of the symbol which generates this 
             instance.
        
            Returns: An element which contains the computed geometry for the symbol.
        GetSymbolGeometry(self: GeometryInstance, transform: Transform) -> GeometryElement
        
            Computes a transformation of the geometric representation of the symbol 
        which 
             generates this instance.
        
        
            transform: The transformation to apply to the geometry.
            Returns: An element which contains the computed geometry for the transformed symbol.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Symbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The symbol element that this object is referring to.

Get: Symbol(self: GeometryInstance) -> Element

"""

    SymbolGeometry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The geometric representation of the symbol which generates this instance.

Get: SymbolGeometry(self: GeometryInstance) -> GeometryElement

"""

    Transform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The affine transformation from the local coordinate space of the symbol into the
coordinate space of the instance.

Get: Transform(self: GeometryInstance) -> Transform

"""



class ParameterElement(Element, IDisposable):
    """ An Element that stores a user-defined parameter. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetDefinition(self):
        """
        GetDefinition(self: ParameterElement) -> InternalDefinition
        
            Get the definition representing this parameter element.
            Returns: The parameter.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class GlobalParameter(ParameterElement, IDisposable):
    """ This class represents a GlobalParameter element in Revit. """
    def CanChangeReporting(self):
        """
        CanChangeReporting(self: GlobalParameter) -> bool
        
            Tests whether the global parameter permits a change of its current value of the 
             IsReporting attribute.
        
            Returns: Returns True if the change is allowed; False otherwise.
        """
        pass

    def CanLabelDimension(self, dimensionId):
        """
        CanLabelDimension(self: GlobalParameter, dimensionId: ElementId) -> bool
        
            Tests whether a dimension can be labeled by the global parameter.
        
            dimensionId: Id of a dimension element.
            Returns: True of the input dimension can be labeled by this global parameter; False 
             oterwise.
        """
        pass

    @staticmethod
    def Create(document, name, datatype):
        """
        Create(document: Document, name: str, datatype: ParameterType) -> GlobalParameter
        
            Creates a new Global Parameter in the given document.
        
            document: Document in which the new parameter is to be created
            name: The name of the new parameter. It must be unique in the document
            datatype: Type of the data the parameter is to store
            Returns: An instance of the new global parameter
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetAffectedElements(self):
        """
        GetAffectedElements(self: GlobalParameter) -> ISet[ElementId]
        
            Returns all elements of which properties are driven by this global parameter.
            Returns: Collection of Element Ids.
        """
        pass

    def GetAffectedGlobalParameters(self):
        """
        GetAffectedGlobalParameters(self: GlobalParameter) -> ISet[ElementId]
        
            Returns all other global parameters which refer to this global parameter in 
             their formulas.
        
            Returns: Collection of Element Ids.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetFormula(self):
        """
        GetFormula(self: GlobalParameter) -> str
        
            Returns the parameter's expression in form of a string.
            Returns: The string representing the expression assigned to the parameter.
        """
        pass

    def GetLabeledDimensions(self):
        """
        GetLabeledDimensions(self: GlobalParameter) -> ISet[ElementId]
        
            Returns all dimension elements that are currently labeled by this global 
             parameter.
        
            Returns: Collection of Element Ids.
        """
        pass

    def GetLabelName(self):
        """
        GetLabelName(self: GlobalParameter) -> str
        
            Returns the name of this parameter's label, which is used to label dimension 
             elements.
        
            Returns: The name of the parameter's label.
        """
        pass

    def GetValue(self):
        """
        GetValue(self: GlobalParameter) -> ParameterValue
        
            Obtains the curent value of the global parameter.
            Returns: An instance of one of the classes derived from the ParameterValue base class.
        """
        pass

    def HasValidTypeForReporting(self):
        """
        HasValidTypeForReporting(self: GlobalParameter) -> bool
        
            Tests that the global parameter has data of a type that supports reporting.
            Returns: True if the parameter has data of a type that supports reporting; False 
             otherwise.
        """
        pass

    @staticmethod
    def IsValidDataType(datatype):
        """
        IsValidDataType(datatype: ParameterType) -> bool
        
            Tests whether the input Data Type is valid as a type of a global parameter.
        
            datatype: Type of the data the parameter is to store.
            Returns: True if the data type is suitable for a global parameter; False otherwise.
        """
        pass

    def IsValidFormula(self, expression):
        """
        IsValidFormula(self: GlobalParameter, expression: str) -> bool
        
            Tests that the given expression is a valid as formula for this parameter.
        """
        pass

    def LabelDimension(self, dimensionId):
        """
        LabelDimension(self: GlobalParameter, dimensionId: ElementId)
            Labels a dimension with this global parameter.
        
            dimensionId: Id of a dimension element.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def SetDrivingDimension(self, dimensionId):
        """
        SetDrivingDimension(self: GlobalParameter, dimensionId: ElementId)
            Set a dimension to drive the value of this parameter.
        
            dimensionId: Id of a dimension element.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetFormula(self, expression):
        """
        SetFormula(self: GlobalParameter, expression: str)
            Sets a formula expression for this parameter.
        
            expression: Valid formula string.
        """
        pass

    def SetValue(self, value):
        """
        SetValue(self: GlobalParameter, value: ParameterValue)
            Sets a new value of the global parameter.
        
            value: An instance of one of the value classes derived from ParameterValue.
        """
        pass

    def UnlabelDimension(self, dimensionId):
        """
        UnlabelDimension(self: GlobalParameter, dimensionId: ElementId)
            Unlabels a dimension that is currently labeled by this global parameter.
        
            dimensionId: Id of a dimension element.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsDrivenByDimension = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this parameter is driven by a dimension or not.

Get: IsDrivenByDimension(self: GlobalParameter) -> bool

"""

    IsDrivenByFormula = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this parameter is driven by a formula or not.

Get: IsDrivenByFormula(self: GlobalParameter) -> bool

"""

    IsReporting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this is a reporting global parameter or not.

Get: IsReporting(self: GlobalParameter) -> bool

Set: IsReporting(self: GlobalParameter) = value
"""



class GlobalParametersManager(object, IDisposable):
    """ A class to access and query information about global parameters in Revit models. """
    @staticmethod
    def AreGlobalParametersAllowed(document):
        """
        AreGlobalParametersAllowed(document: Document) -> bool
        
            Tests whether global parameters are allowed in the given document.
        
            document: A revit document of interest.
        """
        pass

    def Dispose(self):
        """ Dispose(self: GlobalParametersManager) """
        pass

    @staticmethod
    def FindByName(document, name):
        """
        FindByName(document: Document, name: str) -> ElementId
        
            Finds whether a global parameter with the given name exists in the input 
             document.
        
        
            document: The document expected to contain the global parameter.
            name: Name of the global parameter
            Returns: ElementId of the parameter element, or InvalidElementId if it was not found.
        """
        pass

    @staticmethod
    def GetAllGlobalParameters(document):
        """
        GetAllGlobalParameters(document: Document) -> ISet[ElementId]
        
            Returns all global parameters available in the given document.
        
            document: The document containing the global parameters
            Returns: A collection of Element Ids of global parameter elements.
        """
        pass

    @staticmethod
    def GetGlobalParametersOrdered(document):
        """
        GetGlobalParametersOrdered(document: Document) -> IList[ElementId]
        
            Returns all global paramters in an ordered array.
        
            document: Document containing the requested global parameters
            Returns: An array of Element Ids of all Global Parameters in the document.
        """
        pass

    @staticmethod
    def IsUniqueName(document, name):
        """
        IsUniqueName(document: Document, name: str) -> bool
        
            Tests whether a name is unique among existing global parameters of a given 
             document.
        
        
            document: Document in which a new parameter is to be added.
            name: A name of a parameter being added.
            Returns: True if the given %name% does not exist yet among existing global parameters 
             nof the document; False otherwise.
        """
        pass

    @staticmethod
    def IsValidGlobalParameter(document, parameterId):
        """
        IsValidGlobalParameter(document: Document, parameterId: ElementId) -> bool
        
            Tests whether an ElementId is of a global parameter in the given document.
        
            document: The document containing the global parameter.
            parameterId: Id of a global parameter
            Returns: Returns True if the Id is of a valid global parameter; False otherwise.
        """
        pass

    @staticmethod
    def MoveParameterDownOrder(document, parameterId):
        """
        MoveParameterDownOrder(document: Document, parameterId: ElementId) -> bool
        
            Moves given paramerer Down in the current order.
        
            document: Document containing the give global parameter
            parameterId: The parameter to move Down
            Returns: Indicates whether the parameter could be moved Down in order or not.
        """
        pass

    @staticmethod
    def MoveParameterUpOrder(document, parameterId):
        """
        MoveParameterUpOrder(document: Document, parameterId: ElementId) -> bool
        
            Moves given paramerer Up in the current order.
        
            document: Document containing the give global parameter
            parameterId: The parameter to move up
            Returns: Indicates whether the parameter could be moved Up in order or not.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GlobalParametersManager, disposing: bool) """
        pass

    @staticmethod
    def SortParameters(document, order):
        """
        SortParameters(document: Document, order: ParametersOrder)
            Sorts global parameters in the desired order.
        
            document: Document containing the global parameters to be sorted
            order: Desired sorting order
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: GlobalParametersManager) -> bool

"""



class GradientBackgroundSettings(BackgroundSettings, IDisposable):
    """ Represents the view gradient background settings. """
    def Dispose(self):
        """ Dispose(self: BackgroundSettings, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BackgroundSettings, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    GroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the ground.

Get: GroundColor(self: GradientBackgroundSettings) -> Color

Set: GroundColor(self: GradientBackgroundSettings) = value
"""

    HorizonColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the horizon.

Get: HorizonColor(self: GradientBackgroundSettings) -> Color

Set: HorizonColor(self: GradientBackgroundSettings) = value
"""

    SkyColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the top of the sky.

Get: SkyColor(self: GradientBackgroundSettings) -> Color

Set: SkyColor(self: GradientBackgroundSettings) = value
"""



class GraphicsStyle(Element, IDisposable):
    """ The graphics style instance in Autodesk Revit document. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    GraphicsStyleCategory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The graphics style category.

Get: GraphicsStyleCategory(self: GraphicsStyle) -> Category

"""

    GraphicsStyleType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The graphics style type.

Get: GraphicsStyleType(self: GraphicsStyle) -> GraphicsStyleType

"""



class GraphicsStyleType(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the type of graphics style.
    
    enum GraphicsStyleType, values: Cut (2), Projection (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Cut = None
    Projection = None
    value__ = None


class Grid(DatumPlane, IDisposable):
    """ Represents a single grid line within Autodesk Revit. """
    @staticmethod
    def Create(document, *__args):
        """
        Create(document: Document, line: Line) -> Grid
        
            Creates a new grid line.
        
            document: The document in which the new instance is created.
            line: A line object which represents the location of the grid line.
            Returns: The newly created grid line.
        Create(document: Document, arc: Arc) -> Grid
        
            Creates a new radial grid line.
        
            document: The document in which the new instance is created.
            arc: An arc object that represents the location of the new grid line.
            Returns: The newly created grid line.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetExtents(self):
        """
        GetExtents(self: Grid) -> Outline
        
            Gets the extents of the grid in the model.
            Returns: The extents are the 3D bounding box surrounding the grid.  The Z coordinates of 
             the box are used by
           Revit to determine if the grid should be displayed in a 
             corresponding view plan (if the grid is linear). The
           extents are not used 
             for arc grids.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetVerticalExtents(self, bottom, top):
        """
        SetVerticalExtents(self: Grid, bottom: float, top: float)
            Adjusts the grid to extend through only the vertical range between bottom and 
             top.
        
        
            bottom: The bottom range of the grid extents.  It must be a valid number and below the 
             top range.
        
            top: The top range of the grid extents.  It must be a valid number and above the 
             bottom range.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Curve = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves an object that represents the geometry of the grid line.

Get: Curve(self: Grid) -> Curve

"""

    IsCurved = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the grid line is curved or straight.

Get: IsCurved(self: Grid) -> bool

"""



class GridNode(object):
    """
    A structure that represents a particular location in (U,V) from a grid.
    
    GridNode(uIndex: int, vIndex: int)
    """
    @staticmethod # known case of __new__
    def __new__(self, uIndex, vIndex):
        """
        __new__[GridNode]() -> GridNode
        
        __new__(cls: type, uIndex: int, vIndex: int)
        """
        pass

    UIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The node's index along the U axis.

Get: UIndex(self: GridNode) -> int

Set: UIndex(self: GridNode) = value
"""

    VIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The node's index along the V axis.

Get: VIndex(self: GridNode) -> int

Set: VIndex(self: GridNode) = value
"""



class GridNodeLocation(Enum, IComparable, IFormattable, IConvertible):
    """
    Location of a grid node relative to the face boundary.
    See Autodesk.Revit.DB.DividedSurface.
    
    enum GridNodeLocation, values: Boundary (1), Exterior (2), Interior (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Boundary = None
    Exterior = None
    Interior = None
    value__ = None


class GridSegmentDirection(Enum, IComparable, IFormattable, IConvertible):
    """
    Specify one of the four adjacent segments to a
    GridNode.
    See Autodesk.Revit.DB.DividedSurface.
    
    enum GridSegmentDirection, values: NegativeU (1), NegativeV (3), PositiveU (0), PositiveV (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    NegativeU = None
    NegativeV = None
    PositiveU = None
    PositiveV = None
    value__ = None


class GridType(LineAndTextAttrSymbol, IDisposable):
    """ An object that represents a grid type. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class Group(Element, IDisposable):
    """ This object represents a group of elements within the project. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetMemberIds(self):
        """
        GetMemberIds(self: Group) -> IList[ElementId]
        
            Retrieves all the member ElementIds of the group.
            Returns: An ordered list of the members within the group. The order of this
        list can be 
             used to match members between other instances of the group.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def UngroupMembers(self):
        """
        UngroupMembers(self: Group) -> ICollection[ElementId]
        
            Ungroups the group.
            Returns: If successful, the ids of the members of group are returned.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    GroupType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or set the type of the group.

Get: GroupType(self: Group) -> GroupType

Set: GroupType(self: Group) = value
"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property is used to find the physical location of a group within project.

Get: Location(self: Group) -> Location

"""



class GroupNode(RenderNode, IDisposable):
    """
    A node that represents set of individual elements grouped together
       in some form, such as an instance of a family or linked Revit file.
    """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def GetSymbolId(self):
        """
        GetSymbolId(self: GroupNode) -> ElementId
        
            The Id of the symbol associated with the node.
        """
        pass

    def GetTransform(self):
        """
        GetTransform(self: GroupNode) -> Transform
        
            A transformation matrix associated with the node.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class GroupSet(APIObject, IDisposable, IEnumerable):
    """
    An set that contains groups.
    
    GroupSet()
    """
    def Clear(self):
        """
        Clear(self: GroupSet)
            Removes every group from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: GroupSet, item: Group) -> bool
        
            Tests for the existence of a group within the set.
        
            item: The group to be searched for.
            Returns: The Contains method returns True if the group is within the set, otherwise 
             False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: GroupSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: GroupSet, item: Group) -> int
        
            Removes a specified group from the set.
        
            item: The group to be erased.
            Returns: The number of groups that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: GroupSet) -> GroupSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: GroupSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: GroupSet, item: Group) -> bool
        
            Insert the specified group into the set.
        
            item: The group to be inserted into the set.
            Returns: Returns whether the group was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GroupSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: GroupSet) -> GroupSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: GroupSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of groups that are in the set.

Get: Size(self: GroupSet) -> int

"""



class GroupSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a group set.
    
    GroupSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: GroupSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: GroupSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GroupSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: GroupSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: GroupSetIterator) -> object

"""



class GroupType(ElementType, IDisposable):
    """ Represents a type of a user defined group. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Groups = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve a set of all the groups that have this type.

Get: Groups(self: GroupType) -> GroupSet

"""



class HermiteFace(Face, IDisposable):
    """ A cubic hermite spline face of a 3d solid or open shell. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    MixedDerivs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Mixed derivatives of the surface.

Get: MixedDerivs(self: HermiteFace) -> IList[XYZ]

"""

    Points = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Interpolation points of the surface.

Get: Points(self: HermiteFace) -> IList[XYZ]

"""



class HermiteSpline(Curve, IDisposable):
    """ A Hermite spline. """
    @staticmethod
    def Create(controlPoints, periodic, tangents=None):
        """
        Create(controlPoints: IList[XYZ], periodic: bool) -> HermiteSpline
        Create(controlPoints: IList[XYZ], periodic: bool, tangents: HermiteSplineTangents) -> HermiteSpline
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ControlPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The control points of the Hermite spline.

Get: ControlPoints(self: HermiteSpline) -> IList[XYZ]

Set: ControlPoints(self: HermiteSpline) = value
"""

    IsPeriodic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns whether the Hermite spline is periodic or not.

Get: IsPeriodic(self: HermiteSpline) -> bool

"""

    Parameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the params of the Hermite spline.

Get: Parameters(self: HermiteSpline) -> DoubleArray

"""

    Tangents = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the tangents of the Hermite spline.

Get: Tangents(self: HermiteSpline) -> IList[XYZ]

"""



class HermiteSplineTangents(object, IDisposable):
    """
    This class indicates tangency at the start, the end, or both ends of the curve.
    
    HermiteSplineTangents()
    """
    def Dispose(self):
        """ Dispose(self: HermiteSplineTangents) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: HermiteSplineTangents, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    EndTangent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The tangent vector at the end of the curve.

Get: EndTangent(self: HermiteSplineTangents) -> XYZ

Set: EndTangent(self: HermiteSplineTangents) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: HermiteSplineTangents) -> bool

"""

    StartTangent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The tangent vector at the start of the curve.

Get: StartTangent(self: HermiteSplineTangents) -> XYZ

Set: StartTangent(self: HermiteSplineTangents) = value
"""



class HermiteSurface(Surface, IDisposable):
    """ A Hermite Surface. """
    @staticmethod
    def Create(nU, nV, points, periodicU=None, periodicV=None):
        """
        Create(nU: int, nV: int, points: IList[XYZ]) -> HermiteSurface
        Create(nU: int, nV: int, points: IList[XYZ], periodicU: bool, periodicV: bool) -> HermiteSurface
        """
        pass

    def Dispose(self):
        """ Dispose(self: Surface, A_0: bool) """
        pass

    def IsValid(self):
        """
        IsValid(self: HermiteSurface) -> bool
        
            Checks whether this HermiteSurface object is valid.
            Returns: True if this is a valid Hermite Surface, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Surface, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class HiddenLineViewsType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all Hidden Line Views types of Print Setting.
    
    enum HiddenLineViewsType, values: RasterProcessing (1), VectorProcessing (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    RasterProcessing = None
    value__ = None
    VectorProcessing = None


class HomeCamera(object, IDisposable):
    """
    A structure that contains information about the camera and view for the Home view orientation stored in the model.
    
    HomeCamera(other: HomeCamera)
    """
    def Dispose(self):
        """ Dispose(self: HomeCamera) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: HomeCamera, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, other):
        """ __new__(cls: type, other: HomeCamera) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    BottomAngleOfFieldOfView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The bottom angle of the field of view.

Get: BottomAngleOfFieldOfView(self: HomeCamera) -> float

"""

    Center = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The zoom or orbit center.

Get: Center(self: HomeCamera) -> XYZ

"""

    EyePosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The eye position point.

Get: EyePosition(self: HomeCamera) -> XYZ

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: HomeCamera) -> bool

"""

    LeftAngleOfFieldOfView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The left angle of the field of view.

Get: LeftAngleOfFieldOfView(self: HomeCamera) -> float

"""

    OrthogonalProjectionHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The height of orthogonal projection view volume.

Get: OrthogonalProjectionHeight(self: HomeCamera) -> float

"""

    OrthogonalProjectionWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The width of orthogonal projection view volume.

Get: OrthogonalProjectionWidth(self: HomeCamera) -> float

"""

    Pivot = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The pivot point.

Get: Pivot(self: HomeCamera) -> XYZ

"""

    RightAngleOfFieldOfView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The right angle of the field of view.

Get: RightAngleOfFieldOfView(self: HomeCamera) -> float

"""

    TopAngleOfFieldOfView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The top angle of the field of view.

Get: TopAngleOfFieldOfView(self: HomeCamera) -> float

"""

    UpDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The up direction vector.

Get: UpDirection(self: HomeCamera) -> XYZ

"""

    ViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the view which is associated to this document's Home view orientation.

Get: ViewId(self: HomeCamera) -> ElementId

"""



class HorizontalAlign(Enum, IComparable, IFormattable, IConvertible):
    """
    Horizontal alignment of model text.
    
    enum HorizontalAlign, values: Center (128), Left (64), Right (256)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Center = None
    Left = None
    Right = None
    value__ = None


class HorizontalAlignmentStyle(Enum, IComparable, IFormattable, IConvertible):
    """
    Declares the horizontal alignment style of font.
    
    enum HorizontalAlignmentStyle, values: Center (1), Left (0), Right (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Center = None
    Left = None
    Right = None
    value__ = None


class HorizontalTextAlignment(Enum, IComparable, IFormattable, IConvertible):
    """
    Supported kinds of text horizontal alignment within the text containing box.
    
    enum HorizontalTextAlignment, values: Center (2), Left (0), Right (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Center = None
    Left = None
    Right = None
    value__ = None


class HostedSweep(HostObject, IDisposable):
    """ An object that represents an object hosted by an edge of a roof or floor within the Autodesk Revit project. """
    def AddSegment(self, targetRef):
        """
        AddSegment(self: HostedSweep, targetRef: Reference)
            Add segments to the hosted sweep object.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetEndPointParameter(self, targetRef, endIdx):
        """
        GetEndPointParameter(self: HostedSweep, targetRef: Reference, endIdx: int) -> float
        
            Retrieve segment's start point or end point parameter.
        
            targetRef: Segment's reference whose parameter want to be get.
            endIdx: Start point (=0) or end point (=1).
            Returns: Start point or end point parameter.
        """
        pass

    def HorizontalFlip(self):
        """
        HorizontalFlip(self: HostedSweep)
            Flip the hosted sweep object along horizontal line.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveSegment(self, targetRef):
        """
        RemoveSegment(self: HostedSweep, targetRef: Reference)
            Remove segments from the  hosted sweep object.
        
            targetRef: Segment's reference which want to be removed.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetEndPointParameter(self, targetRef, endIdx, param):
        """
        SetEndPointParameter(self: HostedSweep, targetRef: Reference, endIdx: int, param: float) -> bool
        
            Set segment's start point or end point parameter.
        
            targetRef: Segment's reference whose parameter want to be set.
            endIdx: Start point (=0) or end point (=1).
            param: Value of parameter.
            Returns: true if operation success.
        """
        pass

    def VerticalFlip(self):
        """
        VerticalFlip(self: HostedSweep)
            Flip the hosted sweep object along vertical line.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Angle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve/set the angle of the  hosted sweep object relative its references (Unit : Radian).

Get: Angle(self: HostedSweep) -> float

Set: Angle(self: HostedSweep) = value
"""

    HorizontalFlipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the horizontal flip status of the hosted sweep object.

Get: HorizontalFlipped(self: HostedSweep) -> bool

"""

    HorizontalOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve/set the horizontal offset of the hosted sweep object.

Get: HorizontalOffset(self: HostedSweep) -> float

Set: HorizontalOffset(self: HostedSweep) = value
"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the length of the hosted sweep object.

Get: Length(self: HostedSweep) -> float

"""

    VerticalFlipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the vertical flip status of the hosted sweep object.

Get: VerticalFlipped(self: HostedSweep) -> bool

"""

    VerticalOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve/set the vertical offset of the hosted sweep object.

Get: VerticalOffset(self: HostedSweep) -> float

Set: VerticalOffset(self: HostedSweep) = value
"""



class HostedSweepType(HostObjAttributes, IDisposable):
    """
    An object that represents the attributes for sweep host objects
    in Autodesk Revit.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class HostObjectUtils(object):
    """ These are generic host object utilities. """
    @staticmethod
    def GetBottomFaces(hostObject):
        """
        GetBottomFaces(hostObject: HostObject) -> IList[Reference]
        
            Returns the bottom faces for this host object.
        
            hostObject: The host object.
            Returns: An array of references to the faces which are at the bottom of this element.
        """
        pass

    @staticmethod
    def GetSideFaces(hostObject, side):
        """
        GetSideFaces(hostObject: HostObject, side: ShellLayerType) -> IList[Reference]
        
            Returns the major side faces for this host object.
        
            hostObject: The host object.
            side: The side of the host object.
            Returns: An array of references to the faces which are on the given side of this element.
        """
        pass

    @staticmethod
    def GetTopFaces(hostObject):
        """
        GetTopFaces(hostObject: HostObject) -> IList[Reference]
        
            Returns the top faces for this host object.
        
            hostObject: The host object.
            Returns: An array of references to the faces which are at the top of this element.
        """
        pass

    __all__ = [
        'GetBottomFaces',
        'GetSideFaces',
        'GetTopFaces',
    ]


class ICentralLockedCallback:
    """
    An interface that may be used to control Revit's behavior when it tries to lock central
       and is blocked because another user already has locked central.
    """
    def ShouldWaitForLockAvailability(self):
        """
        ShouldWaitForLockAvailability(self: ICentralLockedCallback) -> bool
        
            Returns whether Revit should wait and try again to acquire the lock on central.
            Returns: True means wait and try again later.  False means immediately give up.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IConnector:
    """ An interface which provides access to connector in Autodesk Revit MEP document. """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CoordinateSystem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The coordinate system of the connector.

Get: CoordinateSystem(self: IConnector) -> Transform

"""

    Domain = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The domain of the connector.

Get: Domain(self: IConnector) -> Domain

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The height of the connector.

Get: Height(self: IConnector) -> float

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The location of the connector in family document.

Get: Origin(self: IConnector) -> XYZ

"""

    Radius = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The radius of the connector.

Get: Radius(self: IConnector) -> float

"""

    Shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The shape of the connector.

Get: Shape(self: IConnector) -> ConnectorProfileType

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The width of the connector.

Get: Width(self: IConnector) -> float

"""



class IDataConversionMonitor:
    """
    A base class for an application-specific logger. It should be used to track errors during conversion and/or , track conversion progress, cancel a conversion process if necessary.
       Implementing a logger class is optional, but highly recommended for all but most basic data converters.
       The base class is UI- and language-independent. It is up to the using app to implement UI. Language-specifc data may be used to communicate information to application users.
       English should be used to communicate data of interest to Revit development.
    """
    def GetVerbosity(self):
        """
        GetVerbosity(self: IDataConversionMonitor) -> DataExchangeMessageVerbosity
        
            Reports requested verbosity level
        """
        pass

    def ProcessMessage(self, messageId, messageSeverity, entityIds):
        """ ProcessMessage(self: IDataConversionMonitor, messageId: DataExchangeMessageId, messageSeverity: DataExchangeMessageSeverity, entityIds: IList[str]) -> bool """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IDuplicateTypeNamesHandler:
    """
    An interface for custom handlers of duplicate type names encountered during a paste operation. When the destination document
       contains types that have the same names as the types being copied, but different internals, a decision must be made on how to proceed - whether to
       cancel the operation or continue, but only copy types with unique names.
    """
    def OnDuplicateTypeNamesFound(self, args):
        """
        OnDuplicateTypeNamesFound(self: IDuplicateTypeNamesHandler, args: DuplicateTypeNamesHandlerArgs) -> DuplicateTypeAction
        
            Called when the destination document contains types with the same names as the 
             types being copied.
        
        
            args: The information about the types with duplicate names.
            Returns: The action to be taken: copy only types with unique names or cancel the 
             operation.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IExportContext:
    """ An interface that is used in custom export to process a Revit model. """
    def Finish(self):
        """
        Finish(self: IExportContext)
            This method is called at the very end of the export process,
           after all 
             entities were processed (or after the process was cancelled).
        """
        pass

    def IsCanceled(self):
        """
        IsCanceled(self: IExportContext) -> bool
        
            This method is queried at the beginning of every element.
            Returns: Return True if you wish to cancel the exporting process, or False otherwise.
        """
        pass

    def OnElementBegin(self, elementId):
        """
        OnElementBegin(self: IExportContext, elementId: ElementId) -> RenderNodeAction
        
            This method marks the beginning of an element to be exported
        
            elementId: The Id of the element that is about to be processed
            Returns: Return RenderNodeAction.Skip if you wish to skip exporting this element,
           or 
             return RenderNodeAction.Proceed otherwise.
        """
        pass

    def OnElementEnd(self, elementId):
        """
        OnElementEnd(self: IExportContext, elementId: ElementId)
            This method marks the end of an element being exported
        
            elementId: The Id of the element that has just been processed
        """
        pass

    def OnFaceBegin(self, node):
        """
        OnFaceBegin(self: IExportContext, node: FaceNode) -> RenderNodeAction
        
            This method marks the beginning of a Face to be exported
        
            node: An output node that represents a Face.
            Returns: Return RenderNodeAction. Proceed if you wish to receive geometry (polymesh)
           
             for this face, or return RenderNodeAction.Skip otherwise.
        """
        pass

    def OnFaceEnd(self, node):
        """
        OnFaceEnd(self: IExportContext, node: FaceNode)
            This method marks the end of the current face being exported.
        
            node: An output node that represents a Face.
        """
        pass

    def OnInstanceBegin(self, node):
        """
        OnInstanceBegin(self: IExportContext, node: InstanceNode) -> RenderNodeAction
        
            This method marks the beginning of a family instance to be exported
            Returns: Return RenderNodeAction.Skip if you wish to skip processing this family 
             instance,
           or return RenderNodeAction.Proceed otherwise.
        """
        pass

    def OnInstanceEnd(self, node):
        """
        OnInstanceEnd(self: IExportContext, node: InstanceNode)
            This method marks the end of a family instance being exported
        
            node: An output node that represents a family instance.
        """
        pass

    def OnLight(self, node):
        """
        OnLight(self: IExportContext, node: LightNode)
            This method marks the beginning of export of a light object.
        
            node: A node describing the light object.
        """
        pass

    def OnLinkBegin(self, node):
        """
        OnLinkBegin(self: IExportContext, node: LinkNode) -> RenderNodeAction
        
            This method marks the beginning of a link instance to be exported.
            Returns: Return RenderNodeAction.Skip if you wish to skip processing this link instance,
             
           or return RenderNodeAction.Proceed otherwise.
        """
        pass

    def OnLinkEnd(self, node):
        """
        OnLinkEnd(self: IExportContext, node: LinkNode)
            This method marks the end of a link instance being exported.
        
            node: An output node that represents a Revit link.
        """
        pass

    def OnMaterial(self, node):
        """
        OnMaterial(self: IExportContext, node: MaterialNode)
            This method marks a change of the material.
        
            node: A node describing the current material.
        """
        pass

    def OnPolymesh(self, node):
        """
        OnPolymesh(self: IExportContext, node: PolymeshTopology)
            This method is called when a tessellated polymesh of a 3d face is being output.
        
            node: A node representing topology of the polymesh
        """
        pass

    def OnRPC(self, node):
        """
        OnRPC(self: IExportContext, node: RPCNode)
            This method marks the beginning of export of an RPC object.
        
            node: A node with asset information about the RPC object.
        """
        pass

    def OnViewBegin(self, node):
        """
        OnViewBegin(self: IExportContext, node: ViewNode) -> RenderNodeAction
        
            This method marks the beginning of a 3D view to be exported
        
            node: Geometry node associated with the view
            Returns: Return RenderNodeAction.Skip if you wish to skip exporting this view,
           or 
             return RenderNodeAction.Proceed otherwise.
        """
        pass

    def OnViewEnd(self, elementId):
        """
        OnViewEnd(self: IExportContext, elementId: ElementId)
            This method marks the end of a 3D view being exported
        
            elementId: The Id of the 3D view that has just been processed
        """
        pass

    def Start(self):
        """
        Start(self: IExportContext) -> bool
        
            This method is called at the very start of the export process,
           still before 
             the first entity of the model was send out.
        
            Returns: Return True if you are ready to proceed with processing the export.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IExtension:
    """ An interface that supports the additional operation for Extension Status """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IExternalDBApplication:
    """ An interface that supports addition of DB-level external applications to Revit, to subscribe to DB-level events and updaters. """
    def OnShutdown(self, application):
        """
        OnShutdown(self: IExternalDBApplication, application: ControlledApplication) -> ExternalDBApplicationResult
        
            Implement this method to execute some tasks when Autodesk Revit shuts down.
        
            application: Handle to the Revit Application object.
            Returns: Indicates if the external db application completes its work successfully.
        """
        pass

    def OnStartup(self, application):
        """
        OnStartup(self: IExternalDBApplication, application: ControlledApplication) -> ExternalDBApplicationResult
        
            Implement this method to execute some tasks when Autodesk Revit starts.
        
            application: Handle to the Revit Application object.
            Returns: Indicates if the external db application completes its work successfully.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IExternalResourceServer(IExternalServer):
    """ The interface used to provide custom implementation to provide access to external resources (such as linked files) from arbitrary locations. """
    def AreSameResources(self, reference1, reference2):
        """ AreSameResources(self: IExternalResourceServer, reference1: IDictionary[str, str], reference2: IDictionary[str, str]) -> bool """
        pass

    def GetIconPath(self):
        """
        GetIconPath(self: IExternalResourceServer) -> str
        
            Implement this method to return the path to an icon file which will be 
             displayed in Revit
           user interfaces associated to this server.
        
            Returns: The image file of the server.
        """
        pass

    def GetInformationLink(self):
        """
        GetInformationLink(self: IExternalResourceServer) -> str
        
            The method that Revit will invoke to obtain a URL address which provides more 
             information about the server.
        
            Returns: The URL providing server information.
        """
        pass

    def GetInSessionPath(self, reference, originalDisplayPath):
        """
        GetInSessionPath(self: IExternalResourceServer, reference: ExternalResourceReference, originalDisplayPath: str) -> str
        
            Implement this method to provide the path that should be used for display and 
             browsing to a given ExternalResourceReference
           during this Revit session.
        
        
            reference: The ExternalResourceReference for which Revit is requesting the in session 
             display path.
        
            originalDisplayPath: The path that was provided for the resource when the resource was originally 
             loaded into the model.
        
            Returns: The display path that should be used for this resource for this session of 
             Revit.
        """
        pass

    def GetResourceVersionStatus(self, reference):
        """
        GetResourceVersionStatus(self: IExternalResourceServer, reference: ExternalResourceReference) -> ResourceVersionStatus
        
            Implement this method to indicate whether the given version of a resource is 
             the most
           current version of the data.
        
        
            reference: The ExternalResourceReference to check.
            Returns: An enum indicating whether the resource is current, out of date, or of unknown 
             status.
        """
        pass

    def GetShortName(self):
        """
        GetShortName(self: IExternalResourceServer) -> str
        
            Implement this method to return the short name of the server.
            Returns: The short name of the server.
        """
        pass

    def GetTypeSpecificServerOperations(self, extensions):
        """
        GetTypeSpecificServerOperations(self: IExternalResourceServer, extensions: ExternalResourceServerExtensions)
            Implement this method to get operations supported by the external server for a 
             particular type of external resource.
        
        
            extensions: The class which owns sub-interface classes, each of which has methods related 
             to a particular type of external resource.
        """
        pass

    def IsResourceWellFormed(self, extRef):
        """
        IsResourceWellFormed(self: IExternalResourceServer, extRef: ExternalResourceReference) -> bool
        
            Implement this method to check whether the given ExternalResourceReference is 
             formatted
           correctly for this server.
        
        
            extRef: The ExternalResourceReference to check.
            Returns: True if the ExternalResourceReference represents a well-formed
           resource. 
             False otherwise.
        """
        pass

    def LoadResource(self, loadRequestId, resourceType, desiredResource, loadContext, loadResults):
        """
        LoadResource(self: IExternalResourceServer, loadRequestId: Guid, resourceType: ExternalResourceType, desiredResource: ExternalResourceReference, loadContext: ExternalResourceLoadContext, loadResults: ExternalResourceLoadContent)
            Implement this method to load the requested resource.
        
            loadRequestId: The id uniquely identifying the load request.
            resourceType: The type of resource requested.
            desiredResource: The specific resource that should be loaded.
            loadContext: A class containing info about the context of the load request.
            loadResults: The data returned by the server as a result of this load operation.
           Revit 
             will ensure that this argument is the appropriate subclass of 
             ExternalResourceLoadContent for the type of data.
        """
        pass

    def SetupBrowserData(self, browseData):
        """
        SetupBrowserData(self: IExternalResourceServer, browseData: ExternalResourceBrowserData)
            Implement this method to setup external resource browser data which will be 
             accessed in Revit external resource browser UI.
        
        
            browseData: The input context to match the external resources and browser results returned 
             by the server.
        """
        pass

    def SupportsExternalResourceType(self, type):
        """
        SupportsExternalResourceType(self: IExternalResourceServer, type: ExternalResourceType) -> bool
        
            Implement this method to indicate whether the server can provide data for a 
             specified type of external resource.
        
        
            type: The ExternalResourceType of interest to the caller.  For example, KeynoteTable 
             - to determine
           if the server provides data for Revit's keynote table.
        
            Returns: True if the server supports the specified type of external resource
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IFailuresPreprocessor:
    """
    An interface that may be used to perform a preprocessing step to either filter out anticipated transaction failures
       or to mark certain failures as non-continuable.
    """
    def PreprocessFailures(self, failuresAccessor):
        """
        PreprocessFailures(self: IFailuresPreprocessor, failuresAccessor: FailuresAccessor) -> FailureProcessingResult
        
            This method is called when there have been failures found at the end of a 
             transaction and Revit is about to start processing them.
        
        
            failuresAccessor: The Interface class that provides access to the failure information.
            Returns: Notifies end of transaction code about further actions required. Return values 
             are interpreted as follows:
           Continue - the failure processing will 
             continue. Failures will be shown to the user, even if they were addressed by 
             this method.ProceedWithCommit - end of transaction checks and failure 
             processing will restart from the beginning.
           If some failures were resolved 
             here, they will be removed and not delivered to the user.
           ProceedWithCommit 
             cannot be returned if transaction is being rolled back.ProceedWithRollBack - 
             the failure processing will continue. Failures will be shown to the user, but 
             user will have no option
           to resolve or ignore them - only cancel option 
             will be available. If intent is to roll back transaction without showing 
             failures to the user,
           it can be achieved by setting failure handling option 
             to remove failures before returning ProceedWithRollBack.
           Other return 
             values are not allowed.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IFailuresProcessor:
    """ To create your own UI or fully automated tool to process Revit Failures, derive a class from this interface. """
    def Dismiss(self, document):
        """
        Dismiss(self: IFailuresProcessor, document: Document)
            This method is being called in case of exception or document destruction to 
             dismiss any possible pending failure UI that may
           have left on the screen
        
        
            document: Document for which pending failures processing UI should be dismissed
        """
        pass

    def ProcessFailures(self, data):
        """
        ProcessFailures(self: IFailuresProcessor, data: FailuresAccessor) -> FailureProcessingResult
        
            Method that Revit will invoke to process failures at the end of transaction.
        
            data: Provides all necessary data to perform the resolution of failures.
            Returns: The result of the failures processing.
           Continue - Should be returned if 
             there were no failures or highest failure severity was "Warning" and all 
             warnings were deleted.
           If some failures are still present and "Continue" is 
             returned, it will be treated as "ProceedWithRollback".
           Note: If this method 
             has attempted to resolve failures, it should return "ProceedWithCommit"
           to 
             repeat end of transaction checks and failures processing.ProceedWithCommit - 
             End of transaction checks and failure processing will restart from the 
             beginning.
           If some failures were resolved, they will be removed and not 
             delivered to the user.
           ProceedWithCommit cannot be returned if transaction 
             is being rolled back.ProceedWithRollBack - Transaction will be rolled back 	
             even if Commit was originally requested.WaitForUserInput - Should be returned 
             if method has activated modeless user interaction and is waiting for an 
             external event
           (typically user input) to complete failures processing.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IFamilyLoadOptions:
    """ An interface class which provide the callback for family load options. """
    def OnFamilyFound(self, familyInUse, overwriteParameterValues):
        """
        OnFamilyFound(self: IFamilyLoadOptions, familyInUse: bool) -> (bool, bool)
        
            A method called when the family was found in the target document.
        
            familyInUse: Indicates if one or more instances of the family is placed in the project.
            Returns: Return true to continue loading the family, false to cancel.
        """
        pass

    def OnSharedFamilyFound(self, sharedFamily, familyInUse, source, overwriteParameterValues):
        """
        OnSharedFamilyFound(self: IFamilyLoadOptions, sharedFamily: Family, familyInUse: bool) -> (bool, FamilySource, bool)
        
            A method called when the shared family was found in the target document.
        
            sharedFamily: The shared family in the current family document.
            familyInUse: Indicates if one or more instances of the family is placed in the project.
            Returns: Return true to continue loading the family, false to cancel.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IFCExportOptions(object, IDisposable):
    """
    IFC Export options.
    
    IFCExportOptions(from: IFCExportOptions)
    IFCExportOptions()
    """
    def AddOption(self, name, value):
        """
        AddOption(self: IFCExportOptions, name: str, value: str)
            Adds a new named option to the options structure.
        
            name: The option name.
            value: The option value.
        """
        pass

    def Assign(self, sourceOptions):
        """
        Assign(self: IFCExportOptions, sourceOptions: IFCExportOptions)
            Assigns the values of the IFCExportOptions to this options object.
        
            sourceOptions: The source IFCExportOptions.
        """
        pass

    def Dispose(self):
        """ Dispose(self: IFCExportOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: IFCExportOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, from=None):
        """
        __new__(cls: type, from: IFCExportOptions)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ExportBaseQuantities = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Option to export IFC standard quantities currently supported by Revit.

Get: ExportBaseQuantities(self: IFCExportOptions) -> bool

Set: ExportBaseQuantities(self: IFCExportOptions) = value
"""

    FamilyMappingFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Path to a file containing family mapping.

Get: FamilyMappingFile(self: IFCExportOptions) -> str

Set: FamilyMappingFile(self: IFCExportOptions) = value
"""

    FileVersion = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """IFC file version.

Get: FileVersion(self: IFCExportOptions) -> IFCVersion

Set: FileVersion(self: IFCExportOptions) = value
"""

    FilterViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the view whose visibility settings will govern the contents in the exported IFC file.

Get: FilterViewId(self: IFCExportOptions) -> ElementId

Set: FilterViewId(self: IFCExportOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: IFCExportOptions) -> bool

"""

    SpaceBoundaryLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Level of space boundaries exported in IFC file.

Get: SpaceBoundaryLevel(self: IFCExportOptions) -> int

Set: SpaceBoundaryLevel(self: IFCExportOptions) = value
"""

    WallAndColumnSplitting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Option to allow division of multi-level walls and columns by levels.

Get: WallAndColumnSplitting(self: IFCExportOptions) -> bool

Set: WallAndColumnSplitting(self: IFCExportOptions) = value
"""



class IFCVersion(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing available IFC file versions into which a file may be exported.
    
    enum IFCVersion, values: Default (0), IFC2x2 (9), IFC2x3 (10), IFC2x3BFM (27), IFC2x3CV2 (21), IFC2x3FM (24), IFC4 (23), IFC4DTV (26), IFC4RV (25), IFCBCA (8), IFCCOBIE (17)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Default = None
    IFC2x2 = None
    IFC2x3 = None
    IFC2x3BFM = None
    IFC2x3CV2 = None
    IFC2x3FM = None
    IFC4 = None
    IFC4DTV = None
    IFC4RV = None
    IFCBCA = None
    IFCCOBIE = None
    value__ = None


class IGetLocalPathForOpenCallback:
    """ The interface used to provide custom support for the "Open (and Unload)" command for Revit Links obtained as external resources. """
    def GetLocalPathForOpen(self, desiredResource):
        """
        GetLocalPathForOpen(self: IGetLocalPathForOpenCallback, desiredResource: ExternalResourceReference) -> str
        
            Implement this method to specify the local path from where a copy of a Revit 
             link external resource can be opened
           for modification without interfering 
             with its use as a link in other open documents.
        
        
            desiredResource: The ExternalResourceReference that needs to be opened for modification by Revit.
            Returns: The local path from where Revit can open the linked file as its own top-level 
             document.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ImageBackgroundSettings(BackgroundSettings, IDisposable):
    """ Represents the rendering image background settings. """
    def Dispose(self):
        """ Dispose(self: BackgroundSettings, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BackgroundSettings, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BackgroundImageFit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The background image fit type.

Get: BackgroundImageFit(self: ImageBackgroundSettings) -> BackgroundImageFit

Set: BackgroundImageFit(self: ImageBackgroundSettings) = value
"""

    FilePath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """File path of the image for the rendering background.

Get: FilePath(self: ImageBackgroundSettings) -> str

Set: FilePath(self: ImageBackgroundSettings) = value
"""

    OffsetHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The vertical offset of the rendering image to the rendering region.

Get: OffsetHeight(self: ImageBackgroundSettings) -> float

Set: OffsetHeight(self: ImageBackgroundSettings) = value
"""

    OffsetWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The horizontal offset of the rendering image to the rendering region.

Get: OffsetWidth(self: ImageBackgroundSettings) -> float

Set: OffsetWidth(self: ImageBackgroundSettings) = value
"""



class ImageExportOptions(object, IDisposable):
    """
    This class defines options for exporting views and sheets as an image.
    
    ImageExportOptions()
    """
    def Dispose(self):
        """ Dispose(self: ImageExportOptions) """
        pass

    @staticmethod
    def GetFileName(aDoc, dbViewId):
        """
        GetFileName(aDoc: Document, dbViewId: ElementId) -> str
        
            Gets the file name that will be produced when exporting a view to an image.
        
            aDoc: The document that owns the view.
            dbViewId: View which is to be exported as image.
            Returns: The generated exported image file name.
        """
        pass

    def GetViewsAndSheets(self):
        """
        GetViewsAndSheets(self: ImageExportOptions) -> IList[ElementId]
        
            Gets a list of views and sheets to be exported.  Used only when ExportRange is 
             SetOfViews.
        
            Returns: The ids of the views and sheets.
        """
        pass

    @staticmethod
    def IsValidFileName(filePath):
        """
        IsValidFileName(filePath: str) -> bool
        
            Verify if File name is valid
        
            filePath: File path to be tested for valid file name
            Returns: True if File name is valid; false otherwise
        """
        pass

    @staticmethod
    def IsValidForSaveToProjectAsImage(options, doc):
        """
        IsValidForSaveToProjectAsImage(options: ImageExportOptions, doc: Document) -> bool
        
            Verify if ImageExportOptions object is valid for calling saveToProjectAsImage
        
            options: ImageExportOptions object to be validated
            doc: Document for view name verification
            Returns: True if ImageExportOptions object is valid for calling saveToProjectAsImage; 
             false otherwise
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ImageExportOptions, disposing: bool) """
        pass

    def SetViewsAndSheets(self, viewsAndSheets):
        """ SetViewsAndSheets(self: ImageExportOptions, viewsAndSheets: IList[ElementId]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ExportRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The export range defining which view(s) will be exported.

Get: ExportRange(self: ImageExportOptions) -> ExportRange

Set: ExportRange(self: ImageExportOptions) = value
"""

    FilePath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The file name and path for the exported file.

Get: FilePath(self: ImageExportOptions) -> str

Set: FilePath(self: ImageExportOptions) = value
"""

    FitDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fit direction.  Used only if ZoomType is FitToPage.

Get: FitDirection(self: ImageExportOptions) -> FitDirectionType

Set: FitDirection(self: ImageExportOptions) = value
"""

    HLRandWFViewsFileType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """File type for exported HLR and wireframe views.

Get: HLRandWFViewsFileType(self: ImageExportOptions) -> ImageFileType

Set: HLRandWFViewsFileType(self: ImageExportOptions) = value
"""

    ImageResolution = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The image resolution in dots per inch.

Get: ImageResolution(self: ImageExportOptions) -> ImageResolution

Set: ImageResolution(self: ImageExportOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ImageExportOptions) -> bool

"""

    PixelSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The pixel size of an image in one direction.  Used only if ZoomType is FitToPage.

Get: PixelSize(self: ImageExportOptions) -> int

Set: PixelSize(self: ImageExportOptions) = value
"""

    ShadowViewsFileType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The file type for exported shadow views.

Get: ShadowViewsFileType(self: ImageExportOptions) -> ImageFileType

Set: ShadowViewsFileType(self: ImageExportOptions) = value
"""

    ShouldCreateWebSite = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not to create a web site with a page for each export.  Used only when ExportRange is SetOfViews.

Get: ShouldCreateWebSite(self: ImageExportOptions) -> bool

Set: ShouldCreateWebSite(self: ImageExportOptions) = value
"""

    ViewName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the view to be created.

Get: ViewName(self: ImageExportOptions) -> str

Set: ViewName(self: ImageExportOptions) = value
"""

    Zoom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The value for Zoom (as a percentage).   Used only when ZoomType is Zoom.

Get: Zoom(self: ImageExportOptions) -> int

Set: Zoom(self: ImageExportOptions) = value
"""

    ZoomType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The zoom type, which defines how the image size is determined.

Get: ZoomType(self: ImageExportOptions) -> ZoomFitType

Set: ZoomType(self: ImageExportOptions) = value
"""



class ImageFileType(Enum, IComparable, IFormattable, IConvertible):
    """
    This enum is used to define exported file type.
    
    enum ImageFileType, values: BMP (0), JPEGLossless (1), JPEGMedium (2), JPEGSmallest (3), PNG (4), TARGA (5), TIFF (6)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BMP = None
    JPEGLossless = None
    JPEGMedium = None
    JPEGSmallest = None
    PNG = None
    TARGA = None
    TIFF = None
    value__ = None


class ImageImportOptions(GenericImportOptions):
    """
    Options used to import specific image formats and place an instance of them on a view or sheet.
    
    ImageImportOptions()
    """
    Placement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies which point of the image will be aligned to the placement point Autodesk.Revit.DB.GenericImportOptions.RefPoint.

Get: Placement(self: ImageImportOptions) -> BoxPlacement

Set: Placement(self: ImageImportOptions) = value
"""

    Resolution = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Resolution to use (in dpi) for the image to be imported.

Get: Resolution(self: ImageImportOptions) -> UInt16

Set: Resolution(self: ImageImportOptions) = value
"""



class ImageResolution(Enum, IComparable, IFormattable, IConvertible):
    """
    This enum is used to define image resolution in order to calculate the image size.
    
    enum ImageResolution, values: DPI_150 (1), DPI_300 (2), DPI_600 (3), DPI_72 (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DPI_150 = None
    DPI_300 = None
    DPI_600 = None
    DPI_72 = None
    value__ = None


class ImageType(ElementType, IDisposable):
    """ Represents a type containing an image. Instances of this type can be displayed in 2D views, sheets, and schedules. """
    @staticmethod
    def Create(document, imagePath):
        """
        Create(document: Document, imagePath: str) -> ImageType
        
            Creates a new ImageType element and loads the image into it.
        
            document: The document.
            imagePath: A path to an image file to load.
            Returns: The new ImageType.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetImage(self):
        """
        GetImage(self: ImageType) -> Bitmap
        
            Get the bitmap image stored in the image symbol.
            Returns: The bitmap image at the original loaded image size.
        """
        pass

    def IsLoadedFromFile(self):
        """
        IsLoadedFromFile(self: ImageType) -> bool
        
            Checks whether the image is loaded from a file.
           Revit may generate some 
             images internally, such as the images created by "Save to Project as Image".
        
            Returns: True if the image is loaded from a file, False otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def Reload(self):
        """
        Reload(self: ImageType)
            Reloads the image from its origin file.
        """
        pass

    def ReloadFrom(self, imagePath):
        """
        ReloadFrom(self: ImageType, imagePath: str)
            Reloads the image from new image file.
        
            imagePath: A new path to an image file to load.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The original image file path used if the image is loaded from a disk file, or empty if the image
   is generated by Revit internally, such as the images created by "Save to Project as Image".

Get: Path(self: ImageType) -> str

"""



class View(Element, IDisposable):
    """ Base class for all types of views in Autodesk Revit. """
    def AddFilter(self, filterElementId):
        """
        AddFilter(self: View, filterElementId: ElementId)
            Adds a filter to the view.
        
            filterElementId: ElementId of the filter.
        """
        pass

    def AllowsAnalysisDisplay(self):
        """
        AllowsAnalysisDisplay(self: View) -> bool
        
            Identifies if this view allows display of Analysis results.
            Returns: True if the view allows display of Analysis results, false otherwise.
        """
        pass

    def ApplyViewTemplateParameters(self, otherView):
        """
        ApplyViewTemplateParameters(self: View, otherView: View)
            Applies to this view the parameters of the input view that are not controlled 
             by the current view template.
        
        
            otherView: The view whose parameters are to be applied to this view.
           It does not have 
             to be a valid template (property IsTemplate can be true or false).
        """
        pass

    def AreGraphicsOverridesAllowed(self):
        """
        AreGraphicsOverridesAllowed(self: View) -> bool
        
            Determines if Visibility/Graphics Overriddes can be applied to the view.
            Returns: True if Overriddes can be applied to the view, false otherwise.
        """
        pass

    def CanCategoryBeHidden(self, elementId):
        """
        CanCategoryBeHidden(self: View, elementId: ElementId) -> bool
        
            Checks whether the category can be hidden in the view.
        
            elementId: ElementId of the category.
            Returns: True if the category can be hidden, false otherwise.
        """
        pass

    def CanCategoryBeHiddenTemporary(self, elementId):
        """
        CanCategoryBeHiddenTemporary(self: View, elementId: ElementId) -> bool
        
            Check if category can be temporarily hidden in the view.
        
            elementId: Id of the category to be checked
        """
        pass

    def CanEnableTemporaryViewPropertiesMode(self):
        """
        CanEnableTemporaryViewPropertiesMode(self: View) -> bool
        
            Indicates if Temporary View Properties mode can be applied for view in current 
             state.
        
            Returns: True if view can use Temporary View Properties mode in current state.
        """
        pass

    def CanModifyDetailLevel(self):
        """
        CanModifyDetailLevel(self: View) -> bool
        
            Check if Detail Level can be modified.
            Returns: True if Detail Level can be modified.
        """
        pass

    def CanModifyDisplayStyle(self):
        """
        CanModifyDisplayStyle(self: View) -> bool
        
            Indicates if DisplayStyle can be modified.
            Returns: True if DisplayStyle can be modified.
        """
        pass

    def CanModifyViewDiscipline(self):
        """
        CanModifyViewDiscipline(self: View) -> bool
        
            Indicates if the View Discipline can be modified
            Returns: True if View Discipline can be modified
        """
        pass

    def CanUseDepthCueing(self):
        """
        CanUseDepthCueing(self: View) -> bool
        
            Indicates if view can use Depth Cueing
            Returns: True if view can use Depth Cueing
        """
        pass

    def CanUseTemporaryVisibilityModes(self):
        """
        CanUseTemporaryVisibilityModes(self: View) -> bool
        
            Indicates if view can use temporary visibility modes
            Returns: True if view can use temporary visibility modes
        """
        pass

    def CanViewBeDuplicated(self, duplicateOption):
        """
        CanViewBeDuplicated(self: View, duplicateOption: ViewDuplicateOption) -> bool
        
            Identifies if this view can be duplicated.
        
            duplicateOption: The option to use when duplicating the view.
            Returns: True if the view can be duplicated, false otherwise.
        """
        pass

    def ConvertTemporaryHideIsolateToPermanent(self):
        """
        ConvertTemporaryHideIsolateToPermanent(self: View)
            Convert all temporary hidden elements or categories to permanently hidden in 
             view.
        """
        pass

    def ConvertToIndependent(self):
        """
        ConvertToIndependent(self: View)
            Convert the dependent view to independent.
        """
        pass

    def DisableTemporaryViewMode(self, mode):
        """
        DisableTemporaryViewMode(self: View, mode: TemporaryViewMode)
            Disables the specified temporary view mode.
        
            mode: The mode to disable.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def Duplicate(self, duplicateOption):
        """
        Duplicate(self: View, duplicateOption: ViewDuplicateOption) -> ElementId
        
            Duplicates this view.
        
            duplicateOption: The option to use when duplicating the view.
            Returns: The id of the newly created view.
        """
        pass

    def EnableRevealHiddenMode(self):
        """
        EnableRevealHiddenMode(self: View)
            Enables Reveal Hidden elements mode.
        """
        pass

    def EnableTemporaryViewPropertiesMode(self, viewTemplateId):
        """
        EnableTemporaryViewPropertiesMode(self: View, viewTemplateId: ElementId) -> bool
        
            Allow to enable or disable Temporary View Properties mode.
        
            viewTemplateId: ID of DBView that will be used to override current view settings.
           Provide 
             ElementId.InvalidElementId constant to disable Temporary View Properties mode.
        
            Returns: Returns true when DBView provided by viewTemplateId was applied and Temporary 
             View Properties was successfully started.
        """
        pass

    def GetBackground(self):
        """
        GetBackground(self: View) -> ViewDisplayBackground
        
            Returns the current background set for the view.
            Returns: Current background.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: View, view: View) -> BoundingBoxXYZ """
        pass

    def GetCategoryHidden(self, categoryId):
        """
        GetCategoryHidden(self: View, categoryId: ElementId) -> bool
        
            Checks if elements of the given category are set to be invisible (hidden) in 
             this view.
        
        
            categoryId: The ID of the category.
            Returns: True if the category is invisible (hidden), false otherwise.
        """
        pass

    def GetCategoryOverrides(self, categoryId):
        """
        GetCategoryOverrides(self: View, categoryId: ElementId) -> OverrideGraphicSettings
        
            Gets graphic overrides for a category in view.
        
            categoryId: Category to be checked.
            Returns: Object representing all graphic overrides of the category categoryId in view. A 
             default OverrideGraphicSettings object will be returned if it not previously 
             been set for this view.
        """
        pass

    def GetCropRegionShapeManager(self):
        """
        GetCropRegionShapeManager(self: View) -> ViewCropRegionShapeManager
        
            Returns an object for managing view crop region shape.
            Returns: The crop region shape manager.
        """
        pass

    @staticmethod
    def GetCropRegionShapeManagerForReferenceCallout(doc, callout):
        """
        GetCropRegionShapeManagerForReferenceCallout(doc: Document, callout: ElementId) -> ViewCropRegionShapeManager
        
            Returns an object for managing view crop region shape for reference callout.
        
            doc: Document to which the callout belongs.
            callout: Element id of reference callout.
            Returns: The crop region shape manager.
        """
        pass

    def GetDependentViewIds(self):
        """
        GetDependentViewIds(self: View) -> ICollection[ElementId]
        
            Get the ids of dependent views.
            Returns: Ids of the dependent views.
        """
        pass

    def GetDepthCueing(self):
        """
        GetDepthCueing(self: View) -> ViewDisplayDepthCueing
        
            Returns the current depth cueing settings for the view.
            Returns: Current depth cueing settings.
        """
        pass

    def GetElementOverrides(self, elementId):
        """
        GetElementOverrides(self: View, elementId: ElementId) -> OverrideGraphicSettings
        
            Gets graphic overrides for an element in the view.
        
            elementId: The element.
            Returns: An object representing all graphic overrides of the element elementId in view.
        """
        pass

    def GetFilterOverrides(self, filterElementId):
        """
        GetFilterOverrides(self: View, filterElementId: ElementId) -> OverrideGraphicSettings
        
            Gets graphic overrides that a filter applies to the view.
        
            filterElementId: ElementId of the filter.
            Returns: Object representing all graphic overrides of the filter in the view.
        """
        pass

    def GetFilters(self):
        """
        GetFilters(self: View) -> ICollection[ElementId]
        
            Gets the filters applied to the view.
            Returns: The ElementIds of the Filters.
        """
        pass

    def GetFilterVisibility(self, filterElementId):
        """
        GetFilterVisibility(self: View, filterElementId: ElementId) -> bool
        
            Gets the visibility of the elements associated with a filter.
        
            filterElementId: The ElementId of the filter.
            Returns: True if the elements associated with the filter are visible in the view, false 
             otherwise.
        """
        pass

    def GetNonControlledTemplateParameterIds(self):
        """
        GetNonControlledTemplateParameterIds(self: View) -> ICollection[ElementId]
        
            Returns a list of parameters that are not marked as included when this view is 
             used as a template.
        
            Returns: The parameter ids that are not marked to be included.
        """
        pass

    def GetPointCloudOverrides(self):
        """
        GetPointCloudOverrides(self: View) -> PointCloudOverrides
        
            Returns point cloud overrides object for the view.
            Returns: Point cloud overrides for the view
        """
        pass

    def GetPrimaryViewId(self):
        """
        GetPrimaryViewId(self: View) -> ElementId
        
            Get the id of the primary view.
            Returns: The id of the primary view, or InvalidElementId if there is no primary view.
        """
        pass

    def GetReferenceCallouts(self):
        """
        GetReferenceCallouts(self: View) -> ICollection[ElementId]
        
            Returns element ids of all reference callouts in the view.
            Returns: Element ids of all reference callouts in the view.
        """
        pass

    def GetReferenceElevations(self):
        """
        GetReferenceElevations(self: View) -> ICollection[ElementId]
        
            Returns element ids of all reference elevations in the view.
            Returns: Element ids of all reference elevations in the view.
        """
        pass

    def GetReferenceSections(self):
        """
        GetReferenceSections(self: View) -> ICollection[ElementId]
        
            Returns element ids of all reference sections in the view.
            Returns: Element ids of all reference sections in the view.
        """
        pass

    def GetSketchyLines(self):
        """
        GetSketchyLines(self: View) -> ViewDisplaySketchyLines
        
            Returns the current sketchy lines settings for the view.
            Returns: Current sketchy lines settings.
        """
        pass

    def GetTemplateParameterIds(self):
        """
        GetTemplateParameterIds(self: View) -> IList[ElementId]
        
            Returns a list of parameter ids that may be controlled when this view is 
             assigned as a template.
        
            Returns: The parameter ids that may be controlled.
        """
        pass

    def GetTemporaryViewPropertiesId(self):
        """
        GetTemporaryViewPropertiesId(self: View) -> ElementId
        
            When Temporary View Properties mode is in progress it provides DBView ID that 
             overrode settings for current view.
           Outside Temporary View Properties mode 
             InvalidElementId will be returned.
        """
        pass

    def GetTemporaryViewPropertiesName(self):
        """
        GetTemporaryViewPropertiesName(self: View) -> str
        
            When Temporary View Properties mode is in progress, name of applied template is 
             returned.
           Outside Temporary View Properties mode, empty string will be 
             returned.
        """
        pass

    def GetViewDisplayModel(self):
        """
        GetViewDisplayModel(self: View) -> ViewDisplayModel
        
            Returns the current view display model settings for the view.
            Returns: Current view display model settings.
        """
        pass

    def GetVisibility(self, category):
        """
        GetVisibility(self: View, category: Category) -> bool
        
            Checks if elements of the given category are set to be visible in this view.
        
            category: The category.
            Returns: True if the category is visible, false otherwise.
        """
        pass

    def GetWorksetVisibility(self, worksetId):
        """
        GetWorksetVisibility(self: View, worksetId: WorksetId) -> WorksetVisibility
        
            Returns the visibility settings of a workset for this particular view.
        
            worksetId: Id of the workset.
            Returns: The visibility of a workset for this particular view.
        """
        pass

    def GetWorksharingDisplayMode(self):
        """
        GetWorksharingDisplayMode(self: View) -> WorksharingDisplayMode
        
            Gets the current worksharing display mode for this view.
            Returns: The active worksharing display mode in this view.
        """
        pass

    def HasDetailLevel(self):
        """
        HasDetailLevel(self: View) -> bool
        
            Check if the view has a Detail Level property
            Returns: True if the view has a Detail Level, false otherwise
        """
        pass

    def HasDisplayStyle(self):
        """
        HasDisplayStyle(self: View) -> bool
        
            Indicates if view has a DisplayStyle property
            Returns: True if view has a DisplayStyle property
        """
        pass

    def HasViewDiscipline(self):
        """
        HasViewDiscipline(self: View) -> bool
        
            Indicates if the view has a Discipline property
            Returns: True if the view has a Discipline property
        """
        pass

    def HideActiveWorkPlane(self):
        """
        HideActiveWorkPlane(self: View)
            Hide the active work plane of the view.
        """
        pass

    def HideCategoriesTemporary(self, elementIds):
        """ HideCategoriesTemporary(self: View, elementIds: ICollection[ElementId]) """
        pass

    def HideCategoryTemporary(self, elementId):
        """
        HideCategoryTemporary(self: View, elementId: ElementId)
            Set one category to be temporarily hidden in the view.
        
            elementId: Id of the category to be hidden
        """
        pass

    def HideElements(self, elementIdSet):
        """ HideElements(self: View, elementIdSet: ICollection[ElementId]) """
        pass

    def HideElementsTemporary(self, elementIdSet):
        """ HideElementsTemporary(self: View, elementIdSet: ICollection[ElementId]) """
        pass

    def HideElementTemporary(self, elementId):
        """
        HideElementTemporary(self: View, elementId: ElementId)
            Set one element to be temporarily hidden in the view.
        
            elementId: The id of the element to be temporarily hidden.
        """
        pass

    def IsCategoryOverridable(self, categoryId):
        """
        IsCategoryOverridable(self: View, categoryId: ElementId) -> bool
        
            Checks whether the category can have graphic overrides in this view.
        
            categoryId: ElementId of the category.
            Returns: True if category can be overridden, false otherwise.
        """
        pass

    def IsElementVisibleInTemporaryViewMode(self, mode, id):
        """
        IsElementVisibleInTemporaryViewMode(self: View, mode: TemporaryViewMode, id: ElementId) -> bool
        
            Identifies if the input element is visible for the temporary view mode for this 
             view.
        
        
            mode: The temporary view mode.  Only TemporaryHideIsolate and AnalyticalModel modes 
             are supported
           by this option.  Other modes will result in an exception.
        
            id: The element id.
            Returns: True if the element is visible, false if the element is hidden in the view mode.
        """
        pass

    def IsFilterApplied(self, filterElementId):
        """
        IsFilterApplied(self: View, filterElementId: ElementId) -> bool
        
            Indicates if a filter is applied to the view.
        
            filterElementId: ElementId of the filter.
            Returns: True if the filter is applied to the view, false otherwise.
        """
        pass

    def IsInTemporaryViewMode(self, mode):
        """
        IsInTemporaryViewMode(self: View, mode: TemporaryViewMode) -> bool
        
            Returns true if the view is in a particular temporary view mode.
        
            mode: The mode.
            Returns: True if this view is in the temporary view mode indicated, false otherwise.
        """
        pass

    def IsolateCategoriesTemporary(self, elementIds):
        """ IsolateCategoriesTemporary(self: View, elementIds: ICollection[ElementId]) """
        pass

    def IsolateCategoryTemporary(self, elementId):
        """
        IsolateCategoryTemporary(self: View, elementId: ElementId)
            Set one category to be temporarily isolated in the view.
        
            elementId: Id of category to be isolated.
        """
        pass

    def IsolateElementsTemporary(self, elementIds):
        """ IsolateElementsTemporary(self: View, elementIds: ICollection[ElementId]) """
        pass

    def IsolateElementTemporary(self, elementId):
        """
        IsolateElementTemporary(self: View, elementId: ElementId)
            Set one element to be temporarily isolated in the view.
        
            elementId: Id of element to be isolated.
        """
        pass

    def IsTemporaryHideIsolateActive(self):
        """
        IsTemporaryHideIsolateActive(self: View) -> bool
        
            Indicates if the view is temporarily hiding or isolating elements or categories.
            Returns: True if elements/categories are being temporarily hidden or isolated, false 
             otherwise.
        """
        pass

    def IsTemporaryViewPropertiesModeEnabled(self):
        """
        IsTemporaryViewPropertiesModeEnabled(self: View) -> bool
        
            Returns true when Temporary View Properties mode is in progress, false 
             otherwise.
        """
        pass

    @staticmethod
    def IsValidViewScale(viewScale):
        """
        IsValidViewScale(viewScale: int) -> bool
        
            This validator checks that the view scale is in the allowable range.
        
            viewScale: The denominator X in the view scale 1/X.
            Returns: True if the view scale is within the allowable range, false otherwise.
        """
        pass

    def IsValidViewTemplate(self, templateId):
        """
        IsValidViewTemplate(self: View, templateId: ElementId) -> bool
        
            Verifies that the view represented by templateId can be set as the controlling 
             view template for this view.
        
        
            templateId: The id to be validated as a view template for this view.
            Returns: True if the view is valid for us as a view template and compatible with this 
             view, or if it is InvalidElementId, false otherwise.
        """
        pass

    def IsWorksetVisible(self, worksetId):
        """
        IsWorksetVisible(self: View, worksetId: WorksetId) -> bool
        
            Indicates whether the workset is visible in this view.
        
            worksetId: Id of the workset.
            Returns: Whether the workset is visible.
        """
        pass

    def Print(self, *__args):
        """
        Print(self: View, viewTemplate: View, useCurrentPrintSettings: bool)
            Print this view with the given view template, and either the view's document's 
             print setting or the print setting of the current active document.
        
        
            viewTemplate: The view template which apply to the view.
            useCurrentPrintSettings: If true, print the view with the print setting of the current active document;
        
             otherwise with the view's document's print setting.
        
        Print(self: View, useCurrentPrintSettings: bool)
            Print this view with the default view template, and either the view's 
             document's print setting or the print setting of the current active document.
        
        
            useCurrentPrintSettings: If true, print the view with the print setting of the current active document;
        
             otherwise with the view's document's print setting.
        
        Print(self: View, viewTemplate: View)
            Print this view with the given view template and using the print setting of the 
             current active document.
        
        
            viewTemplate: The view template which apply to the view.
        Print(self: View)
            Print this view with the default view template and using the print setting of 
             the current active document.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveFilter(self, filterElementId):
        """
        RemoveFilter(self: View, filterElementId: ElementId)
            Removes a filter from the view.
        
            filterElementId: ElementId of the filter.
        """
        pass

    def SetBackground(self, background):
        """
        SetBackground(self: View, background: ViewDisplayBackground)
            Sets the background for the view.  Background can only be set for 3d views and 
             for Sections/Elevations.
        
        
            background: Background to set.  See 'ViewDisplayBackground' class and its 'create' methods.
        """
        pass

    def SetCategoryHidden(self, categoryId, hide):
        """
        SetCategoryHidden(self: View, categoryId: ElementId, hide: bool)
            Sets if elements of the given category will be visible in this view.
        
            categoryId: The ID of the category.
            hide: True to make elements of this category invisible, false to make them visible.
        """
        pass

    def SetCategoryOverrides(self, categoryId, overrideGraphicSettings):
        """
        SetCategoryOverrides(self: View, categoryId: ElementId, overrideGraphicSettings: OverrideGraphicSettings)
            Sets graphic overrides for a category in view.
        
            categoryId: Category to be overridden
            overrideGraphicSettings: Object representing all graphic overrides of the category categoryId in view.
        """
        pass

    def SetDepthCueing(self, depthCueing):
        """
        SetDepthCueing(self: View, depthCueing: ViewDisplayDepthCueing)
            Sets the depth cueing settings for the view.
        
            depthCueing: Depth cueing settings to set.
        """
        pass

    def SetElementOverrides(self, elementId, overrideGraphicSettings):
        """
        SetElementOverrides(self: View, elementId: ElementId, overrideGraphicSettings: OverrideGraphicSettings)
            Sets graphic overrides for an element in the view.
        
            elementId: Element to override.
            overrideGraphicSettings: An object representing all graphic overrides of the element in view.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetFilterOverrides(self, filterElementId, overrideGraphicSettings):
        """
        SetFilterOverrides(self: View, filterElementId: ElementId, overrideGraphicSettings: OverrideGraphicSettings)
            Sets the overrides associated with a filter.
        
            filterElementId: ElementId of the filter.
            overrideGraphicSettings: The overrides to apply to the filter.
        """
        pass

    def SetFilterVisibility(self, filterElementId, visibility):
        """
        SetFilterVisibility(self: View, filterElementId: ElementId, visibility: bool)
            Sets the visibility of the elements associated with a filter.
        
            filterElementId: The ElementId of the filter.
            visibility: True if the elements associated with the filter are visible in the view, false 
             otherwise.
        """
        pass

    def SetNonControlledTemplateParameterIds(self, newSet):
        """ SetNonControlledTemplateParameterIds(self: View, newSet: ICollection[ElementId]) """
        pass

    def SetSketchyLines(self, sketchyLines):
        """
        SetSketchyLines(self: View, sketchyLines: ViewDisplaySketchyLines)
            Sets the sketchy lines settings for the view.
        
            sketchyLines: Sketchy Lines settings to set.
        """
        pass

    def SetViewDisplayModel(self, viewDisplayModel):
        """
        SetViewDisplayModel(self: View, viewDisplayModel: ViewDisplayModel)
            Sets the view display model settings for the view.
        
            viewDisplayModel: View display model settings to set.
        """
        pass

    def SetVisibility(self, category, visible):
        """
        SetVisibility(self: View, category: Category, visible: bool)
            Sets if elements of the given category will be visible in this view.
        
            category: The category.
            visible: True to make elements of this category visible, false to make them invisible.
        """
        pass

    def SetWorksetVisibility(self, worksetId, visible):
        """
        SetWorksetVisibility(self: View, worksetId: WorksetId, visible: WorksetVisibility)
            Sets visibility for a workset in this view.
        
            worksetId: Id of the workset.
            visible: The visibility of the workset.
        """
        pass

    def SetWorksharingDisplayMode(self, displayMode):
        """
        SetWorksharingDisplayMode(self: View, displayMode: WorksharingDisplayMode)
            Sets the worksharing display mode for this view.
        
            displayMode: The desired display mode.  "Off" will turn off all worksharing display modes.
        """
        pass

    def ShowActiveWorkPlane(self):
        """
        ShowActiveWorkPlane(self: View)
            Show the active work plane of the view.
        """
        pass

    def SupportsRevealConstraints(self):
        """
        SupportsRevealConstraints(self: View) -> bool
        
            Checks that the view can have the Reveal Constraints mode activated.
            Returns: True if the view has a view type that allows Reveal Constraints mode to be 
             activated.
        """
        pass

    def SupportsWorksharingDisplayMode(self, mode):
        """
        SupportsWorksharingDisplayMode(self: View, mode: WorksharingDisplayMode) -> bool
        
            Checks whether this view supports the given worksharing display mode.
        
            mode: The mode of interest.
            Returns: Returns True if this view is a graphical view in a workshared document or if 
             the desired mode is Off.
           Returns False if this view is a non-graphical view 
             (such as a schedule or the project browser)
           or if this view is not in a 
             workshared document.
        """
        pass

    def UnhideElements(self, elementIdSet):
        """ UnhideElements(self: View, elementIdSet: ICollection[ElementId]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AnalysisDisplayStyleId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Element id of Analysis Display Style associated with the view.

Get: AnalysisDisplayStyleId(self: View) -> ElementId

Set: AnalysisDisplayStyleId(self: View) = value
"""

    AreAnalyticalModelCategoriesHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if analytical model categories are currently hidden in the view.

Get: AreAnalyticalModelCategoriesHidden(self: View) -> bool

Set: AreAnalyticalModelCategoriesHidden(self: View) = value
"""

    AreAnnotationCategoriesHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if annotation categories are currently hidden in the view.

Get: AreAnnotationCategoriesHidden(self: View) -> bool

Set: AreAnnotationCategoriesHidden(self: View) = value
"""

    AreImportCategoriesHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if import categories are currently hidden in the view.

Get: AreImportCategoriesHidden(self: View) -> bool

Set: AreImportCategoriesHidden(self: View) = value
"""

    AreModelCategoriesHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if model categories are currently hidden in the view.

Get: AreModelCategoriesHidden(self: View) -> bool

Set: AreModelCategoriesHidden(self: View) = value
"""

    ArePointCloudsHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if point clouds are currently hidden in the view.

Get: ArePointCloudsHidden(self: View) -> bool

Set: ArePointCloudsHidden(self: View) = value
"""

    AssociatedAssemblyInstanceId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Id of the assembly instance that owns the assembly view.

Get: AssociatedAssemblyInstanceId(self: View) -> ElementId

"""

    CanBePrinted = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test whether the view can be printed.

Get: CanBePrinted(self: View) -> bool

"""

    CropBox = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Crop Box applied to the view, or an outline encompassing the crop region applied to the view.

Get: CropBox(self: View) -> BoundingBoxXYZ

Set: CropBox(self: View) = value
"""

    CropBoxActive = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not the Crop Box/Region is active for the view.

Get: CropBoxActive(self: View) -> bool

Set: CropBoxActive(self: View) = value
"""

    CropBoxVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not the Crop Box/Region is visible for the view.

Get: CropBoxVisible(self: View) -> bool

Set: CropBoxVisible(self: View) = value
"""

    DetailLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The detail level of this view.

Get: DetailLevel(self: View) -> ViewDetailLevel

Set: DetailLevel(self: View) = value
"""

    Discipline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Discipline of the view.

Get: Discipline(self: View) -> ViewDiscipline

Set: Discipline(self: View) = value
"""

    DisplayStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The DisplayStyle of the view.
   Returns DisplayStyle.Wireframe if the view has no display style.

Get: DisplayStyle(self: View) -> DisplayStyle

Set: DisplayStyle(self: View) = value
"""

    GenLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The level for the view.

Get: GenLevel(self: View) -> Level

"""

    IsAssemblyView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the view is assembly view.

Get: IsAssemblyView(self: View) -> bool

"""

    IsTemplate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test whether the view is a view template.

Get: IsTemplate(self: View) -> bool

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the origin of the screen.

Get: Origin(self: View) -> XYZ

"""

    Outline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The bounds of the view in paper space (in inches).

Get: Outline(self: View) -> BoundingBoxUV

"""

    PartsVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The visibility setting for parts in this view.

Get: PartsVisibility(self: View) -> PartsVisibility

Set: PartsVisibility(self: View) = value
"""

    RevealConstraintsMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the Reveal Constraints mode is activated in the view.

Get: RevealConstraintsMode(self: View) -> bool

Set: RevealConstraintsMode(self: View) = value
"""

    RightDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The direction towards the right side of the screen.

Get: RightDirection(self: View) -> XYZ

"""

    Scale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The scale of the view.

Get: Scale(self: View) -> int

Set: Scale(self: View) = value
"""

    ShadowIntensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The intesity of cast shadows - 0 = no shadows, 100 = black.

Get: ShadowIntensity(self: View) -> int

Set: ShadowIntensity(self: View) = value
"""

    SketchPlane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sketch plane assigned to the view for model curve creation.

Get: SketchPlane(self: View) -> SketchPlane

Set: SketchPlane(self: View) = value
"""

    SunAndShadowSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sun and shadow settings assigned to the view for shadow calculation and rendering.

Get: SunAndShadowSettings(self: View) -> SunAndShadowSettings

"""

    SunlightIntensity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The intensity of the simulated (directional) sunlight.  0 = no directional light; maximum value is 100.

Get: SunlightIntensity(self: View) -> int

Set: SunlightIntensity(self: View) = value
"""

    TemporaryViewModes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Data of temporary view modes associated with this view.

Get: TemporaryViewModes(self: View) -> TemporaryViewModes

"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The view title. This consists of the view name plus other modifiers, such as the view type,
   sheet number, area scheme, and/or assembly type, depending on the specifics of the view.

Get: Title(self: View) -> str

"""

    UpDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The direction towards the top of the screen.

Get: UpDirection(self: View) -> XYZ

"""

    ViewDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The direction towards the viewer.

Get: ViewDirection(self: View) -> XYZ

"""

    ViewName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the view.

Get: ViewName(self: View) -> str

Set: ViewName(self: View) = value
"""

    ViewTemplateId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the template view that controls this view's parameters.

Get: ViewTemplateId(self: View) -> ElementId

Set: ViewTemplateId(self: View) = value
"""

    ViewType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of the view.

Get: ViewType(self: View) -> ViewType

"""



class ViewDrafting(View, IDisposable):
    """ ViewDrafting represents a drafting view within the model. """
    @staticmethod
    def Create(document, viewFamilyTypeId):
        """
        Create(document: Document, viewFamilyTypeId: ElementId) -> ViewDrafting
        
            Creates a new ViewDrafting in the model.
        
            document: The document in which the new drafting view will be created.
            viewFamilyTypeId: The id of the ViewFamilyType that should be assigned to the new drafting view.
            Returns: The newly created drafting view.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: View, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ImageView(ViewDrafting, IDisposable):
    """ Class for ImageView views """
    @staticmethod
    def Create(document, imageFileName):
        """
        Create(document: Document, imageFileName: str) -> ImageView
        
            Create an ImageView containing an image imported from disk.
        
            document: The document in which to create the view.
            imageFileName: The full path to the image file.
            Returns: The newly created view.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: View, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ImageInstanceId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the image in the view.

Get: ImageInstanceId(self: ImageView) -> ElementId

"""



class IModelExportContext(IExportContext):
    """ An interface that is used in custom export to export 3D views of a Revit model. """
    def OnCurve(self, node):
        """
        OnCurve(self: IModelExportContext, node: CurveNode) -> RenderNodeAction
        
            This method is called when a 3D Curve is being output.
        
            node: An output node that represents a Curve.
            Returns: Return RenderNodeAction.Proceed if you wish to receive tessellated geometry
           
             (line or polyline segments) for this curve, or otherwise return 
             RenderNodeAction.Skip.
        """
        pass

    def OnLineSegment(self, segment):
        """
        OnLineSegment(self: IModelExportContext, segment: LineSegment)
            This method is called after unhandled 3D curve was tessellated to line segments 
             and sent to the output.
        
        
            segment: A structure describing the line segment.
        """
        pass

    def OnPoint(self, node):
        """
        OnPoint(self: IModelExportContext, node: PointNode) -> RenderNodeAction
        
            This method is called when a 3D Point is being output.
        
            node: An output node that represents a Point.
            Returns: Return RenderNodeAction.Proceed if you wish to receive low-level geometry
           
             (line segments) for this point, or otherwise return RenderNodeAction.Skip.
        """
        pass

    def OnPolyline(self, node):
        """
        OnPolyline(self: IModelExportContext, node: PolylineNode) -> RenderNodeAction
        
            This method is called when a 3D Polyline is being output.
        
            node: An output node that represents a Polyline.
            Returns: Return RenderNodeAction.Proceed if you wish to receive tessellated geometry
           
             (polyline segments) for this polyline, or otherwise return 
             RenderNodeAction.Skip.
        """
        pass

    def OnPolylineSegments(self, segments):
        """
        OnPolylineSegments(self: IModelExportContext, segments: PolylineSegments)
            This method is called after unhandled 3D curve was tessellated to polyline 
             segments and sent to the output.
        
        
            segments: A structure describing the polyline segments.
        """
        pass

    def OnText(self, node):
        """
        OnText(self: IModelExportContext, node: TextNode)
            This method is called when a text annoation object is being output.
        
            node: An output node that represents a text annotation.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ImportColorMode(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing how colors are handled in an import process.
    
    enum ImportColorMode, values: BlackAndWhite (2), Inverted (1), Preserved (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BlackAndWhite = None
    Inverted = None
    Preserved = None
    value__ = None


class ImportExportFileFormat(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes formats supported by import / export.
    
    enum ImportExportFileFormat, values: Civil3D (10), DGN (9), DWF (2), DWFX (4), DWG (1), DXF (12), FBX (7), GBXML (6), IFC (14), Image (8), Inventor (11), NWC (15), SAT (13)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Civil3D = None
    DGN = None
    DWF = None
    DWFX = None
    DWG = None
    DXF = None
    FBX = None
    GBXML = None
    IFC = None
    Image = None
    Inventor = None
    NWC = None
    SAT = None
    value__ = None


class ImportInstance(Instance, IDisposable):
    """ An element created during either import or link operation in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetVisibility(self):
        """
        GetVisibility(self: ImportInstance) -> FamilyElementVisibility
        
            Gets the visibility for the import instance in a family document.
            Returns: A copy of visibility settings for the import instance in a family document.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetVisibility(self, visibility):
        """
        SetVisibility(self: ImportInstance, visibility: FamilyElementVisibility)
            Sets the visibility for the import instance in a family document.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsLinked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether this instance is a linked object rather than imported one.

Get: IsLinked(self: ImportInstance) -> bool

"""



class ImportPlacement(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible placement modes for imported drawings.
    
    enum ImportPlacement, values: Centered (2), Origin (1), Shared (3), Site (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Centered = None
    Origin = None
    Shared = None
    Site = None
    value__ = None


class ImportUnit(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible target units for CAD Import.
    
    enum ImportUnit, values: Centimeter (5), Custom (7), Decimeter (4), Default (0), Foot (1), Inch (2), Meter (3), Millimeter (6)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Centimeter = None
    Custom = None
    Decimeter = None
    Default = None
    Foot = None
    Inch = None
    Meter = None
    Millimeter = None
    value__ = None


class INavisworksExporter(IExternalServer):
    """ The interface used to implement a Navisworks exporter. """
    def Export(self, document, folder, name, options):
        """
        Export(self: INavisworksExporter, document: Document, folder: str, name: str, options: NavisworksExportOptions)
            The method that Revit will invoke to perform an export to Navisworks.
        
            document: The document to export.
            folder: The folder path.
            name: The file name.
            options: The export options.
        """
        pass

    def ValidateExportOptions(self, document, folder, name, options, exceptionMessage):
        """
        ValidateExportOptions(self: INavisworksExporter, document: Document, folder: str, name: str, options: NavisworksExportOptions) -> (bool, str)
        
            Determines if the inputs are valid, and returns an error message if not.
        
            document: The document to export.
            folder: The folder path.
            name: The file name.
            options: The export options.
            Returns: True if the options are valid, false otherwise.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IndependentTag(Element, IDisposable):
    """ Represents an IndependentTag within Autodesk Revit. """
    def CanLeaderEndConditionBeAssigned(self, leaderEndCondition):
        """
        CanLeaderEndConditionBeAssigned(self: IndependentTag, leaderEndCondition: LeaderEndCondition) -> bool
        
            Checks whether the LeaderEndCondition can be assigned.
        
            leaderEndCondition: The leader end condition to check.
            Returns: True if the leader end condition of the tag can be assigned, or false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetTaggedLocalElement(self):
        """
        GetTaggedLocalElement(self: IndependentTag) -> Element
        
            Get the tagged local element if any.
            Returns: The tagged local element, or ll for orphan tags and tagged elements in links.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    HasLeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the tag has a leader or not.

Get: HasLeader(self: IndependentTag) -> bool

Set: HasLeader(self: IndependentTag) = value
"""

    IsMaterialTag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if it is a material tag or not.

Get: IsMaterialTag(self: IndependentTag) -> bool

"""

    IsMulticategoryTag = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if it is a multi-category tag or not.

Get: IsMulticategoryTag(self: IndependentTag) -> bool

"""

    IsOrphaned = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the tag is orphaned or not.

Get: IsOrphaned(self: IndependentTag) -> bool

"""

    LeaderElbow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the position of the elbow of leader.

Get: LeaderElbow(self: IndependentTag) -> XYZ

Set: LeaderElbow(self: IndependentTag) = value
"""

    LeaderEnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the position of the end of leader.

Get: LeaderEnd(self: IndependentTag) -> XYZ

Set: LeaderEnd(self: IndependentTag) = value
"""

    LeaderEndCondition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The leader end condition of the tag.

Get: LeaderEndCondition(self: IndependentTag) -> LeaderEndCondition

Set: LeaderEndCondition(self: IndependentTag) = value
"""

    MultiReferenceAnnotationId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The multi-reference annotation which owns this tag.

Get: MultiReferenceAnnotationId(self: IndependentTag) -> ElementId

"""

    TaggedElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The LinkElementId of the tagged element.

Get: TaggedElementId(self: IndependentTag) -> LinkElementId

"""

    TaggedLocalElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the tagged local element if any.

Get: TaggedLocalElementId(self: IndependentTag) -> ElementId

"""

    TagHeadPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the position of the head of tag.

Get: TagHeadPosition(self: IndependentTag) -> XYZ

Set: TagHeadPosition(self: IndependentTag) = value
"""

    TagOrientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The tag orientation of the tag.

Get: TagOrientation(self: IndependentTag) -> TagOrientation

Set: TagOrientation(self: IndependentTag) = value
"""

    TagText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text associated with the tag. If there are several strings assiciated with the tag, the strings will be returned concatenated.

Get: TagText(self: IndependentTag) -> str

"""



class InSessionPrintSetting(object, IPrintSetting, IDisposable):
    """ Represents the in-session Print Setup (Application Menu->Print->Print Setup) within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: InSessionPrintSetting) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: InSessionPrintSetting, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    PrintParameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Parameters of Print Setup.

Get: PrintParameters(self: InSessionPrintSetting) -> PrintParameters

"""



class InSessionViewSheetSet(object, IViewSheetSet, IDisposable):
    """ Represents the in-session ViewSheetSet. """
    def Dispose(self):
        """ Dispose(self: InSessionViewSheetSet) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: InSessionViewSheetSet, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Views = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The views.

Get: Views(self: InSessionViewSheetSet) -> ViewSet

Set: Views(self: InSessionViewSheetSet) = value
"""



class InstanceBinding(ElementBinding, IDisposable):
    """
    The InstanceBinding object is used to signify a binding between a parameter
    definition and a parameter on each instance of an element, such as a wall.
    
    InstanceBinding(categories: CategorySet)
    InstanceBinding()
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, categories=None):
        """
        __new__(cls: type, categories: CategorySet)
        __new__(cls: type)
        """
        pass


class InstanceNode(GroupNode, IDisposable):
    """ An output node that represents a family instance. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class InstanceVoidCutUtils(object):
    """ Utilities for cutting elements by unattached voids in family instances. """
    @staticmethod
    def AddInstanceVoidCut(document, element, cuttingInstance):
        """
        AddInstanceVoidCut(document: Document, element: Element, cuttingInstance: Element)
            Add a cut to an element using the unattached voids inside a cutting instance.
        
            document: The document containing the two elements
            element: The element to be cut
            cuttingInstance: The cutting family instance
        """
        pass

    @staticmethod
    def CanBeCutWithVoid(element):
        """
        CanBeCutWithVoid(element: Element) -> bool
        
            Indicates if the element can be cut by an instance with unattached voids.
        
            element: The element to be cut
            Returns: Returns true if the element can be cut by an instance with unattached voids.
        """
        pass

    @staticmethod
    def GetCuttingVoidInstances(element):
        """
        GetCuttingVoidInstances(element: Element) -> ICollection[ElementId]
        
            Return ids of the instances with unattached voids cutting the element.
        
            element: The element being cut
            Returns: Ids of instances with unattached voids that cut this element
        """
        pass

    @staticmethod
    def GetElementsBeingCut(cuttingInstance):
        """
        GetElementsBeingCut(cuttingInstance: Element) -> ICollection[ElementId]
        
            Return ids of the elements being cut by the instance
        
            cuttingInstance: The cutting family instance
            Returns: Ids of elements being cut by cuttingInstance
        """
        pass

    @staticmethod
    def InstanceVoidCutExists(element, cuttingInstance):
        """
        InstanceVoidCutExists(element: Element, cuttingInstance: Element) -> bool
        
            Check whether the instance is cutting the element
        
            element: The element being cut
            cuttingInstance: The cutting family instance
            Returns: Returns true if the instance is cutting the element.
        """
        pass

    @staticmethod
    def IsVoidInstanceCuttingElement(element):
        """
        IsVoidInstanceCuttingElement(element: Element) -> bool
        
            Indicates if the element is a family instance with unattached voids that can 
             cut other elements.
        
        
            element: The cutting family instance
            Returns: Returns true if the element is a family instance with unattached voids that can 
             cut other elements.
        """
        pass

    @staticmethod
    def RemoveInstanceVoidCut(document, element, cuttingInstance):
        """
        RemoveInstanceVoidCut(document: Document, element: Element, cuttingInstance: Element)
            Remove a cut applied to the element by a cutting instance with unattached voids.
        
            document: The document containing the two elements
            element: The element being cut
            cuttingInstance: The cutting family instance
        """
        pass

    __all__ = [
        'AddInstanceVoidCut',
        'CanBeCutWithVoid',
        'GetCuttingVoidInstances',
        'GetElementsBeingCut',
        'InstanceVoidCutExists',
        'IsVoidInstanceCuttingElement',
        'RemoveInstanceVoidCut',
    ]


class MEPCurve(HostObject, IDisposable):
    """ A curve object for duct or pipe blend elements. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ConnectorManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The connector manager of this MEP curve.

Get: ConnectorManager(self: MEPCurve) -> ConnectorManager

"""

    Diameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The diameter of the MEP curve.

Get: Diameter(self: MEPCurve) -> float

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The height of the MEP curve.

Get: Height(self: MEPCurve) -> float

"""

    LevelOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset of the MEP curve.

Get: LevelOffset(self: MEPCurve) -> float

Set: LevelOffset(self: MEPCurve) = value
"""

    MEPSystem = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The system of the MEP curve.

Get: MEPSystem(self: MEPCurve) -> MEPSystem

"""

    ReferenceLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The reference level of the MEP curve.

Get: ReferenceLevel(self: MEPCurve) -> Level

Set: ReferenceLevel(self: MEPCurve) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The width of the MEP curve.

Get: Width(self: MEPCurve) -> float

"""



class InsulationLiningBase(MEPCurve, IDisposable):
    """ Acts as the base class for duct insulation, pipe insulation and duct lining elements. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetInsulationIds(document, elemId):
        """
        GetInsulationIds(document: Document, elemId: ElementId) -> ICollection[ElementId]
        
            Returns the ids of the insulation elements associated to a given element.
        
            document: The document.
            elemId: The element.
            Returns: A collection of the ids of the insulation elements.
        """
        pass

    @staticmethod
    def GetLiningIds(document, elemId):
        """
        GetLiningIds(document: Document, elemId: ElementId) -> ICollection[ElementId]
        
            Returns the ids of the lining elements associated to a given element.
        
            document: The document.
            elemId: The element.
            Returns: A collection of the ids of the lining elements.
        """
        pass

    @staticmethod
    def IsValidThickness(thickness):
        """
        IsValidThickness(thickness: float) -> bool
        
            Identifies if the given thickness value is valid for assignment to insulation 
             or lining elements.
        
        
            thickness: Thickness of the insulation and lining elements.
            Returns: True if the thickness is valid, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    HostElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the host element for the insulation or lining element.

Get: HostElementId(self: InsulationLiningBase) -> ElementId

"""

    Thickness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Thickness of the insulation or lining element.

Get: Thickness(self: InsulationLiningBase) -> float

Set: Thickness(self: InsulationLiningBase) = value
"""



class IntegerParameterValue(ParameterValue, IDisposable):
    """
    A class that holds an Integer value of a parameter element.
    
    IntegerParameterValue(value: int)
    IntegerParameterValue()
    """
    def Dispose(self):
        """ Dispose(self: ParameterValue, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ParameterValue, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, value=None):
        """
        __new__(cls: type, value: int)
        __new__(cls: type)
        """
        pass

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The stored value

Get: Value(self: IntegerParameterValue) -> int

Set: Value(self: IntegerParameterValue) = value
"""



class IntegerRange(object, IDisposable):
    """ A class to define a range of a sequence of consecutive integer numbers """
    def Dispose(self):
        """ Dispose(self: IntegerRange) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: IntegerRange, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    High = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The upper limit of the range

Get: High(self: IntegerRange) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: IntegerRange) -> bool

"""

    Low = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The lower limit of the range

Get: Low(self: IntegerRange) -> int

"""



class InternalDefinition(Definition, IDisposable):
    """
    This object represents a parameter definition in Autodesk Revit.
       Every parameter has a ParamDef object which defines what kind of parameter it is, its properties, its behavior, etc.
       The ParamDef class is a base class with various derived classes representing different kinds of parameters.
       ParamDefs serve the following purposes:
       Basic properties : name, ID, the group it appears in (in the UI), whether it is read only, etc.
       Formatting and parsing : converting values to and from display strings, implemented by subclasses.
       Defining the kind of parameter : the kind of data the parameter represents: length, text, material, level, etc.
       Defining the UI for the parameter : together with the corresponding ParameterUI subclass,
       determines what kind of control will be used for the parameter in properties grids: edit box, combo box, pushbutton, etc.
    """
    def Dispose(self):
        """ Dispose(self: InternalDefinition) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: InternalDefinition, disposing: bool) """
        pass

    def SetAllowVaryBetweenGroups(self, document, allowVaryBetweenGroups):
        """
        SetAllowVaryBetweenGroups(self: InternalDefinition, document: Document, allowVaryBetweenGroups: bool) -> ICollection[ElementId]
        
            Whether or not the parameter values can vary across group members.
        
            document: The document of this parameter.
            allowVaryBetweenGroups: Whether this parameter should be allowed to vary between groups.
            Returns: The ids of elements that were updated to align the values between groups.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BuiltInParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tests whether this definition identifies a built-in parameter or not.

Get: BuiltInParameter(self: InternalDefinition) -> BuiltInParameter

"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the parameter.

Get: Id(self: InternalDefinition) -> ElementId

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: InternalDefinition) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The user-visible name for the parameter.

Get: Name(self: InternalDefinition) -> str

"""

    ParameterGroup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of a built-in parameter group to which the parameter defined by this definition belongs.

Get: ParameterGroup(self: InternalDefinition) -> BuiltInParameterGroup

Set: ParameterGroup(self: InternalDefinition) = value
"""

    ParameterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the user-visible interpretation of the parameter data.

Get: ParameterType(self: InternalDefinition) -> ParameterType

"""

    VariesAcrossGroups = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not the parameter values can vary across group members.

Get: VariesAcrossGroups(self: InternalDefinition) -> bool

"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the parameter is visible in the Autodesk Revit user interface.

Get: Visible(self: InternalDefinition) -> bool

"""



class InternalDefinitions(Definitions, IEnumerable[Definition], IEnumerable, IDisposable):
    """ This object blocks attempts to create new internal definitions as they are not permitted. """
    def Dispose(self):
        """ Dispose(self: InternalDefinitions, A_0: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class IntersectionResult(APIObject, IDisposable):
    """
    This class captures results of intersecting geometric entities. "Intersecting" is meant 
    in generalized sense, so the same class will be used for projection, containment, etc.
    Refer to the documentation of the method providing the result for the precise meaning of properties.
    
    IntersectionResult()
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Distance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Distance from the original object to located point.

Get: Distance(self: IntersectionResult) -> float

"""

    EdgeObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Edge of the face close to the point of intersection.

Get: EdgeObject(self: IntersectionResult) -> Edge

"""

    EdgeParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Parameter of a point on the edge closest to the point of intersection.

Get: EdgeParameter(self: IntersectionResult) -> float

"""

    Parameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """1d parameter of the point of intersection.

Get: Parameter(self: IntersectionResult) -> float

"""

    UVPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """2d (or two 1d) parameters of the point of intersection.

Get: UVPoint(self: IntersectionResult) -> UV

"""

    XYZPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Point of intersection in local 3d coordinates.

Get: XYZPoint(self: IntersectionResult) -> XYZ

"""



class IntersectionResultArray(APIObject, IDisposable, IEnumerable):
    """
    An array that can contain any type of object.
    
    IntersectionResultArray()
    """
    def Append(self, item):
        """ Append(self: IntersectionResultArray, item: IntersectionResult) """
        pass

    def Clear(self):
        """
        Clear(self: IntersectionResultArray)
            Removes every item from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: IntersectionResultArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: IntersectionResultArray) -> IntersectionResultArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: IntersectionResultArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """ Insert(self: IntersectionResultArray, item: IntersectionResult, index: int) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: IntersectionResultArray) -> IntersectionResultArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: IntersectionResultArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the array.

Get: Size(self: IntersectionResultArray) -> int

"""



class IntersectionResultArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a array.
    
    IntersectionResultArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: IntersectionResultArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: IntersectionResultArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Reset(self):
        """
        Reset(self: IntersectionResultArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: IntersectionResultArrayIterator) -> object

"""



class IOnLocalLinkSharedCoordinatesSavedCallback:
    """
    A callback for notifying an IExternalResourceServer that
       shared coordinates changes have been saved back to one
       of the Revit links provided by that server.
    """
    def OnLocalLinkSharedCoordinatesSaved(self, changedResource):
        """
        OnLocalLinkSharedCoordinatesSaved(self: IOnLocalLinkSharedCoordinatesSavedCallback, changedResource: ExternalResourceReference)
            Revit will call this method whenever shared coordinates
           changes are saved 
             to a linked document provided by an
           IExternalResourceServer. This call is a 
             notification
           to the server provider that one of their Revit links has
           
             changed locally, and they should upload the new version
           back to their 
             server.
        
        
            changedResource: The ExternalResourceReference whose shared coordinates have been saved.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IPerformanceAdviserRule:
    """ Base class to derive specific performance adviser rules from. """
    def ExecuteElementCheck(self, document, element):
        """
        ExecuteElementCheck(self: IPerformanceAdviserRule, document: Document, element: Element)
            Invoked by performance advisor for each element to be checked.
        
            document: Document for which performance problems are being checked.
            element: The Element being checked for performance problems.
        """
        pass

    def FinalizeCheck(self, document):
        """
        FinalizeCheck(self: IPerformanceAdviserRule, document: Document)
            Invoked by performance advisor once in the end of the check.
        
            document: Document for which performance problems are being checked.
        """
        pass

    def GetDescription(self):
        """
        GetDescription(self: IPerformanceAdviserRule) -> str
        
            Retrieves the description of the rule.
            Returns: The description of the rule.
        """
        pass

    def GetElementFilter(self, document):
        """
        GetElementFilter(self: IPerformanceAdviserRule, document: Document) -> ElementFilter
        
            Retrieves a filter to restrict elements to be checked.
        
            document: Document for which performance problems are being checked.
            Returns: The filter to restrict elements to be checked.
        """
        pass

    def GetName(self):
        """
        GetName(self: IPerformanceAdviserRule) -> str
        
            Retrieves the name of the rule.
            Returns: The name of the rule.
        """
        pass

    def InitCheck(self, document):
        """
        InitCheck(self: IPerformanceAdviserRule, document: Document)
            Invoked by performance advisor once in the beginning of the check. If rule 
             checks document as a whole,
           the check can be performed in this method.
        
        
            document: Document for which performance problems are being checked.
        """
        pass

    def WillCheckElements(self):
        """
        WillCheckElements(self: IPerformanceAdviserRule) -> bool
        
            Reports if rule needs to be executed on individual elements.
            Returns: True if rule needs to be executed on individual elements.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IPhotoRenderContext(IExportContext):
    """ An interface that is used in custom export to render 3D views of a Revit model. """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IPrintSetting:
    """ An interface which represents the Print Setup (Application Menu->Print->Print Setup) within Autodesk Revit. """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    PrintParameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Parameters of Print Setup.

Get: PrintParameters(self: IPrintSetting) -> PrintParameters

"""



class ISaveSharedCoordinatesCallback:
    """
    An interface that may be used to control Revit when trying to unload
       or reload a Revit link with changes in shared coordinates.
    """
    def GetSaveModifiedLinksOption(self, link):
        """
        GetSaveModifiedLinksOption(self: ISaveSharedCoordinatesCallback, link: RevitLinkType) -> SaveModifiedLinksOptions
        
            Determines whether Revit should save the link, not save the link,
           or 
             discard shared positioning entirely.
        
        
            link: The Revit link which has modified shared coordinates.
            Returns: The options when saving a linked file which has been modified
           in-memory by 
             shared coordinates operations.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ISaveSharedCoordinatesCallbackForUnloadLocally:
    """
    An interface that is used to control Revit when trying to unload
       locally a Revit link with changes in shared coordinates.
    """
    def GetSaveModifiedLinksOptionForUnloadLocally(self, link):
        """
        GetSaveModifiedLinksOptionForUnloadLocally(self: ISaveSharedCoordinatesCallbackForUnloadLocally, link: RevitLinkType) -> SaveModifiedLinksOptionsForUnloadLocally
        
            Determines whether Revit should save the link or not prior
           to unloading the 
             link locally.
        
        
            link: The Revit link which has modified shared coordinates.
            Returns: The saving option when unloading locally a linked file which has been modified
        
                in-memory by shared coordinates operations.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ITransactionFinalizer:
    """
    An interface that may be used to perform a custom action at the end of a transaction.
       A method of the interface will be called when a transaction is either committed or rolled back.
    """
    def OnCommitted(self, document, strTransactionName):
        """
        OnCommitted(self: ITransactionFinalizer, document: Document, strTransactionName: str)
            This method is called at the end of committing a transaction
        
            document: The document associated with the transaction
            strTransactionName: The transaction's name
        """
        pass

    def OnRolledBack(self, document, strTransactionName):
        """
        OnRolledBack(self: ITransactionFinalizer, document: Document, strTransactionName: str)
            This method is called at the end of rolling back a transaction
        
            document: The document associated with the transaction
            strTransactionName: The transaction's name
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ITransientElementMaker:
    """ The interface to be implemented by an application that creates transient element(s) in Revit. """
    def Execute(self):
        """
        Execute(self: ITransientElementMaker)
            Implement this method to create transient elements.
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IUpdater:
    """ The interface used to create an updater capable of reacting to changes in the Revit model. """
    def Execute(self, data):
        """
        Execute(self: IUpdater, data: UpdaterData)
            The method that Revit will invoke to perform an update.
        
            data: Provides all necessary data needed to perform the update, including the 
             document and information about
           the changes that triggered the update.
        """
        pass

    def GetAdditionalInformation(self):
        """
        GetAdditionalInformation(self: IUpdater) -> str
        
            Auxiliary text that Revit will use to inform the end user
           when the Updater 
             is not loaded
        """
        pass

    def GetChangePriority(self):
        """
        GetChangePriority(self: IUpdater) -> ChangePriority
        
            Identifies the nature of the change the Updater will be performing
           Used to 
             identify order of execution of updaters
           Called once during registration of 
             the updater
        """
        pass

    def GetUpdaterId(self):
        """
        GetUpdaterId(self: IUpdater) -> UpdaterId
        
            Returns globally unique updater id - used to identify the Updater
           Called 
             once during registration of the updater
        """
        pass

    def GetUpdaterName(self):
        """
        GetUpdaterName(self: IUpdater) -> str
        
            Returns a name that the Updater can be identified by to the user
        """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class IViewSheetSet:
    """ This interface represents a selected set of views/sheets which will be used for printing. """
    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Views = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The views.

Get: Views(self: IViewSheetSet) -> ViewSet

Set: Views(self: IViewSheetSet) = value
"""



class JoinGeometryUtils(object):
    """ Utilities for joining and unjoining elements, and for managing the order in which elements are joined. """
    @staticmethod
    def AreElementsJoined(document, firstElement, secondElement):
        """
        AreElementsJoined(document: Document, firstElement: Element, secondElement: Element) -> bool
        
            Determines whether two elements are joined.
        
            document: The document containing the two elements.
            firstElement: The first element.
            secondElement: The second element.
            Returns: True if the two elements are joined.
        """
        pass

    @staticmethod
    def GetJoinedElements(document, element):
        """
        GetJoinedElements(document: Document, element: Element) -> ICollection[ElementId]
        
            Returns all elements joined to given element.
        
            document: The document containing the element.
            element: The element.
            Returns: The set of elements that are joined to the given element.
        """
        pass

    @staticmethod
    def IsCuttingElementInJoin(document, firstElement, secondElement):
        """
        IsCuttingElementInJoin(document: Document, firstElement: Element, secondElement: Element) -> bool
        
            Determines whether the first of two joined elements is cutting the second 
             element.
        
        
            document: The document containing the two elements.
            firstElement: The first element.
            secondElement: The second element.
            Returns: True if the secondElement is cut by the firstElement, false if the 
             secondElement is cut by the firstElement.
        """
        pass

    @staticmethod
    def JoinGeometry(document, firstElement, secondElement):
        """
        JoinGeometry(document: Document, firstElement: Element, secondElement: Element)
            Creates clean joins between two elements that share a common face.
        
            document: The document containing the two elements.
            firstElement: The first element to be joined.
            secondElement: The second element to be joined. This element must not be joined to the first 
             element.
        """
        pass

    @staticmethod
    def SwitchJoinOrder(document, firstElement, secondElement):
        """
        SwitchJoinOrder(document: Document, firstElement: Element, secondElement: Element)
            Reverses the order in which two elements are joined.
        
            document: The document containing the two elements.
            firstElement: The first element.
            secondElement: The second element. This element must be joined to the first element.
        """
        pass

    @staticmethod
    def UnjoinGeometry(document, firstElement, secondElement):
        """
        UnjoinGeometry(document: Document, firstElement: Element, secondElement: Element)
            Removes a join between two elements.
        
            document: The document containing the two elements.
            firstElement: The first element to be unjoined.
            secondElement: The second element to be unjoined. This element must be joined to the fist 
             element.
        """
        pass

    __all__ = [
        'AreElementsJoined',
        'GetJoinedElements',
        'IsCuttingElementInJoin',
        'JoinGeometry',
        'SwitchJoinOrder',
        'UnjoinGeometry',
    ]


class JoinType(Enum, IComparable, IFormattable, IConvertible):
    """
    The type of join at the end of an element. The join type affects only the graphic treatment, i.e.
    cleaning of the end, not the physical join behavior.
    
    enum JoinType, values: Abut (0), Extension (3), Miter (1), None (-1), SquareOff (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Abut = None
    Extension = None
    Miter = None
    None = None
    SquareOff = None
    value__ = None


class JunctionType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all the junction types for MEP curve types.
    
    enum JunctionType, values: Tap (0), Tee (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Tap = None
    Tee = None
    value__ = None


class KeyBasedTreeEntriesIterator(object, IEnumerator[KeyBasedTreeEntry], IDisposable, IEnumerator):
    """ An iterator to a set of KeyBasedTreeEntry objects. """
    def Dispose(self):
        """ Dispose(self: KeyBasedTreeEntriesIterator) """
        pass

    def IsDone(self):
        """
        IsDone(self: KeyBasedTreeEntriesIterator) -> bool
        
            Identifies if the iteration has completed.
            Returns: True if the iteration has no more items.  False if there are more items to be 
             iterated.
        """
        pass

    def MoveNext(self):
        """
        MoveNext(self: KeyBasedTreeEntriesIterator) -> bool
        
            Increments the iterator to the next item.
            Returns: True if there is a next available item in this iterator.
           False if the 
             iterator has completed all available items.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: KeyBasedTreeEntriesIterator, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: KeyBasedTreeEntriesIterator)
            Resets the iterator to the initial state.
        """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[KeyBasedTreeEntry](enumerator: IEnumerator[KeyBasedTreeEntry], value: KeyBasedTreeEntry) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the item at the current position of the iterator.

Get: Current(self: KeyBasedTreeEntriesIterator) -> KeyBasedTreeEntry

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: KeyBasedTreeEntriesIterator) -> bool

"""



class KeyBasedTreeEntriesLoadContent(ExternalResourceLoadContent, IDisposable):
    """
    This class is used by IExternalResourceServers to return KeyBasedTreeEntries data to Revit when their
       LoadResource method is invoked.
    """
    def AddEntry(self, entry):
        """
        AddEntry(self: KeyBasedTreeEntriesLoadContent, entry: KeyBasedTreeEntry) -> bool
        
            Adds one KeyBasedTreeEntry to this KeyBasedTreeEntriesLoadContent, which is 
             used to build a KeyBasedTreeEntries object by BuildEntries function.
        
        
            entry: The entry to be added.
            Returns: Returns true if an entry is added into the entry data set successfully,
           
             returns false if an entry fails to be added because this entry is invalid or a 
             duplicate
           of one in the entry data set.
        """
        pass

    def BuildEntries(self):
        """
        BuildEntries(self: KeyBasedTreeEntriesLoadContent)
            Builds a KeyBasedTreeEntries object.
        """
        pass

    def CanAddEntry(self, entry):
        """
        CanAddEntry(self: KeyBasedTreeEntriesLoadContent, entry: KeyBasedTreeEntry) -> bool
        
            Verifies if the KeyBasedTreeEntry could be added in this 
             KeyBasedTreeEntriesLoadContent.
        
        
            entry: The KeyBasedTreeEntry object to be checked.
            Returns: True if the KeyBasedTreeEntry could be added in, otherwise false.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ExternalResourceLoadContent, A_0: bool) """
        pass

    def GetEntries(self):
        """
        GetEntries(self: KeyBasedTreeEntriesLoadContent) -> KeyBasedTreeEntries
        
            Gets a copy of KeyBasedTreeEntries object owned by this 
             KeyBasedTreeEntriesLoadContent object.
        
            Returns: A copy of KeyBasedTreeEntries object owned by this 
             KeyBasedTreeEntriesLoadContent object.
        """
        pass

    def GetLoadResults(self):
        """
        GetLoadResults(self: KeyBasedTreeEntriesLoadContent) -> KeyBasedTreeEntriesLoadResults
        
            Returns a copy of the KeyBasedTreeEntriesLoadResults owned by this 
             KeyBasedTreeEntriesLoadContent object.
        
            Returns: A copy of a KeyBasedTreeEntriesLoadResults owned by this 
             KeyBasedTreeEntriesLoadContent object.
        """
        pass

    @staticmethod
    def IsEntriesBuilt(content):
        """
        IsEntriesBuilt(content: KeyBasedTreeEntriesLoadContent) -> bool
        
            Verifies that the KeyBasedTreeEntries object owned by a 
             KeyBasedTreeEntriesLoadContent object is built.
        
        
            content: The KeyBasedTreeEntriesLoadContent object to be checked.
            Returns: True if the KeyBasedTreeEntries object is built already, otherwise false.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalResourceLoadContent, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: KeyBasedTreeEntriesLoadContent)
            Clears KeyBasedTreeEntriesLoadContent object, including KeyBasedTreeEntries and 
             KeyBasedTreeEntriesLoadResults, owned by this KeyBasedTreeEntriesLoadContent 
             object.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class KeyBasedTreeEntriesLoadResults(object, IDisposable):
    """
    This class contains the results and status information regarding an attempt to load the KeyBasedTreeEntries from an External Resource.
    
    KeyBasedTreeEntriesLoadResults()
    """
    def Dispose(self):
        """ Dispose(self: KeyBasedTreeEntriesLoadResults) """
        pass

    def GetFailureMessages(self):
        """
        GetFailureMessages(self: KeyBasedTreeEntriesLoadResults) -> IList[FailureMessage]
        
            Get all error or warnings created while attempting to load KeyBasedTreeEntries.
            Returns: A collection of FailureMessage objects, if any errors or warnings were 
             encountered while
           loading and building the KeyBasedTreeEntries.
        """
        pass

    def GetFileReadErrors(self):
        """
        GetFileReadErrors(self: KeyBasedTreeEntriesLoadResults) -> IList[str]
        
            Gets the names of any files which could not be read due to access errors.
            Returns: An array of strings containing the filenames of files which could not be read.
        """
        pass

    def GetFileSyntaxErrors(self):
        """
        GetFileSyntaxErrors(self: KeyBasedTreeEntriesLoadResults) -> IList[str]
        
            Gets all the records in the key-based tree data text file that could not be 
             parsed into KeyBasedTreeEntries.
        
            Returns: An array of strings that are copies of the records in the text file that could 
             not be parsed.
        """
        pass

    def GetKeyBasedTreeEntryErrors(self, type=None):
        """
        GetKeyBasedTreeEntryErrors(self: KeyBasedTreeEntriesLoadResults) -> IList[KeyBasedTreeEntryError]
        
            Gets information about KeyBasedTreeEntry objects that could not be included in 
             the KeyBasedTreeEntries
           object due to errors.
        
            Returns: An array of copies of the KeyBasedTreeEntryErrors contained in this object.
        GetKeyBasedTreeEntryErrors(self: KeyBasedTreeEntriesLoadResults, type: KeyBasedTreeEntryErrorType) -> IList[KeyBasedTreeEntryError]
        
            Gets information about specific KeyBasedTreeEntry objects that could not be 
             included in the KeyBasedTreeEntries
           object due to errors of a particular 
             type.
        
        
            type: The type of KeyBasedTreeEntryError to be returned.
            Returns: An array of copies of the KeyBasedTreeEntryErrors contained in this object 
             matching the type specified.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: KeyBasedTreeEntriesLoadResults, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: KeyBasedTreeEntriesLoadResults) -> bool

"""



class KeyBasedTreeEntryError(object, IDisposable):
    """ This class contains information about a problem encountered while creating a KeyBasedTreeEntries object. """
    def Dispose(self):
        """ Dispose(self: KeyBasedTreeEntryError) """
        pass

    def GetEntry(self):
        """
        GetEntry(self: KeyBasedTreeEntryError) -> KeyBasedTreeEntry
        
            Gets the entry for which an error occurred while building the 
             KeyBasedTreeEntries object.
        
            Returns: A copy of the KeyBasedTreeEntry.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: KeyBasedTreeEntryError, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ErrorType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates which of possible types of problems with loading and/or building
   a KeyBasedTreeEntries that this KeyBasedTreeEntryError represents.

Get: ErrorType(self: KeyBasedTreeEntryError) -> KeyBasedTreeEntryErrorType

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: KeyBasedTreeEntryError) -> bool

"""



class KeyBasedTreeEntryErrorType(Enum, IComparable, IFormattable, IConvertible):
    """
    An Enum indicating the type of error associated with a KeyBasedTreeEntry.
    
    enum KeyBasedTreeEntryErrorType, values: BadClassificationCategoryId (5), BadClassificationLevel (4), CircularParentage (2), DuplicateEntry (0), InvalidClassificationCode (3), MissingParent (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BadClassificationCategoryId = None
    BadClassificationLevel = None
    CircularParentage = None
    DuplicateEntry = None
    InvalidClassificationCode = None
    MissingParent = None
    value__ = None


class KeynoteEntries(KeyBasedTreeEntries, IEnumerable[KeyBasedTreeEntry], IEnumerable, IDisposable):
    """ A collection of KeynoteEntry objects that make up the keynote table. """
    def Dispose(self):
        """ Dispose(self: KeyBasedTreeEntries, A_0: bool) """
        pass

    @staticmethod
    def LoadKeynoteEntriesFromFile(filePath, keynoteContent):
        """
        LoadKeynoteEntriesFromFile(filePath: str, keynoteContent: KeyBasedTreeEntriesLoadContent) -> bool
        
            Loads the contents of a keynote text file into the provided 
             KeyBasedTreeEntriesLoadContent.
        
        
            filePath: The full path of the existing keynotefile.
            keynoteContent: The keynote entries read from the filePath will be added to this object.
           A 
             KeyBasedTreeEntriesLoadContent object will also be updated to contain status 
             information,
           including information about any errors that occurred while 
             reading the keynote entries from
           the specified file.
        
            Returns: True if reading the keynote file succeeds; False if the keynote file cannot be 
             read.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: KeyBasedTreeEntries, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass


class KeynoteEntry(KeyBasedTreeEntry, IDisposable):
    """
    Represents an entry in the keynote table, containing the key value, keynote text, and parent key (if applicable).
    
    KeynoteEntry(key: str, text: str)
    KeynoteEntry(key: str, parentKey: str, text: str)
    """
    def Dispose(self):
        """ Dispose(self: KeyBasedTreeEntry, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: KeyBasedTreeEntry, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, key, *__args):
        """
        __new__(cls: type, key: str, text: str)
        __new__(cls: type, key: str, parentKey: str, text: str)
        """
        pass

    KeynoteText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text associated with this KeynoteEntry.

Get: KeynoteText(self: KeynoteEntry) -> str

"""



class KeynoteTable(KeyBasedTreeEntryTable, IDisposable):
    """ KeynoteTable represents the collection of keynotes (KeynoteEntries) for a document. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetKeynoteTable(aDoc):
        """
        GetKeynoteTable(aDoc: Document) -> KeynoteTable
        
            Gets the KeynoteTable from a Revit document.
        
            aDoc: The Revit document.
            Returns: The KeynoteTable.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class LabelUtils(object, IDisposable):
    """ Used to obtain user-visible names for enums. """
    def Dispose(self):
        """ Dispose(self: LabelUtils) """
        pass

    @staticmethod
    def GetLabelFor(*__args):
        """
        GetLabelFor(ductLossMethodType: DuctLossMethodType, doc: Document) -> str
        
            Gets the user-visible name for a DuctLossMethodType.
        
            ductLossMethodType: The DuctLossMethodType to get the user-visible name.
            doc: The document from which to get the DuctLossMethodType.
        GetLabelFor(pipeLossMethodType: PipeLossMethodType, doc: Document) -> str
        
            Gets the user-visible name for a PipeLossMethodType.
        
            pipeLossMethodType: The PipeLossMethodType to get the user-visible name.
            doc: The document from which to get the PipeLossMethodType.
        GetLabelFor(builtInParamGroup: BuiltInParameterGroup) -> str
        
            Gets the user-visible name for a BuiltInParameterGroup.
        
            builtInParamGroup: The BuiltInParameterGroup to get the user-visible name.
        GetLabelFor(builtInParam: BuiltInParameter) -> str
        
            Gets the user-visible name for a BuiltInParameter.
        
            builtInParam: The BuiltInParameter to get the user-visible name.
        GetLabelFor(paramType: ParameterType) -> str
        
            Gets the user-visible name for a ParameterType.
        
            paramType: The ParameterType to get the user-visible name.
        GetLabelFor(unitSymbolType: UnitSymbolType) -> str
        
            Gets the user-visible name for a UnitSymbolType.
        
            unitSymbolType: The UnitSymbolType to get the user-visible name.
        GetLabelFor(buildingType: gbXMLBuildingType, document: Document) -> str
        
            Gets the user-visible name for a gbXMLBuildingType.
        
            buildingType: The gbXMLBuildingType to get the user-visible name.
            document: The document from which to get the gbXMLBuildingType.
        GetLabelFor(unitType: UnitType) -> str
        
            Gets the user-visible name for a UnitType.
        
            unitType: The UnitType to get the user-visible name.
        GetLabelFor(pipeFlowState: PipeFlowState, doc: Document) -> str
        
            Gets the user-visible name for a PipeFlowState.
        
            pipeFlowState: The PipeFlowState to get the user-visible name.
            doc: The document from which to get the PipeFlowState.
        GetLabelFor(displayUnitType: DisplayUnitType) -> str
        
            Gets the user-visible name for a DisplayUnitType.
        
            displayUnitType: The DisplayUnitType to get the user-visible name.
        """
        pass

    @staticmethod
    def GetStructuralSectionShapeName(shape):
        """
        GetStructuralSectionShapeName(shape: StructuralSectionShape) -> str
        
            Gets the user-visible name for a StructuralSectionShape.
        
            shape: The StructuralSectionShape to get the user-visible name.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: LabelUtils, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: LabelUtils) -> bool

"""



class LayerCategoryType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing category types supported in an ExportLayerTable.
    
    enum LayerCategoryType, values: AnalyticalModel (2), Annotation (1), Imported (3), Model (0), Modifier (4), Unsorted (-1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AnalyticalModel = None
    Annotation = None
    Imported = None
    Model = None
    Modifier = None
    Unsorted = None
    value__ = None


class LayerModifier(object, IDisposable):
    """
    A modifier used to designate extra strings to appear in the exported layer name.
    
    LayerModifier(modifierType: ModifierType, separator: str)
    LayerModifier()
    """
    def Dispose(self):
        """ Dispose(self: LayerModifier) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: LayerModifier, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, modifierType=None, separator=None):
        """
        __new__(cls: type, modifierType: ModifierType, separator: str)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: LayerModifier) -> bool

"""

    ModifierType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The modifier type.

Get: ModifierType(self: LayerModifier) -> ModifierType

Set: ModifierType(self: LayerModifier) = value
"""

    Separator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The separator string that will follow this modifier in the export layer name.

Get: Separator(self: LayerModifier) -> str

Set: Separator(self: LayerModifier) = value
"""



class LayoutRule(APIObject, IDisposable):
    """
    The LayoutRule object is a base object for all type of layout rules for 
    Beam System within the Autodesk Revit API.
    """
    def Dispose(self):
        """ Dispose(self: LayoutRule, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class LayoutRuleClearSpacing(LayoutRule, IDisposable):
    """
    This class indicate the layout rule of a Beam System is Clear-Spacing.
    
    LayoutRuleClearSpacing(spacing: float, justifyType: BeamSystemJustifyType)
    """
    def Dispose(self):
        """ Dispose(self: LayoutRuleClearSpacing, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, spacing, justifyType):
        """ __new__(cls: type, spacing: float, justifyType: BeamSystemJustifyType) """
        pass

    JustifyType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or set the type of justification.

Get: JustifyType(self: LayoutRuleClearSpacing) -> BeamSystemJustifyType

Set: JustifyType(self: LayoutRuleClearSpacing) = value
"""

    Spacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or set the spacing of the beam system.

Get: Spacing(self: LayoutRuleClearSpacing) -> float

Set: Spacing(self: LayoutRuleClearSpacing) = value
"""



class LayoutRuleFixedDistance(LayoutRule, IDisposable):
    """
    This class indicate the layout rule of a Beam System is Fixed-Distance.
    
    LayoutRuleFixedDistance(spacing: float, justifyType: BeamSystemJustifyType)
    """
    def Dispose(self):
        """ Dispose(self: LayoutRuleFixedDistance, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, spacing, justifyType):
        """ __new__(cls: type, spacing: float, justifyType: BeamSystemJustifyType) """
        pass

    JustifyType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or set the type of justification.

Get: JustifyType(self: LayoutRuleFixedDistance) -> BeamSystemJustifyType

Set: JustifyType(self: LayoutRuleFixedDistance) = value
"""

    Spacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or set spacing of the Beam System.

Get: Spacing(self: LayoutRuleFixedDistance) -> float

Set: Spacing(self: LayoutRuleFixedDistance) = value
"""



class LayoutRuleFixedNumber(LayoutRule, IDisposable):
    """
    This class indicate the layout rule of a Beam System is Fixed-Number.
    
    LayoutRuleFixedNumber(numberOfLines: int)
    """
    def Dispose(self):
        """ Dispose(self: LayoutRuleFixedNumber, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, numberOfLines):
        """ __new__(cls: type, numberOfLines: int) """
        pass

    NumberOfLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or set the number of the beams in a beam system.

Get: NumberOfLines(self: LayoutRuleFixedNumber) -> int

Set: NumberOfLines(self: LayoutRuleFixedNumber) = value
"""



class LayoutRuleMaximumSpacing(LayoutRule, IDisposable):
    """
    This class indicate the layout rule of a Beam System is Max-Spacing.
    
    LayoutRuleMaximumSpacing(spacing: float)
    """
    def Dispose(self):
        """ Dispose(self: LayoutRuleMaximumSpacing, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, spacing):
        """ __new__(cls: type, spacing: float) """
        pass

    Spacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or set the spacing of the beam system.

Get: Spacing(self: LayoutRuleMaximumSpacing) -> float

Set: Spacing(self: LayoutRuleMaximumSpacing) = value
"""



class Leader(APIObject, IDisposable):
    """ A leader object that can be attached to annotation elements such as text notes. """
    def Dispose(self):
        """ Dispose(self: Leader, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Leader, disposing: bool)ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Anchor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Anchor point of the Leader

Get: Anchor(self: Leader) -> XYZ

"""

    Elbow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Elbow point of the Leader.

Get: Elbow(self: Leader) -> XYZ

Set: Elbow(self: Leader) = value
"""

    End = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """End point of the Leader.

Get: End(self: Leader) -> XYZ

Set: End(self: Leader) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: Leader) -> bool

"""

    LeaderShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Geometric style of the leader

Get: LeaderShape(self: Leader) -> LeaderShape

"""



class LeaderArray(APIObject, IDisposable, IEnumerable):
    """
    An array that can contain any number of leaders.
    
    LeaderArray()
    """
    def Append(self, item):
        """
        Append(self: LeaderArray, item: Leader)
            Add the item to the end of the array.
        
            item: The item to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: LeaderArray)
            Removes every item from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: LeaderArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: LeaderArray) -> LeaderArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: LeaderArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: LeaderArray, item: Leader, index: int)
            Insert the specified item into the array.
        
            item: The item to be inserted into the array.
            index: The item will be inserted before this index.
            Returns: Returns whether the item was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: LeaderArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: LeaderArray) -> LeaderArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: LeaderArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the array.

Get: Size(self: LeaderArray) -> int

"""



class LeaderArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to an array of leaders.
    
    LeaderArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: LeaderArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: LeaderArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: LeaderArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: LeaderArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: LeaderArrayIterator) -> object

"""



class LeaderAtachement(Enum, IComparable, IFormattable, IConvertible):
    """
    Supported kinds of vertical attachments of a leader to a text note.
    
    enum LeaderAtachement, values: BottomLine (2), Midpoint (1), TopLine (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BottomLine = None
    Midpoint = None
    TopLine = None
    value__ = None


class LeaderEndCondition(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing Leader end conditions that are supported for IndependentTags.
    
    enum LeaderEndCondition, values: Attached (0), Free (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Attached = None
    Free = None
    value__ = None


class LeaderShape(Enum, IComparable, IFormattable, IConvertible):
    """
    Supported geometric shapes of annotation leaders.
    
    enum LeaderShape, values: Arc (2), Kinked (1), Straight (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Arc = None
    Kinked = None
    Straight = None
    value__ = None


class Level(DatumPlane, IDisposable):
    """ Represents a Level line within Autodesk Revit. """
    @staticmethod
    def Create(document, elevation):
        """
        Create(document: Document, elevation: float) -> Level
        
            Creates a new instance of level based on an input elevation.
        
            document: The document in which the new instance is created
            elevation: The elevation of the level to be created.
            Returns: The newly created level instance.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetPlaneReference(self):
        """
        GetPlaneReference(self: Level) -> Reference
        
            Returns a reference to this element as a plane.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the elevation above or below the ground level.

Get: Elevation(self: Level) -> float

Set: Elevation(self: Level) = value
"""

    ProjectElevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the elevation relative to project origin, no matter
   what values of the Elevation Base parameter is set.

Get: ProjectElevation(self: Level) -> float

"""



class LevelType(LineAndTextAttrSymbol, IDisposable):
    """ An object that represents a Level type. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class LightAndMaterialAccuracyMode(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type containing possible Light and Material Accuracy modes for Raytracer render.
    
    enum LightAndMaterialAccuracyMode, values: Advanced (2), Simplified (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Advanced = None
    Simplified = None
    value__ = None


class LightingSource(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the lighting scheme type in rendering settings.
    
    enum LightingSource, values: ExteriorArtificial (23), ExteriorSun (21), ExteriorSunAndArtificial (22), InteriorArtificial (26), InteriorSun (24), InteriorSunAndArtificial (25)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ExteriorArtificial = None
    ExteriorSun = None
    ExteriorSunAndArtificial = None
    InteriorArtificial = None
    InteriorSun = None
    InteriorSunAndArtificial = None
    value__ = None


class LightNode(ContentNode, IDisposable):
    """ This is a class representing a Light element in a model-exporting process. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class Line(Curve, IDisposable):
    """ A line in space. """
    @staticmethod
    def CreateBound(endpoint1, endpoint2):
        """
        CreateBound(endpoint1: XYZ, endpoint2: XYZ) -> Line
        
            Creates a new instance of a bound linear curve.
        
            endpoint1: The first line endpoint.
            endpoint2: The second line endpoint.
            Returns: The new bound line.
        """
        pass

    @staticmethod
    def CreateUnbound(origin, direction):
        """
        CreateUnbound(origin: XYZ, direction: XYZ) -> Line
        
            Creates a new instance of an unbound linear curve.
        
            origin: The origin of the unbound line.
            direction: The direction of the unbound line.
            Returns: The new unbound line.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the direction of the line.

Get: Direction(self: Line) -> XYZ

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the origin of the line.

Get: Origin(self: Line) -> XYZ

"""



class LinearArray(BaseArray, IDisposable):
    """ An object that represents an Array created linearly within the Revit project. """
    @staticmethod
    def ArrayElementsWithoutAssociation(aDoc, dBView, ids, count, translationToAnchorMember, anchorMember):
        """ ArrayElementsWithoutAssociation(aDoc: Document, dBView: View, ids: ICollection[ElementId], count: int, translationToAnchorMember: XYZ, anchorMember: ArrayAnchorMember) -> ICollection[ElementId] """
        pass

    @staticmethod
    def ArrayElementWithoutAssociation(aDoc, dBView, id, count, translationToAnchorMember, anchorMember):
        """
        ArrayElementWithoutAssociation(aDoc: Document, dBView: View, id: ElementId, count: int, translationToAnchorMember: XYZ, anchorMember: ArrayAnchorMember) -> ICollection[ElementId]
        
            Creates a new linear array from a single element.
        
            aDoc: The document.
            dBView: The view. If it is a 2d view, translation vector must be in the view plane if 
             the element is a view-specific element.
        
            id: The element to array.
            count: The number of array members to create including the initial
           element 
             grouping. Must between 2 and 200.
        
            translationToAnchorMember: The translation vector for the array.
            anchorMember: Indicates if the translation vector specifies the location of the second member
             
           of the array, or the last member of the array.
        
            Returns: The ids of the elements created during the operation.
        """
        pass

    @staticmethod
    def Create(aDoc, dBView, *__args):
        """
        Create(aDoc: Document, dBView: View, ids: ICollection[ElementId], count: int, translationToAnchorMember: XYZ, anchorMember: ArrayAnchorMember) -> LinearArray
        Create(aDoc: Document, dBView: View, id: ElementId, count: int, translationToAnchorMember: XYZ, anchorMember: ArrayAnchorMember) -> LinearArray
        
            Creates a new linear array element from a single element.
        
            aDoc: The document.
            dBView: The view. If it is a 2d view, translation vector must be in the view plane if 
             the element is a view-specific element.
        
            id: The element to array.
            count: The number of array members to create including the initial
           element 
             grouping. Must between 2 and 200.
        
            translationToAnchorMember: The translation vector for the array.
            anchorMember: Indicates if the translation vector specifies the location of the second member
             
           of the array, or the last member of the array.
        
            Returns: The new linear array element.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetCopiedMemberIds(self):
        """
        GetCopiedMemberIds(self: LinearArray) -> ICollection[ElementId]
        
            Retrieves the copied member Ids of the Array.
            Returns: The copied member Ids of the Array
        """
        pass

    def GetOriginalMemberIds(self):
        """
        GetOriginalMemberIds(self: LinearArray) -> ICollection[ElementId]
        
            Retrieves the original member Ids of the Array.
            Returns: The original member Ids of the Array
        """
        pass

    @staticmethod
    def IsElementArrayable(aDoc, id):
        """
        IsElementArrayable(aDoc: Document, id: ElementId) -> bool
        
            Indicates whether the input element is arrayable.
        
            aDoc: The document.
            id: The element id.
            Returns: True if the input element is arrayable, false otherwise.
        """
        pass

    @staticmethod
    def IsValidArraySize(count):
        """
        IsValidArraySize(count: int) -> bool
        
            This indicates whether the input count is valid.
        
            count: The count.
            Returns: True if the input count is between 2 and 200, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    NumMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the number of the arrayed members.

Get: NumMembers(self: LinearArray) -> int

Set: NumMembers(self: LinearArray) = value
"""



class LinePattern(object, IDisposable):
    """
    Represents a line pattern definition.
    
    LinePattern(name: str)
    LinePattern()
    """
    def Dispose(self):
        """ Dispose(self: LinePattern) """
        pass

    def GetSegments(self):
        """
        GetSegments(self: LinePattern) -> IList[LinePatternSegment]
        
            Gets the sequence of segments that defines this line pattern.
            Returns: The sequence of segments.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: LinePattern, disposing: bool) """
        pass

    def SetSegments(self, lineSegs):
        """ SetSegments(self: LinePattern, lineSegs: IList[LinePatternSegment]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, name=None):
        """
        __new__(cls: type, name: str)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: LinePattern) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Line pattern name.

Get: Name(self: LinePattern) -> str

Set: Name(self: LinePattern) = value
"""



class LinePatternElement(Element, IDisposable):
    """ An element that represents a line pattern. """
    @staticmethod
    def Create(document, linePattern):
        """
        Create(document: Document, linePattern: LinePattern) -> LinePatternElement
        
            Creates a new LinePatternElement.
        
            document: The document in which to create the LinePatternElement.
            linePattern: The LinePattern associated to the newly created LinePatternElement.
            Returns: The newly created LinePatternElement.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetLinePattern(document=None, elementId=None):
        """
        GetLinePattern(self: LinePatternElement) -> LinePattern
        
            Gets the LinePattern associated to this element.
            Returns: A copy of LinePattern object.
        GetLinePattern(document: Document, elementId: ElementId) -> LinePattern
        
            Gets the LinePattern associated to an element or from a built-in line pattern.
        
            document: The document in which to retrieve the LinePattern.
            elementId: The ElementId of the LinePatternElement or the built-in line pattern id.
            Returns: A copy of LinePattern object. ll if the ElementId doesn't represent a line 
             pattern element
           or built-in line pattern. ll for Solid.
        """
        pass

    @staticmethod
    def GetLinePatternElementByName(document, name):
        """
        GetLinePatternElementByName(document: Document, name: str) -> LinePatternElement
        
            Retrieves the LinePatternElement by its name.
        
            document: The document in which to retrieve the LinePatternElement.
            name: The name of the LinePatternElement.
            Returns: The LinePatternElement.
        """
        pass

    @staticmethod
    def GetSolidPatternId():
        """
        GetSolidPatternId() -> ElementId
        
            Gets the solid line pattern element id.
            Returns: The element id of the solid line pattern.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetLinePattern(self, newLinePattern):
        """
        SetLinePattern(self: LinePatternElement, newLinePattern: LinePattern)
            Sets the LinePattern associated to this element.
        
            newLinePattern: The new LinePattern object.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class LinePatternSegment(object, IDisposable):
    """
    Represents a segment in a line pattern.
    
    LinePatternSegment(type: LinePatternSegmentType, length: float)
    LinePatternSegment()
    """
    def Dispose(self):
        """ Dispose(self: LinePatternSegment) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: LinePatternSegment, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, type=None, length=None):
        """
        __new__(cls: type, type: LinePatternSegmentType, length: float)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: LinePatternSegment) -> bool

"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets and sets the length of the segment.

Get: Length(self: LinePatternSegment) -> float

Set: Length(self: LinePatternSegment) = value
"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets and sets the type of the segment.

Get: Type(self: LinePatternSegment) -> LinePatternSegmentType

Set: Type(self: LinePatternSegment) = value
"""



class LinePatternSegmentType(Enum, IComparable, IFormattable, IConvertible):
    """
    Represents the type of a line pattern segment.
    
    enum LinePatternSegmentType, values: Dash (0), Dot (2), Invalid (3), Space (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Dash = None
    Dot = None
    Invalid = None
    Space = None
    value__ = None


class LineProperties(object, IDisposable):
    """
    A structure that has access to the pen properties of lines/curves
       that are currently being drawn/exported via an export context
       during a custom export process.
    """
    def Dispose(self):
        """ Dispose(self: LineProperties) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: LineProperties, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current color used when drawing lines/curves.

Get: Color(self: LineProperties) -> Color

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: LineProperties) -> bool

"""

    LineWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current width (thickness) of the pen stroke when drawing lines/curves.

Get: LineWidth(self: LineProperties) -> float

"""

    PatternId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the current Line pattern element used when drawing lines/curves.

Get: PatternId(self: LineProperties) -> ElementId

"""

    Transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current transparency level to be applied to the current color.

Get: Transparency(self: LineProperties) -> int

"""



class LineScaling(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible LineType scaling modes.
    
    enum LineScaling, values: ModelSpace (1), PaperSpace (2), ViewScale (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ModelSpace = None
    PaperSpace = None
    value__ = None
    ViewScale = None


class LineSegment(object, IDisposable):
    """ An output node that represents a tessellated line segment. """
    def Dispose(self):
        """ Dispose(self: LineSegment) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: LineSegment, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    EndParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Parameter associated with the end point.

Get: EndParameter(self: LineSegment) -> float

"""

    EndPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """End point of the line segment.

Get: EndPoint(self: LineSegment) -> XYZ

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: LineSegment) -> bool

"""

    LineProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Access to the line (pen) properties of the line

Get: LineProperties(self: LineSegment) -> LineProperties

"""

    StartParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Parameter associated with the start point.

Get: StartParameter(self: LineSegment) -> float

"""

    StartPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Start point of the line segment.

Get: StartPoint(self: LineSegment) -> XYZ

"""



class LinkConversionData(object, IDisposable):
    """
    This class contains the information necessary to re-create a Revit document
       from an external source.
    """
    def Dispose(self):
        """ Dispose(self: LinkConversionData) """
        pass

    def GetOptions(self):
        """
        GetOptions(self: LinkConversionData) -> IDictionary[str, str]
        
            Extra information used during the creation of the Revit document.
            Returns: The extra information used during the creation of the Revit document.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: LinkConversionData, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: LinkConversionData) -> bool

"""

    Path = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The path to the source data used to generate the model.

Get: Path(self: LinkConversionData) -> str

"""

    ServerId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The service responsible for converting the data into a Revit file.

Get: ServerId(self: LinkConversionData) -> Guid

"""



class LinkedFileStatus(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum displaying the loaded status of a linked file
    
    enum LinkedFileStatus, values: CanBeUpgraded (4), Imported (2), InClosedWorkset (5), Invalid (-1), Loaded (0), LocallyUnloaded (6), NotFound (3), Unloaded (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CanBeUpgraded = None
    Imported = None
    InClosedWorkset = None
    Invalid = None
    Loaded = None
    LocallyUnloaded = None
    NotFound = None
    Unloaded = None
    value__ = None


class LinkElementId(object):
    """
    LinkElementId represents an element in a linked document.
    
    LinkElementId(linkInstanceId: ElementId, elementId: ElementId)
    LinkElementId(elementId: ElementId)
    """
    def Equals(self, obj):
        """
        Equals(self: LinkElementId, obj: object) -> bool
        
            Determines whether the specified System.Object is equal to the current 
             System.Object.
        
        
            obj: Another object.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, linkInstanceId: ElementId, elementId: ElementId)
        __new__(cls: type, elementId: ElementId)
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    HostElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the element in the host, or invalidElementId if there is a link.

Get: HostElementId(self: LinkElementId) -> ElementId

"""

    LinkedElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the element in the link, or invalidElementId if no link.

Get: LinkedElementId(self: LinkElementId) -> ElementId

"""

    LinkInstanceId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the link, or invalidElementId if no link.

Get: LinkInstanceId(self: LinkElementId) -> ElementId

"""



class LinkLoadContent(ExternalResourceLoadContent, IDisposable):
    """
    This class is used by IExternalResourceServers to return Link data to Revit when their
       LoadResource method is invoked.  It also contains additional information used by
       IExternalResourceUIServers to display link load status results to the user.
    """
    def Dispose(self):
        """ Dispose(self: ExternalResourceLoadContent, A_0: bool) """
        pass

    def GetLinkDataPath(self):
        """
        GetLinkDataPath(self: LinkLoadContent) -> ModelPath
        
            Returns the Link data path owned by this LinkLoadContent object.
            Returns: The Links data path owned by this LinkLoadContent object.
        """
        pass

    def GetLinkLoadResult(self):
        """
        GetLinkLoadResult(self: LinkLoadContent) -> RevitLinkLoadResult
        
            Retrieves the LinkLoadResult of the attempt to load or reload a Revit link.
            Returns: A LinkLoadObject containing the status and other information about an attempt 
             by Revit
           to load a Revit link.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ExternalResourceLoadContent, disposing: bool) """
        pass

    def SetLinkDataPath(self, linkPath):
        """
        SetLinkDataPath(self: LinkLoadContent, linkPath: ModelPath)
            Sets the Link data path owned by this LinkLoadContent object.
        
            linkPath: The Links data path set for this LinkLoadContent object.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class LinkNode(GroupNode, IDisposable):
    """ An output node that represents a linked Revit document. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def GetDocument(self):
        """
        GetDocument(self: LinkNode) -> Document
        
            Returns the document associated with the link.
            Returns: Instance of a Document
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ListType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type indicating the style of list item
       for paragraphs that are part of ordered or unordered lists
       in FormattedText.
    
    enum ListType, values: ArabicNumbers (3), Bullet (2), LowerCaseLetters (4), Mixed (0), None (1), UpperCaseLetters (5)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ArabicNumbers = None
    Bullet = None
    LowerCaseLetters = None
    Mixed = None
    None = None
    UpperCaseLetters = None
    value__ = None


class LoadOperationType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enum indicating whether a resource load operation was triggered by
       a user action or an automatic process.
    
    enum LoadOperationType, values: Automatic (0), Explicit (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Automatic = None
    Explicit = None
    value__ = None


class Location(APIObject, IDisposable):
    """ Provides location functionality for all elements. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def Move(self, translation):
        """
        Move(self: Location, translation: XYZ) -> bool
        
            Move the element within the project by a specified vector.
        
            translation: The vector by which the element is to be moved.
            Returns: If the element is moved successfully then the method return True, otherwise 
             False.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Rotate(self, axis, angle):
        """
        Rotate(self: Location, axis: Line, angle: float) -> bool
        
            Rotate the element within the project by a specified angle around a given axis.
        
            axis: An unbounded line that represents the axis of rotation.
            angle: The angle, in radians, by which the element is to be rotated around the 
             specified axis.
        
            Returns: If the element is rotate successfully then the method returns True, otherwise 
             False.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class LocationCurve(Location, IDisposable):
    """ Provides location functionality for all elements that are based upon a curve. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Curve = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provides the ability to get and set the curve of a curve based element.

Get: Curve(self: LocationCurve) -> Curve

Set: Curve(self: LocationCurve) = value
"""



class LocationPoint(Location, IDisposable):
    """ Provides location functionality for all elements that have a single insertion point. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The physical location of the element.

Get: Point(self: LocationPoint) -> XYZ

Set: Point(self: LocationPoint) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The angle of rotation around the insertion point, in radians.

Get: Rotation(self: LocationPoint) -> float

"""



class LogicalAndFilter(ElementLogicalFilter, IDisposable):
    """
    A filter that contains a set of filters. The filter passes when all filters in the set pass.
    
    LogicalAndFilter(filters: IList[ElementFilter])
    LogicalAndFilter(filter1: ElementFilter, filter2: ElementFilter)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, filters: IList[ElementFilter])
        __new__(cls: type, filter1: ElementFilter, filter2: ElementFilter)
        """
        pass


class LogicalOrFilter(ElementLogicalFilter, IDisposable):
    """
    A filter that contains a set of filters. The filter passes when any filter in the set passes.
    
    LogicalOrFilter(filters: IList[ElementFilter])
    LogicalOrFilter(filter1: ElementFilter, filter2: ElementFilter)
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, filters: IList[ElementFilter])
        __new__(cls: type, filter1: ElementFilter, filter2: ElementFilter)
        """
        pass


class MarginType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all Margin types of Print Setting.
    
    enum MarginType, values: NoMargin (0), PrinterLimit (1), UserDefined (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    NoMargin = None
    PrinterLimit = None
    UserDefined = None
    value__ = None


class MassDisplayTemporaryOverrideType(Enum, IComparable, IFormattable, IConvertible):
    """
    This enum identifies the mass display overrides.
    
    enum MassDisplayTemporaryOverrideType, values: ShowMassByViewSettings (0), ShowMassFormAndFloors (1), ShowMassSurfaceTypes (2), ShowMassZonesAndShades (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ShowMassByViewSettings = None
    ShowMassFormAndFloors = None
    ShowMassSurfaceTypes = None
    ShowMassZonesAndShades = None
    value__ = None


class MassInstanceUtils(object, IDisposable):
    """ A static class that contains methods for processing curves driven by points. """
    @staticmethod
    def AddMassLevelDataToMassInstance(document, massInstanceId, levelId):
        """
        AddMassLevelDataToMassInstance(document: Document, massInstanceId: ElementId, levelId: ElementId) -> ElementId
        
            Create a MassLevelData (Mass Floor) to associate a Level with a mass instance.
        
            document: The Document.
            massInstanceId: The ElementId of the mass instance.
            levelId: The ElementId of the Level to associate with the mass instance.
            Returns: The ElementId of the MassLevelData that was created, or the existing ElementId 
             if it was already in added.
        """
        pass

    def Dispose(self):
        """ Dispose(self: MassInstanceUtils) """
        pass

    @staticmethod
    def GetGrossFloorArea(document, massInstanceId):
        """
        GetGrossFloorArea(document: Document, massInstanceId: ElementId) -> float
        
            Get the total occupiable floor area represented by a mass instance.
        
            document: The Document.
            massInstanceId: The ElementId of the mass instance.
            Returns: The gross floor area in square feet.
        """
        pass

    @staticmethod
    def GetGrossSurfaceArea(document, massInstanceId):
        """
        GetGrossSurfaceArea(document: Document, massInstanceId: ElementId) -> float
        
            Get the total exterior building surface area represented by a mass instance.
        
            document: The Document.
            massInstanceId: The ElementId of the mass instance.
            Returns: The gross surface area in square feet.
        """
        pass

    @staticmethod
    def GetGrossVolume(document, massInstanceId):
        """
        GetGrossVolume(document: Document, massInstanceId: ElementId) -> float
        
            Get the total building volume represented by a mass instance.
        
            document: The Document.
            massInstanceId: The ElementId of the mass instance.
            Returns: The gross volume in cubic feet.
        """
        pass

    @staticmethod
    def GetJoinedElementIds(document, massInstanceId):
        """
        GetJoinedElementIds(document: Document, massInstanceId: ElementId) -> IList[ElementId]
        
            Get the ElementIds of Elements that are joined to a mass instance.
        
            document: The Document.
            massInstanceId: The ElementId of the mass instance.
            Returns: ElementIds of Elements joined to the mass instance.
        """
        pass

    @staticmethod
    def GetMassLevelDataIds(document, massInstanceId):
        """
        GetMassLevelDataIds(document: Document, massInstanceId: ElementId) -> IList[ElementId]
        
            Get the ElementIds of the MassLevelDatas (Mass Floors) associated with a mass 
             instance.
        
        
            document: The Document.
            massInstanceId: The ElementId of the mass instance.
            Returns: The ElementIds of the MassLevelDatas.
        """
        pass

    @staticmethod
    def GetMassLevelIds(document, massInstanceId):
        """
        GetMassLevelIds(document: Document, massInstanceId: ElementId) -> IList[ElementId]
        
            Get the ElementIds of the Levels associated with a mass instance.
        
            document: The Document.
            massInstanceId: The ElementId of the mass instance.
            Returns: The ElementIds of the Levels
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: MassInstanceUtils, disposing: bool) """
        pass

    @staticmethod
    def RemoveMassLevelDataFromMassInstance(document, massInstanceId, levelId):
        """
        RemoveMassLevelDataFromMassInstance(document: Document, massInstanceId: ElementId, levelId: ElementId)
            Delete the MassLevelData (Mass Floor) that associates a Level with a mass 
             instance.
        
        
            document: The Document.
            massInstanceId: The ElementId of the mass instance.
            levelId: The ElementId of the Level to disassociate from the mass instance.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: MassInstanceUtils) -> bool

"""



class Material(Element, IDisposable):
    """ Represents a material element within an Autodesk Revit project. """
    def ClearMaterialAspect(self, aspect):
        """
        ClearMaterialAspect(self: Material, aspect: MaterialAspect)
            Removes an aspect from the material.
        
            aspect: The material aspect.
        """
        pass

    @staticmethod
    def Create(document, name):
        """
        Create(document: Document, name: str) -> ElementId
        
            Creates a new material.
        
            document: The document in which to create the material.
            name: The name of the new material.
            Returns: Identifier of the new material.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def Duplicate(self, name):
        """
        Duplicate(self: Material, name: str) -> Material
        
            Duplicates the material
        
            name: Name of the new material - this name must be correctly structured for Revit use 
             and not duplicate the name
           of another material in the document.
        
            Returns: The new material.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def IsMaterialOrValidDefault(pElem, materialId):
        """
        IsMaterialOrValidDefault(pElem: Element, materialId: ElementId) -> bool
        
            Validates whether the specified element id is a material element.
        
            pElem: An element which will be applied the material
            materialId: The element id to be checked.
            Returns: True if the element a material element or invalidElementId, which means take 
             material from category, false otherwise.
        """
        pass

    @staticmethod
    def IsNameUnique(aDocument, name):
        """
        IsNameUnique(aDocument: Document, name: str) -> bool
        
            Validates whether the material name is unique in document.
        
            aDocument: The document in which the name is being tested for uniqueness.
            name: The name tested for uniqueness.
            Returns: Returns true if the name is unique, and false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetMaterialAspectByPropertySet(self, aspect, propertySetId):
        """
        SetMaterialAspectByPropertySet(self: Material, aspect: MaterialAspect, propertySetId: ElementId)
            Sets an aspect of the material to a shared property set.
        
            aspect: The material aspect.
            propertySetId: Identifier of a shared property set (an instance of PropertySetElement).
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AppearanceAssetId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ElementId of the AppearanceAssetElement.

Get: AppearanceAssetId(self: Material) -> ElementId

Set: AppearanceAssetId(self: Material) = value
"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the material.

Get: Color(self: Material) -> Color

Set: Color(self: Material) = value
"""

    CutPatternColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the material cut pattern.

Get: CutPatternColor(self: Material) -> Color

Set: CutPatternColor(self: Material) = value
"""

    CutPatternId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the FillPatternElement associated to cut views of faces with this material.

Get: CutPatternId(self: Material) -> ElementId

Set: CutPatternId(self: Material) = value
"""

    Glow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The option for glow.

Get: Glow(self: Material) -> bool

Set: Glow(self: Material) = value
"""

    MaterialCategory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the material category, e.g. 'Wood'

Get: MaterialCategory(self: Material) -> str

Set: MaterialCategory(self: Material) = value
"""

    MaterialClass = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the general material type, e.g. 'Wood.'

Get: MaterialClass(self: Material) -> str

Set: MaterialClass(self: Material) = value
"""

    Shininess = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The shininess of the material.

Get: Shininess(self: Material) -> int

Set: Shininess(self: Material) = value
"""

    Smoothness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The smoothness of the material.

Get: Smoothness(self: Material) -> int

Set: Smoothness(self: Material) = value
"""

    StructuralAssetId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ElementId of the structural PropertySetElement.

Get: StructuralAssetId(self: Material) -> ElementId

Set: StructuralAssetId(self: Material) = value
"""

    SurfacePatternColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the material surface pattern.

Get: SurfacePatternColor(self: Material) -> Color

Set: SurfacePatternColor(self: Material) = value
"""

    SurfacePatternId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the FillPatternElement associated to normal views of faces with this material.

Get: SurfacePatternId(self: Material) -> ElementId

Set: SurfacePatternId(self: Material) = value
"""

    ThermalAssetId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ElementId of the thermal PropertySetElement.

Get: ThermalAssetId(self: Material) -> ElementId

Set: ThermalAssetId(self: Material) = value
"""

    Transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The transparency of the material.

Get: Transparency(self: Material) -> int

Set: Transparency(self: Material) = value
"""

    UseRenderAppearanceForShading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to use the render appearance settings for shaded view appearance;
   false to use the material's color and transparency value for shaded view appearance.

Get: UseRenderAppearanceForShading(self: Material) -> bool

Set: UseRenderAppearanceForShading(self: Material) = value
"""



class MaterialAspect(Enum, IComparable, IFormattable, IConvertible):
    """
    A list of all material aspects that a material can store PropertySetElements for.
    
    enum MaterialAspect, values: Structural (0), Thermal (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Structural = None
    Thermal = None
    value__ = None


class MaterialFunctionAssignment(Enum, IComparable, IFormattable, IConvertible):
    """
    Used in class CompoundStructure to specify the function of a layer.
    
    enum MaterialFunctionAssignment, values: Finish1 (4), Finish2 (5), Insulation (3), Membrane (100), None (0), StructuralDeck (200), Structure (1), Substrate (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Finish1 = None
    Finish2 = None
    Insulation = None
    Membrane = None
    None = None
    StructuralDeck = None
    Structure = None
    Substrate = None
    value__ = None


class MaterialNode(RenderNode, IDisposable):
    """ This class represents a change of material during a model-exporting process. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def GetAppearance(self):
        """
        GetAppearance(self: MaterialNode) -> Asset
        
            Appearance properties associated with the material.
            Returns: An instance of a rendering material asset
        """
        pass

    def GetAppearanceOverride(self):
        """
        GetAppearanceOverride(self: MaterialNode) -> Asset
        
            Returns appearance properties that override the preset appearance of the 
             material.
        
            Returns: An instance of a rendering material asset, of null if there is no override.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color the material is being rendered at

Get: Color(self: MaterialNode) -> Color

"""

    Glossiness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The level of glossiness of the material

Get: Glossiness(self: MaterialNode) -> int

"""

    HasOverriddenAppearance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the default rendering appearance the material has is being overridden.

Get: HasOverriddenAppearance(self: MaterialNode) -> bool

"""

    MaterialId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Id of the element assocated with this material in the model.

Get: MaterialId(self: MaterialNode) -> ElementId

"""

    Smoothness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The level of smoothness of the material.

Get: Smoothness(self: MaterialNode) -> int

"""

    ThumbnailFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The path if a file that contains a thumbnail image of the material.

Get: ThumbnailFile(self: MaterialNode) -> str

"""

    Transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The value of transparency the material is being rendered with

Get: Transparency(self: MaterialNode) -> float

"""



class MaterialPropertyPathType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum class indicating kinds of paths which ExternalFileReferenceType.Material
       references can have.
    
    enum MaterialPropertyPathType, values: Bump (3), Cutouts (2), FinishBumps (4), General (0), ReliefPattern (5), Transparency (1), Weathering (6)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Bump = None
    Cutouts = None
    FinishBumps = None
    General = None
    ReliefPattern = None
    Transparency = None
    value__ = None
    Weathering = None


class MEPCalculationServerInfo(object, IDisposable):
    """
    a struct to hold the information about a MEP calucation servers
    
    MEPCalculationServerInfo(other: MEPCalculationServerInfo)
    MEPCalculationServerInfo(server: IExternalServer)
    MEPCalculationServerInfo()
    """
    def Dispose(self):
        """ Dispose(self: MEPCalculationServerInfo) """
        pass

    @staticmethod
    def GetMEPCalculationServerInfo(famInst):
        """
        GetMEPCalculationServerInfo(famInst: FamilyInstance) -> MEPCalculationServerInfo
        
            Gets a MEPCalculationServerInfo by family instance.
        
            famInst: The family instance.
            Returns: The MEPCalculationServerInfo.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: MEPCalculationServerInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, other: MEPCalculationServerInfo)
        __new__(cls: type, server: IExternalServer)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Description of the server.

Get: Description(self: MEPCalculationServerInfo) -> str

Set: Description(self: MEPCalculationServerInfo) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: MEPCalculationServerInfo) -> bool

"""

    ServerId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Id of the server.

Get: ServerId(self: MEPCalculationServerInfo) -> Guid

Set: ServerId(self: MEPCalculationServerInfo) = value
"""

    ServerName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Name of the server.

Get: ServerName(self: MEPCalculationServerInfo) -> str

Set: ServerName(self: MEPCalculationServerInfo) = value
"""


    PipeUseDefinitionOnTypeGUID = None


class MEPConnectorInfo(object, IDisposable):
    """ MEP connector information. """
    def Dispose(self):
        """ Dispose(self: MEPConnectorInfo) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: MEPConnectorInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsPrimary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if this is the primary connector.

Get: IsPrimary(self: MEPConnectorInfo) -> bool

"""

    IsSecondary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if this is the secondary connector.

Get: IsSecondary(self: MEPConnectorInfo) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: MEPConnectorInfo) -> bool

"""

    LinkedConnector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The linked connector or ll if there is no linked connector

Get: LinkedConnector(self: MEPConnectorInfo) -> Connector

"""



class MEPCurveType(HostObjAttributes, IDisposable):
    """ The base type class for MEP curves, such as ducts, pipes, cable trays and conduits. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Cross = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The default cross fitting of the MEP curve type.

Get: Cross(self: MEPCurveType) -> FamilySymbol

Set: Cross(self: MEPCurveType) = value
"""

    Elbow = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The default elbow fitting of the MEP curve type.

Get: Elbow(self: MEPCurveType) -> FamilySymbol

Set: Elbow(self: MEPCurveType) = value
"""

    MultiShapeTransition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The default multi shape transition fitting of the MEP curve type.

Get: MultiShapeTransition(self: MEPCurveType) -> FamilySymbol

Set: MultiShapeTransition(self: MEPCurveType) = value
"""

    PreferredJunctionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The preferred junction type of the MEP curve type.

Get: PreferredJunctionType(self: MEPCurveType) -> JunctionType

Set: PreferredJunctionType(self: MEPCurveType) = value
"""

    Roughness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The roughness of the MEP curve type.  For PipeTypes, please use Segment::Roughness

Get: Roughness(self: MEPCurveType) -> float

Set: Roughness(self: MEPCurveType) = value
"""

    RoutingPreferenceManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The RoutingPreferenceManager for the MEPCurveType

Get: RoutingPreferenceManager(self: MEPCurveType) -> RoutingPreferenceManager

"""

    Tap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The default tap fitting of the MEP curve type.

Get: Tap(self: MEPCurveType) -> FamilySymbol

Set: Tap(self: MEPCurveType) = value
"""

    Tee = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The default tee fitting of the MEP curve type.

Get: Tee(self: MEPCurveType) -> FamilySymbol

Set: Tee(self: MEPCurveType) = value
"""

    Transition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The default transition fitting of the MEP curve type.

Get: Transition(self: MEPCurveType) -> FamilySymbol

Set: Transition(self: MEPCurveType) = value
"""

    Union = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The default union fitting of the MEP curve type.

Get: Union(self: MEPCurveType) -> FamilySymbol

Set: Union(self: MEPCurveType) = value
"""



class MEPFamilyConnectorInfo(MEPConnectorInfo, IDisposable):
    """ MEP family connector information. """
    def Dispose(self):
        """ Dispose(self: MEPConnectorInfo, A_0: bool) """
        pass

    def GetAssociateFamilyParameterId(self, connectorParameterId):
        """
        GetAssociateFamilyParameterId(self: MEPFamilyConnectorInfo, connectorParameterId: ElementId) -> ElementId
        
            Gets the associate family parameter id of the specified connector parameter id.
        
            connectorParameterId: connectorParameterId is defined in the family connector element.
            Returns: Returns valid ElementId if the connectorParameterId associates to one family 
             parameter; otherwise returns invalid ElementId.
        """
        pass

    def GetConnectorParameterValue(self, connectorParameterId):
        """
        GetConnectorParameterValue(self: MEPFamilyConnectorInfo, connectorParameterId: ElementId) -> ParameterValue
        
            Gets the parameter value of the specified connector parameter id.
        
            connectorParameterId: connectorParameterId is defined in the family connector element.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: MEPConnectorInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class MEPModel(APIObject, IDisposable):
    """ Supports all MEP models that are persistent within the Autodesk Revit project """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AssignedElectricalSystems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the electrical systems this electrical panel currently is assigned to.

Get: AssignedElectricalSystems(self: MEPModel) -> ElectricalSystemSet

"""

    ConnectorManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the Connector Manager from this MEPModel.

Get: ConnectorManager(self: MEPModel) -> ConnectorManager

"""

    ElectricalSystems = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the electrical systems that are currently created using this MEPModel.

Get: ElectricalSystems(self: MEPModel) -> ElectricalSystemSet

"""



class MEPSize(object, IDisposable):
    """
    Stores the basic size information for an MEP duct, pipe, cable tray, or conduit.
    
    MEPSize(nominalDiameter: float, innerDiameter: float, outerDiameter: float, usedInSizeLists: bool, usedInSizing: bool)
    """
    def Dispose(self):
        """ Dispose(self: MEPSize) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: MEPSize, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, nominalDiameter, innerDiameter, outerDiameter, usedInSizeLists, usedInSizing):
        """ __new__(cls: type, nominalDiameter: float, innerDiameter: float, outerDiameter: float, usedInSizeLists: bool, usedInSizing: bool) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    InnerDiameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Inner diameter

Get: InnerDiameter(self: MEPSize) -> float

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: MEPSize) -> bool

"""

    NominalDiameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Nominal diameter

Get: NominalDiameter(self: MEPSize) -> float

"""

    OuterDiameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Outer diameter

Get: OuterDiameter(self: MEPSize) -> float

"""

    UsedInSizeLists = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether it is used in size lists.

Get: UsedInSizeLists(self: MEPSize) -> bool

"""

    UsedInSizing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether is used in sizing.

Get: UsedInSizing(self: MEPSize) -> bool

"""



class MEPSystem(Element, IDisposable):
    """ A system in the Autodesk Revit MEP product. """
    def Add(self, connectors):
        """
        Add(self: MEPSystem, connectors: ConnectorSet)
            Add elements into the system and connect them with the system using given 
             connectors.
        
        
            connectors: Connectors which are used to connect with the system.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def DivideSystem(self, ADoc):
        """
        DivideSystem(self: MEPSystem, ADoc: Document) -> ICollection[ElementId]
        
            Divide the phyisical networks in the system and create a new system for each 
             network.
        
        
            ADoc: The document.
            Returns: The id of new created systems.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetCriticalPathSectionNumbers(self):
        """
        GetCriticalPathSectionNumbers(self: MEPSystem) -> IList[int]
        
            Obtains a list of the critical path section numbers.
            Returns: The section numbers.
        """
        pass

    def getElementsInNetwork(self, *args): #cannot find CLR method
        """ getElementsInNetwork(self: MEPSystem) -> ElementSet """
        pass

    def getFlow(self, *args): #cannot find CLR method
        """ getFlow(self: MEPSystem, param: BuiltInParameter) -> float """
        pass

    def GetPhysicalNetworksNumber(self):
        """
        GetPhysicalNetworksNumber(self: MEPSystem) -> int
        
            Get the physical networks number in the system.
            Returns: The number of physical networks.
        """
        pass

    def GetSectionByIndex(self, index):
        """
        GetSectionByIndex(self: MEPSystem, index: int) -> MEPSection
        
            Get the section from the index.
        
            index: The index of the section in the system.
            Returns: The section.
        """
        pass

    def GetSectionByNumber(self, sectionNumber):
        """
        GetSectionByNumber(self: MEPSystem, sectionNumber: int) -> MEPSection
        
            Get the Section from section number
        
            sectionNumber: The Section number.
            Returns: The section. ll if the no section exists for the input section number.
        """
        pass

    def getStaticPressure(self, *args): #cannot find CLR method
        """ getStaticPressure(self: MEPSystem, param: BuiltInParameter) -> float """
        pass

    def IsSystemDividable(self):
        """
        IsSystemDividable(self: MEPSystem) -> bool
        
            Checks if the system is dividable. The system is dividable if there is more 
             than one physical network in the system. Currently, only HVAC and piping 
             systems support dividing.
        
            Returns: True if the system can be divided.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def Remove(self, *__args):
        """
        Remove(self: MEPSystem, connectors: ConnectorSet)
            Removes connectors from system.
        
            connectors: The connectors to be removed from the system.
        Remove(self: MEPSystem, elementIds: ICollection[ElementId])
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BaseEquipment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The base panel or equipment of the system.

Get: BaseEquipment(self: MEPSystem) -> FamilyInstance

"""

    BaseEquipmentConnector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The connector within base equipment which is used to connect with system.

Get: BaseEquipmentConnector(self: MEPSystem) -> Connector

"""

    ConnectorManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Connector manager of the system.

Get: ConnectorManager(self: MEPSystem) -> ConnectorManager

"""

    Elements = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Terminal elements in the system.

Get: Elements(self: MEPSystem) -> ElementSet

"""

    HasDesignParts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the system has one or more design parts.

Get: HasDesignParts(self: MEPSystem) -> bool

"""

    HasFabricationParts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the system has one or more fabrication parts.

Get: HasFabricationParts(self: MEPSystem) -> bool

"""

    HasPlaceholders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the system has one or more placeholders.

Get: HasPlaceholders(self: MEPSystem) -> bool

"""

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the system is empty or not.

Get: IsEmpty(self: MEPSystem) -> bool

"""

    IsMultipleNetwork = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the system is well connected or not. The flag will enable the "Divide System" button.

Get: IsMultipleNetwork(self: MEPSystem) -> bool

"""

    IsValid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the system is valid or not.
   atom AtomValidateSystem
   default false

Get: IsValid(self: MEPSystem) -> bool

"""

    PressureLossOfCriticalPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The total pressure loss of the sections in critical path.

Get: PressureLossOfCriticalPath(self: MEPSystem) -> float

"""

    SectionsCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of sections.

Get: SectionsCount(self: MEPSystem) -> int

"""



class MEPSystemClassification(Enum, IComparable, IFormattable, IConvertible):
    """
    This enumeration is used to classify MEP connectors and systems
       and drives certain behavior for a particular system type
    
    enum MEPSystemClassification, values: CableTrayConduit (32), Communication (14), CondensateDrain (15), Controls (13), DataCircuit (5), DomesticColdWater (20), DomesticHotWater (19), ExhaustAir (3), FireAlarm (11), FireProtectDry (24), FireProtectOther (26), FireProtectPreaction (25), FireProtectWet (23), Fitting (28), Global (29), NurseCall (12), OtherAir (4), OtherPipe (22), PowerBalanced (30), PowerCircuit (6), PowerUnBalanced (31), Recirculation (21), ReturnAir (2), ReturnHydronic (8), Sanitary (16), Security (10), Storm (18), SupplyAir (1), SupplyHydronic (7), SwitchTopology (27), Telephone (9), UndefinedSystemClassification (0), Vent (17)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CableTrayConduit = None
    Communication = None
    CondensateDrain = None
    Controls = None
    DataCircuit = None
    DomesticColdWater = None
    DomesticHotWater = None
    ExhaustAir = None
    FireAlarm = None
    FireProtectDry = None
    FireProtectOther = None
    FireProtectPreaction = None
    FireProtectWet = None
    Fitting = None
    Global = None
    NurseCall = None
    OtherAir = None
    OtherPipe = None
    PowerBalanced = None
    PowerCircuit = None
    PowerUnBalanced = None
    Recirculation = None
    ReturnAir = None
    ReturnHydronic = None
    Sanitary = None
    Security = None
    Storm = None
    SupplyAir = None
    SupplyHydronic = None
    SwitchTopology = None
    Telephone = None
    UndefinedSystemClassification = None
    value__ = None
    Vent = None


class MEPSystemType(ElementType, IDisposable):
    """ A system type in the Autodesk Revit MEP product. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Abbreviation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the abbreviation, the short name, for the system type

Get: Abbreviation(self: MEPSystemType) -> str

Set: Abbreviation(self: MEPSystemType) = value
"""

    CalculationLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the calculation level for the system type.

Get: CalculationLevel(self: MEPSystemType) -> SystemCalculationLevel

Set: CalculationLevel(self: MEPSystemType) = value
"""

    LineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the color that should override the line color for all components in the system.

Get: LineColor(self: MEPSystemType) -> Color

Set: LineColor(self: MEPSystemType) = value
"""

    LinePatternId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the line pattern color that should override the line color for all components in the system.

Get: LinePatternId(self: MEPSystemType) -> ElementId

Set: LinePatternId(self: MEPSystemType) = value
"""

    LineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the weight that should override the line weight for all components in the system.

Get: LineWeight(self: MEPSystemType) -> int

Set: LineWeight(self: MEPSystemType) = value
"""

    MaterialId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the material id that should override the material for all components in the system.

Get: MaterialId(self: MEPSystemType) -> ElementId

Set: MaterialId(self: MEPSystemType) = value
"""

    SystemClassification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the classification for the system type

Get: SystemClassification(self: MEPSystemType) -> MEPSystemClassification

"""



class Mesh(GeometryObject, IDisposable):
    """ A triangular mesh. """
    def Dispose(self):
        """ Dispose(self: Mesh, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    MaterialElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Element ID of the material from which this mesh is composed.

Get: MaterialElementId(self: Mesh) -> ElementId

"""

    NumTriangles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of triangles that the mesh contains.

Get: NumTriangles(self: Mesh) -> int

"""

    Vertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves all vertices used to define this mesh. Intended for indexed access.

Get: Vertices(self: Mesh) -> IList[XYZ]

"""



class MeshFromGeometryOperationIssue(Enum, IComparable, IFormattable, IConvertible):
    """
    Issues, which can be encountered while building a mesh as a
       fallback for geometrical operations.
    
    enum MeshFromGeometryOperationIssue, values: AllFine (0), CurveLoopsWithoutCurvesInInput (4), EmptyCurveLoopsInInput (3), InputCurveLoopProblemWithFallback (6), InputCurveLoopWrongOpenFlag (7), InternalError (12), InternalMissingError (11), InternalUtilityError (10), MissingCurveLoopsInInput (2), MissingCurvesInInputLoop (9), NonContinuousInputCurveLoop (8), NonPlanarProfileLoop (5), NotSetYet (13), NoUsableCurveLoopsInInput (1), NumberOfIssueTypes (14)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AllFine = None
    CurveLoopsWithoutCurvesInInput = None
    EmptyCurveLoopsInInput = None
    InputCurveLoopProblemWithFallback = None
    InputCurveLoopWrongOpenFlag = None
    InternalError = None
    InternalMissingError = None
    InternalUtilityError = None
    MissingCurveLoopsInInput = None
    MissingCurvesInInputLoop = None
    NonContinuousInputCurveLoop = None
    NonPlanarProfileLoop = None
    NotSetYet = None
    NoUsableCurveLoopsInInput = None
    NumberOfIssueTypes = None
    value__ = None


class MeshFromGeometryOperationResult(object, IDisposable):
    """
    Describes what TessellatedShapeBuilder has
       built.
    """
    def Dispose(self):
        """ Dispose(self: MeshFromGeometryOperationResult) """
        pass

    def GetIssues(self):
        """
        GetIssues(self: MeshFromGeometryOperationResult) -> IList[MeshFromGeometryOperationIssue]
        
            Returns the array of issues encountered while building a mesh.
            Returns: Array of issues encountered while building a mesh.
        """
        pass

    def GetMesh(self):
        """
        GetMesh(self: MeshFromGeometryOperationResult) -> Mesh
        
            This returns a valid mesh only for the first call. Later calls
           will throw 
             an exception as the mesh is no longer valid in this object.
        
            Returns: Mesh which built.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: MeshFromGeometryOperationResult, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    HasInvalidData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the provided data for which this result was
   obtained were internally inconsistent and could not be
   used in its entirety. For example, for extrusion
   operation, profile loops were degenerate
   or improperly oriented with respect to the extrsuion
   direction.

Get: HasInvalidData(self: MeshFromGeometryOperationResult) -> bool

"""

    IsMeshAvailable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Shows whether the result still contains the mesh
   which was constructed, if any, or whether it has been
   relinquished by 'getMesh'.
   The former is true, the later is false.

Get: IsMeshAvailable(self: MeshFromGeometryOperationResult) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: MeshFromGeometryOperationResult) -> bool

"""

    Tessellated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether while constructing a mesh, it was necessary
   to extrude polylines instead of non-linear curves
   from the profile loops.

Get: Tessellated(self: MeshFromGeometryOperationResult) -> bool

"""



class MeshTriangle(object):
    """ One triangle of a mesh. """

class ModelCurve(CurveElement, IDisposable):
    """ A model element that exists in 3D space and is visible in all views of a Revit project. """
    def ChangeToReferenceLine(self):
        """
        ChangeToReferenceLine(self: ModelCurve)
            Changes this curve to a reference curve.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetVisibility(self):
        """
        GetVisibility(self: ModelCurve) -> FamilyElementVisibility
        
            Gets the visibility for the model curve in a family document.
            Returns: A copy of visibility settings for the model curve in a family document.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetVisibility(self, visibility):
        """
        SetVisibility(self: ModelCurve, visibility: FamilyElementVisibility)
            Sets the visibility for the model curve in a family document.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsReferenceLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if this curve is a reference curve.

Get: IsReferenceLine(self: ModelCurve) -> bool

"""

    Subcategory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The subcategory.

Get: Subcategory(self: ModelCurve) -> GraphicsStyle

Set: Subcategory(self: ModelCurve) = value
"""

    TrussCurveType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The truss curve type of this model curve.

Get: TrussCurveType(self: ModelCurve) -> TrussCurveType

Set: TrussCurveType(self: ModelCurve) = value
"""



class ModelArc(ModelCurve, IDisposable):
    """ Represents a ModelArc within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ModelCurveArrArray(APIObject, IDisposable, IEnumerable):
    """
    An array that can contain any type of object.
    
    ModelCurveArrArray()
    """
    def Append(self, item):
        """ Append(self: ModelCurveArrArray, item: ModelCurveArray) """
        pass

    def Clear(self):
        """
        Clear(self: ModelCurveArrArray)
            Removes every item from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ModelCurveArrArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ModelCurveArrArray) -> ModelCurveArrArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ModelCurveArrArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """ Insert(self: ModelCurveArrArray, item: ModelCurveArray, index: int) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ModelCurveArrArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ModelCurveArrArray) -> ModelCurveArrArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: ModelCurveArrArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the array.

Get: Size(self: ModelCurveArrArray) -> int

"""



class ModelCurveArrArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a array.
    
    ModelCurveArrArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: ModelCurveArrArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ModelCurveArrArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ModelCurveArrArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: ModelCurveArrArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ModelCurveArrArrayIterator) -> object

"""



class ModelCurveArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains model curves.
    
    ModelCurveArray()
    """
    def Append(self, item):
        """
        Append(self: ModelCurveArray, item: ModelCurve)
            Add the model curve to the end of the array.
        
            item: The model curve to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: ModelCurveArray)
            Removes every model curve from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ModelCurveArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ModelCurveArray) -> ModelCurveArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ModelCurveArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: ModelCurveArray, item: ModelCurve, index: int)
            Insert the specified model curve into the array.
        
            item: The model curve to be inserted into the array.
            index: The model curve will be inserted before this index.
            Returns: Returns whether the model curve was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ModelCurveArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ModelCurveArray) -> ModelCurveArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: ModelCurveArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of model curves that are in the array.

Get: Size(self: ModelCurveArray) -> int

"""



class ModelCurveArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a model curve array.
    
    ModelCurveArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: ModelCurveArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ModelCurveArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ModelCurveArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: ModelCurveArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ModelCurveArrayIterator) -> object

"""



class ModelEllipse(ModelCurve, IDisposable):
    """ Represents a ModelEllipse within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ModelHermiteSpline(ModelCurve, IDisposable):
    """ Represents a ModelHermiteSpline within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ModelLine(ModelCurve, IDisposable):
    """ Represents a ModelLine within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ModelNurbSpline(ModelCurve, IDisposable):
    """ Represents a ModelNurbSpline within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ModelPathUtils(object):
    """ Utility functions using ModelPaths """
    @staticmethod
    def ConvertModelPathToUserVisiblePath(path):
        """
        ConvertModelPathToUserVisiblePath(path: ModelPath) -> str
        
            Gets a string version of the path of a given ModelPath.
        
            path: A ModelPath representing a file path or a server path.
            Returns: The path in string form
        """
        pass

    @staticmethod
    def ConvertUserVisiblePathToModelPath(strPath):
        """
        ConvertUserVisiblePathToModelPath(strPath: str) -> ModelPath
        
            Converts a user-visible path (string) to a ModelPath.
        
            strPath: The path in string form, like RSN://{HostNodeName}/school/project.rvt
            Returns: A ModelPath representing either a server or file path.
        """
        pass

    @staticmethod
    def IsValidUserVisibleFullServerPath(strPath):
        """
        IsValidUserVisibleFullServerPath(strPath: str) -> bool
        
            Determines whether the given string represents a valid
           server path.
        
            strPath: The path, in string form
            Returns: True if the given path is a valid server path, false otherwise.
        """
        pass

    __all__ = [
        'ConvertModelPathToUserVisiblePath',
        'ConvertUserVisiblePathToModelPath',
        'IsValidUserVisibleFullServerPath',
    ]


class ModelText(Element, IDisposable):
    """ A model text element in an Autodesk Revit family document. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetVisibility(self):
        """
        GetVisibility(self: ModelText) -> FamilyElementVisibility
        
            Gets the visibility for the model text in a family document.
            Returns: A copy of visibility settings for the model text in a family document.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetVisibility(self, visibility):
        """
        SetVisibility(self: ModelText, visibility: FamilyElementVisibility)
            Sets the visibility for the model text in a family document.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Depth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The depth of the model text.

Get: Depth(self: ModelText) -> float

Set: Depth(self: ModelText) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The horizontal alignment.

Get: HorizontalAlignment(self: ModelText) -> HorizontalAlign

Set: HorizontalAlignment(self: ModelText) = value
"""

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property is used to find the physical location of an instance within project.

Get: Location(self: ModelText) -> Location

"""

    ModelTextType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type for the model text.

Get: ModelTextType(self: ModelText) -> ModelTextType

Set: ModelTextType(self: ModelText) = value
"""

    Subcategory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The subcategory.

Get: Subcategory(self: ModelText) -> Category

Set: Subcategory(self: ModelText) = value
"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text string in the model text.

Get: Text(self: ModelText) -> str

Set: Text(self: ModelText) = value
"""



class ModelTextType(ElementType, IDisposable):
    """ A model text type symbol in the Autodesk Revit Family document. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ModelUpdatesStatus(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates whether an element in the current model has additional user changes in the central model.
    
    enum ModelUpdatesStatus, values: CurrentWithCentral (0), DeletedInCentral (2), NotYetInCentral (1), UpdatedInCentral (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CurrentWithCentral = None
    DeletedInCentral = None
    NotYetInCentral = None
    UpdatedInCentral = None
    value__ = None


class ModifierType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing options to appear in the exported layer name.
    
    enum ModifierType, values: AnalyzesAs (17), Category (0), Custom1 (1), Custom2 (2), Custom3 (3), DomainType (19), FabricationService (20), FireRating (4), Function (5), Level (6), PhaseCreated (7), PhaseDemolished (8), PhaseStatus (9), StructuralMaterialType (10), StructuralUsage (11), SystemClassification (18), SystemName (12), SystemType (13), Underlay (14), UnknownType (-1), ViewType (15), Workset (16)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AnalyzesAs = None
    Category = None
    Custom1 = None
    Custom2 = None
    Custom3 = None
    DomainType = None
    FabricationService = None
    FireRating = None
    Function = None
    Level = None
    PhaseCreated = None
    PhaseDemolished = None
    PhaseStatus = None
    StructuralMaterialType = None
    StructuralUsage = None
    SystemClassification = None
    SystemName = None
    SystemType = None
    Underlay = None
    UnknownType = None
    value__ = None
    ViewType = None
    Workset = None


class Mullion(FamilyInstance, IDisposable):
    """ Represents a CurtainGrid within Autodesk Revit. """
    def BreakMullion(self):
        """
        BreakMullion(self: Mullion)
            This method is used to break the current Mullion at ends with its neighboring 
             mullions.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def JoinMullion(self):
        """
        JoinMullion(self: Mullion)
            This method is used to control the join condition the current Mullion with its 
             neighboring mullions.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    LocationCurve = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This method get the curve location of the current Mullion.

Get: LocationCurve(self: Mullion) -> Curve

"""

    Lock = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get - to get whether the Mullion line is locked.
         Set - Lock/unlock the Mullion.

Get: Lock(self: Mullion) -> bool

Set: Lock(self: Mullion) = value
"""

    Lockable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get - to get whether the Mullion can be lock or unlock.

Get: Lockable(self: Mullion) -> bool

"""

    MullionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The MullionType style of this Mullion. 
Get - to access type of mullion
Set - change type of mullion. If the mullion is locked, InvalidOperationException exception will be thrown.

Get: MullionType(self: Mullion) -> MullionType

Set: MullionType(self: Mullion) = value
"""



class MullionType(FamilySymbol, IDisposable):
    """ An object that represents a mullion type. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class MullionTypeSet(APIObject, IDisposable, IEnumerable):
    """
    A set that contains mullion types.
    
    MullionTypeSet()
    """
    def Clear(self):
        """
        Clear(self: MullionTypeSet)
            Removes every mullion type from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: MullionTypeSet, item: MullionType) -> bool
        
            Tests for the existence of a mullion type within the set.
        
            item: The mullion type to be searched for.
            Returns: The Contains method returns True if the mullion type is within the set, 
             otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: MullionTypeSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: MullionTypeSet, item: MullionType) -> int
        
            Removes a specified mullion type from the set.
        
            item: The mullion type to be erased.
            Returns: The number of mullion types that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: MullionTypeSet) -> MullionTypeSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: MullionTypeSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: MullionTypeSet, item: MullionType) -> bool
        
            Insert the specified mullion type into the set.
        
            item: The mullion type to be inserted into the set.
            Returns: Returns whether the mullion type was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: MullionTypeSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: MullionTypeSet) -> MullionTypeSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: MullionTypeSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of mullion types that are in the set.

Get: Size(self: MullionTypeSet) -> int

"""



class MullionTypeSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a mullion type set.
    
    MullionTypeSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: MullionTypeSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: MullionTypeSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: MullionTypeSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: MullionTypeSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: MullionTypeSetIterator) -> object

"""



class MultiReferenceAnnotation(Element, IDisposable):
    """ Multi-reference annotations are annotations pointing to more than one reference, consisting of a dimension and associated tag. """
    @staticmethod
    def AreReferencesValidForLinearDimension(document, ownerViewId, options):
        """
        AreReferencesValidForLinearDimension(document: Document, ownerViewId: ElementId, options: MultiReferenceAnnotationOptions) -> bool
        
            If the DimensionStyleType is Linear, validates that the references are valid
          
              for an aligned multi-reference annotation.
        
        
            document: The document for the multi-reference annotation.
            ownerViewId: The view in which the multi-reference annotation will appear.
            options: Options containing the references which the dimension will witness.
            Returns: True DimensionStyleType does not equal Linear or
           if an aligned 
             multi-reference annotation can be created from the references.
        """
        pass

    @staticmethod
    def AreReferencesValidForLinearFixedDimension(document, ownerViewId, options):
        """
        AreReferencesValidForLinearFixedDimension(document: Document, ownerViewId: ElementId, options: MultiReferenceAnnotationOptions) -> bool
        
            If the DimensionStyleType is LinearFixed, validates that the references are 
             valid
           for an aligned multi-reference annotation.
        
        
            document: The document for the multi-reference annotation.
            ownerViewId: The view in which the multi-reference annotation will appear.
            options: Options containing the references which the dimension will witness.
            Returns: True DimensionStyleType does not equal LinearFixed or
           if an aligned 
             multi-reference annotation can be created from the references.
        """
        pass

    @staticmethod
    def Create(document, ownerViewId, options):
        """
        Create(document: Document, ownerViewId: ElementId, options: MultiReferenceAnnotationOptions) -> MultiReferenceAnnotation
        
            Creates a new MultiReferenceAnnotation.
        
            document: The document to which the new MultiReferenceAnnotation will be added.
            ownerViewId: The view in which the multi-reference annotation will appear.
            options: The creation options for the new MultiReferenceAnnotation.
            Returns: The new MultiReferenceAnnotation.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def IsLinearFixedDimensionDirectionValid(document, viewId, options):
        """
        IsLinearFixedDimensionDirectionValid(document: Document, viewId: ElementId, options: MultiReferenceAnnotationOptions) -> bool
        
            If the DimensionStyleType is LinearFixed, this function verifies that the 
             dimension line direction
           matches either the view's vertical or horizontal 
             direction.
        
        
            document: The document for the view.
            viewId: The view in which the dimension line direction will be tested.
            options: Options containing the DimensionStyleType and dimension line direction to test.
            Returns: True if the DimensionStyleType is LinearFixed and the dimension line direction 
             can be used in the view.
           True if the DimensionStyleType is not LinearFixed.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    DimensionId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The child dimension owned by this multi-reference annotation.

Get: DimensionId(self: MultiReferenceAnnotation) -> ElementId

"""

    TagId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The child IndependentTag owned by this multi-reference annotation.

Get: TagId(self: MultiReferenceAnnotation) -> ElementId

"""



class MultiReferenceAnnotationOptions(object, IDisposable):
    """
    Options which control the creation of MultiReferenceAnnotations.
    
    MultiReferenceAnnotationOptions(multiReferenceAnnotationType: MultiReferenceAnnotationType)
    """
    def Dispose(self):
        """ Dispose(self: MultiReferenceAnnotationOptions) """
        pass

    def ElementsMatchReferenceCategory(self, elements):
        """ ElementsMatchReferenceCategory(self: MultiReferenceAnnotationOptions, elements: ICollection[ElementId]) -> bool """
        pass

    def GetElementsToDimension(self):
        """
        GetElementsToDimension(self: MultiReferenceAnnotationOptions) -> ICollection[ElementId]
        
            Gets the elements which the dimension will witness.
            Returns: The elements which the dimension will witness.
        """
        pass

    def IsAllowedDimensionStyleType(self, dimensionStyleType):
        """
        IsAllowedDimensionStyleType(self: MultiReferenceAnnotationOptions, dimensionStyleType: DimensionStyleType) -> bool
        
            Only Linear and LinearFixed dimension style types are allowed for new 
             MultiReferenceAnnotations.
        
        
            dimensionStyleType: The dimension style type to test.
            Returns: True if the type is allowed.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: MultiReferenceAnnotationOptions, disposing: bool) """
        pass

    def SetElementsToDimension(self, elementsToDimension):
        """ SetElementsToDimension(self: MultiReferenceAnnotationOptions, elementsToDimension: ICollection[ElementId]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, multiReferenceAnnotationType):
        """ __new__(cls: type, multiReferenceAnnotationType: MultiReferenceAnnotationType) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DimensionLineDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The direction vector of the dimension line.

Get: DimensionLineDirection(self: MultiReferenceAnnotationOptions) -> XYZ

Set: DimensionLineDirection(self: MultiReferenceAnnotationOptions) = value
"""

    DimensionLineOrigin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The origin point for the dimension line.

Get: DimensionLineOrigin(self: MultiReferenceAnnotationOptions) -> XYZ

Set: DimensionLineOrigin(self: MultiReferenceAnnotationOptions) = value
"""

    DimensionPlaneNormal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The normal vector to the dimension plane.

Get: DimensionPlaneNormal(self: MultiReferenceAnnotationOptions) -> XYZ

Set: DimensionPlaneNormal(self: MultiReferenceAnnotationOptions) = value
"""

    DimensionStyleType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The dimension style type to be used by the new MultiReferenceAnnotation.

Get: DimensionStyleType(self: MultiReferenceAnnotationOptions) -> DimensionStyleType

Set: DimensionStyleType(self: MultiReferenceAnnotationOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: MultiReferenceAnnotationOptions) -> bool

"""

    MultiReferenceAnnotationType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The MultiReferenceAnnotationType to be used by the new MultiReferenceAnnotation.

Get: MultiReferenceAnnotationType(self: MultiReferenceAnnotationOptions) -> MultiReferenceAnnotationType

"""

    TagHasLeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """When true the tag will be created with an attached leader.
   When false the tag will be created without a leader.

Get: TagHasLeader(self: MultiReferenceAnnotationOptions) -> bool

Set: TagHasLeader(self: MultiReferenceAnnotationOptions) = value
"""

    TagHeadPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position for the tag's head.

Get: TagHeadPosition(self: MultiReferenceAnnotationOptions) -> XYZ

Set: TagHeadPosition(self: MultiReferenceAnnotationOptions) = value
"""



class MultiReferenceAnnotationType(ElementType, IDisposable):
    """ The type for MultiReferenceAnnotation. """
    @staticmethod
    def CreateDefault(document):
        """
        CreateDefault(document: Document) -> MultiReferenceAnnotationType
        
            Creates the first MultiReferenceAnnotationType element and adds it to the 
             document.
        
        
            document: The document to be modified.
            Returns: The new MultiReferenceAnnotationType element.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetAllowedTagCategory(self):
        """
        GetAllowedTagCategory(self: MultiReferenceAnnotationType) -> ElementId
        
            Returns the category ID for the tag types which can be used by this 
             multi-reference annotation type.
        
            Returns: The allowed tag category ID.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def IsAllowedDimensionStyle(self, dimensionStyleId):
        """
        IsAllowedDimensionStyle(self: MultiReferenceAnnotationType, dimensionStyleId: ElementId) -> bool
        
            Checks if the dimension style can be used with multi-reference annotations.
        
            dimensionStyleId: The dimension style to check.
            Returns: True if the dimension style can be used by multi-reference annotations.
        """
        pass

    def IsAllowedReferenceCategory(self, referenceCategoryId):
        """
        IsAllowedReferenceCategory(self: MultiReferenceAnnotationType, referenceCategoryId: ElementId) -> bool
        
            Checks if the reference category can be used with multi-reference annotations.
        
            referenceCategoryId: The reference category to check.
            Returns: True when the reference category can be used by multi-reference annotations.
        """
        pass

    @staticmethod
    def IsAllowedTagCategory(tagCategoryId):
        """
        IsAllowedTagCategory(tagCategoryId: ElementId) -> bool
        
            Returns true if tag types belonging to this category can be used with 
             multi-reference annotation types.
        
        
            tagCategoryId: The tag category to test.
        """
        pass

    def IsAllowedTagType(self, tagTypeId):
        """
        IsAllowedTagType(self: MultiReferenceAnnotationType, tagTypeId: ElementId) -> bool
        
            Checks if the tag type can be assigned to this multi-reference annotation type.
        
            tagTypeId: The tag type to test.
            Returns: True if the tag type exclusively tags elements from the multi-reference 
             annotation's reference category.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    DimensionStyleId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The dimension style which will be used by the child dimension of the multi-reference annotation.

Get: DimensionStyleId(self: MultiReferenceAnnotationType) -> ElementId

Set: DimensionStyleId(self: MultiReferenceAnnotationType) = value
"""

    GroupTagHeads = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Controls if parameter values for the annotation's references will be reported in one grouped tag head
   or if every reference will get its own tag head.

Get: GroupTagHeads(self: MultiReferenceAnnotationType) -> bool

Set: GroupTagHeads(self: MultiReferenceAnnotationType) = value
"""

    ReferenceCategoryId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The category of elements to which this annotation applies.

Get: ReferenceCategoryId(self: MultiReferenceAnnotationType) -> ElementId

"""

    ShowDimensionText = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Controls if text from the multi-reference annotation's dimension will be shown.

Get: ShowDimensionText(self: MultiReferenceAnnotationType) -> bool

Set: ShowDimensionText(self: MultiReferenceAnnotationType) = value
"""

    TagTypeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The tag type which will be used by the child tag the multi-reference annotation.

Get: TagTypeId(self: MultiReferenceAnnotationType) -> ElementId

Set: TagTypeId(self: MultiReferenceAnnotationType) = value
"""



class MultiSegmentGrid(Element, IDisposable):
    """
    This element acts as a multi-segmented Grid. The individual grids associated to
       the MultiSegmentGrid behave as a single unit and all share the same text. They inherit
       their type (GridType) from the MultiSegmentGrid.
    """
    @staticmethod
    def AreGridsInSameMultiSegmentGrid(grid1, grid2):
        """
        AreGridsInSameMultiSegmentGrid(grid1: Grid, grid2: Grid) -> bool
        
            Determine whether two Grids are members of the same GridChain.
        
            grid1: A Grid.
            grid2: A Grid.
            Returns: Returns true if both of the specified Grids are associated to the same 
             MultiSegmentGrid,
           i.e. getMultiSegementGridId returns the same valid 
             element id for both Grids.
        """
        pass

    @staticmethod
    def Create(document, typeId, curveLoop, sketchPlaneId):
        """
        Create(document: Document, typeId: ElementId, curveLoop: CurveLoop, sketchPlaneId: ElementId) -> ElementId
        
            Create a MultiSegmentGrid element from the specified curve loop.
        
            document: The document in which to create the MultiSegmentGrid.
            typeId: Element id of a GridType element.
            curveLoop: An open curve loop consisting of lines and arcs.
            sketchPlaneId: Element id of a SketchPlane for the curves elements that will be created from 
             the curveLoop.
        
            Returns: The element id of the new MultiSegmentGrid element.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetGridIds(self):
        """
        GetGridIds(self: MultiSegmentGrid) -> ICollection[ElementId]
        
            Get the element ids of the Grids that make up this MultiSegmentGrid.
            Returns: Element ids of Grids that make up this MultiSegmentGrid.
        """
        pass

    @staticmethod
    def GetMultiSegementGridId(grid):
        """
        GetMultiSegementGridId(grid: Grid) -> ElementId
        
            Retrieve the element id of the MultiSegmentGrid of which the specified Grid is 
             a member.
        
        
            grid: A Grid.
            Returns: The element id of the associated GridChain. If the Grid is not associated to a 
             GridChain,
           this will return invalidElementId.
        """
        pass

    @staticmethod
    def IsValidCurveLoop(curveLoop):
        """
        IsValidCurveLoop(curveLoop: CurveLoop) -> bool
        
            Identifies whether the specified curve loop is valid for creation of a 
             MultiSegmentGrid.
        
        
            curveLoop: The curve loop.
            Returns: True if the curve loop is an open curve loop consisting of lines and arcs, and 
             false otherwise.
        """
        pass

    @staticmethod
    def IsValidSketchPlaneId(document, elemId):
        """
        IsValidSketchPlaneId(document: Document, elemId: ElementId) -> bool
        
            Identifies whether provided element id corresponds to a SketchPlane that is 
             valid for GridChain creation.
        
        
            document: The document.
            elemId: Element id.
            Returns: True if elemId is the element id of a horizontal SketchPlane.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """name shared by grids in this MultiSegmentGrid

Get: Text(self: MultiSegmentGrid) -> str

Set: Text(self: MultiSegmentGrid) = value
"""



class NamingUtils(object):
    """ A collection of utilities related to element naming. """
    @staticmethod
    def CompareNames(nameA, nameB):
        """
        CompareNames(nameA: str, nameB: str) -> int
        
            Compares two object name strings using Revit's comparison rules.
        
            nameA: The first object name to compare.
            nameB: The second object name to compare.
            Returns: An integer indicating the result of the lexical comparison between the two 
             names.
           Less than zero if nameA comes before nameB in the ordering, zero if 
             nameA and nameB are equivalent,
           and greater than zero if nameA is comes 
             after nameB in the ordering.
        """
        pass

    @staticmethod
    def IsValidName(string):
        """
        IsValidName(string: str) -> bool
        
            Identifies if the input string is valid for use as an object name in Revit.
        
            string: The name to validate.
            Returns: True if the name is valid for use as a name in Revit, false if it contains 
             prohibited characters and is invalid.
        """
        pass

    __all__ = [
        'CompareNames',
        'IsValidName',
    ]


class NavisworksCoordinates(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible Coordinates of Navisworks Exporter.
    
    enum NavisworksCoordinates, values: Internal (0), Shared (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Internal = None
    Shared = None
    value__ = None


class NavisworksExportOptions(object, IDisposable):
    """
    Options which controls the Navisworks export.
    
    NavisworksExportOptions()
    """
    def Dispose(self):
        """ Dispose(self: NavisworksExportOptions) """
        pass

    def GetSelectedElementIds(self):
        """
        GetSelectedElementIds(self: NavisworksExportOptions) -> ICollection[ElementId]
        
            Returns the element ids of the elements to export. Empty by default.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: NavisworksExportOptions, disposing: bool) """
        pass

    def SetSelectedElementIds(self, ids):
        """ SetSelectedElementIds(self: NavisworksExportOptions, ids: ICollection[ElementId]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ConvertElementProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to convert element properties, false otherwise.
   Default value is false.

Get: ConvertElementProperties(self: NavisworksExportOptions) -> bool

Set: ConvertElementProperties(self: NavisworksExportOptions) = value
"""

    Coordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Options which specifies the coordinates of Navisworks Exporter.
   Default value is Shared.

Get: Coordinates(self: NavisworksExportOptions) -> NavisworksCoordinates

Set: Coordinates(self: NavisworksExportOptions) = value
"""

    DivideFileIntoLevels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to divide file into levels, false otherwise.
   Default value is true.

Get: DivideFileIntoLevels(self: NavisworksExportOptions) -> bool

Set: DivideFileIntoLevels(self: NavisworksExportOptions) = value
"""

    ExportElementIds = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to export Revit element ids, false to skip these values.
   Default value is true.

Get: ExportElementIds(self: NavisworksExportOptions) -> bool

Set: ExportElementIds(self: NavisworksExportOptions) = value
"""

    ExportLinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to export Revit links found in the main model, false to skip links.
   Default value is false.

Get: ExportLinks(self: NavisworksExportOptions) -> bool

Set: ExportLinks(self: NavisworksExportOptions) = value
"""

    ExportParts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to export Revit part elements, false to export the original parent elements.
   Default value is false.

Get: ExportParts(self: NavisworksExportOptions) -> bool

Set: ExportParts(self: NavisworksExportOptions) = value
"""

    ExportRoomAsAttribute = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to export data for each room converts into a single shared room attribute, false otherwise.
   Default value is true.

Get: ExportRoomAsAttribute(self: NavisworksExportOptions) -> bool

Set: ExportRoomAsAttribute(self: NavisworksExportOptions) = value
"""

    ExportRoomGeometry = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to export Revit room geometry, false otherwise.
   Default value is true.

Get: ExportRoomGeometry(self: NavisworksExportOptions) -> bool

Set: ExportRoomGeometry(self: NavisworksExportOptions) = value
"""

    ExportScope = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Options which specifies the export scope of Navisworks Exporter.
   Default value is Model.

Get: ExportScope(self: NavisworksExportOptions) -> NavisworksExportScope

Set: ExportScope(self: NavisworksExportOptions) = value
"""

    ExportUrls = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to export URL parameters, false otherwise.
   Default value is true.

Get: ExportUrls(self: NavisworksExportOptions) -> bool

Set: ExportUrls(self: NavisworksExportOptions) = value
"""

    FindMissingMaterials = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the file exporter looks for a match for the materials missing from the export, false otherwise.
   Default value is true.

Get: FindMissingMaterials(self: NavisworksExportOptions) -> bool

Set: FindMissingMaterials(self: NavisworksExportOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: NavisworksExportOptions) -> bool

"""

    Parameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Options which specifies the parameter conversion of Navisworks Exporter.
   Default value is All.

Get: Parameters(self: NavisworksExportOptions) -> NavisworksParameters

Set: Parameters(self: NavisworksExportOptions) = value
"""

    ViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element id of the view to export. InvalidElementId by default. Used only when ExportScope = View.

Get: ViewId(self: NavisworksExportOptions) -> ElementId

Set: ViewId(self: NavisworksExportOptions) = value
"""



class NavisworksExportScope(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible "Element Scopes" of Navisworks Exporter.
    
    enum NavisworksExportScope, values: Model (0), SelectedElements (2), View (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Model = None
    SelectedElements = None
    value__ = None
    View = None


class NavisworksParameters(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible "Parameter conversions" of Navisworks Exporter.
    
    enum NavisworksParameters, values: All (2), Elements (1), None (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    All = None
    Elements = None
    None = None
    value__ = None


class NestedFamilyTypeReference(Element, IDisposable):
    """ A proxy element representing a nested family type. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CategoryId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Category Id of the referenced family

Get: CategoryId(self: NestedFamilyTypeReference) -> ElementId

"""

    FamilyName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Name of the referenced family

Get: FamilyName(self: NestedFamilyTypeReference) -> str

"""

    TypeName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Type of the referenced family

Get: TypeName(self: NestedFamilyTypeReference) -> str

"""



class NullParameterValue(ParameterValue, IDisposable):
    """
    A class that represent an empty (null) value of a parameter element.
    
    NullParameterValue()
    """
    def Dispose(self):
        """ Dispose(self: ParameterValue, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ParameterValue, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class NumberingSchema(Element, IDisposable):
    """ A class to support assigning numbers to elements of a particular kind for the purpose of tagging and scheduling them. """
    def AppendSequence(self, fromPartition, toPartition):
        """
        AppendSequence(self: NumberingSchema, fromPartition: str, toPartition: str)
            Appends all elements of one numbering sequence to the end of another sequence.
        
            fromPartition: Name of the partition that determines which numbering sequence to append.
           
             The sequence must exist already, otherwise an exception will be thrown.
        
            toPartition: Name of a partition into which the source sequence is going to be appended.
           
             The sequence must exist already, otherwise an exception will be thrown.
        """
        pass

    def AssignElementsToSequence(self, elementIds, partitionName):
        """ AssignElementsToSequence(self: NumberingSchema, elementIds: ISet[ElementId], partitionName: str) """
        pass

    def ChangeNumber(self, partition, fromNumber, toNumber):
        """
        ChangeNumber(self: NumberingSchema, partition: str, fromNumber: int, toNumber: int) -> IList[ElementId]
        
            Replaces an existing number with a new one (that does not exist yet).
        
            partition: Name of the partition that identifies the sequence containing the number to be 
             changed.
        
            fromNumber: Number to be changed; there must already be an element with that number in the 
             sequence.
        
            toNumber: Number to change to; no element must have this number yet in the sequence.
            Returns: A collection of elements affected by the change of the number
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetMinimumNumberOfDigits(document):
        """
        GetMinimumNumberOfDigits(document: Document) -> int
        
            Returns the minimum number of digits to be used for formating
           the Number 
             parameter of all enumerable elements of the given document.
        
        
            document: The document this value is going to be applied to.
            Returns: The current number of formatting digits
        """
        pass

    @staticmethod
    def GetNumberingSchema(document, schemaType):
        """
        GetNumberingSchema(document: Document, schemaType: NumberingSchemaType) -> NumberingSchema
        
            Returns an instance of the specified Numbering Schema in the given document.
        
            document: A document to get the numbering schema from.
            schemaType: The type of a built-in schema to get.
            Returns: Instance of the specified schema.
        """
        pass

    def GetNumberingSequences(self):
        """
        GetNumberingSequences(self: NumberingSchema) -> IList[str]
        
            Returns all numbering sequences within this numbering schema.
            Returns: A collection of partition names of all numbering sequences currently present in 
             this schema.
        """
        pass

    def GetNumbers(self, partition):
        """
        GetNumbers(self: NumberingSchema, partition: str) -> IList[IntegerRange]
        
            Returns all numbers currently used in the given numbering sequence
        
            partition: Name of the partition that identifies the sequence. The sequence must exist.
            Returns: A collection of integer ranges
        """
        pass

    @staticmethod
    def GetSchemasInDocument(document):
        """
        GetSchemasInDocument(document: Document) -> ISet[ElementId]
        
            Returns a set of Ids of all Numbering Schema elements for a given document.
        
            document: A document to get numbering schema from.
            Returns: Ids of NumberingSchema elements. An empty set if no schemas are found in the 
             given document.
        """
        pass

    @staticmethod
    def IsValidPartitionName(name, message):
        """
        IsValidPartitionName(name: str) -> (bool, str)
        
            Tests if the given string can be used as a name for a numbering partition.
        
            name: A name to validate.
            Returns: Returns True if the name can be used; or False if the string contains invalid 
             characters.
        """
        pass

    def MergeSequences(self, sourcePartitions, newPartition):
        """ MergeSequences(self: NumberingSchema, sourcePartitions: IList[str], newPartition: str) """
        pass

    def MoveSequence(self, fromPartition, newPartition):
        """
        MoveSequence(self: NumberingSchema, fromPartition: str, newPartition: str)
            Moves all elements of a numbering sequence from one partition to another.
        
            fromPartition: Name of the partition that determines which numbering sequence to move.
           The 
             sequence must exist already, otherwise an exception will be thrown.
        
            newPartition: Name of a partition into which the source sequence is going to be moved.
           
             The schema must not have a sequence for this partition yet
           (i.e. the schema 
             does not have an element that was assigned to such a partition.)
           Leading 
             and trailing white space is ignored in the given string and will be
           removed 
             automatically.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveGaps(self, partition):
        """
        RemoveGaps(self: NumberingSchema, partition: str)
            Removes gaps, if any, in a numbering sequence
        
            partition: Name of the partition that identifies the sequence. The sequence must exist.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    @staticmethod
    def SetMinimumNumberOfDigits(document, value):
        """
        SetMinimumNumberOfDigits(document: Document, value: int)
            Sets a new value for the minimum number of digits to be used for formating
           
             the Number parameter of all numbered elements of the given document.
        
        
            document: The document in which the new value will be in applied.
            value: New value for the minimum number of digits.
        """
        pass

    def ShiftNumbers(self, partition, firstNumber):
        """
        ShiftNumbers(self: NumberingSchema, partition: str, firstNumber: int)
            Shifts all numbers in the sequence so the starting number has the given value.
        
            partition: Name of the partition that identifies the sequence. The sequence must exist.
            firstNumber: Value for the new first (lowest) number of the sequence.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    NumberingParameterId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the parameter that stores values of the numbers on enumerated elements.

Get: NumberingParameterId(self: NumberingSchema) -> ElementId

"""

    SchemaType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the kind of elements/objects this numbering schema is used for.

Get: SchemaType(self: NumberingSchema) -> NumberingSchemaType

"""


    MaximumStartingNumber = 1073741822


class NumberingSchemaType(GuidEnum):
    """
    A type for identifying a Autodesk.Revit.DB.NumberingSchema of a particular kind.
    
    NumberingSchemaType(guid: Guid)
    """
    @staticmethod # known case of __new__
    def __new__(self, guid):
        """ __new__(cls: type, guid: Guid) """
        pass


class NumberingSchemaTypes(object):
    """ Provides a container of all Revit built-in NumberingSchemaType instances. """
    StructuralNumberingSchemas = None
    __all__ = [
        'StructuralNumberingSchemas',
    ]


class NumberSystem(Element, IDisposable):
    """ An annotation that consists of a series of numeric tags attached to and describing a host element. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetReferencePick(self):
        """
        GetReferencePick(self: NumberSystem) -> Reference
        
            Gets the reference curve.
            Returns: The pick of reference curve.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetReferencePick(self, referencePick):
        """
        SetReferencePick(self: NumberSystem, referencePick: Reference)
            Sets the reference pick.
        
            referencePick: The pick to set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    JustifyOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset to the justification curve.

Get: JustifyOffset(self: NumberSystem) -> float

Set: JustifyOffset(self: NumberSystem) = value
"""

    JustifyOption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number justify option of number system.

Get: JustifyOption(self: NumberSystem) -> NumberSystemJustifyOption

Set: JustifyOption(self: NumberSystem) = value
"""

    NumberDisplayRule = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The display rule of the number system.

Get: NumberDisplayRule(self: NumberSystem) -> NumberSystemDisplayRule

Set: NumberDisplayRule(self: NumberSystem) = value
"""

    NumberedElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The LinkElementId of the numbered host element.

Get: NumberedElementId(self: NumberSystem) -> LinkElementId

"""

    NumberOrientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number orientation of number system.

Get: NumberOrientation(self: NumberSystem) -> TagOrientation

Set: NumberOrientation(self: NumberSystem) = value
"""

    ReferenceOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset to the reference curve.

Get: ReferenceOffset(self: NumberSystem) -> float

Set: ReferenceOffset(self: NumberSystem) = value
"""



class NumberSystemDisplayRule(Enum, IComparable, IFormattable, IConvertible):
    """
    The available options for display of numeric values in the number system.
    
    enum NumberSystemDisplayRule, values: All (0), Even (2), Odd (1), StartAndEnd (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    All = None
    Even = None
    Odd = None
    StartAndEnd = None
    value__ = None


class NumberSystemJustifyOption(Enum, IComparable, IFormattable, IConvertible):
    """
    The available options for justification of the numbers in a number system.
    
    enum NumberSystemJustifyOption, values: Back (2), Center (1), Front (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Back = None
    Center = None
    Front = None
    value__ = None


class NumericRevisionSettings(object, IDisposable):
    """
    Contains settings that apply to Revisions with the Numeric RevisionNumberType.
    
    NumericRevisionSettings(startNumber: int, prefix: str, suffix: str)
    NumericRevisionSettings()
    NumericRevisionSettings(other: NumericRevisionSettings)
    """
    def Dispose(self):
        """ Dispose(self: NumericRevisionSettings) """
        pass

    def IsEqual(self, other):
        """
        IsEqual(self: NumericRevisionSettings, other: NumericRevisionSettings) -> bool
        
            Determines whether a specified NumericRevisionSettings is the same as 'this'.
        
            other: The specified NumericRevisionSettings with which to compare.
            Returns: True, if two NumericRevisionSettings are the same.
        """
        pass

    def IsValid(self):
        """
        IsValid(self: NumericRevisionSettings) -> bool
        
            Determines whether the NumericRevisionSettings object is in a valid state.
            Returns: True if the NumericRevisionSettings is valid.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: NumericRevisionSettings, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, startNumber: int, prefix: str, suffix: str)
        __new__(cls: type)
        __new__(cls: type, other: NumericRevisionSettings)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: NumericRevisionSettings) -> bool

"""

    Prefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The prefix string that will be prepended to the number of each revision with Numeric RevisionNumberingType.

Get: Prefix(self: NumericRevisionSettings) -> str

Set: Prefix(self: NumericRevisionSettings) = value
"""

    StartNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The start number for the sequence.

Get: StartNumber(self: NumericRevisionSettings) -> int

Set: StartNumber(self: NumericRevisionSettings) = value
"""

    Suffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The suffix string that will be appended to the number of each revision with Numeric RevisionNumberingType.

Get: Suffix(self: NumericRevisionSettings) -> str

Set: Suffix(self: NumericRevisionSettings) = value
"""



class NurbSpline(Curve, IDisposable):
    """ A nurb spline. """
    @staticmethod
    def Create(*__args):
        """
        Create(controlPoints: IList[XYZ], weights: IList[float], knots: IList[float], degree: int, closed: bool, rational: bool) -> NurbSpline
        Create(controlPoints: IList[XYZ], weights: IList[float]) -> NurbSpline
        Create(hermiteSpline: HermiteSpline) -> NurbSpline
        
            Creates a new geometric NurbSpline object from a HermiteSpline.
        
            hermiteSpline: The hermite spline that will be converted to NurbSpline.
            Returns: The new NurbSpline object.
        """
        pass

    @staticmethod
    def CreateCurve(*__args):
        """
        CreateCurve(degree: int, knots: IList[float], controlPoints: IList[XYZ], weights: IList[float]) -> Curve
        CreateCurve(degree: int, knots: IList[float], controlPoints: IList[XYZ]) -> Curve
        CreateCurve(hermiteSpline: HermiteSpline) -> Curve
        
            Creates a new geometric Curve object by converting the given HermiteSpline.
           
             The created curve may be a NURBSpline or a simpler curve such as line or arc.
        
        
            hermiteSpline: The HermiteSpline that will be converted.
            Returns: The new Curve object.
        CreateCurve(controlPoints: IList[XYZ], weights: IList[float]) -> Curve
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def SetControlPointsAndWeights(self, ctrlPoints, weights):
        """ SetControlPointsAndWeights(self: NurbSpline, ctrlPoints: IList[XYZ], weights: DoubleArray) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CtrlPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the control points of the nurb spline.

Get: CtrlPoints(self: NurbSpline) -> IList[XYZ]

"""

    Degree = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the degree of the nurb spline.

Get: Degree(self: NurbSpline) -> int

"""

    isClosed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Return/set the nurb spline's isClosed property.

Get: isClosed(self: NurbSpline) -> bool

Set: isClosed(self: NurbSpline) = value
"""

    isRational = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns whether the nurb spline is rational or not.

Get: isRational(self: NurbSpline) -> bool

"""

    Knots = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Return/set the knots of the nurb spline.

Get: Knots(self: NurbSpline) -> DoubleArray

Set: Knots(self: NurbSpline) = value
"""

    Weights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the weights of the nurb spline.

Get: Weights(self: NurbSpline) -> DoubleArray

"""



class NurbsSurfaceData(object, IDisposable):
    """
    A class used to represent the definition of a NURBS surface.
    
    NurbsSurfaceData(other: NurbsSurfaceData)
    """
    @staticmethod
    def Create(degreeU, degreeV, knotsU, knotsV, controlPoints, weights, bReverseOrientation):
        """ Create(degreeU: int, degreeV: int, knotsU: IList[float], knotsV: IList[float], controlPoints: IList[XYZ], weights: IList[float], bReverseOrientation: bool) -> NurbsSurfaceData """
        pass

    def Dispose(self):
        """ Dispose(self: NurbsSurfaceData) """
        pass

    def GetControlPoints(self):
        """
        GetControlPoints(self: NurbsSurfaceData) -> IList[XYZ]
        
            Get the list of control points.
        """
        pass

    def GetKnotsU(self):
        """
        GetKnotsU(self: NurbsSurfaceData) -> IList[float]
        
            Get the list of knots in the u-direction.
        """
        pass

    def GetKnotsV(self):
        """
        GetKnotsV(self: NurbsSurfaceData) -> IList[float]
        
            Get the list of knots in the v-direction.
        """
        pass

    def GetWeights(self):
        """
        GetWeights(self: NurbsSurfaceData) -> IList[float]
        
            Get the list of weights.
        """
        pass

    def IsValid(self):
        """
        IsValid(self: NurbsSurfaceData) -> bool
        
            Check if the object contains a valid NurbsSurfaceData.
            Returns: True if it is a valid NurbsSurfaceData, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: NurbsSurfaceData, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, other):
        """ __new__(cls: type, other: NurbsSurfaceData) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DegreeU = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The degree of the spline in the u-direction.

Get: DegreeU(self: NurbsSurfaceData) -> int

"""

    DegreeV = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The degree of the spline in the v-direction.

Get: DegreeV(self: NurbsSurfaceData) -> int

"""

    IsRational = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tells if the spline is rational or not.
   If it is true (rational), then the NURBS is a piecewise rational polynomial function.
   If it is false (non-rational), then the NURBS is a piecewise polynomial function.

Get: IsRational(self: NurbsSurfaceData) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: NurbsSurfaceData) -> bool

"""

    ReverseOrientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """If true, the surface's orientation is opposite to the canonical parametric orientation, otherwise it is the same.
   The canonical parametric orientation is a counter-clockwise sense of rotation in the uv-parameter plane.
   Extrinsically, the oriented normal vector for the canonical parametric orientation points in the direction of
   the cross product dS/du x dS/dv, which S(u, v) is the parameterized surface.

Get: ReverseOrientation(self: NurbsSurfaceData) -> bool

"""



class Opening(Element, IDisposable):
    """ An opening in an Autodesk Revit project or family document. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BoundaryCurves = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The geometry information for non-rectangular openings in project documents, 
or for all openings in family documents.

Get: BoundaryCurves(self: Opening) -> CurveArray

"""

    BoundaryRect = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the geometry information if the opening boundary is a rect.

Get: BoundaryRect(self: Opening) -> IList[XYZ]

"""

    Host = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the host element of this opening.

Get: Host(self: Opening) -> Element

"""

    IsRectBoundary = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the information whether the opening has a rectangular boundary.

Get: IsRectBoundary(self: Opening) -> bool

"""

    IsTransparentIn3D = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the opening is transparent in 3D view when loaded into the project.

Get: IsTransparentIn3D(self: Opening) -> bool

Set: IsTransparentIn3D(self: Opening) = value
"""

    IsTransparentInElevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the opening is transparent in elevation view when loaded into the project.

Get: IsTransparentInElevation(self: Opening) -> bool

Set: IsTransparentInElevation(self: Opening) = value
"""



class OpeningWrappingCondition(Enum, IComparable, IFormattable, IConvertible):
    """
    Used by CompoundStructure to describe which shell layers participate in wrapping at openings.
    
    enum OpeningWrappingCondition, values: Exterior (1), ExteriorAndInterior (3), Interior (2), None (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Exterior = None
    ExteriorAndInterior = None
    Interior = None
    None = None
    value__ = None


class OpenOptions(object, IDisposable):
    """
    This class contains options available for opening a document from disk.
    
    OpenOptions()
    """
    def Dispose(self):
        """ Dispose(self: OpenOptions) """
        pass

    def GetOpenWorksetsConfiguration(self):
        """
        GetOpenWorksetsConfiguration(self: OpenOptions) -> WorksetConfiguration
        
            Gets the object used to configure the worksets to open when the model is opened.
            Returns: The options.  If ll, all user-created worksets will be opened.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: OpenOptions, disposing: bool) """
        pass

    def SetOpenWorksetsConfiguration(self, openConfiguration):
        """
        SetOpenWorksetsConfiguration(self: OpenOptions, openConfiguration: WorksetConfiguration)
            Sets the object used to configure the worksets to open when the model is opened.
        
            openConfiguration: The options.  If ll, all user-created worksets will be opened.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AllowOpeningLocalByWrongUser = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether a local file is allowed to be opened as read-only by a user other than its owner.

Get: AllowOpeningLocalByWrongUser(self: OpenOptions) -> bool

Set: AllowOpeningLocalByWrongUser(self: OpenOptions) = value
"""

    Audit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether to expand all elements in order to check for corruption.

Get: Audit(self: OpenOptions) -> bool

Set: Audit(self: OpenOptions) = value
"""

    DetachFromCentralOption = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An option that specifies whether or not a workset-enabled document is detached from its central document.

Get: DetachFromCentralOption(self: OpenOptions) -> DetachFromCentralOption

Set: DetachFromCentralOption(self: OpenOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: OpenOptions) -> bool

"""



class OptionalFunctionalityUtils(object):
    """ A collection of utilities that can be used to determine if a particular set of functionality is installed and available. """
    @staticmethod
    def IsDGNExportAvailable():
        """
        IsDGNExportAvailable() -> bool
        
            Checks whether the DGN Export functionality is available in the installed Revit.
            Returns: True if the DGN Export functionality is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsDGNImportLinkAvailable():
        """
        IsDGNImportLinkAvailable() -> bool
        
            Checks whether the DGN Import/Link functionality is available in the installed 
             Revit.
        
            Returns: True if the DGN Import/Link functionality is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsDWFExportAvailable():
        """
        IsDWFExportAvailable() -> bool
        
            Checks whether the DWF/DWFx Export functionality is available in the installed 
             Revit.
        
            Returns: True if the DWF/DWFx Export functionality is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsDWGExportAvailable():
        """
        IsDWGExportAvailable() -> bool
        
            Checks whether the DWG Export functionality is available in the installed Revit.
            Returns: True if the DWG Export functionality is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsDWGImportLinkAvailable():
        """
        IsDWGImportLinkAvailable() -> bool
        
            Checks whether the DWG Import/Link functionality is available in the installed 
             Revit.
        
            Returns: True if the DWG Import/Link functionality is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsDXFExportAvailable():
        """
        IsDXFExportAvailable() -> bool
        
            Checks whether the DXF Export functionality is available in the installed Revit.
            Returns: True if the DXF Export functionality is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsFBXExportAvailable():
        """
        IsFBXExportAvailable() -> bool
        
            Checks whether the FBX Export functionality is available in the installed Revit.
            Returns: True if the FBX Export functionality is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsGraphicsAvailable():
        """
        IsGraphicsAvailable() -> bool
        
            Checks whether the graphics functionality is available to support display, 
             print, and export functionality.
        
            Returns: True if the Graphics functionality is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsIFCAvailable():
        """
        IsIFCAvailable() -> bool
        
            Checks whether IFC functionality is available in the installed Revit.
            Returns: True if the IFC functionality is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsNavisworksExporterAvailable():
        """
        IsNavisworksExporterAvailable() -> bool
        
            Checks whether a Navisworks Exporter is available in the installed Revit.
            Returns: True if a Navisworks Exporter is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsSATImportLinkAvailable():
        """
        IsSATImportLinkAvailable() -> bool
        
            Checks whether the SAT Import/Link functionality is available in the installed 
             Revit.
        
            Returns: True if the SAT Import/Link functionality is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsShapeImporterAvailable():
        """
        IsShapeImporterAvailable() -> bool
        
            Checks whether the ShapeImporter functionality is available in the installed 
             Revit.
        
            Returns: True if the ShapeImporter functionality is available in the installed Revit.
        """
        pass

    @staticmethod
    def IsSKPImportLinkAvailable():
        """
        IsSKPImportLinkAvailable() -> bool
        
            Checks whether the SKP Import/Link functionality is available in the installed 
             Revit.
        
            Returns: True if the SKP Import/Link functionality is available in the installed Revit.
        """
        pass

    __all__ = [
        'IsDGNExportAvailable',
        'IsDGNImportLinkAvailable',
        'IsDWFExportAvailable',
        'IsDWGExportAvailable',
        'IsDWGImportLinkAvailable',
        'IsDXFExportAvailable',
        'IsFBXExportAvailable',
        'IsGraphicsAvailable',
        'IsIFCAvailable',
        'IsNavisworksExporterAvailable',
        'IsSATImportLinkAvailable',
        'IsShapeImporterAvailable',
        'IsSKPImportLinkAvailable',
    ]


class Options(APIObject, IDisposable):
    """
    User preferences for parsing of geometry.
    
    Options(pOptions: Options)
    Options()
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, pOptions=None):
        """
        __new__(cls: type, pOptions: Options)
        __new__(cls: type)
        """
        pass

    ComputeReferences = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determines whether or not references to geometric objects are computed.

Get: ComputeReferences(self: Options) -> bool

    Checks whether references to geometric objects are computed.

Set: ComputeReferences(self: Options)
    Enables computing of references to geometric objects.
 = value
"""

    DetailLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The detail level for the geometry extracted with these options.

Get: DetailLevel(self: Options) -> ViewDetailLevel

    Returns the preferred detail level.

Set: DetailLevel(self: Options)
    Sets the preferred detail level.
 = value
"""

    IncludeNonVisibleObjects = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether to extract element geometry objects not set as Visible.  The default is false.

Get: IncludeNonVisibleObjects(self: Options) -> bool

Set: IncludeNonVisibleObjects(self: Options) = value
"""

    View = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The view used for geometry extraction.

Get: View(self: Options) -> View

    Retrieves the view that was set for this object.

Set: View(self: Options)
    Sets the view that drives extraction of geometry.
 = value
"""



class Outline(object, IDisposable):
    """
    Outline is a generic object that provides a bounding box/bounding outline. It supports
       operations to scale and transform. It also supports intersections and contains operations.
    
    Outline(minimumPoint: XYZ, maximumPoint: XYZ)
    Outline(other: Outline)
    """
    def AddPoint(self, point):
        """
        AddPoint(self: Outline, point: XYZ)
            Adds a point to the bounding box, expanding it if the point is outside the 
             existing boundary.
        
        
            point: The point to add.
        """
        pass

    def Contains(self, point, tolerance):
        """
        Contains(self: Outline, point: XYZ, tolerance: float) -> bool
        
            Determine if this Outline contains the specified point to within a tolerance.
        
            point: The point to test for containment.
            tolerance: The tolerance to use when determining whether the point is contained. Defaults 
             to zero.
        
            Returns: True if this outline contains the given point, or false otherwise.
        """
        pass

    def ContainsOtherOutline(self, otherOutline, tolerance):
        """
        ContainsOtherOutline(self: Outline, otherOutline: Outline, tolerance: float) -> bool
        
            Determine if this Outline contains another Outline to within tolerance.
        
            otherOutline: The outline to test for containment.
            tolerance: The tolerance to use when determining whether the point is contained. Defaults 
             to zero.
        
            Returns: True if this outline contains the given outline, or false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Outline) """
        pass

    def GetDiagonalLength(self):
        """
        GetDiagonalLength(self: Outline) -> float
        
            Get the length of outline's diagonal. If called on empty outline, 0.
           is 
             returned
        
            Returns: The length of the diagonal.
        """
        pass

    def Intersects(self, outline, tolerance):
        """
        Intersects(self: Outline, outline: Outline, tolerance: float) -> bool
        
            Determine if this Outline intersects the input Outline to within a specified 
             tolerance.
        
        
            outline: The outline to test for intersection with this one.
            tolerance: The tolerance to use when determining intersection. Defaults to zero.
            Returns: True if the given outline intersects this outline.
        """
        pass

    def IsScaleValid(self, scale):
        """
        IsScaleValid(self: Outline, scale: float) -> bool
        
            Checks if given scale is valid. Should be greater than zero.
        
            scale: The scale.
            Returns: True if the scale is valid, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Outline, disposing: bool) """
        pass

    def Scale(self, scale):
        """
        Scale(self: Outline, scale: float)
            Scales the bounding box by given scale.
        
            scale: The scale value. It should be greater than zero.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, minimumPoint: XYZ, maximumPoint: XYZ)
        __new__(cls: type, other: Outline)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the outline represents an empty outline.

Get: IsEmpty(self: Outline) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: Outline) -> bool

"""

    MaximumPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The maximum point of the bounding box.

Get: MaximumPoint(self: Outline) -> XYZ

Set: MaximumPoint(self: Outline) = value
"""

    MinimumPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The minimum point of the bounding box.

Get: MinimumPoint(self: Outline) -> XYZ

Set: MinimumPoint(self: Outline) = value
"""



class OverrideGraphicSettings(object, IDisposable):
    """
    Settings to override display of elements in a view.
    
    OverrideGraphicSettings(overrideGraphicSettings: OverrideGraphicSettings)
    OverrideGraphicSettings()
    """
    def Dispose(self):
        """ Dispose(self: OverrideGraphicSettings) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: OverrideGraphicSettings, disposing: bool) """
        pass

    def SetCutFillColor(self, color):
        """
        SetCutFillColor(self: OverrideGraphicSettings, color: Color) -> OverrideGraphicSettings
        
            Sets the cut surface fill color.
        
            color: Cut surface fill color for the override (invalidColorValue means no override is 
             set).
        
            Returns: Reference to the changed object.
        """
        pass

    def SetCutFillPatternId(self, fillPatternId):
        """
        SetCutFillPatternId(self: OverrideGraphicSettings, fillPatternId: ElementId) -> OverrideGraphicSettings
        
            Sets the ElementId of the cut surface fill pattern.
        
            fillPatternId: ElementId of the cut surface fill pattern for the override. InvalidElementId 
             means no override is set. The pattern must be a drafting pattern.
        
            Returns: Reference to the changed object.
        """
        pass

    def SetCutFillPatternVisible(self, cutFillPatternVisible):
        """
        SetCutFillPatternVisible(self: OverrideGraphicSettings, cutFillPatternVisible: bool) -> OverrideGraphicSettings
        
            Sets the visibility of the cut surface fill pattern.
        
            cutFillPatternVisible: Value of the visibility of the cut surface fill pattern.
            Returns: Reference to the changed object.
        """
        pass

    def SetCutLineColor(self, color):
        """
        SetCutLineColor(self: OverrideGraphicSettings, color: Color) -> OverrideGraphicSettings
        
            Sets the cut surface line color.
        
            color: Value of the cut surface line color for the override. InvalidColorValue means 
             no override is set.
        
            Returns: Reference to the changed object.
        """
        pass

    def SetCutLinePatternId(self, linePatternId):
        """
        SetCutLinePatternId(self: OverrideGraphicSettings, linePatternId: ElementId) -> OverrideGraphicSettings
        
            Sets the ElementId of the cut surface line pattern.
        
            linePatternId: ElementId of the cut surface line pattern for the override. InvalidElementId 
             means no override is set.
        
            Returns: Reference to the changed object.
        """
        pass

    def SetCutLineWeight(self, lineWeight):
        """
        SetCutLineWeight(self: OverrideGraphicSettings, lineWeight: int) -> OverrideGraphicSettings
        
            Sets the cut surface line weight.
        
            lineWeight: Value of the cut surface line weight for the override. InvalidPenNumber means 
             no override is set.
        
            Returns: Reference to the changed object.
        """
        pass

    def SetDetailLevel(self, detailLevel):
        """
        SetDetailLevel(self: OverrideGraphicSettings, detailLevel: ViewDetailLevel) -> OverrideGraphicSettings
        
            Sets the detail level.
        
            detailLevel: Value of the detail level. ViewDetailLevel.Undefined means no override is set.
            Returns: Reference to the changed object.
        """
        pass

    def SetHalftone(self, halftone):
        """
        SetHalftone(self: OverrideGraphicSettings, halftone: bool) -> OverrideGraphicSettings
        
            Sets the halftone value.
        
            halftone: True if the override displays in halftone, false otherwise.
            Returns: Reference to the changed object.
        """
        pass

    def SetProjectionFillColor(self, color):
        """
        SetProjectionFillColor(self: OverrideGraphicSettings, color: Color) -> OverrideGraphicSettings
        
            Sets the projection surface fill color.
        
            color: Value of the projection surface fill color for the override. InvalidColorValue 
             means no override is set.
        
            Returns: Reference to the changed object.
        """
        pass

    def SetProjectionFillPatternId(self, fillPatternId):
        """
        SetProjectionFillPatternId(self: OverrideGraphicSettings, fillPatternId: ElementId) -> OverrideGraphicSettings
        
            Sets the projection surface fill pattern.
        
            fillPatternId: ElementId of the projection surface fill pattern for the override. 
             InvalidElementId means no override is set. The pattern must be a drafting 
             pattern.
        
            Returns: Reference to the changed object.
        """
        pass

    def SetProjectionFillPatternVisible(self, projectFillPatternVisible):
        """
        SetProjectionFillPatternVisible(self: OverrideGraphicSettings, projectFillPatternVisible: bool) -> OverrideGraphicSettings
        
            Sets the visibility of the projection surface fill pattern.
        
            projectFillPatternVisible: Value of the visibility of the projection surface fill pattern.
            Returns: Reference to the changed object.
        """
        pass

    def SetProjectionLineColor(self, color):
        """
        SetProjectionLineColor(self: OverrideGraphicSettings, color: Color) -> OverrideGraphicSettings
        
            Sets the projection surface line color.
        
            color: Value of the projection surface line color for the override. InvalidColorValue 
             means no override is set.
        
            Returns: Reference to the changed object.
        """
        pass

    def SetProjectionLinePatternId(self, linePatternId):
        """
        SetProjectionLinePatternId(self: OverrideGraphicSettings, linePatternId: ElementId) -> OverrideGraphicSettings
        
            Sets the ElementId of the projection surface line pattern.
        
            linePatternId: ElementId of the projection surface line pattern for the override. 
             InvalidElementId means no override is set.
        
            Returns: Reference to the changed object.
        """
        pass

    def SetProjectionLineWeight(self, lineWeight):
        """
        SetProjectionLineWeight(self: OverrideGraphicSettings, lineWeight: int) -> OverrideGraphicSettings
        
            Sets the projection surface line weight.
        
            lineWeight: Value of the projection surface line weight for the override. InvalidPenNumber 
             means no override is set.
        
            Returns: Reference to the changed object.
        """
        pass

    def SetSurfaceTransparency(self, transparency):
        """
        SetSurfaceTransparency(self: OverrideGraphicSettings, transparency: int) -> OverrideGraphicSettings
        
            Sets the projection surface transparency.
        
            transparency: Value of the transparency of the projection surface (0 = opaque, 100 = fully 
             transparent).
        
            Returns: Reference to the changed object.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, overrideGraphicSettings=None):
        """
        __new__(cls: type, overrideGraphicSettings: OverrideGraphicSettings)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    CutFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cut surface fill color.

Get: CutFillColor(self: OverrideGraphicSettings) -> Color

"""

    CutFillPatternId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """ElementId of the cut surface fill pattern.

Get: CutFillPatternId(self: OverrideGraphicSettings) -> ElementId

"""

    CutLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cut surface line color.

Get: CutLineColor(self: OverrideGraphicSettings) -> Color

"""

    CutLinePatternId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """ElementId of the cut surface line pattern.

Get: CutLinePatternId(self: OverrideGraphicSettings) -> ElementId

"""

    CutLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Cut surface line weight.

Get: CutLineWeight(self: OverrideGraphicSettings) -> int

"""

    DetailLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Detail Level.

Get: DetailLevel(self: OverrideGraphicSettings) -> ViewDetailLevel

"""

    Halftone = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Value of the halftone override.

Get: Halftone(self: OverrideGraphicSettings) -> bool

"""

    IsCutFillPatternVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Visibility of the cut surface fill pattern.

Get: IsCutFillPatternVisible(self: OverrideGraphicSettings) -> bool

"""

    IsProjectionFillPatternVisible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The visibility of the projection surface fill pattern.

Get: IsProjectionFillPatternVisible(self: OverrideGraphicSettings) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: OverrideGraphicSettings) -> bool

"""

    ProjectionFillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Projection surface fill color.

Get: ProjectionFillColor(self: OverrideGraphicSettings) -> Color

"""

    ProjectionFillPatternId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """ElementId of the projection surface fill pattern.

Get: ProjectionFillPatternId(self: OverrideGraphicSettings) -> ElementId

"""

    ProjectionLineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Projection surface line color.

Get: ProjectionLineColor(self: OverrideGraphicSettings) -> Color

"""

    ProjectionLinePatternId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the projection surface line pattern.

Get: ProjectionLinePatternId(self: OverrideGraphicSettings) -> ElementId

"""

    ProjectionLineWeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The projection surface line weight.

Get: ProjectionLineWeight(self: OverrideGraphicSettings) -> int

"""

    Transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Transparency of surfaces.

Get: Transparency(self: OverrideGraphicSettings) -> int

"""


    InvalidPenNumber = -1


class OverridePermissions(Enum, IComparable, IFormattable, IConvertible):
    """
    Types of overrides that can be applied to a category.
    
    enum OverridePermissions, values: CutFills (4), CutLines (3), Halftone (2), ProjectionFills (6), ProjectionLines (5), Surfaces (7), ViewDetailLevel (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CutFills = None
    CutLines = None
    Halftone = None
    ProjectionFills = None
    ProjectionLines = None
    Surfaces = None
    value__ = None
    ViewDetailLevel = None


class PageOrientationType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all Page Orientation types of Print Setting.
    
    enum PageOrientationType, values: Landscape (1), Portrait (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Landscape = None
    Portrait = None
    value__ = None


class Panel(FamilyInstance, IDisposable):
    """ This object represents a curtain panel. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def FindHostPanel(self):
        """
        FindHostPanel(self: Panel) -> ElementId
        
            Finds the id of the host panel (i.e., wall)
        associated with this panel. If a 
             host panel is present, then
        it is displayed instead of the curtain panel.
        
            Returns: Element id of the host panel associated with this panel.
        Otherwise, 
             InvalidElementId is returned
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetRefGridLines(self, uGridLineId, vGridLineId):
        """
        GetRefGridLines(self: Panel, uGridLineId: ElementId, vGridLineId: ElementId) -> (ElementId, ElementId)
        
            This method is used to get the reference gridlines.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Lockable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property is used to know whether a panel can be locked.

Get: Lockable(self: Panel) -> bool

"""

    PanelType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Panel style of this Panel.

Get: PanelType(self: Panel) -> PanelType

Set: PanelType(self: Panel) = value
"""

    Transform = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """This property is used to find the transform of a curtain panel within project.

Get: Transform(self: Panel) -> Transform

"""



class PanelType(FamilySymbol, IDisposable):
    """ An object that represents a curtain panel type. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class PanelTypeSet(APIObject, IDisposable, IEnumerable):
    """
    A set that contains panel types.
    
    PanelTypeSet()
    """
    def Clear(self):
        """
        Clear(self: PanelTypeSet)
            Removes every panel type from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: PanelTypeSet, item: PanelType) -> bool
        
            Tests for the existence of a panel type within the set.
        
            item: The panel type to be searched for.
            Returns: The Contains method returns True if the panel type is within the set, otherwise 
             False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: PanelTypeSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: PanelTypeSet, item: PanelType) -> int
        
            Removes a specified panel type from the set.
        
            item: The panel type to be erased.
            Returns: The number of panel types that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: PanelTypeSet) -> PanelTypeSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: PanelTypeSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: PanelTypeSet, item: PanelType) -> bool
        
            Insert the specified panel type into the set.
        
            item: The panel type to be inserted into the set.
            Returns: Returns whether the panel type was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PanelTypeSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: PanelTypeSet) -> PanelTypeSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: PanelTypeSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of panel types that are in the set.

Get: Size(self: PanelTypeSet) -> int

"""



class PanelTypeSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a panel type set.
    
    PanelTypeSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: PanelTypeSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: PanelTypeSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PanelTypeSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: PanelTypeSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: PanelTypeSetIterator) -> object

"""



class PaperPlacementType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all Paper Placement types of Print Setting.
    
    enum PaperPlacementType, values: Center (0), Margins (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Center = None
    Margins = None
    value__ = None


class PaperSize(APIObject, IDisposable):
    """ An object that represents a Paper Size of Print Setup within the Autodesk Revit project. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the paper size name of current project.

Get: Name(self: PaperSize) -> str

"""



class PaperSizeSet(APIObject, IDisposable, IEnumerable):
    """
    A set that can contain any number of paper size objects.
    
    PaperSizeSet()
    """
    def Clear(self):
        """
        Clear(self: PaperSizeSet)
            Removes every item from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: PaperSizeSet, item: PaperSize) -> bool
        
            Tests for the existence of an item within the set.
        
            item: The item to be searched for.
            Returns: The Contains method returns True if the item is within the set, otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: PaperSizeSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: PaperSizeSet, item: PaperSize) -> int
        
            Removes a specified object from the set.
        
            item: The item to be erased.
            Returns: The number of items that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: PaperSizeSet) -> PaperSizeSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: PaperSizeSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: PaperSizeSet, item: PaperSize) -> bool
        
            Insert the specified item into the set.
        
            item: The item to be inserted into the set.
            Returns: Returns whether the item was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PaperSizeSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: PaperSizeSet) -> PaperSizeSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: PaperSizeSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the set.

Get: Size(self: PaperSizeSet) -> int

"""



class PaperSizeSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a set of paper size objects.
    
    PaperSizeSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: PaperSizeSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: PaperSizeSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PaperSizeSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: PaperSizeSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: PaperSizeSetIterator) -> object

"""



class PaperSource(APIObject, IDisposable):
    """ An object that represents a Paper Source of Print Setup within the Autodesk Revit project. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the paper source name of current project.

Get: Name(self: PaperSource) -> str

"""



class PaperSourceSet(APIObject, IDisposable, IEnumerable):
    """
    A set that can contain any number of paper source objects.
    
    PaperSourceSet()
    """
    def Clear(self):
        """
        Clear(self: PaperSourceSet)
            Removes every item from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: PaperSourceSet, item: PaperSource) -> bool
        
            Tests for the existence of an item within the set.
        
            item: The item to be searched for.
            Returns: The Contains method returns True if the item is within the set, otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: PaperSourceSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: PaperSourceSet, item: PaperSource) -> int
        
            Removes a specified object from the set.
        
            item: The item to be erased.
            Returns: The number of items that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: PaperSourceSet) -> PaperSourceSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: PaperSourceSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """ Insert(self: PaperSourceSet, item: PaperSource) -> bool """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PaperSourceSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: PaperSourceSet) -> PaperSourceSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: PaperSourceSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the set.

Get: Size(self: PaperSourceSet) -> int

"""



class PaperSourceSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a set of paper source objects.
    
    PaperSourceSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: PaperSourceSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: PaperSourceSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PaperSourceSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: PaperSourceSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: PaperSourceSetIterator) -> object

"""



class Parameter(APIObject, IDisposable):
    """ The parameter object contains the value data assigned to that parameter. """
    def AsDouble(self):
        """
        AsDouble(self: Parameter) -> float
        
            Provides access to the double precision number within the parameter.
            Returns: The double value contained in the parameter.
        """
        pass

    def AsElementId(self):
        """
        AsElementId(self: Parameter) -> ElementId
        
            Provides access to the Autodesk::Revit::DB::ElementId^ stored within the 
             parameter.
        
            Returns: The Autodesk::Revit::DB::ElementId^ contained in the parameter.
        """
        pass

    def AsInteger(self):
        """
        AsInteger(self: Parameter) -> int
        
            Provides access to the integer number within the parameter.
            Returns: The integer value contained in the parameter.
        """
        pass

    def AssociateWithGlobalParameter(self, gpId):
        """
        AssociateWithGlobalParameter(self: Parameter, gpId: ElementId)
            Associates this parameter with a global parameter in the same document.
        
            gpId: Id of a global parameter contained in this parameter's document
        """
        pass

    def AsString(self):
        """
        AsString(self: Parameter) -> str
        
            Provides access to the string contents of the parameter.
            Returns: The string contained in the parameter.
        """
        pass

    def AsValueString(self, formatOptions=None):
        """
        AsValueString(self: Parameter) -> str
        
            Get the parameter value as a string with units.
            Returns: The string that represents the parameter value.
        AsValueString(self: Parameter, formatOptions: FormatOptions) -> str
        
            Get the parameter value as a string with units.
        
            formatOptions: Options for formatting the string.
            Returns: The string that represents the parameter value.
        """
        pass

    def CanBeAssociatedWithGlobalParameter(self, gpId):
        """
        CanBeAssociatedWithGlobalParameter(self: Parameter, gpId: ElementId) -> bool
        
            Tests whether this parameter can be associated with the given global parameter.
        
            gpId: Id of a global parameter contained in this parameter's document
            Returns: True if this parameter can be associated with the given global parameter; False 
             otherwise.
        """
        pass

    def CanBeAssociatedWithGlobalParameters(self):
        """
        CanBeAssociatedWithGlobalParameters(self: Parameter) -> bool
        
            Tests whether this parameter can be associated with any global parameter.
            Returns: True if the given parameter can be associated (is parametrizable); False 
             otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def DissociateFromGlobalParameter(self):
        """
        DissociateFromGlobalParameter(self: Parameter)
            Dissociates this parameter from a global parameter.
        """
        pass

    def GetAssociatedGlobalParameter(self):
        """
        GetAssociatedGlobalParameter(self: Parameter) -> ElementId
        
            Returns a global parameter, if any, currently associated with this parameter.
            Returns: Id of a global parameter or InvalidElemetnId.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Set(self, value):
        """
        Set(self: Parameter, value: int) -> bool
        
            Sets the parameter to a new integer value.
        
            value: The new integer value to which the parameter is to be set.
            Returns: The Set method will return True if the parameter was successfully set to the 
             new value, otherwise false.
        
        Set(self: Parameter, value: str) -> bool
        
            Sets the parameter to a new string of text.
        
            value: The new text value to which the parameter is to be set.
            Returns: The Set method will return True if the parameter was successfully set to the 
             new value, otherwise false.
        
        Set(self: Parameter, value: ElementId) -> bool
        
            Sets the parameter to a new element id.
        
            value: The new element id to which the parameter is to be set.
            Returns: The Set method will return True if the parameter was successfully set to the 
             new value, otherwise false.
        
        Set(self: Parameter, value: float) -> bool
        
            Sets the parameter to a new real number value.
        
            value: The new double value to which the parameter is to be set.
            Returns: The Set method will return True if the parameter was successfully set to the 
             new value, otherwise false.
        """
        pass

    def SetValueString(self, valueString):
        """
        SetValueString(self: Parameter, valueString: str) -> bool
        
            Set the parameter value according to the input string.
        
            valueString: The string that represents the parameter value.
            Returns: Indicates whether the parameter value is successfully set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Definition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Definition object that describes the data type, name and other details of the
parameter.

Get: Definition(self: Parameter) -> Definition

"""

    DisplayUnitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the display unit type of the parameter object.

Get: DisplayUnitType(self: Parameter) -> DisplayUnitType

"""

    Element = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element to which this parameter belongs.

Get: Element(self: Parameter) -> Element

"""

    GUID = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Guid for a shared parameter.

Get: GUID(self: Parameter) -> Guid

"""

    HasValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the parameter has an assigned value.

Get: HasValue(self: Parameter) -> bool

"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the parameter.

Get: Id(self: Parameter) -> ElementId

"""

    IsReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the readonly property of the parameter.

Get: IsReadOnly(self: Parameter) -> bool

"""

    IsShared = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the parameter is a shared parameter.

Get: IsShared(self: Parameter) -> bool

"""

    StorageType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Describes the type that is used internally within the parameter to store its value.

Get: StorageType(self: Parameter) -> StorageType

"""

    UserModifiable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the interactive user can modify the value of this parameter.

Get: UserModifiable(self: Parameter) -> bool

"""



class ParameterFilterElement(FilterElement, IDisposable):
    """
    Admits elements that satisfy two conditions:
       The element's category must be one of a certain set of allowed categories.The element must pass a series of filter rules.
    """
    @staticmethod
    def AllRuleParametersApplicable(*__args):
        """
        AllRuleParametersApplicable(self: ParameterFilterElement, rules: IList[FilterRule]) -> bool
        AllRuleParametersApplicable(aDocument: Document, categories: ICollection[ElementId], rules: IList[FilterRule]) -> bool
        """
        pass

    def ClearRules(self):
        """
        ClearRules(self: ParameterFilterElement)
            Removes all rules from this filter.
        """
        pass

    @staticmethod
    def Create(aDocument, name, categories, rules=None):
        """
        Create(aDocument: Document, name: str, categories: ICollection[ElementId]) -> ParameterFilterElement
        Create(aDocument: Document, name: str, categories: ICollection[ElementId], rules: IList[FilterRule]) -> ParameterFilterElement
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetCategories(self):
        """
        GetCategories(self: ParameterFilterElement) -> ICollection[ElementId]
        
            Gets the categories admitted by this filter.
        """
        pass

    @staticmethod
    def GetRuleParameter(rule):
        """
        GetRuleParameter(rule: FilterRule) -> ElementId
        
            Returns the parameter for a given filter rule.
        
            rule: The rule to query.
            Returns: The identifier of the rule's parameter.
        """
        pass

    def GetRuleParameters(self):
        """
        GetRuleParameters(self: ParameterFilterElement) -> IList[ElementId]
        
            Retrieves a list of the parameters associated with each rule in the filter.
           
             The order of the resulting array corresponds to the order in which the 
             associated
           filter rules are applied.
        
            Returns: An array of parameter identifiers.
        """
        pass

    def GetRules(self):
        """
        GetRules(self: ParameterFilterElement) -> IList[FilterRule]
        
            Returns the rules of this filter, in the order in which they are applied.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def SetCategories(self, categories):
        """ SetCategories(self: ParameterFilterElement, categories: ICollection[ElementId]) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetRules(self, rules):
        """ SetRules(self: ParameterFilterElement, rules: IList[FilterRule]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ParameterFilterRuleFactory(object, IDisposable):
    """ Contains functions that create appropriate FilterRule objects based on the parameters given. """
    @staticmethod
    def CreateBeginsWithRule(parameter, value, caseSensitive):
        """
        CreateBeginsWithRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document
           
             begin with a certain string value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value for which values from the document will be 
             searched.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        """
        pass

    @staticmethod
    def CreateContainsRule(parameter, value, caseSensitive):
        """
        CreateContainsRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document contain
             
           a certain string value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value for which values from the document will be 
             searched.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        """
        pass

    @staticmethod
    def CreateEndsWithRule(parameter, value, caseSensitive):
        """
        CreateEndsWithRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document
           end 
             with a certain string value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value for which values from the document will be 
             searched.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        """
        pass

    @staticmethod
    def CreateEqualsRule(parameter, value, *__args):
        """
        CreateEqualsRule(parameter: ElementId, value: float, epsilon: float) -> FilterRule
        
            Creates a filter rule that determines whether double-precision values
           from 
             the document equal a certain value.
        
        
            parameter: A double-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
            epsilon: Defines the tolerance within which two values may be considered equal.
        CreateEqualsRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document
           
             equal a certain value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value against which values from the document will be 
             compared.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        CreateEqualsRule(parameter: ElementId, value: ElementId) -> FilterRule
        
            Creates a filter rule that determines whether ElementId values
           from the 
             document equal a certain value.
        
        
            parameter: An ElementId-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        CreateEqualsRule(parameter: ElementId, value: int) -> FilterRule
        
            Creates a filter rule that determines whether integer values
           from the 
             document equal a certain value.
        
        
            parameter: An integer-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        """
        pass

    @staticmethod
    def CreateGreaterOrEqualRule(parameter, value, *__args):
        """
        CreateGreaterOrEqualRule(parameter: ElementId, value: float, epsilon: float) -> FilterRule
        
            Creates a filter rule that determines whether double-precision values
           from 
             the document are greater than or equal to a certain value.
        
        
            parameter: A double-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
            epsilon: Defines the tolerance within which two values may be considered equal.
        CreateGreaterOrEqualRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document
           are 
             greater than or equal to a certain value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value against which values from the document will be 
             compared.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        CreateGreaterOrEqualRule(parameter: ElementId, value: ElementId) -> FilterRule
        
            Creates a filter rule that determines whether ElementId values
           from the 
             document are greater than or equal to a certain value.
        
        
            parameter: An ElementId-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        CreateGreaterOrEqualRule(parameter: ElementId, value: int) -> FilterRule
        
            Creates a filter rule that determines whether integer values
           from the 
             document are greater than or equal to a certain value.
        
        
            parameter: An integer-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        """
        pass

    @staticmethod
    def CreateGreaterRule(parameter, value, *__args):
        """
        CreateGreaterRule(parameter: ElementId, value: float, epsilon: float) -> FilterRule
        
            Creates a filter rule that determines whether double-precision values
           from 
             the document are greater than a certain value.
        
        
            parameter: A double-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
            epsilon: Defines the tolerance within which two values may be considered equal.
        CreateGreaterRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document
           are 
             greater than a certain value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value against which values from the document will be 
             compared.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        CreateGreaterRule(parameter: ElementId, value: ElementId) -> FilterRule
        
            Creates a filter rule that determines whether ElementId values
           from the 
             document are greater than a certain value.
        
        
            parameter: An ElementId-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        CreateGreaterRule(parameter: ElementId, value: int) -> FilterRule
        
            Creates a filter rule that determines whether integer values
           from the 
             document are greater than a certain value.
        
        
            parameter: An integer-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        """
        pass

    @staticmethod
    def CreateIsAssociatedWithGlobalParameterRule(parameter, value):
        """
        CreateIsAssociatedWithGlobalParameterRule(parameter: ElementId, value: ElementId) -> FilterRule
        
            Creates a filter rule that determines whether a parameter is associated
           
             with a certain global parameter.
        
        
            parameter: A parameter that can be associated with an existing global parameter of a 
             compatible type.
        
            value: The global parameter used to test the association.
        """
        pass

    @staticmethod
    def CreateIsNotAssociatedWithGlobalParameterRule(parameter, value):
        """
        CreateIsNotAssociatedWithGlobalParameterRule(parameter: ElementId, value: ElementId) -> FilterRule
        
            Creates a filter rule that determines whether a parameter is not associated
           
             with a certain global parameter.
        
        
            parameter: A parameter that can be associated with an existing global parameter of a 
             compatible type.
        
            value: The global parameter used to test the association.
        """
        pass

    @staticmethod
    def CreateLessOrEqualRule(parameter, value, *__args):
        """
        CreateLessOrEqualRule(parameter: ElementId, value: float, epsilon: float) -> FilterRule
        
            Creates a filter rule that determines whether double-precision values
           from 
             the document are less than or equal to a certain value.
        
        
            parameter: A double-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
            epsilon: Defines the tolerance within which two values may be considered equal.
        CreateLessOrEqualRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document
           are 
             less than or equal to a certain value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value against which values from the document will be 
             compared.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        CreateLessOrEqualRule(parameter: ElementId, value: ElementId) -> FilterRule
        
            Creates a filter rule that determines whether ElementId values
           from the 
             document are less than or equal to a certain value.
        
        
            parameter: An ElementId-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        CreateLessOrEqualRule(parameter: ElementId, value: int) -> FilterRule
        
            Creates a filter rule that determines whether integer values
           from the 
             document are less than or equal to a certain value.
        
        
            parameter: An integer-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        """
        pass

    @staticmethod
    def CreateLessRule(parameter, value, *__args):
        """
        CreateLessRule(parameter: ElementId, value: float, epsilon: float) -> FilterRule
        
            Creates a filter rule that determines whether double-precision values
           from 
             the document are less than a certain value.
        
        
            parameter: A double-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
            epsilon: Defines the tolerance within which two values may be considered equal.
        CreateLessRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document
           are 
             less than a certain value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value against which values from the document will be 
             compared.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        CreateLessRule(parameter: ElementId, value: ElementId) -> FilterRule
        
            Creates a filter rule that determines whether ElementId values
           from the 
             document are less than a certain value.
        
        
            parameter: An ElementId-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        CreateLessRule(parameter: ElementId, value: int) -> FilterRule
        
            Creates a filter rule that determines whether integer values
           from the 
             document are less than a certain value.
        
        
            parameter: An integer-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        """
        pass

    @staticmethod
    def CreateNotBeginsWithRule(parameter, value, caseSensitive):
        """
        CreateNotBeginsWithRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document
           do 
             not begin with a certain string value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value for which values from the document will be 
             searched.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        """
        pass

    @staticmethod
    def CreateNotContainsRule(parameter, value, caseSensitive):
        """
        CreateNotContainsRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document do not
        
                contain a certain string value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value for which values from the document will be 
             searched.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        """
        pass

    @staticmethod
    def CreateNotEndsWithRule(parameter, value, caseSensitive):
        """
        CreateNotEndsWithRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document
           do 
             not end with a certain string value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value for which values from the document will be 
             searched.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        """
        pass

    @staticmethod
    def CreateNotEqualsRule(parameter, value, *__args):
        """
        CreateNotEqualsRule(parameter: ElementId, value: float, epsilon: float) -> FilterRule
        
            Creates a filter rule that determines whether double-precision values
           from 
             the document do not equal a certain value.
        
        
            parameter: A double-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
            epsilon: Defines the tolerance within which two values may be considered equal.
        CreateNotEqualsRule(parameter: ElementId, value: str, caseSensitive: bool) -> FilterRule
        
            Creates a filter rule that determines whether strings from the document
           do 
             not equal a certain value.
        
        
            parameter: A string-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied string value against which values from the document will be 
             compared.
        
            caseSensitive: If true, the string comparison will be case-sensitive.
        CreateNotEqualsRule(parameter: ElementId, value: ElementId) -> FilterRule
        
            Creates a filter rule that determines whether ElementId values
           from the 
             document do not equal a certain value.
        
        
            parameter: An ElementId-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        CreateNotEqualsRule(parameter: ElementId, value: int) -> FilterRule
        
            Creates a filter rule that determines whether integer values
           from the 
             document do not equal a certain value.
        
        
            parameter: An integer-typed parameter used to get values from the document for a given 
             element.
        
            value: The user-supplied value against which values from the document will be compared.
        """
        pass

    @staticmethod
    def CreateSharedParameterApplicableRule(parameterName):
        """
        CreateSharedParameterApplicableRule(parameterName: str) -> FilterRule
        
            Creates a filter rule that tests elements for support of a shared parameter.
        
            parameterName: The name of the parameter that elements must support to satisfy this rule.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ParameterFilterRuleFactory) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ParameterFilterRuleFactory, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ParameterFilterRuleFactory) -> bool

"""



class ParameterFilterUtilities(object):
    """
    Contains static utility functions for enumerating the categories and parameters that
       are available for use by ParameterFilterElement objects.
    """
    @staticmethod
    def GetAllFilterableCategories():
        """
        GetAllFilterableCategories() -> ICollection[ElementId]
        
            Returns the set of categories that may be used in a ParameterFilterElement.
            Returns: The set of all filterable categories.
        """
        pass

    @staticmethod
    def GetFilterableParametersInCommon(aDoc, categories):
        """ GetFilterableParametersInCommon(aDoc: Document, categories: ICollection[ElementId]) -> ICollection[ElementId] """
        pass

    @staticmethod
    def GetInapplicableParameters(aDoc, categories, parameters):
        """ GetInapplicableParameters(aDoc: Document, categories: ICollection[ElementId], parameters: IList[ElementId]) -> IList[ElementId] """
        pass

    @staticmethod
    def IsParameterApplicable(element, parameter):
        """
        IsParameterApplicable(element: Element, parameter: ElementId) -> bool
        
            Used to determine whether the element supports the given parameter.
        
            element: The element to query for support of the given parameter.
            parameter: The parameter for which to query support.
            Returns: True if the element supports the given parameter, false otherwise.
        """
        pass

    @staticmethod
    def RemoveUnfilterableCategories(categories):
        """ RemoveUnfilterableCategories(categories: ICollection[ElementId]) -> ICollection[ElementId] """
        pass

    __all__ = [
        'GetAllFilterableCategories',
        'GetFilterableParametersInCommon',
        'GetInapplicableParameters',
        'IsParameterApplicable',
        'RemoveUnfilterableCategories',
    ]


class ParameterMap(APIObject, IDisposable, IEnumerable):
    """
    A map that can contain a mapping of a parameter name (a String) to a parameter.
    
    ParameterMap()
    """
    def Clear(self):
        """
        Clear(self: ParameterMap)
            Removes every item from the map, rendering it empty.
        """
        pass

    def Contains(self, key):
        """
        Contains(self: ParameterMap, key: str) -> bool
        
            Tests for the existence of a key within the map.
        
            key: The key to be searched for.
            Returns: The Contains method returns True if the key is within the map, otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ParameterMap, A_0: bool) """
        pass

    def Erase(self, key):
        """
        Erase(self: ParameterMap, key: str) -> int
        
            Removes a object with the specified key from the map.
        
            key: The key of the item to be erased.
            Returns: The number of items that were erased from the map.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ParameterMap) -> ParameterMapIterator
        
            Retrieve a forward moving iterator to the map.
            Returns: Returns a forward moving iterator to the map.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ParameterMap) -> IEnumerator
        
            Retrieve a forward moving iterator to the map.
            Returns: Returns a forward moving iterator to the map.
        """
        pass

    def Insert(self, key, item):
        """
        Insert(self: ParameterMap, key: str, item: Parameter) -> bool
        
            Insert the specified item with the specified key into the map.
        
            key: The key to be used for inserting the item into the map.
            item: The item to be inserted into the map.
            Returns: Returns whether the item was inserted into the map.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ParameterMap) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ParameterMap) -> ParameterMapIterator
        
            Retrieve a backward moving iterator to the map.
            Returns: Returns a backward moving iterator to the map.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the map is empty.

Get: IsEmpty(self: ParameterMap) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the map.

Get: Size(self: ParameterMap) -> int

"""



class ParameterMapIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a map relating a parameter name (the key, a String) to a parameter.
    
    ParameterMapIterator()
    """
    def Dispose(self):
        """ Dispose(self: ParameterMapIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ParameterMapIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the map.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ParameterMapIterator) """
        pass

    def Reset(self):
        """
        Reset(self: ParameterMapIterator)
            Bring the iterator back to the start of the map.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ParameterMapIterator) -> object

"""

    Key = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the key that is the current focus of the iterator.

Get: Key(self: ParameterMapIterator) -> str

"""



class ParameterSet(APIObject, IDisposable, IEnumerable):
    """
    A set that contains parameters.
    
    ParameterSet()
    """
    def Clear(self):
        """
        Clear(self: ParameterSet)
            Removes every parameter from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: ParameterSet, item: Parameter) -> bool
        
            Tests for the existence of a parameter within the set.
        
            item: The parameter to be searched for.
            Returns: The Contains method returns True if the parameter is within the set, otherwise 
             False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ParameterSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: ParameterSet, item: Parameter) -> int
        
            Removes a specified parameter from the set.
        
            item: The parameter to be erased.
            Returns: The number of parameters that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ParameterSet) -> ParameterSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ParameterSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: ParameterSet, item: Parameter) -> bool
        
            Insert the specified parameter into the set.
        
            item: The parameter to be inserted into the set.
            Returns: Returns whether the parameter was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ParameterSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ParameterSet) -> ParameterSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: ParameterSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of parameters that are in the set.

Get: Size(self: ParameterSet) -> int

"""



class ParameterSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a parameter set.
    
    ParameterSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: ParameterSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ParameterSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ParameterSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: ParameterSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ParameterSetIterator) -> object

"""



class ParametersOrder(Enum, IComparable, IFormattable, IConvertible):
    """
    The order of the parameters.
    
    enum ParametersOrder, values: Ascending (0), Descending (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Ascending = None
    Descending = None
    value__ = None


class ParameterType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all of the data type interpretation that Autodesk Revit supports.
    
    enum ParameterType, values: Acceleration (192), Angle (7), Area (5), AreaForce (13), AreaForcePerLength (154), BarDiameter (193), ColorTemperature (175), CrackWidth (194), Currency (172), DisplacementDeflection (195), ElectricalApparentPower (134), ElectricalCableTraySize (182), ElectricalConduitSize (183), ElectricalCurrent (119), ElectricalDemandFactor (186), ElectricalEfficacy (173), ElectricalFrequency (121), ElectricalIlluminance (122), ElectricalLuminance (178), ElectricalLuminousFlux (123), ElectricalLuminousIntensity (177), ElectricalPotential (120), ElectricalPower (124), ElectricalPowerDensity (135), ElectricalResistivity (221), ElectricalTemperature (181), ElectricalTemperatureDifference (229), ElectricalWattage (174), Energy (196), FamilyType (17), FixtureUnit (16), Force (11), ForceLengthPerAngle (151), ForcePerLength (150), HVACAirflow (115), HVACAirflowDensity (158), HVACAirflowDividedByCoolingLoad (167), HVACAirflowDividedByVolume (166), HVACAreaDividedByCoolingLoad (168), HVACAreaDividedByHeatingLoad (179), HVACCoefficientOfHeatTransfer (157), HVACCoolingLoad (160), HVACCoolingLoadDividedByArea (161), HVACCoolingLoadDividedByVolume (162), HVACCrossSection (117), HVACDensity (107), HVACDuctInsulationThickness (187), HVACDuctLiningThickness (188), HVACDuctSize (116), HVACEnergy (108), HVACFactor (180), HVACFriction (109), HVACHeatGain (118), HVACHeatingLoad (163), HVACHeatingLoadDividedByArea (164), HVACHeatingLoadDividedByVolume (165), HVACPermeability (220), HVACPower (110), HVACPowerDensity (111), HVACPressure (112), HVACRoughness (125), HVACSlope (170), HVACSpecificHeat (218), HVACSpecificHeatOfVaporization (219), HVACTemperature (113), HVACTemperatureDifference (227), HVACThermalConductivity (217), HVACThermalMass (191), HVACThermalResistance (190), HVACVelocity (114), HVACViscosity (156), Image (19), Integer (2), Invalid (0), Length (4), LinearForce (12), LinearForceLengthPerAngle (153), LinearForcePerLength (152), LinearMoment (148), LoadClassification (18), Mass (198), MassDensity (222), MassPerUnitArea (223), MassPerUnitLength (199), Material (9), Moment (14), MomentOfInertia (200), MultilineText (20), Number (3), NumberOfPoles (15), Period (202), PipeDimension (224), PipeInsulationThickness (189), PipeMass (225), PipeMassPerUnitLength (226), PipeSize (143), PipingDensity (136), PipingFlow (137), PipingFriction (138), PipingPressure (139), PipingRoughness (144), PipingSlope (171), PipingTemperature (140), PipingTemperatureDifference (228), PipingVelocity (141), PipingViscosity (142), PipingVolume (155), Pulsation (203), ReinforcementArea (204), ReinforcementAreaPerUnitLength (205), ReinforcementCover (206), ReinforcementLength (185), ReinforcementSpacing (207), ReinforcementVolume (184), Rotation (208), SectionArea (209), SectionDimension (210), SectionModulus (211), SectionProperty (212), Slope (159), Stress (145), StructuralFrequency (197), StructuralVelocity (213), SurfaceArea (201), Text (1), ThermalExpansion (147), UnitWeight (146), URL (8), Volume (6), WarpingConstant (214), Weight (215), WeightPerUnitLength (216), WireSize (169), YesNo (10)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Acceleration = None
    Angle = None
    Area = None
    AreaForce = None
    AreaForcePerLength = None
    BarDiameter = None
    ColorTemperature = None
    CrackWidth = None
    Currency = None
    DisplacementDeflection = None
    ElectricalApparentPower = None
    ElectricalCableTraySize = None
    ElectricalConduitSize = None
    ElectricalCurrent = None
    ElectricalDemandFactor = None
    ElectricalEfficacy = None
    ElectricalFrequency = None
    ElectricalIlluminance = None
    ElectricalLuminance = None
    ElectricalLuminousFlux = None
    ElectricalLuminousIntensity = None
    ElectricalPotential = None
    ElectricalPower = None
    ElectricalPowerDensity = None
    ElectricalResistivity = None
    ElectricalTemperature = None
    ElectricalTemperatureDifference = None
    ElectricalWattage = None
    Energy = None
    FamilyType = None
    FixtureUnit = None
    Force = None
    ForceLengthPerAngle = None
    ForcePerLength = None
    HVACAirflow = None
    HVACAirflowDensity = None
    HVACAirflowDividedByCoolingLoad = None
    HVACAirflowDividedByVolume = None
    HVACAreaDividedByCoolingLoad = None
    HVACAreaDividedByHeatingLoad = None
    HVACCoefficientOfHeatTransfer = None
    HVACCoolingLoad = None
    HVACCoolingLoadDividedByArea = None
    HVACCoolingLoadDividedByVolume = None
    HVACCrossSection = None
    HVACDensity = None
    HVACDuctInsulationThickness = None
    HVACDuctLiningThickness = None
    HVACDuctSize = None
    HVACEnergy = None
    HVACFactor = None
    HVACFriction = None
    HVACHeatGain = None
    HVACHeatingLoad = None
    HVACHeatingLoadDividedByArea = None
    HVACHeatingLoadDividedByVolume = None
    HVACPermeability = None
    HVACPower = None
    HVACPowerDensity = None
    HVACPressure = None
    HVACRoughness = None
    HVACSlope = None
    HVACSpecificHeat = None
    HVACSpecificHeatOfVaporization = None
    HVACTemperature = None
    HVACTemperatureDifference = None
    HVACThermalConductivity = None
    HVACThermalMass = None
    HVACThermalResistance = None
    HVACVelocity = None
    HVACViscosity = None
    Image = None
    Integer = None
    Invalid = None
    Length = None
    LinearForce = None
    LinearForceLengthPerAngle = None
    LinearForcePerLength = None
    LinearMoment = None
    LoadClassification = None
    Mass = None
    MassDensity = None
    MassPerUnitArea = None
    MassPerUnitLength = None
    Material = None
    Moment = None
    MomentOfInertia = None
    MultilineText = None
    Number = None
    NumberOfPoles = None
    Period = None
    PipeDimension = None
    PipeInsulationThickness = None
    PipeMass = None
    PipeMassPerUnitLength = None
    PipeSize = None
    PipingDensity = None
    PipingFlow = None
    PipingFriction = None
    PipingPressure = None
    PipingRoughness = None
    PipingSlope = None
    PipingTemperature = None
    PipingTemperatureDifference = None
    PipingVelocity = None
    PipingViscosity = None
    PipingVolume = None
    Pulsation = None
    ReinforcementArea = None
    ReinforcementAreaPerUnitLength = None
    ReinforcementCover = None
    ReinforcementLength = None
    ReinforcementSpacing = None
    ReinforcementVolume = None
    Rotation = None
    SectionArea = None
    SectionDimension = None
    SectionModulus = None
    SectionProperty = None
    Slope = None
    Stress = None
    StructuralFrequency = None
    StructuralVelocity = None
    SurfaceArea = None
    Text = None
    ThermalExpansion = None
    UnitWeight = None
    URL = None
    value__ = None
    Volume = None
    WarpingConstant = None
    Weight = None
    WeightPerUnitLength = None
    WireSize = None
    YesNo = None


class ParameterValueProvider(FilterableValueProvider, IDisposable):
    """
    Gets the value of a parameter from any element passed to getStringValue,
       getDoubleValue, getIntegerValue, or getElementIdValue.
    
    ParameterValueProvider(parameter: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: FilterableValueProvider, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterableValueProvider, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, parameter):
        """ __new__(cls: type, parameter: ElementId) """
        pass

    Parameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The parameter used to provide a string, integer, double-precision, or ElementId
   value on request for a given element.

Get: Parameter(self: ParameterValueProvider) -> ElementId

Set: Parameter(self: ParameterValueProvider) = value
"""



class Part(Element, IDisposable):
    """ This element represents a part of another element. """
    def CanOffsetFace(self, face):
        """
        CanOffsetFace(self: Part, face: Face) -> bool
        
            Checks if it is possible to offset the given face.
        
            face: face to be checked.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetSourceElementIds(self):
        """
        GetSourceElementIds(self: Part) -> ICollection[LinkElementId]
        
            Gets a collection of elements from which this Part is created by the PartMaker.
             
           May return more than one source only if there is merge involved somewhere 
             in the history of this Part.
        
            Returns: The collection of elements
        """
        pass

    def GetSourceElementOriginalCategoryIds(self):
        """
        GetSourceElementOriginalCategoryIds(self: Part) -> ICollection[ElementId]
        
            Gets the category ids of the source elements which were used to form this part.
            Returns: The category ids.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def ResetPartShape(self):
        """
        ResetPartShape(self: Part)
            Resets all face offsets applied to part faces.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetFaceOffset(self, face, offset):
        """
        SetFaceOffset(self: Part, face: Face, offset: float)
            Offsets the given part face in the direction that points out of the solid shape 
             with the specified amount.
           Negative value will offset the face into the 
             solid shape.
        
        
            face: The face to offset.
            offset: The magnitude of the offset.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Excluded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the part is excluded, false otherwise

Get: Excluded(self: Part) -> bool

Set: Excluded(self: Part) = value
"""

    OriginalCategoryId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The category Id of the original element corresponding to this Part.

Get: OriginalCategoryId(self: Part) -> ElementId

Set: OriginalCategoryId(self: Part) = value
"""

    PartMaker = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The PartMaker that created this Part.

Get: PartMaker(self: Part) -> PartMaker

"""



class PartEdgeConditionOrientation(Enum, IComparable, IFormattable, IConvertible):
    """
    Relative orientation of the right/lower and left/upper edge condition profiles.
    
    enum PartEdgeConditionOrientation, values: Complement (0), Mirrored (1), MirroredAndRotated (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Complement = None
    Mirrored = None
    MirroredAndRotated = None
    value__ = None


class PartMaker(Element, IDisposable):
    """
    PartMaker is an element which takes some source elements (e.g., a wall
       with all its layers) and creates one or more Parts out of it. The logic
       according to which these Parts are created is non-trivial and PartMaker
       uses various PartMakerMethods which represents these logics.
       This element manages the strategy to make Part elements for one or more original elements.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetSourceElementIds(self):
        """
        GetSourceElementIds(self: PartMaker) -> ICollection[LinkElementId]
        
            Get the source elements for the PartMaker.
            Returns: Elements that are the sources for this PartMaker.
        """
        pass

    def IsSourceElement(self, elemId):
        """
        IsSourceElement(self: PartMaker, elemId: ElementId) -> bool
        
            Is the element a source for this PartMaker
            Returns: Returns true if elemId is among the source elements of this PartMaker
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetSourceElementIds(self, sourceElementIds):
        """ SetSourceElementIds(self: PartMaker, sourceElementIds: ICollection[ElementId]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class PartMakerMethodToDivideVolumes(object, IDisposable):
    """ By-References dividing strategy used by PartMaker element. """
    def AddIntersectingReference(self, intersectingReference, offset):
        """
        AddIntersectingReference(self: PartMakerMethodToDivideVolumes, intersectingReference: ElementId, offset: float) -> bool
        
            Adds intersecting reference with an offset.
        
            intersectingReference: Id of the new intersecting reference.
            offset: The Offste for the new intersecting reference.
            Returns: True if the PartMaker did not already use this
           intersecting reference and 
             it was added, false if the PartMaker
           already used this intersecting 
             reference and this call
           only updated its offset.
        """
        pass

    @staticmethod
    def AreElementsValidIntersectingReferences(*__args):
        """
        AreElementsValidIntersectingReferences(self: PartMakerMethodToDivideVolumes, elementIds: ICollection[ElementId]) -> bool
        AreElementsValidIntersectingReferences(document: Document, elementIds: ICollection[ElementId]) -> bool
        """
        pass

    def CanBeDivisionProfile(self, familyId, familyDocument=None):
        """
        CanBeDivisionProfile(familyId: ElementId, familyDocument: Document) -> bool
        
            Checks whether a family defines a profile which can be used by this method.
        
            familyId: Element id of the family.
            familyDocument: The document containing the family to be tested.
            Returns: True if the family defines a profile which can be used by a part maker,
           
             false otherwise.
        
        CanBeDivisionProfile(self: PartMakerMethodToDivideVolumes, familyId: ElementId) -> bool
        
            Checks whether a family defines a profile which can be used by this method.
        
            familyId: Element id of the family.
            Returns: True if the family defines a profile which can be used by a part maker,
           
             false otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: PartMakerMethodToDivideVolumes) """
        pass

    def GetOffsetForIntersectingReference(self, intersectingReference):
        """
        GetOffsetForIntersectingReference(self: PartMakerMethodToDivideVolumes, intersectingReference: ElementId) -> float
        
            Gets offset for the intersecting reference.
        
            intersectingReference: The intersecting reference to obtain offset value from.
            Returns: The offset for the intersecting reference
        """
        pass

    def GetPlaneOfSketch(self):
        """
        GetPlaneOfSketch(self: PartMakerMethodToDivideVolumes) -> Plane
        
            Gets the plane of the sketch.
            Returns: The plane of the sketch.
        """
        pass

    def GetSketchCurves(self, curveArray):
        """ GetSketchCurves(self: PartMakerMethodToDivideVolumes) -> IList[Curve] """
        pass

    def GetSplitRefsOffsets(self):
        """
        GetSplitRefsOffsets(self: PartMakerMethodToDivideVolumes) -> IDictionary[ElementId, float]
        
            Returns offsets for plane-defining splitters.
        """
        pass

    @staticmethod
    def IsElementValidIntersectingReference(*__args):
        """
        IsElementValidIntersectingReference(self: PartMakerMethodToDivideVolumes, elementId: ElementId) -> bool
        
            Identifies if the provided member is valid.
        
            elementId: Element ids to be tested for validity for intersecting references.
            Returns: True if the reference is valid, false otherwise.
        IsElementValidIntersectingReference(document: Document, elementId: ElementId) -> bool
        
            Identifies if the provided member is valid.
        
            document: The document.
            elementId: Element ids to be tested for validity for intersecting references.
            Returns: True if the reference is valid, false otherwise.
        """
        pass

    @staticmethod
    def IsValidSketchPlane(document, sketchPlaneId):
        """
        IsValidSketchPlane(document: Document, sketchPlaneId: ElementId) -> bool
        
            Identifies if provided sketch plane is valid.
        
            document: The document.
            sketchPlaneId: SketchPlane ids to be tested for validity for PartMaker.
            Returns: True if SketchPlane valid, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PartMakerMethodToDivideVolumes, disposing: bool) """
        pass

    def RemoveIntersectingReference(self, intersectingReference):
        """
        RemoveIntersectingReference(self: PartMakerMethodToDivideVolumes, intersectingReference: ElementId) -> bool
        
            Removed intersecting reference.
        
            intersectingReference: Id of the intersecting reference to remove.
            Returns: True if the PartMaker used this intersecting reference and
           this call 
             removed it, false if the PartMaker did not use this
           intersecting reference.
        """
        pass

    def SetOffsetForIntersectingReference(self, intersectingReference, offset):
        """
        SetOffsetForIntersectingReference(self: PartMakerMethodToDivideVolumes, intersectingReference: ElementId, offset: float)
            Sets offset for the intersecting reference.
        
            intersectingReference: The intersecting reference that will be offset.
            offset: The new offset.
        """
        pass

    def UsesReference(self, intersectingReference):
        """
        UsesReference(self: PartMakerMethodToDivideVolumes, intersectingReference: ElementId) -> bool
        
            Identifies if the PartMaker uses the intersecting reference.
        
            intersectingReference: Intersecting reference to be tested.
            Returns: True if the intersecting reference is used by the PartMaker.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DivisionGap = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The gap which is created between matching profiles of parts.

Get: DivisionGap(self: PartMakerMethodToDivideVolumes) -> float

Set: DivisionGap(self: PartMakerMethodToDivideVolumes) = value
"""

    DivisionPatternMirror = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether pattern defined by the division rule should be mirrored before application
   Mirroring is similar to changing indices of u-const gridlines.

Get: DivisionPatternMirror(self: PartMakerMethodToDivideVolumes) -> bool

Set: DivisionPatternMirror(self: PartMakerMethodToDivideVolumes) = value
"""

    DivisionRotationAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Angle by which both u- and v- gridlines of the division are rotated with respect
   to the natural u/v-const directions of the sketch plane.

Get: DivisionRotationAngle(self: PartMakerMethodToDivideVolumes) -> float

Set: DivisionRotationAngle(self: PartMakerMethodToDivideVolumes) = value
"""

    DivisionRuleId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the 'DivisionRule' which is used to augment the cutting sketch.

Get: DivisionRuleId(self: PartMakerMethodToDivideVolumes) -> ElementId

Set: DivisionRuleId(self: PartMakerMethodToDivideVolumes) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: PartMakerMethodToDivideVolumes) -> bool

"""

    ProfileFlipAcross = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the corresponding left/upper parts profile are mirrored with respect
   to the division line. False if the profile of left/upper parts are defined
   directly by the profile family.

Get: ProfileFlipAcross(self: PartMakerMethodToDivideVolumes) -> bool

Set: ProfileFlipAcross(self: PartMakerMethodToDivideVolumes) = value
"""

    ProfileFlipAlong = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the corresponding left/upper parts profile are mirrored with respect
   to the center line of the hosts to be divided. False if the profile of
   left/upper parts are defined directly by the profile family.

Get: ProfileFlipAlong(self: PartMakerMethodToDivideVolumes) -> bool

Set: ProfileFlipAlong(self: PartMakerMethodToDivideVolumes) = value
"""

    ProfileMatch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determines how two profiles match.

Get: ProfileMatch(self: PartMakerMethodToDivideVolumes) -> PartEdgeConditionOrientation

Set: ProfileMatch(self: PartMakerMethodToDivideVolumes) = value
"""

    ProfileOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset which is applied to a family-defined profile in the
   direction away from the division line and toward left/upper part
   to obtain its profile.

Get: ProfileOffset(self: PartMakerMethodToDivideVolumes) -> float

Set: ProfileOffset(self: PartMakerMethodToDivideVolumes) = value
"""

    ProfileType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the profile family applied to boundaries between parts.

Get: ProfileType(self: PartMakerMethodToDivideVolumes) -> ElementId

Set: ProfileType(self: PartMakerMethodToDivideVolumes) = value
"""

    UConstDivisionIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indentation for the application of division rule's pattern across u-const gridlines
   (i.e., similar to changing indices of u-const gridlines).

Get: UConstDivisionIndent(self: PartMakerMethodToDivideVolumes) -> int

Set: UConstDivisionIndent(self: PartMakerMethodToDivideVolumes) = value
"""

    VConstDivisionIndent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indentation for the application of division rule's pattern across v-const gridlines
   (i.e., similar to changing indices of v-const gridlines).

Get: VConstDivisionIndent(self: PartMakerMethodToDivideVolumes) -> int

Set: VConstDivisionIndent(self: PartMakerMethodToDivideVolumes) = value
"""



class PartsVisibility(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the visibility of parts for the view.
    
    enum PartsVisibility, values: ShowOriginalOnly (1), ShowPartsAndOriginal (2), ShowPartsOnly (0), Unset (-1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ShowOriginalOnly = None
    ShowPartsAndOriginal = None
    ShowPartsOnly = None
    Unset = None
    value__ = None


class PartType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all MEP family part types. A part type typically provides one unique set of type parameters that defines this part.
    
    enum PartType, values: AttachesTo (3), BreaksInto (4), Cap (9), ChannelCableTrayCross (37), ChannelCableTrayElbow (35), ChannelCableTrayMultiPort (42), ChannelCableTrayOffset (41), ChannelCableTrayTee (38), ChannelCableTrayTransition (39), ChannelCableTrayUnion (40), ChannelCableTrayVerticalElbow (36), Cross (8), Damper (23), DuctMounted (1), Elbow (5), EndCap (53), EquipmentSwitch (18), HandrailBracketHardware (54), Handrails (58), InlineSensor (51), JunctionBox (2), JunctionBoxCross (31), JunctionBoxElbow (34), JunctionBoxTee (30), LadderCableTrayCross (45), LadderCableTrayElbow (43), LadderCableTrayMultiPort (50), LadderCableTrayOffset (49), LadderCableTrayTee (46), LadderCableTrayTransition (47), LadderCableTrayUnion (48), LadderCableTrayVerticalElbow (44), LateralCross (26), LateralTee (25), MultiPort (28), Normal (0), Offset (12), OtherPanel (17), PanelBoard (14), PanelBracketHardware (55), Pants (27), PipeFlange (32), PipeMechanicalCoupling (60), Rails (57), Sensor (52), SpudAdjustable (22), SpudPerpendicular (21), Switch (19), SwitchBoard (16), TapAdjustable (11), TapPerpendicular (10), Tee (6), TerminationHardware (56), TopRails (59), Transformer (15), Transition (7), Undefined (-1), Union (13), ValveBreaksInto (20), ValveNormal (29), Wye (24)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AttachesTo = None
    BreaksInto = None
    Cap = None
    ChannelCableTrayCross = None
    ChannelCableTrayElbow = None
    ChannelCableTrayMultiPort = None
    ChannelCableTrayOffset = None
    ChannelCableTrayTee = None
    ChannelCableTrayTransition = None
    ChannelCableTrayUnion = None
    ChannelCableTrayVerticalElbow = None
    Cross = None
    Damper = None
    DuctMounted = None
    Elbow = None
    EndCap = None
    EquipmentSwitch = None
    HandrailBracketHardware = None
    Handrails = None
    InlineSensor = None
    JunctionBox = None
    JunctionBoxCross = None
    JunctionBoxElbow = None
    JunctionBoxTee = None
    LadderCableTrayCross = None
    LadderCableTrayElbow = None
    LadderCableTrayMultiPort = None
    LadderCableTrayOffset = None
    LadderCableTrayTee = None
    LadderCableTrayTransition = None
    LadderCableTrayUnion = None
    LadderCableTrayVerticalElbow = None
    LateralCross = None
    LateralTee = None
    MultiPort = None
    Normal = None
    Offset = None
    OtherPanel = None
    PanelBoard = None
    PanelBracketHardware = None
    Pants = None
    PipeFlange = None
    PipeMechanicalCoupling = None
    Rails = None
    Sensor = None
    SpudAdjustable = None
    SpudPerpendicular = None
    Switch = None
    SwitchBoard = None
    TapAdjustable = None
    TapPerpendicular = None
    Tee = None
    TerminationHardware = None
    TopRails = None
    Transformer = None
    Transition = None
    Undefined = None
    Union = None
    value__ = None
    ValveBreaksInto = None
    ValveNormal = None
    Wye = None


class PartUtils(object):
    """ General Part utility methods """
    @staticmethod
    def AreElementsValidForCreateParts(document, elementIds):
        """ AreElementsValidForCreateParts(document: Document, elementIds: ICollection[ElementId]) -> bool """
        pass

    @staticmethod
    def ArePartsValidForDivide(document, elementIdsToDivide):
        """ ArePartsValidForDivide(document: Document, elementIdsToDivide: ICollection[ElementId]) -> bool """
        pass

    @staticmethod
    def ArePartsValidForMerge(document, partIds):
        """ ArePartsValidForMerge(document: Document, partIds: ICollection[ElementId]) -> bool """
        pass

    @staticmethod
    def CreateMergedPart(document, partIds):
        """ CreateMergedPart(document: Document, partIds: ICollection[ElementId]) -> PartMaker """
        pass

    @staticmethod
    def CreateParts(document, *__args):
        """ CreateParts(document: Document, hostOrLinkElementIds: ICollection[LinkElementId])CreateParts(document: Document, elementIds: ICollection[ElementId]) """
        pass

    @staticmethod
    def DivideParts(document, elementIdsToDivide, intersectingReferenceIds, curveArray, sketchPlaneId):
        """ DivideParts(document: Document, elementIdsToDivide: ICollection[ElementId], intersectingReferenceIds: ICollection[ElementId], curveArray: IList[Curve], sketchPlaneId: ElementId) -> PartMaker """
        pass

    @staticmethod
    def FindMergeableClusters(doc, partIds):
        """ FindMergeableClusters(doc: Document, partIds: ICollection[ElementId]) -> IList[ICollection[ElementId]] """
        pass

    @staticmethod
    def GetAssociatedPartMaker(hostDocument, *__args):
        """
        GetAssociatedPartMaker(hostDocument: Document, hostOrLinkElementId: LinkElementId) -> PartMaker
        
            Gets associated PartMaker for an element.
        
            hostDocument: The document
            hostOrLinkElementId: The id for the element to be checked for associated Parts
            Returns: The PartMaker element that is making Parts for this element.
           ll if there is 
             no associated PartMaker.
        
        GetAssociatedPartMaker(hostDocument: Document, elementId: ElementId) -> PartMaker
        
            Gets associated PartMaker for an element.
        
            hostDocument: The document
            elementId: The id for the element to be checked for associated Parts
            Returns: The PartMaker element that is making Parts for this element.
           ll if there is 
             no associated PartMaker.
        """
        pass

    @staticmethod
    def GetAssociatedParts(hostDocument, *__args):
        """
        GetAssociatedParts(hostDocument: Document, hostOrLinkElementId: LinkElementId, includePartsWithAssociatedParts: bool, includeAllChildren: bool) -> ICollection[ElementId]
        
            Returns all Parts that are associated with the given element
        
            hostDocument: The document of the element
            hostOrLinkElementId: The element to be checked for associated Parts.
            includePartsWithAssociatedParts: If true, include parts that have associated parts
            includeAllChildren: If true, return all associated Parts recursively for all children
           If false, 
             only return immediate children
        
            Returns: Parts that are associated to the element
        GetAssociatedParts(hostDocument: Document, elementId: ElementId, includePartsWithAssociatedParts: bool, includeAllChildren: bool) -> ICollection[ElementId]
        
            Returns all Parts that are associated with the given element.
        
            hostDocument: The document of the element.
            elementId: The element to be checked for associated Parts.
            includePartsWithAssociatedParts: If true, include parts that have associated parts.
            includeAllChildren: If true, return all associated Parts recursively for all children.
           If 
             false, only return immediate children.
        
            Returns: Parts that are associated to the element.
        """
        pass

    @staticmethod
    def GetChainLengthToOriginal(part):
        """
        GetChainLengthToOriginal(part: Part) -> int
        
            Calculates the length of the longest chain of divisions/merges to reach to an 
             original non-Part element that is the source of the tested part.
        
        
            part: The part to be tested
            Returns: The length of the longest chain.
        """
        pass

    @staticmethod
    def GetMergedParts(part):
        """
        GetMergedParts(part: Part) -> ICollection[ElementId]
        
            Retrieves the element ids of the source elements of a merged part.
        
            part: A merged part.
            Returns: The element ids of the parts that were merged to create the specified merged 
             part.
        """
        pass

    @staticmethod
    def GetPartMakerMethodToDivideVolumeFW(partMaker):
        """
        GetPartMakerMethodToDivideVolumeFW(partMaker: PartMaker) -> PartMakerMethodToDivideVolumes
        
            Obtains the object allowing access to the divided volume
           properties of the 
             PartMaker.
        
        
            partMaker: The PartMaker.
            Returns: The object handle. Returns ll if the
           PartMaker does not represent divided 
             volumes.
        """
        pass

    @staticmethod
    def HasAssociatedParts(hostDocument, *__args):
        """
        HasAssociatedParts(hostDocument: Document, hostOrLinkElementId: LinkElementId) -> bool
        
            Checks if an element has associated parts.
        
            hostDocument: The document.
            hostOrLinkElementId: The element to be checked for associated Parts.
            Returns: True if the element has associated Parts.
        HasAssociatedParts(hostDocument: Document, elementId: ElementId) -> bool
        
            Checks if an element has associated parts.
        
            hostDocument: The document.
            elementId: The element to be checked for associated Parts
            Returns: True if the element has associated Parts.
        """
        pass

    @staticmethod
    def IsMergedPart(part):
        """
        IsMergedPart(part: Part) -> bool
        
            Is the Part the result of a merge.
            Returns: True if the Part is the result of a merge operation.
        """
        pass

    @staticmethod
    def IsPartDerivedFromLink(dPart):
        """
        IsPartDerivedFromLink(dPart: Part) -> bool
        
            Is the Part derived from link geometry.
        """
        pass

    @staticmethod
    def IsValidForCreateParts(document, hostOrLinkElementId):
        """
        IsValidForCreateParts(document: Document, hostOrLinkElementId: LinkElementId) -> bool
        
            Identifies if the given element can be used to create parts.
        
            document: The document.
            hostOrLinkElementId: Id to be tested for validity for creating part.
            Returns: True if this id is valid, false otherwise.
        """
        pass

    __all__ = [
        'AreElementsValidForCreateParts',
        'ArePartsValidForDivide',
        'ArePartsValidForMerge',
        'CreateMergedPart',
        'CreateParts',
        'DivideParts',
        'FindMergeableClusters',
        'GetAssociatedPartMaker',
        'GetAssociatedParts',
        'GetChainLengthToOriginal',
        'GetMergedParts',
        'GetPartMakerMethodToDivideVolumeFW',
        'HasAssociatedParts',
        'IsMergedPart',
        'IsPartDerivedFromLink',
        'IsValidForCreateParts',
    ]


class SketchBase(Element, IDisposable):
    """ Provides access to the SketchBase in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class Path3d(SketchBase, IDisposable):
    """ Provides access to the Generic 3D path object in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AllCurveLoops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get all the Curve Loops of Path3d.

Get: AllCurveLoops(self: Path3d) -> CurveArrArray

"""

    NumCurveLoops = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the Number of Curve Loops of Path3d.

Get: NumCurveLoops(self: Path3d) -> int

"""



class PathType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum determining what kind of path a given external file
       reference path is.
       Paths are valid for all types of external file references
       unless otherwise specified.
    
    enum PathType, values: Absolute (1), Content (3), Relative (0), Server (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Absolute = None
    Content = None
    Relative = None
    Server = None
    value__ = None


class PerformanceAdviser(object, IDisposable):
    """ The tool to report performance problems in a given document. """
    def AddRule(self, id, rule):
        """
        AddRule(self: PerformanceAdviser, id: PerformanceAdviserRuleId, rule: IPerformanceAdviserRule)
            Adds a performance adviser rule to the list of rules.
        
            id: An id of the rule to be added to the list of rules.
            rule: The rule to be added
        """
        pass

    def DeleteRule(self, id):
        """
        DeleteRule(self: PerformanceAdviser, id: PerformanceAdviserRuleId)
            Deletes a performance adviser rule from the list of rules.
        
            id: An id of the rule to be deleted from the list of rules.
        """
        pass

    def Dispose(self):
        """ Dispose(self: PerformanceAdviser) """
        pass

    def ExecuteAllRules(self, document):
        """
        ExecuteAllRules(self: PerformanceAdviser, document: Document) -> IList[FailureMessage]
        
            Executes all rules in the list on a given document.
        
            document: Document on which the rules will be executed.
            Returns: Failure messages explaining performance problems detected in the document.
        """
        pass

    def ExecuteRules(self, document, rules):
        """
        ExecuteRules(self: PerformanceAdviser, document: Document, rules: IList[PerformanceAdviserRuleId]) -> IList[FailureMessage]
        ExecuteRules(self: PerformanceAdviser, document: Document, rules: IList[int]) -> IList[FailureMessage]
        """
        pass

    def GetAllRuleIds(self):
        """
        GetAllRuleIds(self: PerformanceAdviser) -> IList[PerformanceAdviserRuleId]
        
            Retrieves an enumeration of rule Ids.
            Returns: A collection of rule Ids
        """
        pass

    def GetElementFilterFromRule(self, *__args):
        """
        GetElementFilterFromRule(self: PerformanceAdviser, id: PerformanceAdviserRuleId, document: Document) -> ElementFilter
        
            Retrieves a filter to restrict elements to be checked.
        
            id: The rule id to get information for.
            document: Document for which performance problems are being checked.
            Returns: The filter to restrict elements to be checked.
        GetElementFilterFromRule(self: PerformanceAdviser, index: int, document: Document) -> ElementFilter
        
            Retrieves a filter to restrict elements to be checked.
        
            index: The rule index to get information for.
            document: Document for which performance problems are being checked.
            Returns: The filter to restrict elements to be checked.
        """
        pass

    def GetNumberOfRules(self):
        """
        GetNumberOfRules(self: PerformanceAdviser) -> int
        
            Retrieves number of performance adviser rules in the list.
            Returns: Number of performance adviser rules in the list.
        """
        pass

    @staticmethod
    def GetPerformanceAdviser():
        """
        GetPerformanceAdviser() -> PerformanceAdviser
        
            Returns the only instance of PerformanceAdviser in the Application.
            Returns: The only instance of PerformanceAdviser in the Application.
        """
        pass

    def GetRuleDescription(self, *__args):
        """
        GetRuleDescription(self: PerformanceAdviser, id: PerformanceAdviserRuleId) -> str
        
            Retrieves the description of the rule.
        
            id: The rule id to get information for.
            Returns: The description of the rule.
        GetRuleDescription(self: PerformanceAdviser, index: int) -> str
        
            Retrieves the description of the rule.
        
            index: The rule index to get information for.
            Returns: The description of the rule.
        """
        pass

    def GetRuleId(self, index):
        """
        GetRuleId(self: PerformanceAdviser, index: int) -> PerformanceAdviserRuleId
        
            Retrieves an id of a rule for a given index in the list.
        
            index: The index to retrieve the rule id for.
            Returns: The rule id.
        """
        pass

    def GetRuleName(self, *__args):
        """
        GetRuleName(self: PerformanceAdviser, id: PerformanceAdviserRuleId) -> str
        
            Retrieves the name of the rule.
        
            id: The rule id to get information for.
            Returns: The name of the rule.
        GetRuleName(self: PerformanceAdviser, index: int) -> str
        
            Retrieves the name of the rule.
        
            index: The rule index to get information for.
            Returns: The name of the rule.
        """
        pass

    def IsRuleEnabled(self, *__args):
        """
        IsRuleEnabled(self: PerformanceAdviser, index: int) -> bool
        
            Retrieves an enabled/disabled status for the given rule.
        
            index: The rule index to retrieve enabled/disabled status for.
            Returns: True if rule is disabled, false otherwise.
        IsRuleEnabled(self: PerformanceAdviser, id: PerformanceAdviserRuleId) -> bool
        
            Retrieves an enabled/disabled status for the given rule.
        
            id: The rule id to retrieve enabled/disabled status for.
            Returns: True if rule is disabled, false otherwise.
        """
        pass

    def PostWarning(self, message):
        """
        PostWarning(self: PerformanceAdviser, message: FailureMessage)
            Reports a problem detected during execution of a rule.
        
            message: Warning describing the problem detected by a rule.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PerformanceAdviser, disposing: bool) """
        pass

    def SetRuleEnabled(self, *__args):
        """
        SetRuleEnabled(self: PerformanceAdviser, index: int, enabled: bool)
            Retrieves an enabled/disabled status for the given rule.
        
            index: The rule index to set enabled/disabled status for.
            enabled: True enables the rule, false disables.
        SetRuleEnabled(self: PerformanceAdviser, id: PerformanceAdviserRuleId, enabled: bool)
            Retrieves an enabled/disabled status for the given rule.
        
            id: The rule id to set enabled/disabled status for.
            enabled: True enables the rule, false disables.
        """
        pass

    def WillRuleCheckElements(self, *__args):
        """
        WillRuleCheckElements(self: PerformanceAdviser, id: PerformanceAdviserRuleId) -> bool
        
            Reports if rule needs to be executed on individual elements.
        
            id: The rule id to get information for.
            Returns: True if rule needs to be executed on individual elements.
        WillRuleCheckElements(self: PerformanceAdviser, index: int) -> bool
        
            Reports if rule needs to be executed on individual elements.
        
            index: The rule index to get information for.
            Returns: True if rule needs to be executed on individual elements.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: PerformanceAdviser) -> bool

"""



class PerformanceAdviserRuleId(GuidEnum):
    """
    The unique identifier of a PerformanceAdviserRule
    
    PerformanceAdviserRuleId(guid: Guid)
    """
    @staticmethod # known case of __new__
    def __new__(self, guid):
        """ __new__(cls: type, guid: Guid) """
        pass


class PerformanceAdviserRules(object):
    """ Provides a container of all Revit built-in PerformanceAdviserRuleId instances. """
    __all__ = []


class Phase(Element, IDisposable):
    """ Represents a phase in the life of a building. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class PhaseArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains phase objects.
    
    PhaseArray()
    """
    def Append(self, item):
        """
        Append(self: PhaseArray, item: Phase)
            Add the phase to the end of the array.
        
            item: The phase to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: PhaseArray)
            Removes every phase from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: PhaseArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: PhaseArray) -> PhaseArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: PhaseArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: PhaseArray, item: Phase, index: int)
            Insert the specified phase into the array.
        
            item: The phase to be inserted into the array.
            index: The phase will be inserted before this index.
            Returns: Returns whether the phase was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PhaseArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: PhaseArray) -> PhaseArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: PhaseArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of phases that are in the array.

Get: Size(self: PhaseArray) -> int

"""



class PhaseArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a phase array.
    
    PhaseArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: PhaseArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: PhaseArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PhaseArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: PhaseArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: PhaseArrayIterator) -> object

"""



class PhaseFilter(Element, IDisposable):
    """ Represents an phase filter within Autodesk Revit. """
    @staticmethod
    def Create(document, name):
        """
        Create(document: Document, name: str) -> PhaseFilter
        
            Creates a new phase filter with default status presentation.
        
            document: The document.
            name: The name.
            Returns: The newly created phase filter.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetPhaseStatusPresentation(self, status):
        """
        GetPhaseStatusPresentation(self: PhaseFilter, status: ElementOnPhaseStatus) -> PhaseStatusPresentation
        
            Gets the phase status presentation.
        
            status: The element phase status.
            Returns: The phase status presentation.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetPhaseStatusPresentation(self, status, presentation):
        """
        SetPhaseStatusPresentation(self: PhaseFilter, status: ElementOnPhaseStatus, presentation: PhaseStatusPresentation)
            Sets the phase status presentation.
        
            status: The element phase status.
            presentation: The phase status presentation.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsDefault = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this filter is the default one.

Get: IsDefault(self: PhaseFilter) -> bool

"""



class PhaseStatusPresentation(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing the options for element display in a phase filter.
    
    enum PhaseStatusPresentation, values: DontShow (0), ShowByCategory (1), ShowOverriden (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DontShow = None
    ShowByCategory = None
    ShowOverriden = None
    value__ = None


class PlanarFace(Face, IDisposable):
    """ A bounded face of a 3d solid or open shell. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    FaceNormal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Normal of the planar face.

Get: FaceNormal(self: PlanarFace) -> XYZ

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Origin of the surface.

Get: Origin(self: PlanarFace) -> XYZ

"""

    XVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The X-vector of the planar face.

Get: XVector(self: PlanarFace) -> XYZ

"""

    YVector = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Y-vector of the planar face.

Get: YVector(self: PlanarFace) -> XYZ

"""



class PlanCircuit(APIObject, IDisposable):
    """ An object that represents an enclosed area in a plan view within the Autodesk Revit project. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def GetPointInside(self):
        """
        GetPointInside(self: PlanCircuit) -> UV
        
            Returns a point inside the circuit.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Area = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The enclosed area of the circuit.

Get: Area(self: PlanCircuit) -> float

"""

    IsRoomLocated = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Reports whether there is a room located in this circuit.

Get: IsRoomLocated(self: PlanCircuit) -> bool

"""

    SideNum = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of sides in the circuit.

Get: SideNum(self: PlanCircuit) -> int

"""



class PlanCircuitSet(APIObject, IDisposable, IEnumerable):
    """
    A set that can contain any number of plan circuit objects.
    
    PlanCircuitSet()
    """
    def Clear(self):
        """
        Clear(self: PlanCircuitSet)
            Removes every item from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: PlanCircuitSet, item: PlanCircuit) -> bool
        
            Tests for the existence of an item within the set.
        
            item: The item to be searched for.
            Returns: The Contains method returns True if the item is within the set, otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: PlanCircuitSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: PlanCircuitSet, item: PlanCircuit) -> int
        
            Removes a specified object from the set.
        
            item: The item to be erased.
            Returns: The number of items that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: PlanCircuitSet) -> PlanCircuitSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: PlanCircuitSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: PlanCircuitSet, item: PlanCircuit) -> bool
        
            Insert the specified item into the set.
        
            item: The item to be inserted into the set.
            Returns: Returns whether the item was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PlanCircuitSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: PlanCircuitSet) -> PlanCircuitSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: PlanCircuitSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the set.

Get: Size(self: PlanCircuitSet) -> int

"""



class PlanCircuitSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a set of plan circuit objects.
    
    PlanCircuitSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: PlanCircuitSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: PlanCircuitSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PlanCircuitSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: PlanCircuitSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: PlanCircuitSetIterator) -> object

"""



class Plane(Surface, IDisposable):
    """
    A Planar surface.
    
    Plane(norm: XYZ, origin: XYZ)
    Plane(xVec: XYZ, yVec: XYZ, origin: XYZ)
    Plane()
    """
    @staticmethod
    def Create(frameOfReference):
        """
        Create(frameOfReference: Frame) -> Plane
        
            Creates a Plane object defined by a local frame of reference.
        
            frameOfReference: frameOfReference is an orthonormal frame that defines a local coordinate system 
             for the plane being constructed.
           Frame.Origin is a point on plane. 
             Frame.BasisZ defines the plane's normal, while Frame.BasisX and Frame.BasisY 
             are orthogonal to the normal. The frame may be either left-handed or 
             right-handed (see Frame.IsRightHanded).
        """
        pass

    @staticmethod
    def CreateByNormalAndOrigin(normal, origin):
        """
        CreateByNormalAndOrigin(normal: XYZ, origin: XYZ) -> Plane
        
            Constructs a Plane object from a normal and an origin represented as XYZ 
             objects. Follows the standard conventions for a planar surface.
           The 
             constructed Plane object will pass through origin and be perpendicular to 
             normal. The X and Y axes of the plane will be defined arbitrarily.
        
        
            normal: Plane normal. Expected to be a valid non-zero length vector. Doesn't need to be 
             a unit vector.
        
            origin: Plane origin.  Expected to lie within the Revit design limits 
             Autodesk.Revit.DB.XYZ.IsWithinLengthLimits(Autodesk.Revit.DB.XYZ).
        """
        pass

    @staticmethod
    def CreateByOriginAndBasis(origin, basisX, basisY):
        """
        CreateByOriginAndBasis(origin: XYZ, basisX: XYZ, basisY: XYZ) -> Plane
        
            Creates a Plane object defined by the two orthogonal unit vectors and passing 
             through the origin point supplied as arguments.
        
        
            origin: Plane origin. Expected to lie within the Revit design limits 
             Autodesk.Revit.DB.XYZ.IsWithinLengthLimits(Autodesk.Revit.DB.XYZ).
        
            basisX: First of the two unit vectors that define the plane. Must be orthogonal to the 
             second one.
        
            basisY: Second of the two unit vectors that define the plane. Must be orthogonal to the 
             first one.
        """
        pass

    @staticmethod
    def CreateByThreePoints(point1, point2, point3):
        """
        CreateByThreePoints(point1: XYZ, point2: XYZ, point3: XYZ) -> Plane
        
            Creates a Plane object passing through three points supplied as arguments.
        
            point1: First of the three points that define a unique plane. The created Plane object 
             will pass through these points.
        
            point2: Second of the three points that define a unique plane.
            point3: Third of the three points that define a unique plane.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Surface, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Surface, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, norm: XYZ, origin: XYZ)
        __new__(cls: type, xVec: XYZ, yVec: XYZ, origin: XYZ)
        __new__(cls: type)
        """
        pass

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Plane normal.

Get: Normal(self: Plane) -> XYZ

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Plane origin.

Get: Origin(self: Plane) -> XYZ

"""

    XVec = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Axis defining the first parametric direction of the plane.

Get: XVec(self: Plane) -> XYZ

"""

    YVec = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Axis defining the second parametric direction of the plane.

Get: YVec(self: Plane) -> XYZ

"""



class PlanTopology(APIObject, IDisposable):
    """ An object that represents a Plan Topology within the Autodesk Revit project. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def GetRoomIds(self):
        """
        GetRoomIds(self: PlanTopology) -> ICollection[ElementId]
        
            Retrieves room ElementIds of the PlanTopology in the last phase.
            Returns: The PlanTopology Room ElementIds of the last phase.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Circuits = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Circuits of the PlanTopology.

Get: Circuits(self: PlanTopology) -> PlanCircuitSet

"""

    Level = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Level of the PlanTopology.

Get: Level(self: PlanTopology) -> Level

"""

    Phase = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The phase of the PlanTopology.

Get: Phase(self: PlanTopology) -> Phase

"""



class PlanTopologySet(APIObject, IDisposable, IEnumerable):
    """
    A set that can contain any number of plan topology objects.
    
    PlanTopologySet()
    """
    def Clear(self):
        """
        Clear(self: PlanTopologySet)
            Removes every item from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: PlanTopologySet, item: PlanTopology) -> bool
        
            Tests for the existence of an item within the set.
        
            item: The item to be searched for.
            Returns: The Contains method returns True if the item is within the set, otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: PlanTopologySet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: PlanTopologySet, item: PlanTopology) -> int
        
            Removes a specified object from the set.
        
            item: The item to be erased.
            Returns: The number of items that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: PlanTopologySet) -> PlanTopologySetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: PlanTopologySet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: PlanTopologySet, item: PlanTopology) -> bool
        
            Insert the specified item into the set.
        
            item: The item to be inserted into the set.
            Returns: Returns whether the item was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PlanTopologySet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: PlanTopologySet) -> PlanTopologySetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: PlanTopologySet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the set.

Get: Size(self: PlanTopologySet) -> int

"""



class PlanTopologySetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a set of plan topology objects.
    
    PlanTopologySetIterator()
    """
    def Dispose(self):
        """ Dispose(self: PlanTopologySetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: PlanTopologySetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PlanTopologySetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: PlanTopologySetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: PlanTopologySetIterator) -> object

"""



class PlanViewDirection(Enum, IComparable, IFormattable, IConvertible):
    """
    This enumerated type represents the possible directions for a plan view.
    
    enum PlanViewDirection, values: Down (0), Undefined (-1), Up (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Down = None
    Undefined = None
    Up = None
    value__ = None


class PlanViewPlane(Enum, IComparable, IFormattable, IConvertible):
    """
    Locations where view range offsets can be specified.
    
    enum PlanViewPlane, values: BottomClipPlane (2), CutPlane (0), TopClipPlane (1), UnderlayBottom (4), ViewDepthPlane (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BottomClipPlane = None
    CutPlane = None
    TopClipPlane = None
    UnderlayBottom = None
    value__ = None
    ViewDepthPlane = None


class PlanViewRange(object, IDisposable):
    """
    This class represents the view range of a plan view or a plan region.
       It records the element ids of the levels which a plane is relative to
       and the offset of each plane from that level.
    """
    def Dispose(self):
        """ Dispose(self: PlanViewRange) """
        pass

    def GetLevelId(self, planViewPlane):
        """
        GetLevelId(self: PlanViewRange, planViewPlane: PlanViewPlane) -> ElementId
        
            Get the element id of the level for a View Depth plane
        
            planViewPlane: The plane whose level will be returned
            Returns: Id of the level
        """
        pass

    def GetOffset(self, planViewPlane):
        """
        GetOffset(self: PlanViewRange, planViewPlane: PlanViewPlane) -> float
        
            Get the offset value associated with a View Depth plane
        
            planViewPlane: View Depth plane
            Returns: Offset value
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PlanViewRange, disposing: bool) """
        pass

    def SetLevelId(self, planViewPlane, id):
        """
        SetLevelId(self: PlanViewRange, planViewPlane: PlanViewPlane, id: ElementId)
            Set the level for a  View Depth plane
        
            planViewPlane: The View Depth plane
            id: Id of the level
        """
        pass

    def SetOffset(self, planViewPlane, offset):
        """
        SetOffset(self: PlanViewRange, planViewPlane: PlanViewPlane, offset: float)
            Set the offset value associated with a View Depth plane
        
            planViewPlane: View Depth plane
            offset: Offset value
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: PlanViewRange) -> bool

"""


    Current = None
    LevelAbove = None
    LevelBelow = None
    Unlimited = None


class PlanViewRangeError(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes errors in the location of planes in a PlanViewRange object.
    
    enum PlanViewRangeError, values: BottomClipAboveCutPlane (1), TopClipBelowCutPlane (0), ViewDepthAboveBottomClip (2), ViewDepthBelowTopClip (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BottomClipAboveCutPlane = None
    TopClipBelowCutPlane = None
    value__ = None
    ViewDepthAboveBottomClip = None
    ViewDepthBelowTopClip = None


class PlanViewRangeLevel(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type representing the options for seting the range for a plan view.
    
    enum PlanViewRangeLevel, values: Above (-2), Below (-4), Current (-3), Unlimited (-1), Unused (-5)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Above = None
    Below = None
    Current = None
    Unlimited = None
    Unused = None
    value__ = None


class Point(GeometryObject, IDisposable):
    """ A 3D point. """
    @staticmethod
    def Create(coord, id=None):
        """
        Create(coord: XYZ) -> Point
        
            Creates a point at the given coordinates.
        
            coord: The coordinates where the point will be created.
            Returns: A Point object.
        Create(coord: XYZ, id: ElementId) -> Point
        
            Creates a point at the given coordinates and assigns it the specified color.
        
            coord: The coordinates where the point will be created.
            id: The id of the GraphicsStyle element from which to apply the point properties.
            Returns: A Point object.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Coord = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the coordinates of the point.

Get: Coord(self: Point) -> XYZ

"""

    Reference = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns a stable reference to the point.

Get: Reference(self: Point) -> Reference

"""



class PointCloudColorMode(Enum, IComparable, IFormattable, IConvertible):
    """
    Color mode of a point cloud or part of a point cloud
    
    enum PointCloudColorMode, values: Elevation (2), FixedColor (1), Intensity (3), NoOverride (0), Normals (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Elevation = None
    FixedColor = None
    Intensity = None
    NoOverride = None
    Normals = None
    value__ = None


class PointCloudFoundStatus(Enum, IComparable, IFormattable, IConvertible):
    """
    Enumerated type representing the possible states related to searching for a point cloud file.
    
    enum PointCloudFoundStatus, values: FoundOK (2), NotFound (1), Unknown (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FoundOK = None
    NotFound = None
    Unknown = None
    value__ = None


class PointCloudInstance(Instance, IDisposable):
    """ Represents a single instance of a point cloud in the Revit document. """
    def ContainsScan(self, scanName):
        """
        ContainsScan(self: PointCloudInstance, scanName: str) -> bool
        
            Identifies whether the instance contains a scan.
        
            scanName: Name of the scan.
        """
        pass

    @staticmethod
    def Create(document, typeId, transform):
        """
        Create(document: Document, typeId: ElementId, transform: Transform) -> PointCloudInstance
        
            Creates a new instance of a point cloud based on an input point cloud type and 
             transformation.
        
        
            document: The document in which the new instance is created
            typeId: The element id of the PointCloudType.
            transform: The transform that defines the placement of the instance in the Revit document 
             coordinate system.
        
            Returns: The newly created point cloud instance.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetPoints(self, filter, averageDistance, numPoints):
        """
        GetPoints(self: PointCloudInstance, filter: PointCloudFilter, averageDistance: float, numPoints: int) -> PointCollection
        
            Extracts a collection of points based on a filter.
        
            filter: The filter to control which points are extracted. The filter should be passed 
             in the coordinates
           of the Revit model.
        
            averageDistance: Desired average distance between "adjacent" cloud points (Revit units of 
             length).
           The smaller the averageDistance the larger number of points will 
             be returned up to the numPoints limit.
           Specifying this parameter makes 
             actual number of points returned for a given filter independent of the
           
             density of coverage produced by the scanner.
        
            numPoints: The maximum number of points requested.
            Returns: A collection object containing points that pass the filter, but no more than 
             the maximum number requested.
        """
        pass

    def GetRegions(self):
        """
        GetRegions(self: PointCloudInstance) -> IList[str]
        
            Returns array of region names.
            Returns: Resulting array of region names.
        """
        pass

    def GetScanOrigin(self, scanName):
        """
        GetScanOrigin(self: PointCloudInstance, scanName: str) -> XYZ
        
            Returns the origin point of a scan in model coordinates.
        
            scanName: Name of the scan.
            Returns: Resulting origin point of the scan.
        """
        pass

    def GetScans(self):
        """
        GetScans(self: PointCloudInstance) -> IList[str]
        
            Returns array of scan names.
            Returns: Resulting array of scan names.
        """
        pass

    def GetSelectionFilter(self):
        """
        GetSelectionFilter(self: PointCloudInstance) -> PointCloudFilter
        
            Returns the currently active selection filter for this point cloud.
            Returns: Currently active selection filter or ll if none is active.
        """
        pass

    def HasColor(self):
        """
        HasColor(self: PointCloudInstance) -> bool
        
            Returns true if at least one scan of the element have color, false otherwise.
            Returns: True if at least one scan of the element have color, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetSelectionFilter(self, pFilter):
        """
        SetSelectionFilter(self: PointCloudInstance, pFilter: PointCloudFilter)
            Sets active selection filter by cloning of the one passed to it.
        
            pFilter: The filter object to be made active.  If ll is supplied, the
           active filter 
             is removed.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    FilterAction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The action taken based on the results of the selection filter applied to this point cloud.

Get: FilterAction(self: PointCloudInstance) -> SelectionFilterAction

Set: FilterAction(self: PointCloudInstance) = value
"""

    SupportsOverrides = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether the instance can have graphic overrides.

Get: SupportsOverrides(self: PointCloudInstance) -> bool

"""



class PointCloudType(ElementType, IDisposable):
    """
    Represents a type of point cloud loaded into a Revit document.  Each PointCloudType maps to
       a single file or identifier (depending upon the type of Point Cloud Engine which governs it).
    """
    @staticmethod
    def Create(document, engineIdentifier, typeIdentifier):
        """
        Create(document: Document, engineIdentifier: str, typeIdentifier: str) -> PointCloudType
        
            Creates a new point cloud type for a given point cloud engine.
        
            document: The document in which to create the point cloud.
            engineIdentifier: The string identifying the engine to be invoked.
           It should be the file 
             extension or engine identifier registered by the third party.
        
            typeIdentifier: The file name or the identification string for a non-file based engine.
            Returns: The newly created PointCloudType object to be used to create instances of
           
             this point cloud.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetPath(self):
        """
        GetPath(self: PointCloudType) -> ModelPath
        
            Gets the path of the link source from which the points are loaded.
            Returns: Returns the file path for a file based point cloud or null for the non-file 
             based point cloud.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ColorEncoding = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color encoding used by points extracted from instances of this point cloud.

Get: ColorEncoding(self: PointCloudType) -> PointCloudColorEncoding

"""

    EngineIdentifier = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The identifier of the engine responsible for handling of the point cloud.

Get: EngineIdentifier(self: PointCloudType) -> str

"""

    FoundStatus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Shows whether the Point Cloud external file could be found.

Get: FoundStatus(self: PointCloudType) -> PointCloudFoundStatus

"""

    Offset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the offset stored in the point cloud.

Get: Offset(self: PointCloudType) -> XYZ

"""

    Scale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The multiplier applied to the points in all instances of this point cloud.

Get: Scale(self: PointCloudType) -> float

Set: Scale(self: PointCloudType) = value
"""



class PointElementReference(object):
    """
    Base class for objects defining a way to
    constrain a ReferencePoint to one or more other objects in a
    document.
    """

class PointLocationOnCurve(object, IDisposable):
    """
    Defines the measurement parameters necessary to create a point at a specific location on a curve.
    
    PointLocationOnCurve(measType: PointOnCurveMeasurementType, measValue: float, measFrom: PointOnCurveMeasureFrom)
    """
    def Dispose(self):
        """ Dispose(self: PointLocationOnCurve) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PointLocationOnCurve, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, measType, measValue, measFrom):
        """ __new__(cls: type, measType: PointOnCurveMeasurementType, measValue: float, measFrom: PointOnCurveMeasureFrom) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: PointLocationOnCurve) -> bool

"""

    MeasureFrom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The location on the curve from which the measurement is taken.

Get: MeasureFrom(self: PointLocationOnCurve) -> PointOnCurveMeasureFrom

Set: MeasureFrom(self: PointLocationOnCurve) = value
"""

    MeasurementType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The measurement type.

Get: MeasurementType(self: PointLocationOnCurve) -> PointOnCurveMeasurementType

Set: MeasurementType(self: PointLocationOnCurve) = value
"""

    MeasurementValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The measurement value.

Get: MeasurementValue(self: PointLocationOnCurve) -> float

Set: MeasurementValue(self: PointLocationOnCurve) = value
"""



class PointNode(ModelCurveNode, IDisposable):
    """ An output node that represents a 3D point. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def GetPoint(self):
        """
        GetPoint(self: PointNode) -> Point
        
            Returns the point object corresponding to the node.
            Returns: The point instance.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class PointOnCurveMeasureFrom(Enum, IComparable, IFormattable, IConvertible):
    """
    Point on curve MeasureFrom - It tells from which end of the host curve the point location is measured.
    
    enum PointOnCurveMeasureFrom, values: Beginning (1), End (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Beginning = None
    End = None
    value__ = None


class PointOnCurveMeasurementType(Enum, IComparable, IFormattable, IConvertible):
    """
    Point on curve measurement type
       Defines the types of measurements that may be used when placing a point at a designated distance along a curve.
    
    enum PointOnCurveMeasurementType, values: Angle (6), ChordLength (5), NonNormalizedCurveParameter (1), NormalizedCurveParameter (2), NormalizedSegmentLength (4), SegmentLength (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Angle = None
    ChordLength = None
    NonNormalizedCurveParameter = None
    NormalizedCurveParameter = None
    NormalizedSegmentLength = None
    SegmentLength = None
    value__ = None


class PointOnEdge(PointElementReference):
    """
    Define a ReferencePoint relative to a referenceable edge or
    curve on another element.
    """
    def GetEdgeReference(self):
        """
        GetEdgeReference(self: PointOnEdge) -> Reference
        
            Get a copy of the edge or curve reference.
        """
        pass

    def SetEdgeReference(self, reference):
        """
        SetEdgeReference(self: PointOnEdge, reference: Reference)
            Change the edge or curve reference.
        """
        pass

    LocationOnCurve = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The point location on curve.

Get: LocationOnCurve(self: PointOnEdge) -> PointLocationOnCurve

"""



class PointOnEdgeEdgeIntersection(PointElementReference):
    """
    Define a ReferencePoint at the intersection of two
    referenceable lines.
    """
    def GetEdgeReference1(self):
        """
        GetEdgeReference1(self: PointOnEdgeEdgeIntersection) -> Reference
        
            Get a copy of the first edge or curve reference.
        """
        pass

    def GetEdgeReference2(self):
        """
        GetEdgeReference2(self: PointOnEdgeEdgeIntersection) -> Reference
        
            Get a copy of the second edge or curve reference.
        """
        pass

    def SetEdgeReference1(self, edgeReference):
        """
        SetEdgeReference1(self: PointOnEdgeEdgeIntersection, edgeReference: Reference)
            Change the first edge or curve reference.
        """
        pass

    def SetEdgeReference2(self, edgeReference):
        """
        SetEdgeReference2(self: PointOnEdgeEdgeIntersection, edgeReference: Reference)
            Change the second edge or curve reference.
        """
        pass


class PointOnEdgeFaceIntersection(PointElementReference):
    """
    Define a ReferencePoint at the intersection of a referenceable
    edge or curve and a referenceable face.
    """
    def GetEdgeReference(self):
        """
        GetEdgeReference(self: PointOnEdgeFaceIntersection) -> Reference
        
            Get a copy of the edge or curve reference.
        """
        pass

    def GetFaceReference(self):
        """
        GetFaceReference(self: PointOnEdgeFaceIntersection) -> Reference
        
            Get a copy of the face reference.
        """
        pass

    def SetEdgeReference(self, edgeReference):
        """
        SetEdgeReference(self: PointOnEdgeFaceIntersection, edgeReference: Reference)
            Change the edge or curve reference.
        """
        pass

    def SetFaceReference(self, reference):
        """
        SetFaceReference(self: PointOnEdgeFaceIntersection, reference: Reference)
            Change the face reference.
        """
        pass

    OrientWithEdge = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether to orient the ReferencePoint to the edge or the face.

Get: OrientWithEdge(self: PointOnEdgeFaceIntersection) -> bool

Set: OrientWithEdge(self: PointOnEdgeFaceIntersection) = value
"""



class PointOnFace(PointElementReference):
    """ Define a ReferencePoint relative to a Face. """
    def GetFaceReference(self):
        """
        GetFaceReference(self: PointOnFace) -> Reference
        
            Get a copy of the face reference.
        """
        pass

    def SetFaceReference(self, reference):
        """
        SetFaceReference(self: PointOnFace, reference: Reference)
            Change the face reference.
        """
        pass

    UV = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The location of the point in the surface's coordinate system.

Get: UV(self: PointOnFace) -> UV

Set: UV(self: PointOnFace) = value
"""



class PointOnPlane(PointElementReference):
    """ Define a ReferencePoint relative to a planar reference. """
    def GetPlaneReference(self):
        """
        GetPlaneReference(self: PointOnPlane) -> Reference
        
            The geometric plane reference.
            Returns: A copy of the reference stored in the PointOnPlane object.
        """
        pass

    @staticmethod
    def IsValidPlaneReference(doc, planeReference):
        """
        IsValidPlaneReference(doc: Document, planeReference: Reference) -> bool
        
            Check whether a geometry reference
        corresponds to a referenceable plane.
        """
        pass

    @staticmethod
    def NewPointOnPlane(doc, planeReference, position, xvec):
        """
        NewPointOnPlane(doc: Document, planeReference: Reference, position: XYZ, xvec: XYZ) -> PointOnPlane
        
            Construct a PointOnPlane given a reference and a location in space.
        
            doc: The document containing the plane reference.
            position: A 3-dimensional position.
            xvec: The direction of the point's
        X-coordinate vector in the plane's
        coordinates. 
             Optional; default value is the
        X-coordinate vector of the plane.
        
            Returns: A new PointOnPlane object with 2-dimensional Position, XVec, and Offset
        
             properties set to match the given 3-dimensional arguments.
        """
        pass

    def SetPlaneReference(self, planeReference):
        """
        SetPlaneReference(self: PointOnPlane, planeReference: Reference)
            Change the geometric plane reference.
        
            planeReference: A reference to some plane
        in the document. (Note: the reference must satisfy
        
             IsValidPlaneReference(), 
        but this is not checked until this PointOnPlane 
             object
        is assigned to a ReferencePoint.)
        """
        pass

    Offset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Signed offset from the plane.

Get: Offset(self: PointOnPlane) -> float

Set: Offset(self: PointOnPlane) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The coordinates of the point (or its projection)
on the plane.

Get: Position(self: PointOnPlane) -> UV

Set: Position(self: PointOnPlane) = value
"""

    XVec = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The X-coordinate vector of the point, in the
plane's coordinate system.

Get: XVec(self: PointOnPlane) -> UV

Set: XVec(self: PointOnPlane) = value
"""



class PointRelativeToPoint(PointElementReference):
    """ Represents a point placed relative to another point. """
    def GetHostPointReference(self):
        """
        GetHostPointReference(self: PointRelativeToPoint) -> Reference
        
            Get a copy of the host point reference.
        """
        pass

    def SetHostPointReference(self, hostPointReference):
        """
        SetHostPointReference(self: PointRelativeToPoint, hostPointReference: Reference)
            Change the host point reference.
        """
        pass


class PolyLine(GeometryObject, IDisposable):
    """ A polyline. """
    def Clone(self):
        """
        Clone(self: PolyLine) -> PolyLine
        
            Returns a copy of this polyline.
        """
        pass

    @staticmethod
    def Create(coordinates):
        """ Create(coordinates: IList[XYZ]) -> PolyLine """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def Evaluate(self, param):
        """
        Evaluate(self: PolyLine, param: float) -> XYZ
        
            Evaluates a parameter on the polyline.
        
            param: The parameter to be evaluated. It is expected to be in [0,1] interval mapped to 
             the bounds of the whole polyline.
        """
        pass

    def GetCoordinate(self, index):
        """
        GetCoordinate(self: PolyLine, index: int) -> XYZ
        
            Gets the coordinate point of the specified index.
        
            index: The index of the coordinates.
        """
        pass

    def GetCoordinates(self):
        """
        GetCoordinates(self: PolyLine) -> IList[XYZ]
        
            Gets the coordinate points of the polyline.
        """
        pass

    def GetOutline(self):
        """
        GetOutline(self: PolyLine) -> Outline
        
            Gets the outline of the polyline.
        """
        pass

    def GetTransformed(self, transform):
        """
        GetTransformed(self: PolyLine, transform: Transform) -> PolyLine
        
            Gets the copy of the polyline which is applied the specified transformation.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    NumberOfCoordinates = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of the coordinate points.

Get: NumberOfCoordinates(self: PolyLine) -> int

"""



class PolylineNode(ModelCurveNode, IDisposable):
    """ An output node that represents a 3D polyline. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def GetPolyline(self):
        """
        GetPolyline(self: PolylineNode) -> PolyLine
        
            Returns the polyline object corresponding to the node.
            Returns: The polyline instance.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class PolylineSegments(object, IDisposable):
    """ An output node that represents a tessellated polyline segments. """
    def Dispose(self):
        """ Dispose(self: PolylineSegments) """
        pass

    def GetVertices(self):
        """
        GetVertices(self: PolylineSegments) -> IList[XYZ]
        
            Returns an array of vertices of the polyline segments.
            Returns: Array of XYZ points.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PolylineSegments, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    EndLocalParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Local parameter associated with the end point.

Get: EndLocalParameter(self: PolylineSegments) -> float

"""

    EndParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Parameter associated with the end point.

Get: EndParameter(self: PolylineSegments) -> float

"""

    IsFilled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the area enclosed by the polyline is to be filled or not.

Get: IsFilled(self: PolylineSegments) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: PolylineSegments) -> bool

"""

    LineProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Access to the line (pen) properties of the polyline

Get: LineProperties(self: PolylineSegments) -> LineProperties

"""

    StartLocalParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Local parameter associated with the start point.

Get: StartLocalParameter(self: PolylineSegments) -> float

"""

    StartParameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Parameter associated with the start point.

Get: StartParameter(self: PolylineSegments) -> float

"""



class PolymeshFacet(object):
    """ A class representing one triangular piece - a facet - in a polymesh topology. """
    def GetVertices(self):
        """
        GetVertices(self: PolymeshFacet) -> IList[int]
        
            Returns the three vertices that define this facet
        """
        pass

    def ToString(self):
        """
        ToString(self: PolymeshFacet) -> str
        
            Returns formatted string showing (V1, V2, V3) with values formatted as regular 
             integers
        """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: PolymeshFacet) -> bool

"""

    V1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The first vertex of the facet

Get: V1(self: PolymeshFacet) -> int

"""

    V2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The second vertex of the facet

Get: V2(self: PolymeshFacet) -> int

"""

    V3 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The third vertex of the facet

Get: V3(self: PolymeshFacet) -> int

"""



class PolymeshTopology(object, IDisposable):
    """ A class representing topology of a polymesh. """
    def Dispose(self):
        """ Dispose(self: PolymeshTopology) """
        pass

    def GetFacet(self, idx):
        """
        GetFacet(self: PolymeshTopology, idx: int) -> PolymeshFacet
        
            Returns a definition of one facet
        
            idx: A zero-based index of the facet
            Returns: An instance of PolymeshFacet that represents
           one facet defined by 3 
             vertices of the polymesh.
        """
        pass

    def GetFacets(self):
        """
        GetFacets(self: PolymeshTopology) -> IList[PolymeshFacet]
        
            Returns a definitions of all facets of the polymesh
            Returns: An array of PolymeshFacet instances, each of which represents
           one facet 
             defined by 3 vertices of the polymesh.
        """
        pass

    def GetNormal(self, idx):
        """
        GetNormal(self: PolymeshTopology, idx: int) -> XYZ
        
            Returns a normal vector at the given index
        
            idx: A zero-based index
            Returns: XYZ value representing a normal vector
        """
        pass

    def GetNormals(self):
        """
        GetNormals(self: PolymeshTopology) -> IList[XYZ]
        
            Returns all normals assigned to the polymesh
            Returns: An array of XYZ values, each representing a normal vector
        """
        pass

    def GetPoint(self, idx):
        """
        GetPoint(self: PolymeshTopology, idx: int) -> XYZ
        
            Returns one point at the given index.
        
            idx: A zero-based index of a polymesh point
            Returns: XYZ coordinates of the point
        """
        pass

    def GetPoints(self):
        """
        GetPoints(self: PolymeshTopology) -> IList[XYZ]
        
            Returns all points of the polymesh.
            Returns: An array of XYZ coordinates
        """
        pass

    def GetUV(self, idx):
        """
        GetUV(self: PolymeshTopology, idx: int) -> UV
        
            Returns one UV coordinate at the given index.
        
            idx: A zero-based index of a UV coordinate
            Returns: UV coordinates at the given index
        """
        pass

    def GetUVs(self):
        """
        GetUVs(self: PolymeshTopology) -> IList[UV]
        
            Returns all UV coordinates assigned to the polymesh
            Returns: An array of UV coordinates
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: PolymeshTopology, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DistributionOfNormals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the distribution of normal vectors along the tessellated polymesh surface.

Get: DistributionOfNormals(self: PolymeshTopology) -> DistributionOfNormals

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: PolymeshTopology) -> bool

"""

    NumberOfFacets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of facet in the polymesh.

Get: NumberOfFacets(self: PolymeshTopology) -> int

"""

    NumberOfNormals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of normals associated with the polymesh

Get: NumberOfNormals(self: PolymeshTopology) -> int

"""

    NumberOfPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of points in the polymesh

Get: NumberOfPoints(self: PolymeshTopology) -> int

"""

    NumberOfUVs = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of UV coordinates available for the polymesh.

Get: NumberOfUVs(self: PolymeshTopology) -> int

"""



class PreferredJunctionType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enumerated type representing the possible options for the preferred junction for a routine preference rule.
    
    enum PreferredJunctionType, values: Tap (1), Tee (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Tap = None
    Tee = None
    value__ = None


class PreviewFamilyVisibilityMode(Enum, IComparable, IFormattable, IConvertible):
    """
    Modes that control visibility of family elements depending on
       the currently applied Element Visibility Settings of a view.
    
    enum PreviewFamilyVisibilityMode, values: Off (0), On (1), Uncut (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Off = None
    On = None
    Uncut = None
    value__ = None


class PrimaryDesignOptionMemberFilter(ElementSlowFilter, IDisposable):
    """
    A filter used to find elements contained in any primary design option of any design option set.
    
    PrimaryDesignOptionMemberFilter(inverted: bool)
    PrimaryDesignOptionMemberFilter()
    """
    def Dispose(self):
        """ Dispose(self: ElementFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ElementFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, inverted=None):
        """
        __new__(cls: type, inverted: bool)
        __new__(cls: type)
        """
        pass


class RoutingCriterionBase(object, IDisposable):
    """ RoutingCriteriaBase is the base class for all routing criteria. """
    def Dispose(self):
        """ Dispose(self: RoutingCriterionBase) """
        pass

    def IsEqual(self, pOther):
        """
        IsEqual(self: RoutingCriterionBase, pOther: RoutingCriterionBase) -> bool
        
            Verify if two criteria are the same.
            Returns: True if the criterion is equal to the other, false otherwise
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RoutingCriterionBase, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RoutingCriterionBase) -> bool

"""



class PrimarySizeCriterion(RoutingCriterionBase, IDisposable):
    """
    This class contains a size criterion for a RoutingPreferenceRule.
    
    PrimarySizeCriterion(minimumSize: float, maximumSize: float)
    """
    @staticmethod
    def All():
        """
        All() -> PrimarySizeCriterion
        
            Creates a criterion with a range of all sizes.
            Returns: The new criterion.
        """
        pass

    def Dispose(self):
        """ Dispose(self: RoutingCriterionBase, A_0: bool) """
        pass

    @staticmethod
    def None():
        """
        None() -> PrimarySizeCriterion
        
            Creates a criterion with a range of no sizes.
            Returns: The new criterion.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RoutingCriterionBase, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, minimumSize, maximumSize):
        """ __new__(cls: type, minimumSize: float, maximumSize: float) """
        pass

    MaximumSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The maximum size of this criterion.

Get: MaximumSize(self: PrimarySizeCriterion) -> float

Set: MaximumSize(self: PrimarySizeCriterion) = value
"""

    MinimumSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The minimum size of this criterion.

Get: MinimumSize(self: PrimarySizeCriterion) -> float

Set: MinimumSize(self: PrimarySizeCriterion) = value
"""



class PrinterResolution(Enum, IComparable, IFormattable, IConvertible):
    """
    Controls the resolution level in rendering settings.
    
    enum PrinterResolution, values: High (2), Low (0), Medium (1), VeryHigh (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    High = None
    Low = None
    Medium = None
    value__ = None
    VeryHigh = None


class PrintManager(APIObject, IDisposable):
    """ The PrintManager object is used to configure the global print settings. """
    def Apply(self):
        """
        Apply(self: PrintManager)
            Apply the local print settings to global for all documents.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def SelectNewPrintDriver(self, strPrinterName):
        """
        SelectNewPrintDriver(self: PrintManager, strPrinterName: str)
            Select a new printer.
        
            strPrinterName: The name string of new printer.
        """
        pass

    def SubmitPrint(self, view=None):
        """
        SubmitPrint(self: PrintManager) -> bool
        
            Print the views and sheets defined in the current local PrintManager settings.
            Returns: True if successful, otherwise False.
        SubmitPrint(self: PrintManager, view: View) -> bool
        
            Print a view with the current PrintManager settings.
        
            view: The User-assigned view.
            Returns: True if successful, otherwise False.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Collate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to collate of the current print.

Get: Collate(self: PrintManager) -> bool

Set: Collate(self: PrintManager) = value
"""

    CombinedFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to combine multiple selected views/sheets into a single file.

Get: CombinedFile(self: PrintManager) -> bool

Set: CombinedFile(self: PrintManager) = value
"""

    CopyNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The copy number.

Get: CopyNumber(self: PrintManager) -> int

Set: CopyNumber(self: PrintManager) = value
"""

    IsVirtual = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The virtual type in Autodesk Revit.

Get: IsVirtual(self: PrintManager) -> VirtualPrinterType

"""

    PaperSizes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get all print sizes of current printer.

Get: PaperSizes(self: PrintManager) -> PaperSizeSet

"""

    PaperSources = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get all print sources of current printer.

Get: PaperSources(self: PrintManager) -> PaperSourceSet

"""

    PrinterName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the current printer.

Get: PrinterName(self: PrintManager) -> str

"""

    PrintOrderReverse = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to reverse the print order of the current print.

Get: PrintOrderReverse(self: PrintManager) -> bool

Set: PrintOrderReverse(self: PrintManager) = value
"""

    PrintRange = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The print range.

Get: PrintRange(self: PrintManager) -> PrintRange

Set: PrintRange(self: PrintManager) = value
"""

    PrintSetup = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The PrintSetup which manages the print settings of current document.

Get: PrintSetup(self: PrintManager) -> PrintSetup

"""

    PrintToFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to print to file.

Get: PrintToFile(self: PrintManager) -> bool

Set: PrintToFile(self: PrintManager) = value
"""

    PrintToFileName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The file name when printing to file.

Get: PrintToFileName(self: PrintManager) -> str

Set: PrintToFileName(self: PrintManager) = value
"""

    ViewSheetSetting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ViewSheetSetting which manages the view/sheet set information of current document, and you can change the default view/sheet
set for current project.

Get: ViewSheetSetting(self: PrintManager) -> ViewSheetSetting

"""



class PrintParameters(APIObject, IDisposable):
    """ An object that contains settings used for printing the document. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ColorDepth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color depth type.

Get: ColorDepth(self: PrintParameters) -> ColorDepthType

Set: ColorDepth(self: PrintParameters) = value
"""

    HiddenLineViews = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The hidden line views type.

Get: HiddenLineViews(self: PrintParameters) -> HiddenLineViewsType

Set: HiddenLineViews(self: PrintParameters) = value
"""

    HideCropBoundaries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to hide crop boundaries when printing.

Get: HideCropBoundaries(self: PrintParameters) -> bool

Set: HideCropBoundaries(self: PrintParameters) = value
"""

    HideReforWorkPlanes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to hide reference/work planes when printing.

Get: HideReforWorkPlanes(self: PrintParameters) -> bool

Set: HideReforWorkPlanes(self: PrintParameters) = value
"""

    HideScopeBoxes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to hide scope boxes when printing.

Get: HideScopeBoxes(self: PrintParameters) -> bool

Set: HideScopeBoxes(self: PrintParameters) = value
"""

    HideUnreferencedViewTags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to hide unreferenced view tags when printing.

Get: HideUnreferencedViewTags(self: PrintParameters) -> bool

Set: HideUnreferencedViewTags(self: PrintParameters) = value
"""

    MarginType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The print margin type.

Get: MarginType(self: PrintParameters) -> MarginType

Set: MarginType(self: PrintParameters) = value
"""

    MaskCoincidentLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to mask coincident lines when printing.

Get: MaskCoincidentLines(self: PrintParameters) -> bool

Set: MaskCoincidentLines(self: PrintParameters) = value
"""

    PageOrientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Page Orientation of the Print Setting.

Get: PageOrientation(self: PrintParameters) -> PageOrientationType

Set: PageOrientation(self: PrintParameters) = value
"""

    PaperPlacement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The paper placement type.

Get: PaperPlacement(self: PrintParameters) -> PaperPlacementType

Set: PaperPlacement(self: PrintParameters) = value
"""

    PaperSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The page size.

Get: PaperSize(self: PrintParameters) -> PaperSize

Set: PaperSize(self: PrintParameters) = value
"""

    PaperSource = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The page source.

Get: PaperSource(self: PrintParameters) -> PaperSource

Set: PaperSource(self: PrintParameters) = value
"""

    RasterQuality = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The raster quality type.

Get: RasterQuality(self: PrintParameters) -> RasterQualityType

Set: RasterQuality(self: PrintParameters) = value
"""

    ReplaceHalftoneWithThinLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to replace halftone with thin lines when printing.

Get: ReplaceHalftoneWithThinLines(self: PrintParameters) -> bool

Set: ReplaceHalftoneWithThinLines(self: PrintParameters) = value
"""

    UserDefinedMarginX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The User defined X value of offset from left bottom corner.

Get: UserDefinedMarginX(self: PrintParameters) -> float

Set: UserDefinedMarginX(self: PrintParameters) = value
"""

    UserDefinedMarginY = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The User defined Y value of offset from left bottom corner

Get: UserDefinedMarginY(self: PrintParameters) -> float

Set: UserDefinedMarginY(self: PrintParameters) = value
"""

    ViewLinksinBlue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to view links in blue when printing.

Get: ViewLinksinBlue(self: PrintParameters) -> bool

Set: ViewLinksinBlue(self: PrintParameters) = value
"""

    Zoom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The zoom value to a percentage of the original size.

Get: Zoom(self: PrintParameters) -> int

Set: Zoom(self: PrintParameters) = value
"""

    ZoomType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The zoom type.

Get: ZoomType(self: PrintParameters) -> ZoomType

Set: ZoomType(self: PrintParameters) = value
"""



class PrintRange(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all Print Range types of Print.
    
    enum PrintRange, values: Current (0), Select (2), Visible (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Current = None
    Select = None
    value__ = None
    Visible = None


class PrintSetting(Element, IDisposable, IPrintSetting):
    """ Represents the Print Setup (Application Menu->Print->Print Setup) within Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Name of Print Setup.

Get: Name(self: PrintSetting) -> str

Set: Name(self: PrintSetting) = value
"""

    PrintParameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Parameters of Print Setup.

Get: PrintParameters(self: PrintSetting) -> PrintParameters

"""



class PrintSetup(APIObject, IDisposable):
    """ Represents the Print Setup (Application Menu->Print->Print Setup) within Autodesk Revit. """
    def Delete(self):
        """
        Delete(self: PrintSetup) -> bool
        
            Delete the current print setting, and make the In-Session setting as the 
             current one.
        
            Returns: False if Delete operation fails, otherwise true.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Rename(self, newName):
        """
        Rename(self: PrintSetup, newName: str) -> bool
        
            Rename the current print setting with the specified name.
        
            newName: print setting name to be renamed as.
            Returns: False if Rename operation fails, otherwise true.
        """
        pass

    def Revert(self):
        """
        Revert(self: PrintSetup)
            Revert the current print setting.
        """
        pass

    def Save(self):
        """
        Save(self: PrintSetup) -> bool
        
            Save the changes for the current print setting.
            Returns: False if save operation fails, otherwise True.
        """
        pass

    def SaveAs(self, newName):
        """
        SaveAs(self: PrintSetup, newName: str) -> bool
        
            Save the current print setting to another print setting with the specified name.
        
            newName: print setting name to be saved as.
            Returns: False if Save As operation fails, otherwise true.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CurrentPrintSetting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current Print Setting of Print Setup.

Get: CurrentPrintSetting(self: PrintSetup) -> IPrintSetting

Set: CurrentPrintSetting(self: PrintSetup) = value
"""

    InSession = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The in-session Print Setting of Print Setup.

Get: InSession(self: PrintSetup) -> InSessionPrintSetting

"""



class Profile(GeometryObject, IDisposable):
    """ A geometric profile consisting of a loop of curves. """
    def Clone(self):
        """
        Clone(self: Profile) -> Profile
        
            Returns a copy of this profile.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Curves = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieve the curves that make up the boundary of the profile.

Get: Curves(self: Profile) -> CurveArray

"""

    Filled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or set whether the profile is filled.

Get: Filled(self: Profile) -> bool

Set: Filled(self: Profile) = value
"""



class ProfileFamilyUsage(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all types of profile families.
    
    enum ProfileFamilyUsage, values: Any (0), ContinuousFooting (10), Fascia (3), Gutter (4), Mullion (8), Railing (6), Reveal (2), SlabEdge (5), SlabMetalDeck (9), StairNosing (7), StairRiser (12), StairSupport (13), StairTread (11), WallSweep (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Any = None
    ContinuousFooting = None
    Fascia = None
    Gutter = None
    Mullion = None
    Railing = None
    Reveal = None
    SlabEdge = None
    SlabMetalDeck = None
    StairNosing = None
    StairRiser = None
    StairSupport = None
    StairTread = None
    value__ = None
    WallSweep = None


class ProfilePlaneLocation(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the location of Sweep profile plane on the path curve.
    
    enum ProfilePlaneLocation, values: End (2), MidPoint (1), Start (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    End = None
    MidPoint = None
    Start = None
    value__ = None


class ProjectInfo(Element, IDisposable):
    """ An object that represents a Project Information within the Autodesk Revit project. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Address = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or Set the Project Address of the Project Information.

Get: Address(self: ProjectInfo) -> str

Set: Address(self: ProjectInfo) = value
"""

    Author = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or Set the Project Author of the Project Information.

Get: Author(self: ProjectInfo) -> str

Set: Author(self: ProjectInfo) = value
"""

    BuildingName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or Set the Building Name of the Project Information.

Get: BuildingName(self: ProjectInfo) -> str

Set: BuildingName(self: ProjectInfo) = value
"""

    ClientName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or Set the Client Name of the Project Information.

Get: ClientName(self: ProjectInfo) -> str

Set: ClientName(self: ProjectInfo) = value
"""

    IssueDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or Set the Project Issue Date of the Project Information.

Get: IssueDate(self: ProjectInfo) -> str

Set: IssueDate(self: ProjectInfo) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or Set the Project Name of the Project Information.

Get: Name(self: ProjectInfo) -> str

Set: Name(self: ProjectInfo) = value
"""

    Number = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or Set the Project Number of the Project Information.

Get: Number(self: ProjectInfo) -> str

Set: Number(self: ProjectInfo) = value
"""

    OrganizationDescription = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or Set the Organization Description of the Project Information.

Get: OrganizationDescription(self: ProjectInfo) -> str

Set: OrganizationDescription(self: ProjectInfo) = value
"""

    OrganizationName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or Set the Organization Name of the Project Information.

Get: OrganizationName(self: ProjectInfo) -> str

Set: OrganizationName(self: ProjectInfo) = value
"""

    Status = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get or Set the Project Status of the Project Information.

Get: Status(self: ProjectInfo) -> str

Set: Status(self: ProjectInfo) = value
"""



class ProjectLocation(Instance, IDisposable):
    """ An object that represents a named location in a project. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def Duplicate(self, name):
        """
        Duplicate(self: ProjectLocation, name: str) -> ProjectLocation
        
            Generate a copy of this project location with the specified name.
        
            name: The name to be assigned to the duplicated project location.
            Returns: If successful a duplicate of this project location object with the specified 
             name.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the project location.

Get: Name(self: ProjectLocation) -> str

Set: Name(self: ProjectLocation) = value
"""

    SiteLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The site location to which this project location refers.

Get: SiteLocation(self: ProjectLocation) -> SiteLocation

"""



class ProjectLocationSet(APIObject, IDisposable, IEnumerable):
    """
    An set that contains project locations.
    
    ProjectLocationSet()
    """
    def Clear(self):
        """
        Clear(self: ProjectLocationSet)
            Removes every project location from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: ProjectLocationSet, item: ProjectLocation) -> bool
        
            Tests for the existence of a project location within the set.
        
            item: The project location to be searched for.
            Returns: The Contains method returns True if the project location is within the set, 
             otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ProjectLocationSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: ProjectLocationSet, item: ProjectLocation) -> int
        
            Removes a specified project location from the set.
        
            item: The project location to be erased.
            Returns: The number of project locations that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ProjectLocationSet) -> ProjectLocationSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ProjectLocationSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: ProjectLocationSet, item: ProjectLocation) -> bool
        
            Insert the specified project location into the set.
        
            item: The project location to be inserted into the set.
            Returns: Returns whether the project location was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ProjectLocationSet) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ProjectLocationSet) -> ProjectLocationSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: ProjectLocationSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of project locations that are in the set.

Get: Size(self: ProjectLocationSet) -> int

"""



class ProjectLocationSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a project location set.
    
    ProjectLocationSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: ProjectLocationSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ProjectLocationSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ProjectLocationSetIterator) """
        pass

    def Reset(self):
        """
        Reset(self: ProjectLocationSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ProjectLocationSetIterator) -> object

"""



class ProjectPosition(APIObject, IDisposable):
    """
    An object that is used to represent a geographical offset and rotation.
    
    ProjectPosition(ew: float, ns: float, elevation: float, angle: float)
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, ew, ns, elevation, angle):
        """ __new__(cls: type, ew: float, ns: float, elevation: float, angle: float) """
        pass

    Angle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Angle from True North

Get: Angle(self: ProjectPosition) -> float

Set: Angle(self: ProjectPosition) = value
"""

    EastWest = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """East/West offset

Get: EastWest(self: ProjectPosition) -> float

Set: EastWest(self: ProjectPosition) = value
"""

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Elevation above ground level.

Get: Elevation(self: ProjectPosition) -> float

Set: Elevation(self: ProjectPosition) = value
"""

    NorthSouth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """North/South offset

Get: NorthSouth(self: ProjectPosition) -> float

Set: NorthSouth(self: ProjectPosition) = value
"""



class PropertyLine(Element, IDisposable):
    """ Represents kinds of PropertyLines. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class PropertySetElement(Element, IDisposable):
    """ An element that groups together a set of related parameters. """
    @staticmethod
    def Create(document, *__args):
        """
        Create(document: Document, structuralAsset: StructuralAsset) -> PropertySetElement
        
            Creates a new PropertySetElement to contain the given asset.
        
            document: The document in which to create the PropertySetElement.
            structuralAsset: The structural asset containing the values that will be present in the 
             PropertySetElement.
        
            Returns: The new PropertySetElement.
        Create(document: Document, thermalAsset: ThermalAsset) -> PropertySetElement
        
            Creates a new PropertySetElement to contain the given asset.
        
            document: The document in which to create the PropertySetElement.
            thermalAsset: The thermal asset containing the values that will be present in the 
             PropertySetElement.
        
            Returns: The new PropertySetElement.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def Duplicate(self, document, name):
        """
        Duplicate(self: PropertySetElement, document: Document, name: str) -> PropertySetElement
        
            Creates a duplicate of this PropertySetElement.
        
            document: The document in which to create the PropertySetElement.
            name: The name to use for the new PropertySetElement.
            Returns: The new PropertySetElement.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetStructuralAsset(self):
        """
        GetStructuralAsset(self: PropertySetElement) -> StructuralAsset
        
            Gets a copy of the StructuralAsset.
        """
        pass

    def GetThermalAsset(self):
        """
        GetThermalAsset(self: PropertySetElement) -> ThermalAsset
        
            Gets a copy of the ThermalAsset.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetStructuralAsset(self, structuralAsset):
        """
        SetStructuralAsset(self: PropertySetElement, structuralAsset: StructuralAsset)
            Sets a copy of the given StucturalAsset to be used in the PropertySetElement.
        """
        pass

    def SetThermalAsset(self, thermalAsset):
        """
        SetThermalAsset(self: PropertySetElement, thermalAsset: ThermalAsset)
            Sets a copy of the given ThermalAsset to be used in the PropertySetElement.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class PropertySetLibrary(Element, IDisposable):
    """ A named collection of property sets. """
    def AddPropertySet(self, propertySetId):
        """
        AddPropertySet(self: PropertySetLibrary, propertySetId: ElementId)
            Adds a property set from the document to this library.
        
            propertySetId: Identifier of the property set to add.
        """
        pass

    def AddPropertySetWithName(self, propertySetId, name):
        """
        AddPropertySetWithName(self: PropertySetLibrary, propertySetId: ElementId, name: str)
            Adds a property set from the document to this library using an alternate name.
        
            propertySetId: Identifier of the property set to add.
            name: The alternate name to use for the property set in the library.
        """
        pass

    def AddToDocument(self, name, document, overwrite):
        """
        AddToDocument(self: PropertySetLibrary, name: str, document: Document, overwrite: bool) -> PropertySetElement
        
            Adds a property set from a library to the document.  The property set
           will 
             be available for use even if the library is unloaded.
        
        
            name: The name of the property set in the library to add to the document.
           Will 
             also become the name of the property set element created in the document.
        
            document: The document to which the property set will be added.
            overwrite: If true, any existing property set with the given name will be overwritten.
            Returns: The new PropertySetElement.
        """
        pass

    def AddToDocumentWithName(self, name, document, overwrite, addAsName):
        """
        AddToDocumentWithName(self: PropertySetLibrary, name: str, document: Document, overwrite: bool, addAsName: str) -> PropertySetElement
        
            Adds a property set from a library to the document.  The property set
           will 
             be available for use even if the library is unloaded.
        
        
            name: The name of the property set in the library to add to the document.
            document: The document to which the property set will be added.
            overwrite: If true, any existing property set with the given name will be overwritten.
            addAsName: The name to use for the new property set element in the document.
            Returns: The new PropertySetElement.
        """
        pass

    @staticmethod
    def Create(document):
        """
        Create(document: Document) -> PropertySetLibrary
        
            Creates a new property set library in the given document.
        
            document: The document in which to create the new property set library.
            Returns: The new PropertySetLibrary.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def ExportXml(self, fileName):
        """
        ExportXml(self: PropertySetLibrary, fileName: str) -> bool
        
            Export this property set library to an external, XML-based file.
        
            fileName: Name of the file to write.
            Returns: True if the export succeeded, otherwise false.
        """
        pass

    @staticmethod
    def Find(doc, name):
        """
        Find(doc: Document, name: str) -> ElementId
        
            Finds an existing PropertySetLibrary with a given name.
        
            doc: The document in which to look for PropertySetLibrary elements with the given 
             name.
        
            name: The name to search for.
            Returns: Identifier of the PropertySetLibrary with the given name, or
           
             invalidElementId if no library with that name exists.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetName(self):
        """
        GetName(self: PropertySetLibrary) -> str
        
            Gets the name of the property set library.
        """
        pass

    def HasPropertySet(self, name):
        """
        HasPropertySet(self: PropertySetLibrary, name: str) -> bool
        
            Determines whether the library has a property set with a given name.
        
            name: The property set name to look for.
            Returns: True if the library contains a property set with the given name, otherwise 
             false.
        """
        pass

    @staticmethod
    def ImportXml(document, fileName, overwriteExisting):
        """
        ImportXml(document: Document, fileName: str, overwriteExisting: bool) -> PropertySetLibrary
        
            Import an external property set library into a Revit document.
        
            document: The document.
            fileName: Full path to a file containing a property set library definition.
            overwriteExisting: If true, any name conflicts will be resolved by overwriting existing
           
             libraries in the document with those being imported.
        
            Returns: The new PropertySetLibrary.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemovePropertySet(self, name):
        """
        RemovePropertySet(self: PropertySetLibrary, name: str) -> bool
        
            Removes a property set with a given name from the library.
        
            name: The name of the property set name to remove.
            Returns: True if a property set with the given name was found and removed, otherwise 
             false.
        """
        pass

    def RenamePropertySet(self, name, newName):
        """
        RenamePropertySet(self: PropertySetLibrary, name: str, newName: str) -> bool
        
            Renames a property set in the library.
        
            name: The name of the existing property set name to rename.
            newName: The new name for the property set.
            Returns: True if the property set was found and renamed, otherwise false.
        """
        pass

    def RenameSubclass(self, oldSubclass, newSubclass):
        """
        RenameSubclass(self: PropertySetLibrary, oldSubclass: str, newSubclass: str) -> int
        
            Changes the subclass field of all property sets in this library from one value 
             to another.
        
        
            oldSubclass: The existing subclass to rename.
            newSubclass: The new subclass applied to all property sets matching the given oldSubclass.
            Returns: The number of property sets whose subclass was changed.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetName(self, name):
        """
        SetName(self: PropertySetLibrary, name: str)
            Sets the name of the property set library.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Locked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether a property set library is locked into a document or not.
   Locked libraries are read-only and cannot be removed.

Get: Locked(self: PropertySetLibrary) -> bool

"""

    ReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether a property set library is read-only or not.
   Read-only libraries cannot be renamed, or added to.

Get: ReadOnly(self: PropertySetLibrary) -> bool

Set: ReadOnly(self: PropertySetLibrary) = value
"""



class PropOverrideMode(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing ways how overridden object styles get exported.
    
    enum PropOverrideMode, values: ByEntity (0), ByLayer (1), NewLayer (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ByEntity = None
    ByLayer = None
    NewLayer = None
    value__ = None


class RadialArray(BaseArray, IDisposable):
    """ An object that represents an Array created along a circle arc within the Revit project. """
    @staticmethod
    def ArrayElementsWithoutAssociation(aDoc, dBView, ids, count, axis, angle, anchorMember):
        """ ArrayElementsWithoutAssociation(aDoc: Document, dBView: View, ids: ICollection[ElementId], count: int, axis: Line, angle: float, anchorMember: ArrayAnchorMember) -> ICollection[ElementId] """
        pass

    @staticmethod
    def ArrayElementWithoutAssociation(aDoc, dBView, id, count, axis, angle, anchorMember):
        """
        ArrayElementWithoutAssociation(aDoc: Document, dBView: View, id: ElementId, count: int, axis: Line, angle: float, anchorMember: ArrayAnchorMember) -> ICollection[ElementId]
        
            Creates a new radial array from a single element based
           on an input rotation 
             axis.
        
        
            aDoc: The view. If it is a 2d view, translation vector must be in the view plane if 
             the element is a view-specific element.
        
            dBView: The view.
            id: The element to array. The position of the rotation
           axis is determined by 
             the center of the element's bounding boxes.
        
            count: The number of array members to create. The accepted range is from 3 to 200.
            axis: The rotation axis.
            angle: The angle in radians of the rotation.
            anchorMember: Indicates if the translation vector specifies the location of the second member
             
           of the array, or the last member of the array.
        
            Returns: The elements created by the operation.
        """
        pass

    @staticmethod
    def Create(aDoc, dBView, *__args):
        """
        Create(aDoc: Document, dBView: View, ids: ICollection[ElementId], count: int, axis: Line, angle: float, anchorMember: ArrayAnchorMember) -> RadialArray
        Create(aDoc: Document, dBView: View, id: ElementId, count: int, axis: Line, angle: float, anchorMember: ArrayAnchorMember) -> RadialArray
        
            Creates a new radial array element from a single element based
           on an input 
             rotation axis.
        
        
            aDoc: The document.
            dBView: The view. If it is a 2d view, translation vector must be in the view plane if 
             the element is a view-specific element.
        
            id: The element to array. The position of the rotation
           axis is determined by 
             the center of the element's bounding boxes.
        
            count: The number of array members to create. The accepted range is from 3 to 200.
            axis: The rotation axis.
            angle: The angle in radians of the rotation.
            anchorMember: Indicates if the translation vector specifies the location of the second member
             
           of the array, or the last member of the array.
        
            Returns: The new radial array element.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetCopiedMemberIds(self):
        """
        GetCopiedMemberIds(self: RadialArray) -> ICollection[ElementId]
        
            Retrieves the copied member Ids of the Array.
            Returns: The copied member Ids of the Array
        """
        pass

    def GetOriginalMemberIds(self):
        """
        GetOriginalMemberIds(self: RadialArray) -> ICollection[ElementId]
        
            Retrieves the original member Ids of the Array.
            Returns: The original member Ids of the Array
        """
        pass

    @staticmethod
    def IsValidArraySize(count):
        """
        IsValidArraySize(count: int) -> bool
        
            This indicates whether the input count is valid.
        
            count: The count.
            Returns: True if the input count is between 3 and 200, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    NumMembers = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the number of the arrayed members.

Get: NumMembers(self: RadialArray) -> int

Set: NumMembers(self: RadialArray) = value
"""



class RasterQualityType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing the options for raster quality.
    
    enum RasterQualityType, values: High (300), Low (72), Medium (150), Presentation (600)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    High = None
    Low = None
    Medium = None
    Presentation = None
    value__ = None


class Rectangle(object, IDisposable):
    """
    Stores a set of four integers that represent the left, top, right and bottom of a rectangle.
    
    Rectangle(left: int, top: int, right: int, bottom: int)
    Rectangle()
    Rectangle(other: Rectangle)
    """
    def Dispose(self):
        """ Dispose(self: Rectangle) """
        pass

    def IsNormalized(self):
        """
        IsNormalized(self: Rectangle) -> bool
        
            Returns true if the rectangle coordinates are normalized to the screen 
             coordinate space; that is, left is less than right and top is less than bottom.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Rectangle, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, left: int, top: int, right: int, bottom: int)
        __new__(cls: type)
        __new__(cls: type, other: Rectangle)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Bottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The y-coordinate of the bottom-right corner of the rectangle.

Get: Bottom(self: Rectangle) -> int

Set: Bottom(self: Rectangle) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: Rectangle) -> bool

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The x-coordinate of the top-left corner of the rectangle.

Get: Left(self: Rectangle) -> int

Set: Left(self: Rectangle) = value
"""

    Right = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The x-coordinate of the bottom-right corner of the rectangle.

Get: Right(self: Rectangle) -> int

Set: Right(self: Rectangle) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The y-coordinate of the top-left corner of the rectangle.

Get: Top(self: Rectangle) -> int

Set: Top(self: Rectangle) = value
"""



class RectangularGridSegmentOrientation(Enum, IComparable, IFormattable, IConvertible):
    """
    The orientation type of rectangular grid segment.
    
    enum RectangularGridSegmentOrientation, values: Horizontal (1), Vertical (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Horizontal = None
    value__ = None
    Vertical = None


class Reference(APIObject, IDisposable):
    """
    A stable reference to a geometric object in a Revit model.
    
    Reference(element: Element)
    """
    def ConvertToStableRepresentation(self, document):
        """
        ConvertToStableRepresentation(self: Reference, document: Document) -> str
        
            Converts the reference to a stable String representation.
        
            document: The document.
        """
        pass

    def CreateLinkReference(self, revitLinkInstance):
        """
        CreateLinkReference(self: Reference, revitLinkInstance: RevitLinkInstance) -> Reference
        
            Creates a Reference from a Reference in an RVT Link.
        
            revitLinkInstance: Id of the RevitLinkInstance that contains the reference.
        """
        pass

    def CreateReferenceInLink(self):
        """
        CreateReferenceInLink(self: Reference) -> Reference
        
            Creates a Reference in an RVT Link from a Reference in the RVT host file.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    @staticmethod
    def ParseFromStableRepresentation(document, representation):
        """
        ParseFromStableRepresentation(document: Document, representation: str) -> Reference
        
            Converts a stable String representation of a reference to a Reference object.
        
            document: The document.
            representation: The reference representation.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, element):
        """ __new__(cls: type, element: Element) """
        pass

    ElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element id for this reference.

Get: ElementId(self: Reference) -> ElementId

"""

    ElementReferenceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of reference.

Get: ElementReferenceType(self: Reference) -> ElementReferenceType

"""

    GlobalPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position on which the reference is hit.

Get: GlobalPoint(self: Reference) -> XYZ

"""

    LinkedElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the top-level element in the linked document that is referred to by this reference.

Get: LinkedElementId(self: Reference) -> ElementId

"""

    UVPoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The UV parameters of the reference, if the reference contains a face.

Get: UVPoint(self: Reference) -> UV

"""



class ReferenceableViewUtils(object):
    """ Utilities related to reference views such as reference sections and reference callouts. """
    @staticmethod
    def ChangeReferencedView(document, referenceId, desiredViewId):
        """
        ChangeReferencedView(document: Document, referenceId: ElementId, desiredViewId: ElementId)
            Changes a particular reference view (such as a reference section or reference 
             callout) to refer to a different View.
        
        
            document: The document containing the elements.
            referenceId: The reference view that will be changed to refer to a different View.
            desiredViewId: The id of the View that the reference section or callout will refer to.
        """
        pass

    @staticmethod
    def GetReferencedViewId(document, referenceId):
        """
        GetReferencedViewId(document: Document, referenceId: ElementId) -> ElementId
        
            Gets the id of the view referenced by a reference view (such as a reference 
             section or reference callout).
        
        
            document: The document containing the elements.
            referenceId: The reference view that will be changed to refer to a different View.
            Returns: The id of the referenced view.
        """
        pass

    __all__ = [
        'ChangeReferencedView',
        'GetReferencedViewId',
    ]


class ReferenceArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains reference objects.
    
    ReferenceArray()
    """
    def Append(self, item):
        """
        Append(self: ReferenceArray, item: Reference)
            Add the reference to the end of the array.
        
            item: The reference to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: ReferenceArray)
            Removes every reference from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ReferenceArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ReferenceArray) -> ReferenceArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ReferenceArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: ReferenceArray, item: Reference, index: int)
            Insert the specified reference into the array.
        
            item: The reference to be inserted into the array.
            index: The reference will be inserted before this index.
            Returns: Returns whether the reference was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ReferenceArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ReferenceArray) -> ReferenceArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: ReferenceArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of references that are in the array.

Get: Size(self: ReferenceArray) -> int

"""



class ReferenceArrayArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains ReferenceArray objects.
    
    ReferenceArrayArray()
    """
    def Append(self, item):
        """ Append(self: ReferenceArrayArray, item: ReferenceArray) """
        pass

    def Clear(self):
        """
        Clear(self: ReferenceArrayArray)
            Removes every ReferenceArray from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ReferenceArrayArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ReferenceArrayArray) -> ReferenceArrayArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ReferenceArrayArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """ Insert(self: ReferenceArrayArray, item: ReferenceArray, index: int) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ReferenceArrayArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ReferenceArrayArray) -> ReferenceArrayArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: ReferenceArrayArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of ReferenceArrays that are in the array.

Get: Size(self: ReferenceArrayArray) -> int

"""



class ReferenceArrayArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a ReferenceArray array.
    
    ReferenceArrayArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: ReferenceArrayArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ReferenceArrayArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ReferenceArrayArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: ReferenceArrayArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ReferenceArrayArrayIterator) -> object

"""



class ReferenceArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a reference array.
    
    ReferenceArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: ReferenceArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ReferenceArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ReferenceArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: ReferenceArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ReferenceArrayIterator) -> object

"""



class ReferenceIntersector(object, IDisposable):
    """
    A class used to find and return elements that intersect a ray created from an origin point and direction.
    
    ReferenceIntersector(filter: ElementFilter, targetType: FindReferenceTarget, view3d: View3D)
    ReferenceIntersector(targetElementIds: ICollection[ElementId], targetType: FindReferenceTarget, view3d: View3D)
    ReferenceIntersector(targetElementId: ElementId, targetType: FindReferenceTarget, view3d: View3D)
    ReferenceIntersector(view3d: View3D)
    """
    def Dispose(self):
        """ Dispose(self: ReferenceIntersector) """
        pass

    def Find(self, origin, direction):
        """
        Find(self: ReferenceIntersector, origin: XYZ, direction: XYZ) -> IList[ReferenceWithContext]
        
            Projects a ray from the origin along the given direction, and returns all 
             references from intersected elements which match the ReferenceIntersector's 
             criteria.
        
        
            origin: The origin of the ray.
            direction: The direction of the ray.
            Returns: A collection containing the intersected references.
        """
        pass

    def FindNearest(self, origin, direction):
        """
        FindNearest(self: ReferenceIntersector, origin: XYZ, direction: XYZ) -> ReferenceWithContext
        
            Projects a ray from the origin along the given direction, and returns the 
             nearest reference from intersected elements which match the 
             ReferenceIntersector's criteria.
        
        
            origin: The origin of the ray.
            direction: The direction of the ray.
            Returns: The intersected reference nearest to the ray origin, ll if none is found
        """
        pass

    def GetFilter(self):
        """
        GetFilter(self: ReferenceIntersector) -> ElementFilter
        
            Gets the ElementFilter used in intersection testing.
            Returns: The ElementFilter, or ll if no filter is set.
        """
        pass

    def GetTargetElementIds(self):
        """
        GetTargetElementIds(self: ReferenceIntersector) -> ICollection[ElementId]
        
            Gets the set of ElementIds to test from in intersection testing.
            Returns: The target ElementIds.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ReferenceIntersector, disposing: bool) """
        pass

    def SetFilter(self, filter):
        """
        SetFilter(self: ReferenceIntersector, filter: ElementFilter)
            Sets the ElementFilter used in intersection testing.
        
            filter: The ElementFilter.  Pass ll to remove the existing filter.
        """
        pass

    def SetTargetElementIds(self, elementIds):
        """ SetTargetElementIds(self: ReferenceIntersector, elementIds: ICollection[ElementId]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, filter: ElementFilter, targetType: FindReferenceTarget, view3d: View3D)
        __new__(cls: type, targetElementIds: ICollection[ElementId], targetType: FindReferenceTarget, view3d: View3D)
        __new__(cls: type, targetElementId: ElementId, targetType: FindReferenceTarget, view3d: View3D)
        __new__(cls: type, view3d: View3D)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    FindReferencesInRevitLinks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determines if references inside Revit Links should be found.

Get: FindReferencesInRevitLinks(self: ReferenceIntersector) -> bool

Set: FindReferencesInRevitLinks(self: ReferenceIntersector) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ReferenceIntersector) -> bool

"""

    TargetType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of reference to find.

Get: TargetType(self: ReferenceIntersector) -> FindReferenceTarget

Set: TargetType(self: ReferenceIntersector) = value
"""

    ViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the 3D view used for evaluation.

Get: ViewId(self: ReferenceIntersector) -> ElementId

Set: ViewId(self: ReferenceIntersector) = value
"""



class ReferencePlane(DatumPlane, IDisposable):
    """ Represents a reference plane of Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def Flip(self):
        """
        Flip(self: ReferencePlane)
            Flips the orientation of the reference plane.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetPlane(self):
        """
        GetPlane(self: ReferencePlane) -> Plane
        
            Returns the geometry plane to which the reference plane is assigned.
            Returns: The geometry plane to which the reference plane is assigned.
        """
        pass

    def GetReference(self):
        """
        GetReference(self: ReferencePlane) -> Reference
        
            Returns the geometry reference of the reference plane.
            Returns: The geometry reference of the reference plane.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BubbleEnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The bubble end of the reference plane.

Get: BubbleEnd(self: ReferencePlane) -> XYZ

Set: BubbleEnd(self: ReferencePlane) = value
"""

    Direction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The direction of the reference plane.

Get: Direction(self: ReferencePlane) -> XYZ

Set: Direction(self: ReferencePlane) = value
"""

    FreeEnd = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The free end of the reference plane.

Get: FreeEnd(self: ReferencePlane) -> XYZ

Set: FreeEnd(self: ReferencePlane) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name property of the reference plane.

Get: Name(self: ReferencePlane) -> str

Set: Name(self: ReferencePlane) = value
"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The normal vector of the reference plane.

Get: Normal(self: ReferencePlane) -> XYZ

"""



class ReferencePoint(Element, IDisposable):
    """ A reference point in an Autodesk Revit family. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetCoordinatePlaneReferenceXY(self):
        """
        GetCoordinatePlaneReferenceXY(self: ReferencePoint) -> Reference
        
            A reference for the XY plane of the coordinate
        system.
        """
        pass

    def GetCoordinatePlaneReferenceXZ(self):
        """
        GetCoordinatePlaneReferenceXZ(self: ReferencePoint) -> Reference
        
            A reference for the XZ plane of the coordinate
        system.
        """
        pass

    def GetCoordinatePlaneReferenceYZ(self):
        """
        GetCoordinatePlaneReferenceYZ(self: ReferencePoint) -> Reference
        
            A reference for the YZ plane of the coordinate
        system.
        """
        pass

    def GetCoordinateSystem(self):
        """
        GetCoordinateSystem(self: ReferencePoint) -> Transform
        
            The position and orientation of the ReferencePoint.
        """
        pass

    def GetHubId(self):
        """
        GetHubId(self: ReferencePoint) -> ElementId
        
            Id of associated Hub.
        """
        pass

    def GetInterpolatingCurves(self):
        """
        GetInterpolatingCurves(self: ReferencePoint) -> CurveByPointsArray
        
            The set of CurveByPoints elements that interpolate
        a ReferencePoint.
        """
        pass

    def GetPointElementReference(self):
        """
        GetPointElementReference(self: ReferencePoint) -> PointElementReference
        
            Retrieve a copy of the rule that computes the
        location of the ReferencePoint 
             relative to other elements in
        the document.
        
            Returns: A PointElementReference object, or ll if the
        ReferencePoint does not have a 
             reference.
        """
        pass

    def GetVisibility(self):
        """
        GetVisibility(self: ReferencePoint) -> FamilyElementVisibility
        
            Gets the visibility for the point.
            Returns: A copy of visibility settings for the
        ReferencePoint.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def SetCoordinateSystem(self, coordinateSystem):
        """
        SetCoordinateSystem(self: ReferencePoint, coordinateSystem: Transform)
            The position and orientation of the ReferencePoint.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetPointElementReference(self, pointElementReference):
        """
        SetPointElementReference(self: ReferencePoint, pointElementReference: PointElementReference)
            Change the rule for computing the 
        location of the ReferencePoint relative to 
             other elements in
        the document.
        
        
            pointElementReference: An object specifying
        a rule for the location and orientation of a 
             ReferencePoint.
        (Note: The ReferencePoint object does not store the
        
             pointElementReference object after this call.)
        """
        pass

    def SetVisibility(self, visibility):
        """
        SetVisibility(self: ReferencePoint, visibility: FamilyElementVisibility)
            Sets the visibility for the point.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CoordinatePlaneVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Visibility settings for the coordinate reference planes.

Get: CoordinatePlaneVisibility(self: ReferencePoint) -> CoordinatePlaneVisibility

Set: CoordinatePlaneVisibility(self: ReferencePoint) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get: Name(self: ReferencePoint) -> str

Set: Name(self: ReferencePoint) = value
"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position of the ReferencePoint.

Get: Position(self: ReferencePoint) -> XYZ

Set: Position(self: ReferencePoint) = value
"""

    ShowNormalReferencePlaneOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether all three coordinate planes are shown, or only the
normal (XY) plane.

Get: ShowNormalReferencePlaneOnly(self: ReferencePoint) -> bool

Set: ShowNormalReferencePlaneOnly(self: ReferencePoint) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the point is visible when the family is loaded
into a project.

Get: Visible(self: ReferencePoint) -> bool

Set: Visible(self: ReferencePoint) = value
"""



class ReferencePointArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains reference objects.
    
    ReferencePointArray()
    """
    def Append(self, item):
        """ Append(self: ReferencePointArray, item: ReferencePoint) """
        pass

    def Clear(self):
        """
        Clear(self: ReferencePointArray)
            Removes every reference from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ReferencePointArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ReferencePointArray) -> ReferencePointArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ReferencePointArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """ Insert(self: ReferencePointArray, item: ReferencePoint, index: int) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ReferencePointArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ReferencePointArray) -> ReferencePointArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: ReferencePointArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of references that are in the array.

Get: Size(self: ReferencePointArray) -> int

"""



class ReferencePointArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a reference array.
    
    ReferencePointArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: ReferencePointArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ReferencePointArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ReferencePointArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: ReferencePointArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ReferencePointArrayIterator) -> object

"""



class ReferenceType(Enum, IComparable, IFormattable, IConvertible):
    """
    Reference types of curve element.
    
    enum ReferenceType, values: None (0), StrongReference (2), WeakReference (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    None = None
    StrongReference = None
    value__ = None
    WeakReference = None


class ReferenceWithContext(object, IDisposable):
    """ An object including a reference to a geometric object and related context, as instance transform etc. """
    def Dispose(self):
        """ Dispose(self: ReferenceWithContext) """
        pass

    def GetInstanceTransform(self):
        """
        GetInstanceTransform(self: ReferenceWithContext) -> Transform
        
            Gets the transform of the instance.
            Returns: The transform of an instance when the reference is returned by 
             FindReferencesWithContextByDirection(XYZ, XYZ, View3D) or 
             ReferenceIntersector.Find(XYZ, XYZ).
        """
        pass

    def GetReference(self):
        """
        GetReference(self: ReferenceWithContext) -> Reference
        
            Gets the reference of the geometric object.
            Returns: The reference of a geometric object when it is returned by 
             FindReferencesWithContextByDirection(XYZ, XYZ, View3D) or 
             ReferenceIntersector.Find(XYZ, XYZ).
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ReferenceWithContext, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ReferenceWithContext) -> bool

"""

    Proximity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The proximity value to the ray's origin when the reference is returned by FindReferencesWithContextByDirection(XYZ, XYZ, View3D) or ReferenceIntersector.Find(XYZ, XYZ).

Get: Proximity(self: ReferenceWithContext) -> float

"""



class RelinquishedItems(object, IDisposable):
    """ List of elements and worksets that were relinquished by the current user. """
    def Dispose(self):
        """ Dispose(self: RelinquishedItems) """
        pass

    def GetRelinquishedElements(self):
        """
        GetRelinquishedElements(self: RelinquishedItems) -> ICollection[ElementId]
        
            The elements that were relinquished by the current user.
        """
        pass

    def GetRelinquishedWorksets(self):
        """
        GetRelinquishedWorksets(self: RelinquishedItems) -> ICollection[WorksetId]
        
            The elements that were relinquished by the current user.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RelinquishedItems, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RelinquishedItems) -> bool

"""



class RelinquishOptions(object, IDisposable):
    """
    Options to control behavior of relinquishing ownership of elements and worksets.
    
    RelinquishOptions(relinquishEverything: bool)
    """
    def Dispose(self):
        """ Dispose(self: RelinquishOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RelinquishOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, relinquishEverything):
        """ __new__(cls: type, relinquishEverything: bool) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    CheckedOutElements = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True means all elements checked out by the current user should be relinquished.
   False means none of these are relinquished.

Get: CheckedOutElements(self: RelinquishOptions) -> bool

Set: CheckedOutElements(self: RelinquishOptions) = value
"""

    FamilyWorksets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True means all family worksets owned by the current user should be relinquished.
   False means none of these are relinquished.

Get: FamilyWorksets(self: RelinquishOptions) -> bool

Set: FamilyWorksets(self: RelinquishOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RelinquishOptions) -> bool

"""

    StandardWorksets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True means all project standards worksets owned by the current user should be relinquished.
   False means none of these are relinquished.

Get: StandardWorksets(self: RelinquishOptions) -> bool

Set: StandardWorksets(self: RelinquishOptions) = value
"""

    UserWorksets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True means all user-created worksets owned by the current user should be relinquished.
   False means none of these are relinquished.

Get: UserWorksets(self: RelinquishOptions) -> bool

Set: UserWorksets(self: RelinquishOptions) = value
"""

    ViewWorksets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True means all view worksets owned by the current user should be relinquished.
   False means none of these are relinquished.

Get: ViewWorksets(self: RelinquishOptions) -> bool

Set: ViewWorksets(self: RelinquishOptions) = value
"""



class ReloadLatestOptions(object, IDisposable):
    """
    Options to control behavior of pure reload latest (not part of synchronize with central).
    
    ReloadLatestOptions()
    """
    def Dispose(self):
        """ Dispose(self: ReloadLatestOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ReloadLatestOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ReloadLatestOptions) -> bool

"""



class RenderDuration(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type containing possible duration types to do Raytracer render.
    
    enum RenderDuration, values: ByLevel (0), ByTime (1), UntilSatisfactory (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ByLevel = None
    ByTime = None
    UntilSatisfactory = None
    value__ = None


class RenderingImageExposureSettings(object, IDisposable):
    """ Represents the exposure settings of rendering. """
    def Dispose(self):
        """ Dispose(self: RenderingImageExposureSettings) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderingImageExposureSettings, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ExposureValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The value of rendering image exposure.

Get: ExposureValue(self: RenderingImageExposureSettings) -> float

Set: ExposureValue(self: RenderingImageExposureSettings) = value
"""

    Highlights = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The highlights value.

Get: Highlights(self: RenderingImageExposureSettings) -> float

Set: Highlights(self: RenderingImageExposureSettings) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RenderingImageExposureSettings) -> bool

"""

    Saturation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The value of rendering image saturation.

Get: Saturation(self: RenderingImageExposureSettings) -> float

Set: Saturation(self: RenderingImageExposureSettings) = value
"""

    Shadows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The shadows value.

Get: Shadows(self: RenderingImageExposureSettings) -> float

Set: Shadows(self: RenderingImageExposureSettings) = value
"""

    WhitePoint = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The white point value.

Get: WhitePoint(self: RenderingImageExposureSettings) -> float

Set: WhitePoint(self: RenderingImageExposureSettings) = value
"""



class RenderingQuality(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the rendering quality in rendering settings.
    
    enum RenderingQuality, values: Custom (16), Draft (11), High (14), Medium (13), VeryHigh (15)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Custom = None
    Draft = None
    High = None
    Medium = None
    value__ = None
    VeryHigh = None


class RenderingQualitySettings(object, IDisposable):
    """ Represents the quality settings of rendering. """
    def Dispose(self):
        """ Dispose(self: RenderingQualitySettings) """
        pass

    def IsCustomQuality(self):
        """
        IsCustomQuality(self: RenderingQualitySettings) -> bool
        
            Checks if the current rendering quality is custom or not.
            Returns: True if the current rendering quality is custom, false otherwise.
        """
        pass

    def IsValidRenderLevel(self, value):
        """
        IsValidRenderLevel(self: RenderingQualitySettings, value: int) -> bool
        
            Validate the render level is between 1 and 40
        
            value: The render level value to validate.
            Returns: True if the render level value is in the proper range, false otherwise.
        """
        pass

    def IsValidRenderTime(self, value):
        """
        IsValidRenderTime(self: RenderingQualitySettings, value: int) -> bool
        
            Validate the render time is between 1 and 32768.
        
            value: The render time value to validate.
            Returns: True if the value is in the proper range, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderingQualitySettings, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RenderingQualitySettings) -> bool

"""

    LightAndMaterialAccuracyMode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A value that controls light and material accuracy mode.

Get: LightAndMaterialAccuracyMode(self: RenderingQualitySettings) -> LightAndMaterialAccuracyMode

Set: LightAndMaterialAccuracyMode(self: RenderingQualitySettings) = value
"""

    RenderDuration = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A value that controls render duration.

Get: RenderDuration(self: RenderingQualitySettings) -> RenderDuration

Set: RenderDuration(self: RenderingQualitySettings) = value
"""

    RenderingQuality = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The quality applied for rendering.

Get: RenderingQuality(self: RenderingQualitySettings) -> RenderingQuality

Set: RenderingQuality(self: RenderingQualitySettings) = value
"""

    RenderLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The render target level as a numerical value between 1 and 40.

Get: RenderLevel(self: RenderingQualitySettings) -> int

Set: RenderLevel(self: RenderingQualitySettings) = value
"""

    RenderTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The render target time as a numerical value between 1 and 32768.

Get: RenderTime(self: RenderingQualitySettings) -> int

Set: RenderTime(self: RenderingQualitySettings) = value
"""



class RenderingSettings(object, IDisposable):
    """ Represents the rendering settings for a 3d view. """
    def Dispose(self):
        """ Dispose(self: RenderingSettings) """
        pass

    def GetBackgroundSettings(self):
        """
        GetBackgroundSettings(self: RenderingSettings) -> BackgroundSettings
        
            Returns an object that represents the rendering background settings.
            Returns: The rendering background settings.
        """
        pass

    def GetRenderingImageExposureSettings(self):
        """
        GetRenderingImageExposureSettings(self: RenderingSettings) -> RenderingImageExposureSettings
        
            Returns an  object that represents the rendering image exposure settings.
            Returns: The rendering image exposure settings.
        """
        pass

    def GetRenderingQualitySettings(self):
        """
        GetRenderingQualitySettings(self: RenderingSettings) -> RenderingQualitySettings
        
            Returns an object that represents the rendering quality settings.
            Returns: The rendering quality settings.
        """
        pass

    def GetRenderingRegionOutline(self):
        """
        GetRenderingRegionOutline(self: RenderingSettings) -> Outline
        
            Returns the outline of the rendering region.
            Returns: The outline of the rendering region.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderingSettings, disposing: bool) """
        pass

    def SetBackgroundSettings(self, background):
        """
        SetBackgroundSettings(self: RenderingSettings, background: BackgroundSettings)
            Changes the rendering background settings details for the current background 
             style.
        
        
            background: An instance of the new rendering background settings.
        """
        pass

    def SetRenderingImageExposureSettings(self, exposure):
        """
        SetRenderingImageExposureSettings(self: RenderingSettings, exposure: RenderingImageExposureSettings)
            Changes the rendering image exposure settings.
        
            exposure: An instance of the new rendering image exposure settings.
        """
        pass

    def SetRenderingQualitySettings(self, settings):
        """
        SetRenderingQualitySettings(self: RenderingSettings, settings: RenderingQualitySettings)
            Change rendering quality settings.
        
            settings: An instance of the new rendering quality settings.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    BackgroundStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The enum value that controls the background style for rendering.

Get: BackgroundStyle(self: RenderingSettings) -> BackgroundStyle

Set: BackgroundStyle(self: RenderingSettings) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RenderingSettings) -> bool

"""

    LightingSource = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The lighting scheme type.

Get: LightingSource(self: RenderingSettings) -> LightingSource

Set: LightingSource(self: RenderingSettings) = value
"""

    PrinterResolution = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The resolution level when using printer.

Get: PrinterResolution(self: RenderingSettings) -> PrinterResolution

Set: PrinterResolution(self: RenderingSettings) = value
"""

    ResolutionTarget = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The resolution target.

Get: ResolutionTarget(self: RenderingSettings) -> ResolutionTarget

Set: ResolutionTarget(self: RenderingSettings) = value
"""

    ResolutionValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The rendering resolution in dots per inch (DPI).

Get: ResolutionValue(self: RenderingSettings) -> int

"""

    UsesRegionRendering = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The bool value that indicates whether to use region rendering.

Get: UsesRegionRendering(self: RenderingSettings) -> bool

Set: UsesRegionRendering(self: RenderingSettings) = value
"""



class RenderNodeAction(Enum, IComparable, IFormattable, IConvertible):
    """
    Enumerated actions for processing a render node during custom export.
    
    enum RenderNodeAction, values: Proceed (0), Skip (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Proceed = None
    Skip = None
    value__ = None


class RepeaterBounds(object, IDisposable):
    """
    Represents bounds of the array of repeating references in 0, 1, or 2 dimensions.
       (See Autodesk.Revit.DB.RepeatingReferenceSource).
    """
    def AdjustForCyclicalBounds(self, coordinates):
        """
        AdjustForCyclicalBounds(self: RepeaterBounds, coordinates: RepeaterCoordinates) -> RepeaterCoordinates
        
            Shifts the input coordinates in the cyclical dimensions so that they fall in 
             the [lower bounds, upper bounds] range.
        
        
            coordinates: The coordinates.
            Returns: The adjusted coordinates.
        """
        pass

    def AreCoordinatesInBounds(self, coordinates, treatCyclicalBoundsAsInfinite):
        """
        AreCoordinatesInBounds(self: RepeaterBounds, coordinates: RepeaterCoordinates, treatCyclicalBoundsAsInfinite: bool) -> bool
        
            Determines whether given coordinates are within the bounds.
        
            coordinates: The coordinates.
            treatCyclicalBoundsAsInfinite: True if cyclical directions should be treated as unbounded.
            Returns: True if the coordinates are within the bounds.
        """
        pass

    def Dispose(self):
        """ Dispose(self: RepeaterBounds) """
        pass

    def GetLowerBound(self, dimension):
        """
        GetLowerBound(self: RepeaterBounds, dimension: int) -> int
        
            Returns the smallest index of the array in the given dimension.
        
            dimension: The dimension.
            Returns: The smallest index of the array in the given dimension.
        """
        pass

    def GetUpperBound(self, dimension):
        """
        GetUpperBound(self: RepeaterBounds, dimension: int) -> int
        
            Returns the highest index of the array in the given dimension.
        
            dimension: The dimension.
            Returns: The highest index of the array in the given dimension.
        """
        pass

    def IsCyclical(self, dimension):
        """
        IsCyclical(self: RepeaterBounds, dimension: int) -> bool
        
            True if the array doesn't have finite bounds in the given dimension. Cyclical 
             bounds indicate that the array forms a closed loop in the given dimension.
        
        
            dimension: The dimension.
            Returns: True if the bounds are cyclical in the given dimension.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RepeaterBounds, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DimensionCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of dimensions of the bounds (0, 1 or 2 for zero, one or two dimensional arrays.)

Get: DimensionCount(self: RepeaterBounds) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RepeaterBounds) -> bool

"""



class RepeaterCoordinates(object, IDisposable):
    """
    Represents coordinates in the array of repeating references in 0, 1, or 2 dimensions.
    
    RepeaterCoordinates(x: int, y: int)
    RepeaterCoordinates(x: int)
    RepeaterCoordinates()
    """
    def Dispose(self):
        """ Dispose(self: RepeaterCoordinates) """
        pass

    def GetCoordinate(self, dimension):
        """
        GetCoordinate(self: RepeaterCoordinates, dimension: int) -> int
        
            Returns the coordinate in the given dimension.
        
            dimension: The dimension.
            Returns: The coordinate.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RepeaterCoordinates, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, x=None, y=None):
        """
        __new__(cls: type, x: int, y: int)
        __new__(cls: type, x: int)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DimensionCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of dimensions of the coordinates (0, 1 or 2 for zero, one or two dimensional arrays.)

Get: DimensionCount(self: RepeaterCoordinates) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RepeaterCoordinates) -> bool

"""



class RepeatingReferenceSource(object, IDisposable):
    """ Represents a collection of repeating references. """
    def Dispose(self):
        """ Dispose(self: RepeatingReferenceSource) """
        pass

    def GetBounds(self):
        """
        GetBounds(self: RepeatingReferenceSource) -> RepeaterBounds
        
            Returns information about the boundaries of the repeating reference array.
            Returns: The bounds of the repeating reference source.
        """
        pass

    @staticmethod
    def GetDefaultRepeatingReferenceSource(document, elementId):
        """
        GetDefaultRepeatingReferenceSource(document: Document, elementId: ElementId) -> RepeatingReferenceSource
        
            Returns the default repeating reference source for a given element.
        
            document: The document that contains the element.
            elementId: The id of the element.
            Returns: The default repeating reference source of the given element.
        """
        pass

    def GetReference(self, coordinates):
        """
        GetReference(self: RepeatingReferenceSource, coordinates: RepeaterCoordinates) -> Reference
        
            Returns an individual repeating reference given by coordinates in the array, or 
             ll if there is no reference at the coordinates (for example if there is a hole 
             in a divided surface.)
        
        
            coordinates: The coordinates in the array of repeating references.
            Returns: The repeating reference.
        """
        pass

    @staticmethod
    def HasRepeatingReferenceSource(document, elementId):
        """
        HasRepeatingReferenceSource(document: Document, elementId: ElementId) -> bool
        
            Determines whether an element has any repeating reference sources that can be 
             used when creating component repeaters.
        
        
            document: The document that contains the element.
            elementId: The id of the element.
            Returns: True if the element has any repeating reference sources.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RepeatingReferenceSource, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DimensionCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The dimension count of the repeating reference array.

Get: DimensionCount(self: RepeatingReferenceSource) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RepeatingReferenceSource) -> bool

"""



class ResolutionTarget(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the resolution target(Screen or Printer) used for rendering settings.
    
    enum ResolutionTarget, values: Printer (1), Screen (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Printer = None
    Screen = None
    value__ = None


class ResourceVersionStatus(Enum, IComparable, IFormattable, IConvertible):
    """
    An enum indicating whether a resource is current or out of date.
    
    enum ResourceVersionStatus, values: Current (0), OutOfDate (1), Unknown (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Current = None
    OutOfDate = None
    Unknown = None
    value__ = None


class Revision(Element, IDisposable):
    """ Represents a single revision in the project. """
    @staticmethod
    def CombineWithNext(document, revisionId):
        """
        CombineWithNext(document: Document, revisionId: ElementId) -> ISet[ElementId]
        
            Combines the specified Revision with the next Revision.
        
            document: The Document containing the Revisions.
            revisionId: The Revision that should have its clouds and tags associated with the next 
             Revision.
        
            Returns: The ids of all RevisionClouds that were reassigned to the next Revision.
        """
        pass

    @staticmethod
    def CombineWithPrevious(document, revisionId):
        """
        CombineWithPrevious(document: Document, revisionId: ElementId) -> ISet[ElementId]
        
            Combines the specified Revision with the previous Revision.
        
            document: The Document containing the Revisions.
            revisionId: The Revision that should have its clouds and tags associated with the previous 
             Revision.
        
            Returns: The ids of all RevisionClouds that were reassigned to the previous Revision.
        """
        pass

    @staticmethod
    def Create(document):
        """
        Create(document: Document) -> Revision
        
            Creates a new Revision in the project.
        
            document: The document of the new Revision.
            Returns: The newly created Revision.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    @staticmethod
    def GetAllRevisionIds(document):
        """
        GetAllRevisionIds(document: Document) -> IList[ElementId]
        
            Returns the ids of all Revisions in the project ordered by sequence number.
        
            document: The document containing the Revisions.
            Returns: The ids of all the Revisions in the document ordered by sequence number.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    @staticmethod
    def ReorderRevisionSequence(document, newSequence):
        """ ReorderRevisionSequence(document: Document, newSequence: IList[ElementId]) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The description of this Revision.

Get: Description(self: Revision) -> str

Set: Description(self: Revision) = value
"""

    Issued = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this Revision has been issued.

Get: Issued(self: Revision) -> bool

Set: Issued(self: Revision) = value
"""

    IssuedBy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates who has issued or will issue this Revision.

Get: IssuedBy(self: Revision) -> str

Set: IssuedBy(self: Revision) = value
"""

    IssuedTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates to whom this Revision was or will be issued.

Get: IssuedTo(self: Revision) -> str

Set: IssuedTo(self: Revision) = value
"""

    NumberType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates what number type the Revision Number for this Revision should use.

Get: NumberType(self: Revision) -> RevisionNumberType

Set: NumberType(self: Revision) = value
"""

    RevisionDate = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The date of this Revision.

Get: RevisionDate(self: Revision) -> str

Set: RevisionDate(self: Revision) = value
"""

    RevisionNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Revision number of this revision.

Get: RevisionNumber(self: Revision) -> str

"""

    SequenceNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Sequence Number of this Revision.

Get: SequenceNumber(self: Revision) -> int

"""

    Visibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Controls the visibility of revision clouds and revision tags related to this Revision.

Get: Visibility(self: Revision) -> RevisionVisibility

Set: Visibility(self: Revision) = value
"""



class RevisionCloud(Element, IDisposable):
    """ A RevisionCloud is a graphical "cloud" that can be displayed on a view or sheet to indicate where revisions in the model have occurred. """
    @staticmethod
    def Create(document, view, revisionId, curves):
        """ Create(document: Document, view: View, revisionId: ElementId, curves: IList[Curve]) -> RevisionCloud """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetSheetIds(self):
        """
        GetSheetIds(self: RevisionCloud) -> ISet[ElementId]
        
            Returns the ids of the ViewSheets where this RevisionCloud may appear and 
             contribute to the sheet's revision schedule.
        
            Returns: The ids of the ViewSheets where this RevisionCloud may appear.
        """
        pass

    def GetSketchCurves(self):
        """
        GetSketchCurves(self: RevisionCloud) -> IList[Curve]
        
            Returns copies of the Curves that form this RevisionCloud.
            Returns: Copies of the sketched curves that form this RevisionCloud.
        """
        pass

    def IsRevisionIssued(self):
        """
        IsRevisionIssued(self: RevisionCloud) -> bool
        
            Indicates whether the Revision associated with this RevisionCloud has been 
             issued.
        
            Returns: True if the Revision has been issued, False otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    RevisionId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Revision associated with this RevisionCloud.

Get: RevisionId(self: RevisionCloud) -> ElementId

Set: RevisionId(self: RevisionCloud) = value
"""



class RevisionNumbering(Enum, IComparable, IFormattable, IConvertible):
    """
    The options for how revision numbers should be displayed on sheets within a project.
    
    enum RevisionNumbering, values: PerProject (0), PerSheet (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    PerProject = None
    PerSheet = None
    value__ = None


class RevisionNumberType(Enum, IComparable, IFormattable, IConvertible):
    """
    Determines how a particular revision will be numbered.
    
    enum RevisionNumberType, values: Alphanumeric (3), None (2), Numeric (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Alphanumeric = None
    None = None
    Numeric = None
    value__ = None


class RevisionSettings(Element, IDisposable):
    """ Provides access to project-wide settings related to revisions. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetAlphanumericRevisionSettings(self):
        """
        GetAlphanumericRevisionSettings(self: RevisionSettings) -> AlphanumericRevisionSettings
        
            Returns a copy of the AlphanumericRevisionSettings owned by this 
             RevisionSettings object.
        
            Returns: The copy of the AlphaumericRevisionSettings owned by this RevisionSettings 
             object.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetNumericRevisionSettings(self):
        """
        GetNumericRevisionSettings(self: RevisionSettings) -> NumericRevisionSettings
        
            Returns a copy of the NumericRevisionSettings owned by this RevisionSettings 
             object.
        
            Returns: The copy of the NumericRevisionSettings owned by this RevisionSettings object.
        """
        pass

    @staticmethod
    def GetRevisionSettings(ccda):
        """
        GetRevisionSettings(ccda: Document) -> RevisionSettings
        
            Returns the RevisionSettings for the given project document.
        
            ccda: The document to get the RevisionSettings from.
            Returns: The RevisionSettings for the document.
        """
        pass

    def IsAcceptableRevisionCloudSpacing(self, rawValue):
        """
        IsAcceptableRevisionCloudSpacing(self: RevisionSettings, rawValue: float) -> bool
        
            Rounds the given raw value and checks whether it is an acceptable cloud spacing 
             value after it is rounded.
        
        
            rawValue: The raw value to check.  This value need not be rounded prior to calling this 
             function.
        
            Returns: True if the value will be acceptable after rounding, False otherwise
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    @staticmethod
    def RoundRevisionCloudSpacing(ccda, rawValue):
        """
        RoundRevisionCloudSpacing(ccda: Document, rawValue: float) -> float
        
            Rounds the given revision cloud spacing value according to the document's 
             settings.
        
        
            ccda: The document to use for rounding.
            rawValue: The unrounded value.
            Returns: The rounded revision cloud spacing.
        """
        pass

    def SetAlphanumericRevisionSettings(self, newSettings):
        """
        SetAlphanumericRevisionSettings(self: RevisionSettings, newSettings: AlphanumericRevisionSettings)
            Replaces the current alphanumeric revision numbering settings with the 
             specified AlphanumericRevisionSettings.
        
        
            newSettings: The specified AlphanumericRevisionSettings to be applied to alphanumeric 
             revision numbering.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetNumericRevisionSettings(self, newSettings):
        """
        SetNumericRevisionSettings(self: RevisionSettings, newSettings: NumericRevisionSettings)
            Replaces the current numeric revision numbering settings with the specified 
             NumericRevisionSettings.
        
        
            newSettings: The specified NumericRevisionSettings to be applied to numeric revision 
             numbering.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    RevisionCloudSpacing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determines the size in paper space of revision clouds drawn in a project.

Get: RevisionCloudSpacing(self: RevisionSettings) -> float

Set: RevisionCloudSpacing(self: RevisionSettings) = value
"""

    RevisionNumbering = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determines how the revision number values will display on sheets.

Get: RevisionNumbering(self: RevisionSettings) -> RevisionNumbering

Set: RevisionNumbering(self: RevisionSettings) = value
"""



class RevisionVisibility(Enum, IComparable, IFormattable, IConvertible):
    """
    Determines whether Revision Clouds and Revision Tags will be visible in the project.
    
    enum RevisionVisibility, values: CloudAndTagVisible (1), Hidden (0), TagVisible (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CloudAndTagVisible = None
    Hidden = None
    TagVisible = None
    value__ = None


class RevitLinkInstance(Instance, IDisposable):
    """ Represents an instance of a RevitLinkType. """
    @staticmethod
    def Create(document, revitLinkTypeId):
        """
        Create(document: Document, revitLinkTypeId: ElementId) -> RevitLinkInstance
        
            Creates a new instance of a linked Revit project (RevitLinkType).
        
            document: The document in which the new instance should be created.
            revitLinkTypeId: The element id of the RevitLinkType.
            Returns: The newly-created RevitLinkInstance.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetLinkDocument(self):
        """
        GetLinkDocument(self: RevitLinkInstance) -> Document
        
            The document associated with the Revit link.
        """
        pass

    def MoveBasePointToHostBasePoint(self, resetToOriginalRotation):
        """
        MoveBasePointToHostBasePoint(self: RevitLinkInstance, resetToOriginalRotation: bool)
            Moves this link instance so that the base point in
           the linked document is 
             aligned to the base point in the
           host document. This is a one-time movement 
             and does not
           set up any shared coordinates relationship.  If the rotation 
             angle of this link instance was changed after insertion,
           the rotation angle 
             can be preserved or reset to the original insertion angle.
        
        
            resetToOriginalRotation: Sets to true if:  restoring the original insertion angle of the link instance 
             after it is moved
           if there was a rotation \ mirror transform on the link 
             instance.  there was no a rotation \ mirror transform on the link instance.  
             Sets to false to retain the current angle of the link instance after it is 
             moved
           if there was a rotation \ mirror transform on the link instance.
        """
        pass

    def MoveOriginToHostOrigin(self, resetToOriginalRotation):
        """
        MoveOriginToHostOrigin(self: RevitLinkInstance, resetToOriginalRotation: bool)
            Moves this link instance so that the internal origin
           of the linked document 
             is aligned to the internal origin
           of the host document. This is a one-time 
             movement and does not
           set up any shared coordinates relationship.  If the 
             rotation angle of the link instance was changed after insertion,
           the 
             rotation angle can be preserved or reset to the original insertion angle.
        
        
            resetToOriginalRotation: Sets to true if:  restoring the original insertion angle of the link instance 
             after it is moved
           if there was a rotation \ mirror transform on the link 
             instance.  there was no a rotation \ mirror transform on the link instance.  
             Sets to false to retain the current angle of the link instance after it is 
             moved
           if there was a rotation \ mirror transform on the link instance.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class RevitLinkLoadResult(object, IDisposable):
    """
    This class stores the results of trying to load a single linked model.
    
    RevitLinkLoadResult(other: RevitLinkLoadResult)
    """
    def Dispose(self):
        """ Dispose(self: RevitLinkLoadResult) """
        pass

    def GetCentralModelName(self):
        """
        GetCentralModelName(self: RevitLinkLoadResult) -> ModelPath
        
            Gets the central model's name.
           If the link is not workshared, this returns 
             an empty FilePath.
           If the link is itself a central model, this returns the 
             link's name.
        """
        pass

    def GetExternalResourceReference(self):
        """
        GetExternalResourceReference(self: RevitLinkLoadResult) -> ExternalResourceReference
        
            Gets a copy of the ExternalResourceReference corresponding
           to the link.
            Returns: A copy of the ExternalResourceReference corresponding
           to the link.
        """
        pass

    def GetExternalResourceReferencesFromFailedLoads(self):
        """
        GetExternalResourceReferencesFromFailedLoads(self: RevitLinkLoadResult) -> IList[ExternalResourceReference]
        
            Searches this and all nested LinkLoadResults, and returns a list
           of 
             ExternalResourceReferences for the links that failed to load.
        
            Returns: A collection of link ExternalResourceReferences which failed to load.
        """
        pass

    def GetLinkLoadResult(self, matchExtResRef):
        """
        GetLinkLoadResult(self: RevitLinkLoadResult, matchExtResRef: ExternalResourceReference) -> RevitLinkLoadResult
        
            Searches this LinkLoadResult and all nested LinkLoadResults for the
           load 
             operation results of a specified ExternalResourceReference.
        
        
            matchExtResRef: An ExternalResourceReference whose LinkLoadResults are contained in this object.
            Returns: A LinkLoadResult object with the load results for the specified 
             ExternalResourceReference.
        """
        pass

    def GetModelName(self):
        """
        GetModelName(self: RevitLinkLoadResult) -> ModelPath
        
            Gets the name of the model.
        """
        pass

    def GetNestedLinkLoadResults(self):
        """
        GetNestedLinkLoadResults(self: RevitLinkLoadResult) -> IDictionary[str, RevitLinkLoadResult]
        
            Gets the results for this link's nested links.
            Returns: A map from nested link paths to the load results for
           that nested link.For 
             links from external servers, the "path" will be
           the display name of the 
             link.
        """
        pass

    def GetParentModelName(self):
        """
        GetParentModelName(self: RevitLinkLoadResult) -> ModelPath
        
            Returns the name of the parent of the linked model, or an empty FilePath
           if 
             the link is a top-level link.
        """
        pass

    @staticmethod
    def IsCodeSuccess(code):
        """
        IsCodeSuccess(code: RevitLinkLoadResultType) -> bool
        
            Check if load result code signifies success.
        
            code: Load result code to be verified.
            Returns: True if LinkLoadResultType argument is success, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RevitLinkLoadResult, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, other):
        """ __new__(cls: type, other: RevitLinkLoadResult) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ElementId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the created or loaded linked model.

Get: ElementId(self: RevitLinkLoadResult) -> ElementId

"""

    IsCircularLink = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if these results are part of a link cycle.

Get: IsCircularLink(self: RevitLinkLoadResult) -> bool

"""

    IsNested = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if these results represent a nested link; false otherwise.

Get: IsNested(self: RevitLinkLoadResult) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RevitLinkLoadResult) -> bool

"""

    LoadResult = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Holds the results of creating or loading a link. Results can be LinkLoadResultType.LinkLoaded
   for success, or a variety of errors. See LinkLoadResultType for the full list.

Get: LoadResult(self: RevitLinkLoadResult) -> RevitLinkLoadResultType

"""



class RevitLinkLoadResultType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum listing the possible results after loading a linked model.
    
    enum RevitLinkLoadResultType, values: ExternalServerMissing (9), LinkExists (10), LinkLoaded (1), LinkMayBeUpgraded (8), LinkNotFound (2), LinkNotLoadedOtherError (7), LinkNotOpenable (3), LinkOpenAsHost (4), SameCentralModelAsHost (6), SameModelAsHost (5), Uninitialized (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ExternalServerMissing = None
    LinkExists = None
    LinkLoaded = None
    LinkMayBeUpgraded = None
    LinkNotFound = None
    LinkNotLoadedOtherError = None
    LinkNotOpenable = None
    LinkOpenAsHost = None
    SameCentralModelAsHost = None
    SameModelAsHost = None
    Uninitialized = None
    value__ = None


class RevitLinkOperations(object, IDisposable):
    """
    This class is used to extend the IExternalResourceServer interface with methods to support operations
       specifically related to Revit links.
    """
    def Dispose(self):
        """ Dispose(self: RevitLinkOperations) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RevitLinkOperations, disposing: bool) """
        pass

    def SetGetLocalPathForOpenCallback(self, makeLocalCopyForOpen):
        """
        SetGetLocalPathForOpenCallback(self: RevitLinkOperations, makeLocalCopyForOpen: IGetLocalPathForOpenCallback)
            Sets the IGetLocalPathForOpenCallback that will support the "Open (and Unload)" 
             command for Revit links
           obtained from an IExternalResourceServer.
        
        
            makeLocalCopyForOpen: The IGetLocalPathForOpenCallback that will support the "Open (and Unload)" 
             command.
        """
        pass

    def SetOnLocalLinkSharedCoordinatesSavedCallback(self, onLocalLinkSharedCoordinatesSaved):
        """
        SetOnLocalLinkSharedCoordinatesSavedCallback(self: RevitLinkOperations, onLocalLinkSharedCoordinatesSaved: IOnLocalLinkSharedCoordinatesSavedCallback)
            Sets the callback that will be called when the Revit user saves new shared 
             coordinate
           settings to a linked document obtained from an 
             IExternalResourceServer.
        
        
            onLocalLinkSharedCoordinatesSaved: An IOnLocalLinkSharedCoordinatesSavedCallback object that can respond when the 
             user
           saves new shared coordinates to a Revit link document obtained from 
             IExternalResourceServer.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RevitLinkOperations) -> bool

"""



class RevitLinkOptions(object, IDisposable):
    """
    This class contains the options in use when creating
       or loading a Revit link.
    
    RevitLinkOptions(relative: bool)
    RevitLinkOptions(relative: bool, config: WorksetConfiguration)
    RevitLinkOptions(other: RevitLinkOptions)
    """
    def Dispose(self):
        """ Dispose(self: RevitLinkOptions) """
        pass

    def GetWorksetConfiguration(self):
        """
        GetWorksetConfiguration(self: RevitLinkOptions) -> WorksetConfiguration
        
            Gets the set of worksets to open when creating the link.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RevitLinkOptions, disposing: bool) """
        pass

    def SetWorksetConfiguration(self, config):
        """
        SetWorksetConfiguration(self: RevitLinkOptions, config: WorksetConfiguration)
            Sets the set of worksets to open when creating the link.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, relative: bool)
        __new__(cls: type, relative: bool, config: WorksetConfiguration)
        __new__(cls: type, other: RevitLinkOptions)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsRelative = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of path to use when creating the link. If true, Revit will
   store a relative path for the link. If false, Revit will store an absolute
   path.

   If the link is to a Revit Server location, isRelative must be false.

Get: IsRelative(self: RevitLinkOptions) -> bool

Set: IsRelative(self: RevitLinkOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RevitLinkOptions) -> bool

"""



class RevitLinkType(ElementType, IDisposable):
    """
    This class represents another Revit Document ("link") brought into
       the current one ("host").
    """
    @staticmethod
    def Create(document, *__args):
        """
        Create(document: Document, path: ModelPath, options: RevitLinkOptions) -> RevitLinkLoadResult
        
            Creates a new Revit link type and loads the linked document.
        
            document: The document in which to create the Revit link.
            path: The path of the link to load. This may be a server path.
           This must be a 
             full path.
        
            options: An options class for loading Revit links.
            Returns: An object containing the results of creating and loading
           the Revit link 
             type. It contains the ElementId of the new link.
        
        Create(document: Document, resourceReference: ExternalResourceReference, options: RevitLinkOptions) -> RevitLinkLoadResult
        
            Creates a new Revit link type from an external resource reference and loads the
             
           linked document.
        
        
            document: The document in which to create the Revit link.
            resourceReference: An external resource reference describing the source of the linked Revit 
             document.
        
            options: An options class for loading Revit links.  The path type information will be 
             ignored.
        
            Returns: An object containing the results of creating and loading
           the Revit link 
             type. It contains the ElementId of the new link.
        """
        pass

    @staticmethod
    def CreateFromIFC(document, ifcFilePath, revitLinkedFilePath, recreateLink, options):
        """
        CreateFromIFC(document: Document, ifcFilePath: str, revitLinkedFilePath: str, recreateLink: bool, options: RevitLinkOptions) -> RevitLinkLoadResult
        
            Creates a new Revit link type from an existing Revit file created via import by 
             reference
           of an asscoiated IFC file.
        
        
            document: The document in which to create the Revit link.
            ifcFilePath: The path of the associated IFC file. This must be a full path.
            revitLinkedFilePath: The path of the existing Revit file that contains elements created via an 
             import by reference operation.
           This must be a full path.
        
            recreateLink: If true, the existing Revit file created via an import by reference operation
         
               will be updated based on the information in the IFC file.  If false, the 
             existing Revit file will be used as-is.
        
            options: An options class for loading Revit links.
            Returns: An object containing the results of creating and loading
           the Revit link 
             type. It contains the ElementId of the new link.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetChildIds(self):
        """
        GetChildIds(self: RevitLinkType) -> ICollection[ElementId]
        
            Gets the ids of the immediate children of this link.
            Returns: The element ids of all links which are linked directly into this one
           
             (immediate children)
        """
        pass

    def GetConversionData(self):
        """
        GetConversionData(self: RevitLinkType) -> LinkConversionData
        
            Returns the optional data that is necessary to generate the Revit file for this 
             link.
        
            Returns: The RvtLinkConversionData containing the necessary information.
        """
        pass

    def GetParentId(self):
        """
        GetParentId(self: RevitLinkType) -> ElementId
        
            Gets the id of this link's immediate parent.
            Returns: The id of the immediate parent of this link, or invalidElementId if
           this 
             link is a top-level link.
        """
        pass

    def GetRootId(self):
        """
        GetRootId(self: RevitLinkType) -> ElementId
        
            Gets the id of the top-level link which this link is linked into.
            Returns: The id of the top-level link which this link is ultimately linked under,
           or 
             invalidElementId if this link is a top-level link.
        """
        pass

    @staticmethod
    def GetTopLevelLink(document, *__args):
        """
        GetTopLevelLink(document: Document, path: ModelPath) -> ElementId
        
            Returns the ElementId of the (top-level) linked model with the given path.
        
            document: The document to look for the linked model in.
            path: A path indicating which linked model to return.
            Returns: The id of the link with the given path, or InvalidElementId if
           there is no 
             top-level link at that path.
        
        GetTopLevelLink(document: Document, reference: ExternalResourceReference) -> ElementId
        
            Returns the ElementId of the (top-level) linked model with the given
           
             ExternalResourceReference.
        
        
            document: The document to look for the linked model in.
            reference: An ExternalResourceReference indicating which linked model to return.
            Returns: The id of the link with the given ExternalResourceReference,
           or 
             InvalidElementId if
           there is no top-level link at that location.
        """
        pass

    def HasSaveablePositions(self):
        """
        HasSaveablePositions(self: RevitLinkType) -> bool
        
            Determines whether the link has changes to shared positioning that could
           be 
             saved.
        
            Returns: True if the link has shared positioning changes which can be saved.
           False 
             if there are no changes to shared coordinates, or if the changes
           cannot be 
             saved.
        """
        pass

    def IsFromLocalPath(self):
        """
        IsFromLocalPath(self: RevitLinkType) -> bool
        
            Checks whether the Revit link uses a local path, such as a hard drive.
            Returns: Returns true if the Revit link is from a local drive.
        """
        pass

    def IsFromRevitServer(self):
        """
        IsFromRevitServer(self: RevitLinkType) -> bool
        
            Checks whether the Revit link is located on Revit Server.
            Returns: Returns true if the Revit link is located on Revit Server.
        """
        pass

    @staticmethod
    def IsLoaded(document, typeId):
        """
        IsLoaded(document: Document, typeId: ElementId) -> bool
        
            Checks whether the link with this id is loaded.
        
            document: A document. Revit will see if typeId corresponds to a loaded link in this 
             document.
        
            typeId: An element id. Revit will check if typeId corresponds to a loaded link in the 
             given document.
        
            Returns: True if typeId corresponds to a loaded RevitLinkType. False otherwise.
        """
        pass

    def IsNotLoadedIntoMultipleOpenDocuments(self):
        """
        IsNotLoadedIntoMultipleOpenDocuments(self: RevitLinkType) -> bool
        
            Checks whether the link is loaded into more than one open document
           in this 
             session of Revit. If the link is loaded into multiple open
           documents, 
             reload will be disabled.
        
            Returns: True if the link is loaded into at most one open document. False if the link
          
              is loaded into more than one open document.
        """
        pass

    def Load(self):
        """
        Load(self: RevitLinkType) -> RevitLinkLoadResult
        
            Loads or reloads the Revit link from its
           currently-stored location. If the 
             link is an
           external resource, Revit will contact the
           
             IExternalResourceServer to get the latest version
           of the link.
        
            Returns: An object containing the ElementId of the link
           and an enum value indicating 
             any
           errors which occurred while trying to load.
           
             RevitLinkLoadResultType.LinkLoaded indicates
           success.
        """
        pass

    def LoadFrom(self, *__args):
        """
        LoadFrom(self: RevitLinkType, resourceReference: ExternalResourceReference, config: WorksetConfiguration) -> RevitLinkLoadResult
        
            Loads or reloads the Revit link.
           The link will be loaded from the location 
             given in the
           input ExternalResourceReference.
        
        
            resourceReference: An external resource reference describing the source of the linked Revit 
             document.
        
            config: A WorksetConfiguration object indicating which worksets in the
           link to 
             open.If you want to load the same set of worksets the link previously
           had, 
             leave this argument as ll.
        
            Returns: An object containing the ElementId of the link
           and an enum value indicating 
             any errors
           which occurred while trying to load.
        
        LoadFrom(self: RevitLinkType, path: ModelPath, config: WorksetConfiguration) -> RevitLinkLoadResult
        
            Loads or reloads the Revit link from disk.
           The link will be loaded from the 
             input path.
        
        
            path: A ModelPath indicating where to load the link from.
           This must be an 
             absolute path.
        
            config: A WorksetConfiguration object indicating which worksets in the
           link to 
             open.If you want to load the same set of worksets the link previously
           had, 
             leave this argument as ll.
        
            Returns: An object containing the ElementId of the link
           and an enum value indicating 
             any errors
           which occurred while trying to load.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def Reload(self):
        """
        Reload(self: RevitLinkType) -> RevitLinkLoadResult
        
            Loads or reloads the Revit link from its
           currently-stored location. If the 
             link is an
           external resource, Revit will contact the
           
             IExternalResourceServer to get the latest version
           of the link.
        
            Returns: An object containing the ElementId of the link
           and an enum value indicating 
             any
           errors which occurred while trying to load.
           
             RevitLinkLoadResultType.LinkLoaded indicates
           success.
        """
        pass

    def RevertLocalUnloadStatus(self):
        """
        RevertLocalUnloadStatus(self: RevitLinkType) -> LinkedFileStatus
        
            Restores the workshared load status of a link that has been unloaded only for 
             the current user,
           in a local copy of a workshared model.
        
            Returns: The link's LinkedFileStatus that has resulted from reverting the local unloaded 
             status.
        """
        pass

    def SavePositions(self, callback):
        """
        SavePositions(self: RevitLinkType, callback: ISaveSharedCoordinatesCallback) -> bool
        
            Saves shared coordinates changes back to the linked document.
        
            callback: A callback object to resolve situations when Revit encounters
           modified 
             links.
        
            Returns: True if we saved the link or if there were no changes to save.
           False if the 
             operation failed.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def Unload(self, callback):
        """
        Unload(self: RevitLinkType, callback: ISaveSharedCoordinatesCallback)
            Unloads the Revit link.
        
            callback: A callback indicating what to do if Revit encounters
           links which have 
             changes in shared coordinates.
           If ll, Revit will not save any shared 
             coordinates
           changes to the link before unloading.
        """
        pass

    def UnloadLocally(self, callback):
        """
        UnloadLocally(self: RevitLinkType, callback: ISaveSharedCoordinatesCallbackForUnloadLocally) -> bool
        
            Unloads a Revit link for the current user only.
        
            callback: A callback indicating what to do if Revit encounters
           links which have 
             changes in shared coordinates. The saving options for
           unloading locally  
             only could be: save the link, not save the link.
           If ll, Revit will not save 
             any shared coordinates
           changes to the link before unloading.
        
            Returns: Returns true if the attempt to unload the link locally was successful.
        """
        pass

    def UpdateFromIFC(self, document, ifcFilePath, revitLinkedFilePath, recreateLink):
        """
        UpdateFromIFC(self: RevitLinkType, document: Document, ifcFilePath: str, revitLinkedFilePath: str, recreateLink: bool) -> bool
        
            Updates a Revit link type from an IFC file and loads the linked document.
        
            document: The document that contains Revit link.
            ifcFilePath: The path of the IFC link to load. This must be a full path.
            revitLinkedFilePath: The path of the Revit file to create to hold the IFC information. This must be 
             a full path.
        
            recreateLink: If true, the Revit file will be updated based on the information in the IFC 
             file.  If false, the existing Revit file will be used.
        
            Returns: Returns true if the update succeeded, false otherwise.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AttachmentType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The attachment/overlay status of this link.

Get: AttachmentType(self: RevitLinkType) -> AttachmentType

Set: AttachmentType(self: RevitLinkType) = value
"""

    IsNestedLink = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this link is a nested or top-level link.

Get: IsNestedLink(self: RevitLinkType) -> bool

"""

    LocallyUnloaded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Checks whether a Revit link in a local model is unloaded
   only for the current user.

Get: LocallyUnloaded(self: RevitLinkType) -> bool

"""

    PathType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of path the link uses.

Get: PathType(self: RevitLinkType) -> PathType

Set: PathType(self: RevitLinkType) = value
"""



class Revolution(GenericForm, IDisposable):
    """ A revolution solid or void form. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Axis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Axis of the Revolution.

Get: Axis(self: Revolution) -> ModelLine

"""

    EndAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The end angle of the revolution relative to the sketch plane.

Get: EndAngle(self: Revolution) -> float

Set: EndAngle(self: Revolution) = value
"""

    Sketch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Sketch of the Revolution.

Get: Sketch(self: Revolution) -> Sketch

"""

    StartAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The start angle of the revolution relative to the sketch plane.

Get: StartAngle(self: Revolution) -> float

Set: StartAngle(self: Revolution) = value
"""



class RevolvedFace(Face, IDisposable):
    """ A revolved face of a 3d solid or open shell. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Axis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Axis of the surface.

Get: Axis(self: RevolvedFace) -> XYZ

"""

    Curve = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Profile curve of the surface.

Get: Curve(self: RevolvedFace) -> Curve

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Origin of the surface.

Get: Origin(self: RevolvedFace) -> XYZ

"""



class RevolvedSurface(Surface, IDisposable):
    """
    A surface of revolution defined by a profile curve and a local coordinate system.
       The surface is obtained by rotating the curve around Z axis of the local coordinate system.
    """
    @staticmethod
    def Create(*__args):
        """
        Create(axisBasePoint: XYZ, axisDirection: XYZ, profileCurve: Curve, startAngle: float, endAngle: float) -> Surface
        
            Creates a Surface object coincident with the surface of revolution defined by 
             an axis, a profile curve,
           and start and end angles of revolution.
        
        
            axisBasePoint: The base point of the axis of revolution.  Expected to lie within the Revit 
             design limits 
             Autodesk.Revit.DB.XYZ.IsWithinLengthLimits(Autodesk.Revit.DB.XYZ).
        
            axisDirection: The direction of the axis.
            profileCurve: The profile curve, which should satisfy the following conditions:
            It is 
             bounded and non-degenerate.  It is co-planar with the axis of revolution.  It 
             lies on only one side of the axis.  Only the end points of the profile curve 
             can touch the axis.
        
            startAngle: Start angle of rotation.
           The angles are measured around the axis of 
             revolution, using the right-hand rule.
           The profile curve is at the zero 
             angle.
        
            endAngle: End angle of rotation.
           Start angle must be less than end angle and their 
             difference must be less than or equal to two times PI.
        
            Returns: The created surface. Note that this surface may not be of type RevolvedSurface.
        Create(axisBasePoint: XYZ, axisDirection: XYZ, profileCurve: Curve) -> Surface
        
            Creates a Surface object coincident with the surface of revolution defined by 
             an axis and a profile curve.
        
        
            axisBasePoint: The base point of the axis of revolution.  Expected to lie within the Revit 
             design limits 
             Autodesk.Revit.DB.XYZ.IsWithinLengthLimits(Autodesk.Revit.DB.XYZ).
        
            axisDirection: The direction of the axis.
            profileCurve: The profile curve, which should satisfy the following conditions:
            It is 
             bounded and non-degenerate.  It is co-planar with the axis of revolution.  It 
             lies on only one side of the axis.  Only the end points of the profile curve 
             can touch the axis.
        
            Returns: The created surface. Note that this surface may not be of type RevolvedSurface.
        Create(frameOfReference: Frame, profileCurve: Curve, startAngle: float, endAngle: float) -> Surface
        
            Creates a Surface object coincident with the surface of revolution defined by a 
             coordinate frame, a profile curve,
           and start and end angles of revolution.
        
        
            frameOfReference: frameOfReference is an orthonormal frame that defines a local coordinate system 
             for the surface of revolution.
            The frame can be "right-handed" or 
             "left-handed".  The origin of the frame is the base of point of the axis of 
             revolution. The BasisZ of the frame is the direction of the axis.
        
            profileCurve: The profile curve, which should satisfy the following conditions:
            It is 
             bounded and non-degenerate.  It is co-planar with the axis of revolution.  It 
             lies on the xz plane of the frame.  It lies on the right side of the axis.  
             Only the end points of the profile curve can touch the axis.
        
            startAngle: Start angle of rotation.
           The angles are measured around the axis of 
             revolution, using the right-hand rule.
           The profile curve is at the zero 
             angle.
        
            endAngle: End angle of rotation.
           Start angle must be less than end angle and their 
             difference must be less than or equal to two times PI.
        
            Returns: The created surface. Note that this surface may not be of type RevolvedSurface.
        Create(frameOfReference: Frame, profileCurve: Curve) -> Surface
        
            Creates a Surface object coincident with the surface of revolution defined by a 
             coordinate frame and a profile curve.
        
        
            frameOfReference: frameOfReference is an orthonormal frame that defines a local coordinate system 
             for the surface of revolution.
            The frame can be "right-handed" or 
             "left-handed".  The origin of the frame is the base of point of the axis of 
             revolution. The BasisZ of the frame is the direction of the axis.
        
            profileCurve: The profile curve, which should satisfy the following conditions:
            It is 
             bounded and non-degenerate.  It is co-planar with the axis of revolution.  It 
             lies on the xz plane of the frame.  It lies on the right side of the axis.  
             Only the end points of the profile curve can touch the axis.
        
            Returns: The created surface. Note that this surface may not be of type RevolvedSurface.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Surface, A_0: bool) """
        pass

    def GetProfileCurve(self):
        """
        GetProfileCurve(self: RevolvedSurface) -> Curve
        
            Returns a copy of the profile curve expressed in the surface's coordinate 
             system.
        
            Returns: A copy of the profile curve.
        """
        pass

    @staticmethod
    def IsValidProfileCurve(*__args):
        """
        IsValidProfileCurve(axisBasePoint: XYZ, axisDirection: XYZ, profileCurve: Curve) -> bool
        
            Checks if the input profile curve is valid to create a surface of revolution 
             around the given axis.
        
        
            axisBasePoint: The base point of the axis of revolution.
            axisDirection: The direction of the axis.
            profileCurve: The profile curve.
            Returns: True if the profile curve is valid; False otherwise.
        IsValidProfileCurve(frameOfReference: Frame, profileCurve: Curve) -> bool
        
            Checks if the input profile curve is valid to create a surface of revolution in 
             the given frame of reference.
        
        
            frameOfReference: frameOfReference is an orthonormal frame that defines a local coordinate system 
             for the surface of revolution.
            The frame can be "right-handed" or 
             "left-handed".  The origin of the frame is the base of point of the axis of 
             revolution. The BasisZ of the frame is the direction of the axis.
        
            profileCurve: The profile curve.
            Returns: True if the profile curve is valid; False otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Surface, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Axis = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Axis of the revolved surface. This is the Z axis of the local coordinate system associated with this revolved surface.

Get: Axis(self: RevolvedSurface) -> XYZ

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Center of the circle that defines the base of the revolved surface. This is the origin of the local coordinate system associated with this revolved surface.

Get: Origin(self: RevolvedSurface) -> XYZ

"""

    XDir = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """X axis of the local coordinate system associated with this revolved surface.

Get: XDir(self: RevolvedSurface) -> XYZ

"""

    YDir = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """X axis of the local coordinate system associated with this revolved surface.

Get: YDir(self: RevolvedSurface) -> XYZ

"""



class RoofType(HostObjAttributes, IDisposable):
    """ Represents a specific type of roof. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ThermalProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The calculated and settable thermal properties of the RoofType

Get: ThermalProperties(self: RoofType) -> ThermalProperties

"""



class RoundingMethod(Enum, IComparable, IFormattable, IConvertible):
    """
    Rounding methods
    
    enum RoundingMethod, values: Down (2), Nearest (0), Up (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Down = None
    Nearest = None
    Up = None
    value__ = None


class RoutingCondition(object, IDisposable):
    """
    RoutingCondition represents routing information that is used as input when determining if a routing criterion,
       such as minimum or maximum diameter, is met.
    
    RoutingCondition(diameter: float)
    """
    def Dispose(self):
        """ Dispose(self: RoutingCondition) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RoutingCondition, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, diameter):
        """ __new__(cls: type, diameter: float) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Diameter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The diameter of the segment or fitting specified for the routing condition.

Get: Diameter(self: RoutingCondition) -> float

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RoutingCondition) -> bool

"""



class RoutingConditions(object, IDisposable):
    """
    RoutingConditions contain routing information that is used as input when determining if a routing criterion,
       such as minimum or maximum diameter, is met.
    
    RoutingConditions(errorLevel: RoutingPreferenceErrorLevel)
    """
    def AppendCondition(self, condition):
        """
        AppendCondition(self: RoutingConditions, condition: RoutingCondition)
            Appends a routing condition to the end of existing routing conditions. Note 
             that the first item (indexed at 0) is the condition for the primary connector.
        """
        pass

    def Clear(self):
        """
        Clear(self: RoutingConditions)
            Clear all existing conditions
        """
        pass

    def Dispose(self):
        """ Dispose(self: RoutingConditions) """
        pass

    def GetConditionAt(self, index):
        """
        GetConditionAt(self: RoutingConditions, index: int) -> RoutingCondition
        
            Gets the routing condition at the specified index position.
        
            index: The 0-based index to access the collection of available conditions. The method 
             throws the exception ArgumentOutOfRangeException if the index is out of range.
        
            Returns: The found routing condition.
        """
        pass

    def GetNumberOfConditions(self):
        """
        GetNumberOfConditions(self: RoutingConditions) -> int
        
            Gets the number of included routing conditions.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RoutingConditions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, errorLevel):
        """ __new__(cls: type, errorLevel: RoutingPreferenceErrorLevel) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ErrorLevel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The error level that the routing preference manager should post errors if the routing conditions do not meet any routing preference rule, could be None, Warning, or Error

Get: ErrorLevel(self: RoutingConditions) -> RoutingPreferenceErrorLevel

Set: ErrorLevel(self: RoutingConditions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RoutingConditions) -> bool

"""

    PreferredJunctionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The junction type (Tee or Tap) to select if defined fittings of both junction types meet all routing conditions.

Get: PreferredJunctionType(self: RoutingConditions) -> PreferredJunctionType

Set: PreferredJunctionType(self: RoutingConditions) = value
"""



class RoutingPreferenceErrorLevel(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing the options for posting errors or warnings when routing preferences are not satisfied.
    
    enum RoutingPreferenceErrorLevel, values: Error (2), None (0), Warning (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Error = None
    None = None
    value__ = None
    Warning = None


class RoutingPreferenceManager(object, IDisposable):
    """ Manages default pipe segments, fittings, and selection criteria for a given MEPCurveType """
    def AddRule(self, groupType, rule, index=None):
        """
        AddRule(self: RoutingPreferenceManager, groupType: RoutingPreferenceRuleGroupType, rule: RoutingPreferenceRule)
            Adds a new routing preference rule to the rule group.
        
            groupType: The routing preference group in which the rule should be added.
            rule: The new rule to be added.
        AddRule(self: RoutingPreferenceManager, groupType: RoutingPreferenceRuleGroupType, rule: RoutingPreferenceRule, index: int)
            Adds a new routing preference rule to the specified position in the rule group.
        
            groupType: The routing preference group type in which the rule should be added.
            rule: The new rule to be added.
            index: The zero-based index position where the new rule will be added.
        """
        pass

    def Dispose(self):
        """ Dispose(self: RoutingPreferenceManager) """
        pass

    def GetMEPPartId(self, groupType, conditions):
        """
        GetMEPPartId(self: RoutingPreferenceManager, groupType: RoutingPreferenceRuleGroupType, conditions: RoutingConditions) -> ElementId
        
            Gets a fitting or segment id of given routing preference group that meets the 
             specified routing conditions.
        
        
            groupType: The routing preference group
            conditions: A set of routing conditions
            Returns: The Id of the fitting or segment that met the given routing conditions.
        """
        pass

    def GetNumberOfRules(self, eGroupType):
        """
        GetNumberOfRules(self: RoutingPreferenceManager, eGroupType: RoutingPreferenceRuleGroupType) -> int
        
            The number of RoutingPreference rules in a group.
        """
        pass

    def GetRule(self, groupType, index):
        """
        GetRule(self: RoutingPreferenceManager, groupType: RoutingPreferenceRuleGroupType, index: int) -> RoutingPreferenceRule
        
            Gets the specified rule.
        
            groupType: The routing preference group type from which the rule should be returned.
            index: The zero-based index where the rule should be returned.
            Returns: The rule at the specified group and zero-based index position.
        """
        pass

    def GetSharedSizes(self, size, shape):
        """
        GetSharedSizes(self: RoutingPreferenceManager, size: float, shape: ConnectorProfileType) -> IList[ElementId]
        
            Gets a list of all segments of a given profile shape that define a given size.
        
            size: The size to search for.
            shape: The profile shape of segment object.
            Returns: A list of all segments that define a given size.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RoutingPreferenceManager, disposing: bool) """
        pass

    def RemoveRule(self, groupType, index):
        """
        RemoveRule(self: RoutingPreferenceManager, groupType: RoutingPreferenceRuleGroupType, index: int)
            Removes an existing routing preference rule.
           Thrown if the index is out of 
             bounds.
        
        
            groupType: The routing preference group type in which the rule should be removed.
            index: The index position of removed routing preference rule in the group.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RoutingPreferenceManager) -> bool

"""

    OwnerId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Id of the MEPCurveType that owns the RoutingPreferenceManager

Get: OwnerId(self: RoutingPreferenceManager) -> ElementId

"""

    PreferredJunctionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The preferred junction type.

Get: PreferredJunctionType(self: RoutingPreferenceManager) -> PreferredJunctionType

Set: PreferredJunctionType(self: RoutingPreferenceManager) = value
"""



class RoutingPreferenceRule(object, IDisposable):
    """
    A class representing a rule set in MEP routing preferences.
    
    RoutingPreferenceRule(MEPPartId: ElementId, description: str)
    """
    def AddCriterion(self, myCriterion):
        """
        AddCriterion(self: RoutingPreferenceRule, myCriterion: RoutingCriterionBase)
            Adds a new routing criterion.
        
            myCriterion: The criterion to add.
        """
        pass

    def Dispose(self):
        """ Dispose(self: RoutingPreferenceRule) """
        pass

    def GetCriterion(self, index):
        """
        GetCriterion(self: RoutingPreferenceRule, index: int) -> RoutingCriterionBase
        
            Gets the specified criteria.
            Returns: The criterion at the specified zero-based index position.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RoutingPreferenceRule, disposing: bool) """
        pass

    def RemoveCriteron(self, index):
        """
        RemoveCriteron(self: RoutingPreferenceRule, index: int)
            Removes an existing criterion.
        
            index: The index position of removed routing preference rule in the group.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, MEPPartId, description):
        """ __new__(cls: type, MEPPartId: ElementId, description: str) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The description of the routing preference rule.

Get: Description(self: RoutingPreferenceRule) -> str

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: RoutingPreferenceRule) -> bool

"""

    MEPPartId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The referenced MEPPart (segment or fitting) type in this rule. It may be InvalidElementId if no MEPPart will be allowed when the conditions satisfy the criteria in this rule.

Get: MEPPartId(self: RoutingPreferenceRule) -> ElementId

"""

    NumberOfCriteria = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of routing criteria.

Get: NumberOfCriteria(self: RoutingPreferenceRule) -> int

"""

    RoutingPreferenceManager = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the routing preference manager that owns this rule.

Get: RoutingPreferenceManager(self: RoutingPreferenceRule) -> RoutingPreferenceManager

"""



class RoutingPreferenceRuleGroupType(Enum, IComparable, IFormattable, IConvertible):
    """
    Add more rule group type here.
    
    enum RoutingPreferenceRuleGroupType, values: Caps (10), Crosses (3), Elbows (1), Junctions (2), MechanicalJoints (6), Segments (0), Transitions (4), TransitionsOvalToRound (9), TransitionsRectangularToOval (8), TransitionsRectangularToRound (7), Undefined (-1), Unions (5)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Caps = None
    Crosses = None
    Elbows = None
    Junctions = None
    MechanicalJoints = None
    Segments = None
    Transitions = None
    TransitionsOvalToRound = None
    TransitionsRectangularToOval = None
    TransitionsRectangularToRound = None
    Undefined = None
    Unions = None
    value__ = None


class RPCNode(ContentNode, IDisposable):
    """ This is a class representing an RPC content in a model-exporting process. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class RuledFace(Face, IDisposable):
    """ A ruled face of a 3d solid or open shell. """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsExtruded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determines if this is an extruded ruled surface.

Get: IsExtruded(self: RuledFace) -> bool

"""

    RulingsAreParallel = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determines if the rulings of this ruled surface are parallel.

Get: RulingsAreParallel(self: RuledFace) -> bool

"""



class RuledSurface(Surface, IDisposable):
    """
    A ruled surface is created by sweeping a line between two profile curves or between a curve and a point (a point and a curve).
       Input curve(s) must be bounded or have natural bounds.
    """
    @staticmethod
    def Create(*__args):
        """
        Create(profileCurve1: Curve, profileCurve2: Curve) -> Surface
        
            Creates a Surface object coincident with the ruled surface joining two bounded 
             generating curves.
        
        
            profileCurve1: The first profile curve; must be bounded and non-degenerate.
            profileCurve2: The second profile curve; must be bounded and non-degenerate.
            Returns: The created surface. Note that this surface may not be of type RuledSurf.
        Create(profileCurve: Curve, point: XYZ) -> Surface
        
            Creates a Surface object coincident with the ruled surface joining a bounded 
             generating curve to a point.
        
        
            profileCurve: The profile curve; must be bounded and non-degenerate.
            point: The point.  Expected to lie within the Revit design limits 
             Autodesk.Revit.DB.XYZ.IsWithinLengthLimits(Autodesk.Revit.DB.XYZ).
        
            Returns: The created surface. Note that this surface may not be of type RuledSurf.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Surface, A_0: bool) """
        pass

    def GetFirstProfileCurve(self):
        """
        GetFirstProfileCurve(self: RuledSurface) -> Curve
        
            Returns a copy of the first profile curve if it is set. If a point was used to 
             define the first profile, this function will return NULL.
        
            Returns: A copy of the first profile curve, if it exists.
        """
        pass

    def GetFirstProfilePoint(self):
        """
        GetFirstProfilePoint(self: RuledSurface) -> XYZ
        
            If a point was used to define the first profile, returns a copy of that point. 
             Otherwise return NULL.
        
            Returns: The first profile point if it was set, NULL otherwise.
        """
        pass

    def GetSecondProfileCurve(self):
        """
        GetSecondProfileCurve(self: RuledSurface) -> Curve
        
            Returns a copy of the second profile curve if it is set. If a point was used to 
             define the second profile, this function will return NULL.
        
            Returns: A copy of the second profile curve, if it exists.
        """
        pass

    def GetSecondProfilePoint(self):
        """
        GetSecondProfilePoint(self: RuledSurface) -> XYZ
        
            If a point was used to define the second profile, returns a copy of that point. 
             Otherwise return NULL.
        
            Returns: The second profile point if it was set, NULL otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Surface, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class SATExportOptions(object, IDisposable):
    """
    The export options used by exporting SAT format file. So far, there is no option in it.
    
    SATExportOptions(option: SATExportOptions)
    SATExportOptions()
    """
    def Dispose(self):
        """ Dispose(self: SATExportOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SATExportOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, option=None):
        """
        __new__(cls: type, option: SATExportOptions)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SATExportOptions) -> bool

"""



class SATImportOptions(BaseImportOptions, IDisposable):
    """
    The import options used to import SAT format files.
    
    SATImportOptions(option: SATImportOptions)
    SATImportOptions()
    """
    def Dispose(self):
        """ Dispose(self: BaseImportOptions, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BaseImportOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, option=None):
        """
        __new__(cls: type, option: SATImportOptions)
        __new__(cls: type)
        """
        pass


class SaveAsOptions(object, IDisposable):
    """
    This class contains options available for saving a document to disk with a new filename.
    
    SaveAsOptions()
    """
    def Dispose(self):
        """ Dispose(self: SaveAsOptions) """
        pass

    def GetWorksharingOptions(self):
        """
        GetWorksharingOptions(self: SaveAsOptions) -> WorksharingSaveAsOptions
        
            Gets Worksharing options for SaveAs.
            Returns: Defaults to ll.
           For a workshared model, if ll default values for 
             WorksharingSaveAsOptions are used.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SaveAsOptions, disposing: bool) """
        pass

    def SetWorksharingOptions(self, worksharingOptions):
        """
        SetWorksharingOptions(self: SaveAsOptions, worksharingOptions: WorksharingSaveAsOptions)
            Sets Worksharing options for SaveAs.
        
            worksharingOptions: Must be ll for a non-workshared model.  Allowed to be ll for a workshared 
             model,
           in which case default values for WorksharingSaveAsOptions are used.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Compact = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Default is false: let the OS eliminate as much or as little dead data as it wants to.
   True: force the OS to eliminate all dead data from the file on disk.

Get: Compact(self: SaveAsOptions) -> bool

Set: Compact(self: SaveAsOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SaveAsOptions) -> bool

"""

    MaximumBackups = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The maximum number of backups to keep on disk.

Get: MaximumBackups(self: SaveAsOptions) -> int

Set: MaximumBackups(self: SaveAsOptions) = value
"""

    OverwriteExistingFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the operation should be able to overwrite an existing file.

Get: OverwriteExistingFile(self: SaveAsOptions) -> bool

Set: OverwriteExistingFile(self: SaveAsOptions) = value
"""

    PreviewViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The view id that will be used to generate the preview; this id is not saved to the document's permanent settings.

Get: PreviewViewId(self: SaveAsOptions) -> ElementId

Set: PreviewViewId(self: SaveAsOptions) = value
"""



class SaveModifiedLinksOptions(Enum, IComparable, IFormattable, IConvertible):
    """
    Class giving options when saving linked files which have been modified
       in-memory by shared coordinates operations.
    
    enum SaveModifiedLinksOptions, values: DisableSharedPositioning (2), DoNotSaveLinks (1), SaveLinks (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DisableSharedPositioning = None
    DoNotSaveLinks = None
    SaveLinks = None
    value__ = None


class SaveModifiedLinksOptionsForUnloadLocally(Enum, IComparable, IFormattable, IConvertible):
    """
    Class giving options when saving linked files which are unloaded locally and have been modified
       in-memory by shared coordinates operations.
    
    enum SaveModifiedLinksOptionsForUnloadLocally, values: DoNotSaveLinks (1), SaveLinks (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DoNotSaveLinks = None
    SaveLinks = None
    value__ = None


class SaveOptions(object, IDisposable):
    """
    This class contains options available for saving a document to disk.
    
    SaveOptions()
    """
    def Dispose(self):
        """ Dispose(self: SaveOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SaveOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Compact = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Default is false: let the OS eliminate as much or as little dead data as it wants to.
   True: force the OS to eliminate all dead data from the file on disk.

Get: Compact(self: SaveOptions) -> bool

Set: Compact(self: SaveOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SaveOptions) -> bool

"""

    PreviewViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The view id that will be used to generate the preview; this id is not saved to the document's permanent settings.

Get: PreviewViewId(self: SaveOptions) -> ElementId

Set: PreviewViewId(self: SaveOptions) = value
"""



class SchedulableField(object, IDisposable):
    """
    A non-calculated field eligible to be included in a schedule.
    
    SchedulableField(fieldType: ScheduleFieldType, parameterId: ElementId)
    SchedulableField(fieldType: ScheduleFieldType)
    SchedulableField()
    """
    def Dispose(self):
        """ Dispose(self: SchedulableField) """
        pass

    def Equals(self, obj):
        """
        Equals(self: SchedulableField, obj: object) -> bool
        
            Determines whether the specified System.Object is equal to the current 
             System.Object.
        
        
            obj: The other object to evaluate.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: SchedulableField) -> int
        
            Gets the integer value of the SchedulableField as hash code
        """
        pass

    def GetName(self, document):
        """
        GetName(self: SchedulableField, document: Document) -> str
        
            Gets the name of the field.
        
            document: The document in which the field will be used.
            Returns: The name of the field.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SchedulableField, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, fieldType=None, parameterId=None):
        """
        __new__(cls: type, fieldType: ScheduleFieldType, parameterId: ElementId)
        __new__(cls: type, fieldType: ScheduleFieldType)
        __new__(cls: type)
        """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    FieldType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of data displayed by the field.

Get: FieldType(self: SchedulableField) -> ScheduleFieldType

Set: FieldType(self: SchedulableField) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SchedulableField) -> bool

"""

    ParameterId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ID of the parameter displayed by the field.

Get: ParameterId(self: SchedulableField) -> ElementId

Set: ParameterId(self: SchedulableField) = value
"""



class ScheduleDefinition(object, IDisposable):
    """ Settings that define the contents of a schedule. """
    def AddEmbeddedSchedule(self, categoryId):
        """
        AddEmbeddedSchedule(self: ScheduleDefinition, categoryId: ElementId)
            Adds an embedded ScheduleDefinition.
        
            categoryId: The category ID of elements to display in the embedded schedule.
        """
        pass

    def AddField(self, *__args):
        """
        AddField(self: ScheduleDefinition, schedulableField: SchedulableField) -> ScheduleField
        
            Adds a regular field at the end of the list.
        
            schedulableField: A SchedulableField object representing the field.
            Returns: The new field.
        AddField(self: ScheduleDefinition, fieldType: ScheduleFieldType) -> ScheduleField
        
            Adds a regular field at the end of the list.
        
            fieldType: The type of data displayed by the field.
            Returns: The new field.
        AddField(self: ScheduleDefinition, fieldType: ScheduleFieldType, parameterId: ElementId) -> ScheduleField
        
            Adds a regular field at the end of the list.
        
            fieldType: The type of data displayed by the field.
            parameterId: The ID of the parameter displayed by the field.
            Returns: The new field.
        """
        pass

    def AddFilter(self, filter):
        """
        AddFilter(self: ScheduleDefinition, filter: ScheduleFilter)
            Adds a new filter at the end of the list.
        
            filter: The filter to add.
        """
        pass

    def AddSortGroupField(self, sortGroupField):
        """
        AddSortGroupField(self: ScheduleDefinition, sortGroupField: ScheduleSortGroupField)
            Adds a new sorting/grouping field at the end of the list.
        
            sortGroupField: The sorting/grouping field to add.
        """
        pass

    def CanFilter(self):
        """
        CanFilter(self: ScheduleDefinition) -> bool
        
            Checks whether filters can be added to this ScheduleDefinition.
            Returns: True if this ScheduleDefinition supports filters, false otherwise.
        """
        pass

    def CanFilterByGlobalParameters(self, fieldId):
        """
        CanFilterByGlobalParameters(self: ScheduleDefinition, fieldId: ScheduleFieldId) -> bool
        
            Checks whether a field can be used with a global parameter-based filter.
        
            fieldId: The ID of the field to check.
            Returns: True if the field can be used with a global parameter-based filter, false 
             otherwise.
        """
        pass

    def CanFilterByParameterExistence(self, fieldId):
        """
        CanFilterByParameterExistence(self: ScheduleDefinition, fieldId: ScheduleFieldId) -> bool
        
            Checks whether a field can be used with a HasParameter filter.
        
            fieldId: The ID of the field to check.
            Returns: True if the field can be used with a HasParameter filter, false otherwise.
        """
        pass

    def CanFilterBySubstring(self, fieldId):
        """
        CanFilterBySubstring(self: ScheduleDefinition, fieldId: ScheduleFieldId) -> bool
        
            Checks whether a field can be used with a substring-based filter.
        
            fieldId: The ID of the field to check.
            Returns: True if the field can be used with a substring-based filter, false otherwise.
        """
        pass

    def CanFilterByValue(self, fieldId):
        """
        CanFilterByValue(self: ScheduleDefinition, fieldId: ScheduleFieldId) -> bool
        
            Checks whether a field can be used with a value-based filter.
        
            fieldId: The ID of the field to check.
            Returns: True if the field can be used with a value based filter, false otherwise.
        """
        pass

    def CanHaveEmbeddedSchedule(self):
        """
        CanHaveEmbeddedSchedule(self: ScheduleDefinition) -> bool
        
            Indicates if this ScheduleDefinition can have an embedded ScheduleDefinition
          
              added.
        
            Returns: True if this ScheduleDefinition can have an embedded ScheduleDefinition,
           
             false otherwise.
        """
        pass

    def CanIncludeLinkedFiles(self):
        """
        CanIncludeLinkedFiles(self: ScheduleDefinition) -> bool
        
            Checks whether the schedule is a type that supports
           including elements from 
             linked files.
        
            Returns: True if elements from linked files can be included, false otherwise.
        """
        pass

    def CanSortByField(self, fieldId):
        """
        CanSortByField(self: ScheduleDefinition, fieldId: ScheduleFieldId) -> bool
        
            Checks whether a field can be used for sorting/grouping.
        
            fieldId: The ID of the field to check.
            Returns: True if the field can be used for sorting/grouping, false otherwise.
        """
        pass

    def ClearFields(self):
        """
        ClearFields(self: ScheduleDefinition)
            Removes all fields.
        """
        pass

    def ClearFilters(self):
        """
        ClearFilters(self: ScheduleDefinition)
            Removes all filters.
        """
        pass

    def ClearSortGroupFields(self):
        """
        ClearSortGroupFields(self: ScheduleDefinition)
            Removes all sorting/grouping fields.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ScheduleDefinition) """
        pass

    def GetField(self, *__args):
        """
        GetField(self: ScheduleDefinition, index: int) -> ScheduleField
        
            Gets a field.
        
            index: The index of the field.
            Returns: The field.
        GetField(self: ScheduleDefinition, fieldId: ScheduleFieldId) -> ScheduleField
        
            Gets a field.
        
            fieldId: The ID of the field.
            Returns: The field.
        """
        pass

    def GetFieldCount(self):
        """
        GetFieldCount(self: ScheduleDefinition) -> int
        
            Gets the number of fields in this ScheduleDefinition.
            Returns: The number of fields.
        """
        pass

    def GetFieldId(self, index):
        """
        GetFieldId(self: ScheduleDefinition, index: int) -> ScheduleFieldId
        
            Converts a field index to the corresponding field ID.
        
            index: The field index.
            Returns: The field ID.
        """
        pass

    def GetFieldIndex(self, fieldId):
        """
        GetFieldIndex(self: ScheduleDefinition, fieldId: ScheduleFieldId) -> int
        
            Converts a field ID to the corresponding field index.
        
            fieldId: The field ID.
            Returns: The field index.
        """
        pass

    def GetFieldOrder(self):
        """
        GetFieldOrder(self: ScheduleDefinition) -> IList[ScheduleFieldId]
        
            Gets the IDs of the current list of fields in order.
            Returns: The IDs of the current list of fields.
        """
        pass

    def GetFilter(self, index):
        """
        GetFilter(self: ScheduleDefinition, index: int) -> ScheduleFilter
        
            Gets a filter.
        
            index: The index of the filter.
            Returns: A copy of the filter.
        """
        pass

    def GetFilterCount(self):
        """
        GetFilterCount(self: ScheduleDefinition) -> int
        
            Gets the number of filters in this ScheduleDefinition.
            Returns: The number of filters.
        """
        pass

    def GetFilters(self):
        """
        GetFilters(self: ScheduleDefinition) -> IList[ScheduleFilter]
        
            Gets all filters in this ScheduleDefinition.
            Returns: A list of all filters.
        """
        pass

    def GetSchedulableFields(self):
        """
        GetSchedulableFields(self: ScheduleDefinition) -> IList[SchedulableField]
        
            Gets a list of all non-calculated/non-combined fields that are eligible to be
         
               included in this schedule.
        
            Returns: A list of SchedulableField objects representing the non-calculated/non-combined
             
           fields that may be included in the schedule.
        """
        pass

    def GetSortGroupField(self, index):
        """
        GetSortGroupField(self: ScheduleDefinition, index: int) -> ScheduleSortGroupField
        
            Gets a sorting/grouping field.
        
            index: The index of the sorting/grouping field.
            Returns: A copy of the sorting/grouping field.
        """
        pass

    def GetSortGroupFieldCount(self):
        """
        GetSortGroupFieldCount(self: ScheduleDefinition) -> int
        
            Gets the number of sorting/grouping fields in this ScheduleDefinition.
            Returns: The number of sorting/grouping fields.
        """
        pass

    def GetSortGroupFields(self):
        """
        GetSortGroupFields(self: ScheduleDefinition) -> IList[ScheduleSortGroupField]
        
            Gets all sorting/grouping fields in this ScheduleDefinition.
            Returns: A list of all sorting/grouping fields.
        """
        pass

    def GetValidCategoriesForEmbeddedSchedule(self):
        """
        GetValidCategoriesForEmbeddedSchedule(self: ScheduleDefinition) -> ICollection[ElementId]
        
            Get all categories that can be used for an embedded ScheduleDefinition
           in 
             this ScheduleDefinition.
        
            Returns: The IDs of all valid categories.
        """
        pass

    def InsertCombinedParameterField(self, data, fieldName, index):
        """ InsertCombinedParameterField(self: ScheduleDefinition, data: IList[TableCellCombinedParameterData], fieldName: str, index: int) -> ScheduleField """
        pass

    def InsertField(self, *__args):
        """
        InsertField(self: ScheduleDefinition, schedulableField: SchedulableField, index: int) -> ScheduleField
        
            Adds a regular field at the specified position in the list.
        
            schedulableField: A SchedulableField object representing the field.
            index: The index in the list of fields.
            Returns: The new field.
        InsertField(self: ScheduleDefinition, fieldType: ScheduleFieldType, index: int) -> ScheduleField
        
            Adds a regular field at the specified position in the list.
        
            fieldType: The type of data displayed by the field.
            index: The index in the list of fields.
            Returns: The new field.
        InsertField(self: ScheduleDefinition, fieldType: ScheduleFieldType, parameterId: ElementId, index: int) -> ScheduleField
        
            Adds a regular field at the specified position in the list.
        
            fieldType: The type of data displayed by the field.
            parameterId: The ID of the parameter displayed by the field.
            index: The index in the list of fields.
            Returns: The new field.
        """
        pass

    def InsertFilter(self, filter, index):
        """
        InsertFilter(self: ScheduleDefinition, filter: ScheduleFilter, index: int)
            Adds a new filter at the specified position in the list.
        
            filter: The filter to add.
            index: The index in the list of filters.
        """
        pass

    def InsertSortGroupField(self, sortGroupField, index):
        """
        InsertSortGroupField(self: ScheduleDefinition, sortGroupField: ScheduleSortGroupField, index: int)
            Adds a new sorting/grouping field at the specified position in the list.
        
            sortGroupField: The sorting/grouping field to add.
            index: The index in the list of sorting/grouping fields.
        """
        pass

    def IsSchedulableField(self, schedulableField):
        """
        IsSchedulableField(self: ScheduleDefinition, schedulableField: SchedulableField) -> bool
        
            Checks whether a non-calculated/non-combined field is eligible to be included 
             in
           this schedule.
        
        
            schedulableField: The field to check.
            Returns: True if the field may be included in the schedule, false otherwise.
        """
        pass

    def IsValidCategoryForEmbeddedSchedule(self, categoryId):
        """
        IsValidCategoryForEmbeddedSchedule(self: ScheduleDefinition, categoryId: ElementId) -> bool
        
            Indicates if a category can be used for an embedded ScheduleDefinition
           in 
             this ScheduleDefinition.
        
        
            categoryId: The category ID to check.
            Returns: True if the category can be used for an embedded ScheduleDefinition,
           false 
             otherwise.
        """
        pass

    def IsValidCombinedParameters(self, data):
        """ IsValidCombinedParameters(self: ScheduleDefinition, data: IList[TableCellCombinedParameterData]) -> bool """
        pass

    def IsValidFieldId(self, fieldId):
        """
        IsValidFieldId(self: ScheduleDefinition, fieldId: ScheduleFieldId) -> bool
        
            Checks whether a ScheduleFieldId is the ID of a field in this 
             ScheduleDefinition.
        
        
            fieldId: The field ID to check.
            Returns: True if the field ID is valid, false otherwise.
        """
        pass

    def IsValidFieldIndex(self, index):
        """
        IsValidFieldIndex(self: ScheduleDefinition, index: int) -> bool
        
            Checks whether an integer is a valid zero-based field index in this 
             ScheduleDefinition.
        
        
            index: The field index to check.
            Returns: True if the field index is valid, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ScheduleDefinition, disposing: bool) """
        pass

    def RemoveEmbeddedSchedule(self):
        """
        RemoveEmbeddedSchedule(self: ScheduleDefinition)
            Removes the embedded ScheduleDefinition.
        """
        pass

    def RemoveField(self, *__args):
        """
        RemoveField(self: ScheduleDefinition, index: int)
            Removes a field.
        
            index: The index of the field to remove.
        RemoveField(self: ScheduleDefinition, fieldId: ScheduleFieldId)
            Removes a field.
        
            fieldId: The ID of the field to remove.
        """
        pass

    def RemoveFilter(self, index):
        """
        RemoveFilter(self: ScheduleDefinition, index: int)
            Removes a filter.
        
            index: The index of the filter to remove.
        """
        pass

    def RemoveSortGroupField(self, index):
        """
        RemoveSortGroupField(self: ScheduleDefinition, index: int)
            Removes a sorting/grouping field.
        
            index: The index of the sorting/grouping field to remove.
        """
        pass

    def SetFieldOrder(self, fieldIds):
        """ SetFieldOrder(self: ScheduleDefinition, fieldIds: IList[ScheduleFieldId]) """
        pass

    def SetFilter(self, index, filter):
        """
        SetFilter(self: ScheduleDefinition, index: int, filter: ScheduleFilter)
            Replaces a filter.
        
            index: The index of the filter to replace.
            filter: The new filter.
        """
        pass

    def SetFilters(self, filters):
        """ SetFilters(self: ScheduleDefinition, filters: IList[ScheduleFilter]) """
        pass

    def SetSortGroupField(self, index, sortGroupField):
        """
        SetSortGroupField(self: ScheduleDefinition, index: int, sortGroupField: ScheduleSortGroupField)
            Replaces a sorting/grouping field.
        
            index: The index of the sorting/grouping field to replace.
            sortGroupField: The new sorting/grouping field.
        """
        pass

    def SetSortGroupFields(self, sortGroupFields):
        """ SetSortGroupFields(self: ScheduleDefinition, sortGroupFields: IList[ScheduleSortGroupField]) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AreaSchemeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """In an area schedule, the ID of the area scheme to display.

Get: AreaSchemeId(self: ScheduleDefinition) -> ElementId

"""

    CategoryId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The category ID of elements appearing in the schedule.

Get: CategoryId(self: ScheduleDefinition) -> ElementId

"""

    EmbeddedDefinition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The embedded ScheduleDefinition.

Get: EmbeddedDefinition(self: ScheduleDefinition) -> ScheduleDefinition

"""

    FamilyId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """In a note block schedule, the ID of the Generic Annotation family
   displayed by the schedule.

Get: FamilyId(self: ScheduleDefinition) -> ElementId

"""

    GrandTotalTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The title name is used to display at the grand total row. The name is "Grand total", expressed in the Revit session language, by default.

Get: GrandTotalTitle(self: ScheduleDefinition) -> str

Set: GrandTotalTitle(self: ScheduleDefinition) = value
"""

    HasEmbeddedSchedule = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if this ScheduleDefinition has an embedded ScheduleDefinition.

Get: HasEmbeddedSchedule(self: ScheduleDefinition) -> bool

"""

    IncludeLinkedFiles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the schedule includes elements from linked files.

Get: IncludeLinkedFiles(self: ScheduleDefinition) -> bool

Set: IncludeLinkedFiles(self: ScheduleDefinition) = value
"""

    IsEmbedded = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if this is an embedded ScheduleDefinition.

Get: IsEmbedded(self: ScheduleDefinition) -> bool

"""

    IsItemized = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the schedule displays each element on a separate row or
   combines multiple grouped elements onto the same row.

Get: IsItemized(self: ScheduleDefinition) -> bool

Set: IsItemized(self: ScheduleDefinition) = value
"""

    IsKeySchedule = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the schedule is a key schedule.

Get: IsKeySchedule(self: ScheduleDefinition) -> bool

"""

    IsMaterialTakeoff = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the schedule is a material takeoff.

Get: IsMaterialTakeoff(self: ScheduleDefinition) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ScheduleDefinition) -> bool

"""

    ShowGrandTotal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if a grand total row should be displayed at the bottom of
   the schedule.

Get: ShowGrandTotal(self: ScheduleDefinition) -> bool

Set: ShowGrandTotal(self: ScheduleDefinition) = value
"""

    ShowGrandTotalCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the grand total row should display a count of elements
   in the schedule.

Get: ShowGrandTotalCount(self: ScheduleDefinition) -> bool

Set: ShowGrandTotalCount(self: ScheduleDefinition) = value
"""

    ShowGrandTotalTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the grand total row should display a title.

Get: ShowGrandTotalTitle(self: ScheduleDefinition) -> bool

Set: ShowGrandTotalTitle(self: ScheduleDefinition) = value
"""

    ShowHeaders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the headers will be displayed in the schedule.

Get: ShowHeaders(self: ScheduleDefinition) -> bool

Set: ShowHeaders(self: ScheduleDefinition) = value
"""

    ShowTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the title will be displayed in the schedule.

Get: ShowTitle(self: ScheduleDefinition) -> bool

Set: ShowTitle(self: ScheduleDefinition) = value
"""



class ScheduleField(object, IDisposable):
    """ A field in a schedule. """
    def CanDisplayMinMax(self):
        """
        CanDisplayMinMax(self: ScheduleField) -> bool
        
            Indicates if this field can display minimum and maximum values.
            Returns: True if this field can display minimum and maximum values, false otherwise.
        """
        pass

    def CanTotal(self):
        """
        CanTotal(self: ScheduleField) -> bool
        
            Indicates if totals can be enabled for this field.
            Returns: True if this field can be totaled, false otherwise.
        """
        pass

    def CanTotalByAssemblyType(self):
        """
        CanTotalByAssemblyType(self: ScheduleField) -> bool
        
            Indicates if totals by assembly type can be enabled for this field.
            Returns: True if this field can be totaled by assembly type, false otherwise.
        """
        pass

    def CreatesCircularReferences(self, fieldId):
        """
        CreatesCircularReferences(self: ScheduleField, fieldId: ScheduleFieldId) -> bool
        
            Checks whether a field ID would create a circular chain of references
           when 
             used by the PercentageOf property of this field.
        
        
            fieldId: The field ID to check.
            Returns: True if the field ID would create a circular chain of references,
           false 
             otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ScheduleField) """
        pass

    def GetCombinedParameters(self):
        """
        GetCombinedParameters(self: ScheduleField) -> IList[TableCellCombinedParameterData]
        
            Gets this field's combine parameter array if applicable
            Returns: Gets array of TableCellCombinedParameterData with the combined parameters data
        """
        pass

    def GetFormatOptions(self):
        """
        GetFormatOptions(self: ScheduleField) -> FormatOptions
        
            Gets the FormatOptions to optionally override the default settings in the Units 
             class.
        
            Returns: A copy of the FormatOptions.
        """
        pass

    def GetName(self):
        """
        GetName(self: ScheduleField) -> str
        
            Gets the name of the field.
            Returns: The name of the field.
        """
        pass

    def GetSchedulableField(self):
        """
        GetSchedulableField(self: ScheduleField) -> SchedulableField
        
            Gets a SchedulableField object representing this field.
            Returns: The SchedulableField object.
        """
        pass

    def GetStyle(self):
        """
        GetStyle(self: ScheduleField) -> TableCellStyle
        
            Gets the style of this field.
        """
        pass

    def IsValidCombinedParameters(self, data):
        """ IsValidCombinedParameters(self: ScheduleField, data: IList[TableCellCombinedParameterData]) -> bool """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ScheduleField, disposing: bool) """
        pass

    def ResetOverride(self):
        """
        ResetOverride(self: ScheduleField)
            Resets the override of this field.
        """
        pass

    def SetCombinedParameters(self, data):
        """ SetCombinedParameters(self: ScheduleField, data: IList[TableCellCombinedParameterData]) """
        pass

    def SetFormatOptions(self, formatOptions):
        """
        SetFormatOptions(self: ScheduleField, formatOptions: FormatOptions)
            Sets the FormatOptions to optionally override the default settings in the Units 
             class.
        
        
            formatOptions: The FormatOptions.
        """
        pass

    def SetStyle(self, style):
        """
        SetStyle(self: ScheduleField, style: TableCellStyle)
            Sets the style of this field.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ColumnHeading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The column heading text.

Get: ColumnHeading(self: ScheduleField) -> str

Set: ColumnHeading(self: ScheduleField) = value
"""

    Definition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ScheduleDefinition that this field belongs to.

Get: Definition(self: ScheduleField) -> ScheduleDefinition

"""

    DisplayType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the chosen display type for the field.

Get: DisplayType(self: ScheduleField) -> ScheduleFieldDisplayType

Set: DisplayType(self: ScheduleField) = value
"""

    FieldId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ID of the field in the containing ScheduleDefinition.

Get: FieldId(self: ScheduleField) -> ScheduleFieldId

"""

    FieldIndex = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The index of the field in the containing ScheduleDefinition.

Get: FieldIndex(self: ScheduleField) -> int

"""

    FieldType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of data displayed by the field.

Get: FieldType(self: ScheduleField) -> ScheduleFieldType

"""

    GridColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The width of the column in the editable grid view, measured in feet.

Get: GridColumnWidth(self: ScheduleField) -> float

Set: GridColumnWidth(self: ScheduleField) = value
"""

    HasSchedulableField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if this ScheduleField object has access to a SchedulableField.
   Calculated and combined parameter fields will not have the access.

Get: HasSchedulableField(self: ScheduleField) -> bool

"""

    HasTotals = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the field displays totals.

Get: HasTotals(self: ScheduleField) -> bool

Set: HasTotals(self: ScheduleField) = value
"""

    HeadingOrientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The orientation of the column heading text.

Get: HeadingOrientation(self: ScheduleField) -> ScheduleHeadingOrientation

Set: HeadingOrientation(self: ScheduleField) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The horizontal alignment of text in the column.

Get: HorizontalAlignment(self: ScheduleField) -> ScheduleHorizontalAlignment

Set: HorizontalAlignment(self: ScheduleField) = value
"""

    IsCalculatedField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the field is a calculated field (Formula or Percentage).

Get: IsCalculatedField(self: ScheduleField) -> bool

"""

    IsCombinedParameterField = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the field is a combined parameter field.

Get: IsCombinedParameterField(self: ScheduleField) -> bool

"""

    IsHidden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the field is hidden in the schedule.

Get: IsHidden(self: ScheduleField) -> bool

Set: IsHidden(self: ScheduleField) = value
"""

    IsOverridden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the field is overridden or not.

Get: IsOverridden(self: ScheduleField) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ScheduleField) -> bool

"""

    ParameterId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ID of the parameter displayed by the field.

Get: ParameterId(self: ScheduleField) -> ElementId

"""

    PercentageBy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ID of the grouped schedule field used to calculate percentage totals.

Get: PercentageBy(self: ScheduleField) -> ScheduleFieldId

Set: PercentageBy(self: ScheduleField) = value
"""

    PercentageOf = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ID of the field to calculate percentages of.

Get: PercentageOf(self: ScheduleField) -> ScheduleFieldId

Set: PercentageOf(self: ScheduleField) = value
"""

    Schedule = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The schedule that this field belongs to.

Get: Schedule(self: ScheduleField) -> ViewSchedule

"""

    SheetColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The width of the column on a sheet, measured in feet.

Get: SheetColumnWidth(self: ScheduleField) -> float

Set: SheetColumnWidth(self: ScheduleField) = value
"""

    TotalByAssemblyType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """In an assembly schedule view, indicates if totals are calculated for all
   assembly instances of the same type or only for a single instance.

Get: TotalByAssemblyType(self: ScheduleField) -> bool

Set: TotalByAssemblyType(self: ScheduleField) = value
"""

    UnitType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The unit type of this field, if applicable.

Get: UnitType(self: ScheduleField) -> UnitType

"""



class ScheduleFieldDisplayType(Enum, IComparable, IFormattable, IConvertible):
    """
    Display type of schedule field.
    
    enum ScheduleFieldDisplayType, values: Max (3), Min (4), MinMax (2), Standard (0), Totals (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Max = None
    Min = None
    MinMax = None
    Standard = None
    Totals = None
    value__ = None


class ScheduleFieldId(object):
    """
    The ScheduleFieldId object is used as a unique identification for a field in a schedule.
    
    ScheduleFieldId(id: int)
    """
    def Equals(self, obj):
        """
        Equals(self: ScheduleFieldId, obj: object) -> bool
        
            Determines whether the specified System.Object is equal to the current 
             System.Object.
        
        
            obj: The other object to evaluate.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: ScheduleFieldId) -> int
        
            Gets the integer value of the id as hash code
        """
        pass

    def ToString(self):
        """
        ToString(self: ScheduleFieldId) -> str
        
            Gets a String representation of the integer value of the id.
        """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    @staticmethod # known case of __new__
    def __new__(self, id):
        """ __new__(cls: type, id: int) """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    IntegerValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provides the value of the ScheduleFieldId as an integer.

Get: IntegerValue(self: ScheduleFieldId) -> int

"""


    InvalidScheduleFieldId = None


class ScheduleFieldType(Enum, IComparable, IFormattable, IConvertible):
    """
    The type of data displayed in a schedule field.
    
    enum ScheduleFieldType, values: Analytical (17), CombinedParameter (20), Count (2), ElementType (1), Formula (5), FromRoom (8), Instance (0), Material (11), MaterialQuantity (12), Percentage (6), PhysicalInstance (19), PhysicalType (18), ProjectInfo (10), RevitLinkInstance (13), RevitLinkType (14), Room (7), Space (16), StructuralMaterial (15), ToRoom (9), ViewBased (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Analytical = None
    CombinedParameter = None
    Count = None
    ElementType = None
    Formula = None
    FromRoom = None
    Instance = None
    Material = None
    MaterialQuantity = None
    Percentage = None
    PhysicalInstance = None
    PhysicalType = None
    ProjectInfo = None
    RevitLinkInstance = None
    RevitLinkType = None
    Room = None
    Space = None
    StructuralMaterial = None
    ToRoom = None
    value__ = None
    ViewBased = None


class ScheduleFilter(object, IDisposable):
    """
    A filter in a schedule.
    
    ScheduleFilter(fieldId: ScheduleFieldId, filterType: ScheduleFilterType, value: ElementId)
    ScheduleFilter(fieldId: ScheduleFieldId, filterType: ScheduleFilterType, value: str)
    ScheduleFilter(fieldId: ScheduleFieldId, filterType: ScheduleFilterType, value: float)
    ScheduleFilter(fieldId: ScheduleFieldId, filterType: ScheduleFilterType, value: int)
    ScheduleFilter(fieldId: ScheduleFieldId, filterType: ScheduleFilterType)
    ScheduleFilter()
    """
    def Dispose(self):
        """ Dispose(self: ScheduleFilter) """
        pass

    def GetDoubleValue(self):
        """
        GetDoubleValue(self: ScheduleFilter) -> float
        
            Gets the filter value for a filter using a double value.
            Returns: The filter value.
        """
        pass

    def GetElementIdValue(self):
        """
        GetElementIdValue(self: ScheduleFilter) -> ElementId
        
            Gets the filter value for a filter using an ElementId value.
            Returns: The filter value.
        """
        pass

    def GetIntegerValue(self):
        """
        GetIntegerValue(self: ScheduleFilter) -> int
        
            Gets the filter value for a filter using an integer value.
            Returns: The filter value.
        """
        pass

    def GetStringValue(self):
        """
        GetStringValue(self: ScheduleFilter) -> str
        
            Gets the filter value for a filter using a string value.
            Returns: The filter value.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ScheduleFilter, disposing: bool) """
        pass

    def SetNullValue(self):
        """
        SetNullValue(self: ScheduleFilter)
            Sets the filter to have no specified value (used for HasParameter filters).
        """
        pass

    def SetValue(self, *__args):
        """
        SetValue(self: ScheduleFilter, value: float)
            Set the filter value to a double.
        
            value: The filter value.
        SetValue(self: ScheduleFilter, value: int)
            Set the filter value to an integer.
        
            value: The filter value.
        SetValue(self: ScheduleFilter, id: ElementId)
            Set the filter value to an ElementId.
        
            id: The filter value.
        SetValue(self: ScheduleFilter, string: str)
            Set the filter value to a string.
        
            string: The filter value.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, fieldId=None, filterType=None, value=None):
        """
        __new__(cls: type, fieldId: ScheduleFieldId, filterType: ScheduleFilterType, value: ElementId)
        __new__(cls: type, fieldId: ScheduleFieldId, filterType: ScheduleFilterType, value: str)
        __new__(cls: type, fieldId: ScheduleFieldId, filterType: ScheduleFilterType, value: float)
        __new__(cls: type, fieldId: ScheduleFieldId, filterType: ScheduleFilterType, value: int)
        __new__(cls: type, fieldId: ScheduleFieldId, filterType: ScheduleFilterType)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    FieldId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ID of the field used to filter the schedule.

Get: FieldId(self: ScheduleFilter) -> ScheduleFieldId

Set: FieldId(self: ScheduleFilter) = value
"""

    FilterType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The filter type.

Get: FilterType(self: ScheduleFilter) -> ScheduleFilterType

Set: FilterType(self: ScheduleFilter) = value
"""

    IsDoubleValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the filter has a double value.

Get: IsDoubleValue(self: ScheduleFilter) -> bool

"""

    IsElementIdValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the filter has an ElementId value.

Get: IsElementIdValue(self: ScheduleFilter) -> bool

"""

    IsIntegerValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the filter has an integer value.

Get: IsIntegerValue(self: ScheduleFilter) -> bool

"""

    IsNullValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the filter has no specified value.

Get: IsNullValue(self: ScheduleFilter) -> bool

"""

    IsStringValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the filter has a string value.

Get: IsStringValue(self: ScheduleFilter) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ScheduleFilter) -> bool

"""



class ScheduleFilterType(Enum, IComparable, IFormattable, IConvertible):
    """
    Type of schedule filter.
    
    enum ScheduleFilterType, values: BeginsWith (10), Contains (8), EndsWith (12), Equal (2), GreaterThan (4), GreaterThanOrEqual (5), HasParameter (1), Invalid (0), IsAssociatedWithGlobalParameter (14), IsNotAssociatedWithGlobalParameter (15), LessThan (6), LessThanOrEqual (7), NotBeginsWith (11), NotContains (9), NotEndsWith (13), NotEqual (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BeginsWith = None
    Contains = None
    EndsWith = None
    Equal = None
    GreaterThan = None
    GreaterThanOrEqual = None
    HasParameter = None
    Invalid = None
    IsAssociatedWithGlobalParameter = None
    IsNotAssociatedWithGlobalParameter = None
    LessThan = None
    LessThanOrEqual = None
    NotBeginsWith = None
    NotContains = None
    NotEndsWith = None
    NotEqual = None
    value__ = None


class ScheduleHeadingOrientation(Enum, IComparable, IFormattable, IConvertible):
    """
    Orientation of schedule heading.
    
    enum ScheduleHeadingOrientation, values: Horizontal (0), Vertical (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Horizontal = None
    value__ = None
    Vertical = None


class ScheduleHorizontalAlignment(Enum, IComparable, IFormattable, IConvertible):
    """
    Horizontal alignment of data in a schedule.
    
    enum ScheduleHorizontalAlignment, values: Center (1), Left (0), Right (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Center = None
    Left = None
    Right = None
    value__ = None


class ScheduleSheetInstance(Element, IDisposable):
    """ An element that represents a particular placement of a schedule on a sheet. """
    @staticmethod
    def Create(document, viewSheetId, scheduleId, origin):
        """
        Create(document: Document, viewSheetId: ElementId, scheduleId: ElementId, origin: XYZ) -> ScheduleSheetInstance
        
            Create an instance of a schedule on a sheet.
        
            document: The document
            viewSheetId: The id of the sheet where the schedule will be placed.
            scheduleId: The id of the schedule view.
            origin: Location on the sheet where the schedule will be placed.
            Returns: The new ScheduleInstance.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsTitleblockRevisionSchedule = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if this ScheduleSheetInstance is a revision schedule in a titleblock family.

Get: IsTitleblockRevisionSchedule(self: ScheduleSheetInstance) -> bool

"""

    Point = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Location on the sheet where the ScheduleInstance is placed (in sheet coordinates).

Get: Point(self: ScheduleSheetInstance) -> XYZ

Set: Point(self: ScheduleSheetInstance) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Rotation of the ScheduleInstance.

Get: Rotation(self: ScheduleSheetInstance) -> ViewportRotation

Set: Rotation(self: ScheduleSheetInstance) = value
"""

    ScheduleId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the "master" schedule that generates this ScheduleInstance.

Get: ScheduleId(self: ScheduleSheetInstance) -> ElementId

"""



class ScheduleSortGroupField(object, IDisposable):
    """
    A field that is used for sorting and/or grouping in a schedule.
    
    ScheduleSortGroupField(fieldId: ScheduleFieldId, sortOrder: ScheduleSortOrder)
    ScheduleSortGroupField(fieldId: ScheduleFieldId)
    ScheduleSortGroupField()
    """
    def Dispose(self):
        """ Dispose(self: ScheduleSortGroupField) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ScheduleSortGroupField, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, fieldId=None, sortOrder=None):
        """
        __new__(cls: type, fieldId: ScheduleFieldId, sortOrder: ScheduleSortOrder)
        __new__(cls: type, fieldId: ScheduleFieldId)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    FieldId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ID of the field that the schedule will be sorted or grouped by.

Get: FieldId(self: ScheduleSortGroupField) -> ScheduleFieldId

Set: FieldId(self: ScheduleSortGroupField) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ScheduleSortGroupField) -> bool

"""

    ShowBlankLine = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if an empty row should be displayed between groups.

Get: ShowBlankLine(self: ScheduleSortGroupField) -> bool

Set: ShowBlankLine(self: ScheduleSortGroupField) = value
"""

    ShowFooter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if a footer row should be displayed after each group.

Get: ShowFooter(self: ScheduleSortGroupField) -> bool

Set: ShowFooter(self: ScheduleSortGroupField) = value
"""

    ShowFooterCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the footer row should display a count of elements in the group.

Get: ShowFooterCount(self: ScheduleSortGroupField) -> bool

Set: ShowFooterCount(self: ScheduleSortGroupField) = value
"""

    ShowFooterTitle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the footer row should display a title.

Get: ShowFooterTitle(self: ScheduleSortGroupField) -> bool

Set: ShowFooterTitle(self: ScheduleSortGroupField) = value
"""

    ShowHeader = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if a header row should be displayed before each group.

Get: ShowHeader(self: ScheduleSortGroupField) -> bool

Set: ShowHeader(self: ScheduleSortGroupField) = value
"""

    SortOrder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if elements in the schedule will be sorted in
   ascending or descending order.

Get: SortOrder(self: ScheduleSortGroupField) -> ScheduleSortOrder

Set: SortOrder(self: ScheduleSortGroupField) = value
"""



class ScheduleSortOrder(Enum, IComparable, IFormattable, IConvertible):
    """
    Options for sort order of rows in a schedule.
    
    enum ScheduleSortOrder, values: Ascending (0), Descending (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Ascending = None
    Descending = None
    value__ = None


class SectionType(Enum, IComparable, IFormattable, IConvertible):
    """
    Declares the section data type.
    
    enum SectionType, values: Body (1), Footer (3), Header (0), None (-1), Summary (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Body = None
    Footer = None
    Header = None
    None = None
    Summary = None
    value__ = None


class Segment(Element, IDisposable):
    """ This element represents a segment of an MEP curve object. """
    def AddSize(self, size):
        """
        AddSize(self: Segment, size: MEPSize)
            Adds a new MEPSize to the segment.
        
            size: The new MEPSize to be added.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetSizes(self):
        """
        GetSizes(self: Segment) -> ICollection[MEPSize]
        
            Gets the defined sizes of the segment.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveSize(self, nominalDiameter):
        """
        RemoveSize(self: Segment, nominalDiameter: float)
            Remove the existing MEPSize with this nominal diameter from the segment.
        
            nominalDiameter: The nominal diameter of the size.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Description = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The description of the segment.

Get: Description(self: Segment) -> str

Set: Description(self: Segment) = value
"""

    MaterialId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ElementId of the MaterialElem.

Get: MaterialId(self: Segment) -> ElementId

"""

    Roughness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The roughness value for given material.

Get: Roughness(self: Segment) -> float

Set: Roughness(self: Segment) = value
"""

    SizeCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of size objects in the segment.

Get: SizeCount(self: Segment) -> int

"""



class SelectionFilterAction(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type containing the type of actions that may be taken with a selection filter applied to a point cloud.
    
    enum SelectionFilterAction, values: Highlight (1), Isolate (2), None (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Highlight = None
    Isolate = None
    None = None
    value__ = None


class SelectionFilterElement(FilterElement, IDisposable):
    """
    A filter element that stores an explicit list of ElementIds.
       Only elements whose ElementIds are in this list will pass the filter.
    """
    def AddSet(self, ids):
        """ AddSet(self: SelectionFilterElement, ids: ICollection[ElementId]) """
        pass

    def AddSingle(self, id):
        """
        AddSingle(self: SelectionFilterElement, id: ElementId)
            Adds a single ElementId to the filter's set.
        
            id: The ElementId to add.
        """
        pass

    def Clear(self):
        """
        Clear(self: SelectionFilterElement)
            Removes all ElementIds from the filter.
        """
        pass

    def Contains(self, id):
        """
        Contains(self: SelectionFilterElement, id: ElementId) -> bool
        
            Returns true if the given ElementId is a member of this filter's set.
        
            id: The ElementId to look for.
            Returns: True if the given ElementId is a member of the filter, otherwise false.
        """
        pass

    @staticmethod
    def Create(document, name):
        """
        Create(document: Document, name: str) -> SelectionFilterElement
        
            Creates a new SelectionFilterElement in the given document.
        
            document: The document in which to create the SelectionFilterElement.
            name: The name for the new SelectionFilterElement.
            Returns: The new SelectionFilterElement.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetElementIds(self):
        """
        GetElementIds(self: SelectionFilterElement) -> ICollection[ElementId]
        
            Returns the set of ElementIds contained by this filter.
            Returns: The set of ElementIds.
        """
        pass

    def IsEmpty(self):
        """
        IsEmpty(self: SelectionFilterElement) -> bool
        
            Determines whether this filter's set is empty or not.
            Returns: True if the set is empty, otherwise false.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveSet(self, ids):
        """ RemoveSet(self: SelectionFilterElement, ids: ICollection[ElementId]) -> int """
        pass

    def RemoveSingle(self, id):
        """
        RemoveSingle(self: SelectionFilterElement, id: ElementId)
            Removes a single ElementId from the filter's set.
        
            id: The ElementId to remove.
        """
        pass

    def SetElementIds(self, ids):
        """ SetElementIds(self: SelectionFilterElement, ids: ICollection[ElementId]) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ServerPath(ModelPath, IDisposable):
    """
    This class represents a path to a Revit Server location, rather than a
       location on disk or a network drive.
    
    ServerPath(centralServerLocation: str, path: str)
    """
    def Dispose(self):
        """ Dispose(self: ModelPath, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ModelPath, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, centralServerLocation, path):
        """ __new__(cls: type, centralServerLocation: str, path: str) """
        pass


class ServiceType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all of the built-in parameter groups supported by Autodesk
    Revit.
    
    enum ServiceType, values: kActiveChilledBeams (22), kCentralHeatingConvectors (1), kCentralHeatingHotAir (3), kCentralHeatingRadiantFloor (2), kCentralHeatingRadiators (0), kConstantVolumeDualDuct (20), kConstantVolumeFixedOA (16), kConstantVolumeTerminalReheat (18), kConstantVolumeVariableOA (17), kFanCoilSystem (14), kForcedConvectionHeaterFlue (8), kForcedConvectionHeaterNoFlue (9), kInductionSystem (15), kMultizoneHotDeckColdDeck (19), kNoServiceType (-1), kOtherRoomHeater (4), kRadiantCooledCeilings (21), kRadiantHeaterFlue (5), kRadiantHeaterMultiburner (7), kRadiantHeaterNoFlue (6), kSplitSystemsWithMechanicalVentilation (26), kSplitSystemsWithMechanicalVentilationWithCooling (27), kSplitSystemsWithNaturalVentilation (25), kVariableRefrigerantFlow (24), kVAVDualDuct (11), kVAVIndoorPackagedCabinet (12), kVAVSingleDuct (10), kVAVTerminalReheat (13), kWaterLoopHeatPump (23)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    kActiveChilledBeams = None
    kCentralHeatingConvectors = None
    kCentralHeatingHotAir = None
    kCentralHeatingRadiantFloor = None
    kCentralHeatingRadiators = None
    kConstantVolumeDualDuct = None
    kConstantVolumeFixedOA = None
    kConstantVolumeTerminalReheat = None
    kConstantVolumeVariableOA = None
    kFanCoilSystem = None
    kForcedConvectionHeaterFlue = None
    kForcedConvectionHeaterNoFlue = None
    kInductionSystem = None
    kMultizoneHotDeckColdDeck = None
    kNoServiceType = None
    kOtherRoomHeater = None
    kRadiantCooledCeilings = None
    kRadiantHeaterFlue = None
    kRadiantHeaterMultiburner = None
    kRadiantHeaterNoFlue = None
    kSplitSystemsWithMechanicalVentilation = None
    kSplitSystemsWithMechanicalVentilationWithCooling = None
    kSplitSystemsWithNaturalVentilation = None
    kVariableRefrigerantFlow = None
    kVAVDualDuct = None
    kVAVIndoorPackagedCabinet = None
    kVAVSingleDuct = None
    kVAVTerminalReheat = None
    kWaterLoopHeatPump = None
    value__ = None


class SetComparisonResult(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all the relationship types between two sets of arbitrary nature.
    
    enum SetComparisonResult, values: BothEmpty (3), Disjoint (4), Equal (64), LeftEmpty (1), Overlap (8), RightEmpty (2), Subset (16), Superset (32)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    BothEmpty = None
    Disjoint = None
    Equal = None
    LeftEmpty = None
    Overlap = None
    RightEmpty = None
    Subset = None
    Superset = None
    value__ = None


class Settings(APIObject, IDisposable):
    """
    The settings object provides access to general components of the Autodesk Revit
    application, such as Categories.
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Categories = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves an object that provides access to all the categories contained in the Autodesk
Revit application and project.

Get: Categories(self: Settings) -> Categories

"""

    ElectricalSetting = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves an object that provides access to all the electrical settings include voltage type, distribution system type,
demand factor, wire type in the Autodesk Revit application and project.

Get: ElectricalSetting(self: Settings) -> ElectricalSetting

"""

    TilePatterns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves an object that provides access to the TilePattern objects in
the document.

Get: TilePatterns(self: Settings) -> TilePatterns

"""



class ShapeImporter(object, IDisposable):
    """
    An utility class that supports conversion of geometry stored in an external format into a Revit geometry objects.
    
    ShapeImporter()
    """
    def Convert(self, document, filename):
        """
        Convert(self: ShapeImporter, document: Document, filename: str) -> IList[GeometryObject]
        
            Converts the geometry stored in the external format into a collection of Revit 
             geometry objects.
        
        
            document: The Revit document where the resulting Revit geometry objects will be used. 
             This document may need to be modified
           to store dependent elements such as 
             graphics styles and/or materials.
        
            filename: The full path to the input file.
            Returns: A collection of Revit geometry objects created from the incoming data.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ShapeImporter) """
        pass

    @staticmethod
    def IsServiceAvailable():
        """
        IsServiceAvailable() -> bool
        
            Checks whether the data conversion service is available.
            Returns: True if the data conversion service is available, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ShapeImporter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    InputFormat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The format of the incoming data.

Get: InputFormat(self: ShapeImporter) -> ShapeImporterSourceFormat

Set: InputFormat(self: ShapeImporter) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ShapeImporter) -> bool

"""



class ShapeImporterSourceFormat(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing the possible formats supported by the Shapeimporter.
    
    enum ShapeImporterSourceFormat, values: Auto (0), Rhino (2), SAT (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Auto = None
    Rhino = None
    SAT = None
    value__ = None


class SharedParameterApplicableRule(FilterRule, IDisposable):
    """
    Tests whether an element supports a shared parameter.
    
    SharedParameterApplicableRule(parameterName: str)
    """
    def Dispose(self):
        """ Dispose(self: FilterRule, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: FilterRule, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, parameterName):
        """ __new__(cls: type, parameterName: str) """
        pass

    ParameterName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the parameter that an element must support to pass this rule.

Get: ParameterName(self: SharedParameterApplicableRule) -> str

Set: ParameterName(self: SharedParameterApplicableRule) = value
"""



class SharedParameterElement(ParameterElement, IDisposable):
    """ An element that stores the definition of a shared parameter which is loaded into the document. """
    @staticmethod
    def Create(document, sharedParameterDefinition):
        """
        Create(document: Document, sharedParameterDefinition: ExternalDefinition) -> SharedParameterElement
        
            Creates a new shared parameter element in the document representing the 
             parameter stored in the input ExternalDefinition.
        
        
            document: The document.
            sharedParameterDefinition: Shared parameter definition.
            Returns: The newly created shared parameter instance.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def Lookup(document, guidValue):
        """
        Lookup(document: Document, guidValue: Guid) -> SharedParameterElement
        
            Finds the shared parameter element that corresponds to the given Guid.
        
            document: The document.
            guidValue: Shared parameter Guid.
            Returns: The retrieved shared parameter instance, or ll if the matching element is not 
             found.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    GuidValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Guid that identifies this shared parameter.

Get: GuidValue(self: SharedParameterElement) -> Guid

"""



class ShellLayerType(Enum, IComparable, IFormattable, IConvertible):
    """
    Used to distinguish exterior and interior shell layers.
    
    enum ShellLayerType, values: Exterior (1), Interior (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Exterior = None
    Interior = None
    value__ = None


class ShowHiddenLinesValues(Enum, IComparable, IFormattable, IConvertible):
    """
    Provides options for display of hidden lines in a given view.
    
    enum ShowHiddenLinesValues, values: All (2), ByDiscipline (1), None (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    All = None
    ByDiscipline = None
    None = None
    value__ = None


class SimpleWorksetConfiguration(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the set of user-created worksets to open in memory
    
    enum SimpleWorksetConfiguration, values: AllEditable (1), AllWorksets (0), AskUserToSpecify (3), LastViewed (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AllEditable = None
    AllWorksets = None
    AskUserToSpecify = None
    LastViewed = None
    value__ = None


class SiteLocation(ElementType, IDisposable):
    """ Contains the geographical location information for the project's site. """
    def ConvertFromProjectTime(self, projectTime):
        """
        ConvertFromProjectTime(self: SiteLocation, projectTime: DateTime) -> DateTime
        
            Converts project time to UTC time.
        
            projectTime: The project time.
        """
        pass

    def ConvertToProjectTime(self, inputTime):
        """
        ConvertToProjectTime(self: SiteLocation, inputTime: DateTime) -> DateTime
        
            Converts local time or UTC time to project time.
        
            inputTime: The input local time or UTC time.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Elevation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Elevation of the site location.

Get: Elevation(self: SiteLocation) -> float

"""

    Latitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The latitude of the site location.

Get: Latitude(self: SiteLocation) -> float

Set: Latitude(self: SiteLocation) = value
"""

    Longitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The longitude of the site location.

Get: Longitude(self: SiteLocation) -> float

Set: Longitude(self: SiteLocation) = value
"""

    PlaceName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The place name of the site.

Get: PlaceName(self: SiteLocation) -> str

Set: PlaceName(self: SiteLocation) = value
"""

    TimeZone = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Time-zone that contains the site

Get: TimeZone(self: SiteLocation) -> float

Set: TimeZone(self: SiteLocation) = value
"""

    WeatherStationName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the weather station at the site location.

Get: WeatherStationName(self: SiteLocation) -> str

"""



class Sketch(SketchBase, IDisposable):
    """ Provides access to the Sketch in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Profile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Profile of the Sketch.

Get: Profile(self: Sketch) -> CurveArrArray

"""

    SketchPlane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the Sketch Plane of the Sketch.

Get: SketchPlane(self: Sketch) -> SketchPlane

"""



class SketchedStairsCurveData(object, IDisposable):
    """
    Sketched run/landing curves overrides with height and slope
    
    SketchedStairsCurveData(boundaryCurve: Curve, height: float, slopeType: SketchedCurveSlopeOption)
    """
    def Dispose(self):
        """ Dispose(self: SketchedStairsCurveData) """
        pass

    def GetCurve(self):
        """
        GetCurve(self: SketchedStairsCurveData) -> Curve
        
            Get a copy of the curve that is formed along this boundary.
            Returns: A copy of the curve.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SketchedStairsCurveData, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, boundaryCurve, height, slopeType):
        """ __new__(cls: type, boundaryCurve: Curve, height: float, slopeType: SketchedCurveSlopeOption) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SketchedStairsCurveData) -> bool

"""



class SketchPlane(Element, IDisposable):
    """ Represents a sketch plane or work plane. """
    @staticmethod
    def Create(document, *__args):
        """
        Create(document: Document, plane: Plane) -> SketchPlane
        
            Creates a new sketch plane from a geometric plane.
        
            document: The document.
            plane: The geometry plane where the sketch plane will be created.
            Returns: The newly created sketch plane.
        Create(document: Document, planarFaceReference: Reference) -> SketchPlane
        
            Creates a new sketch plane from a reference to a planar face.
        
            document: The document.
            planarFaceReference: The reference of the planar face where the sketch plane will be created.
            Returns: The newly created sketch plane.
        Create(document: Document, datumId: ElementId) -> SketchPlane
        
            Creates a sketch plane from a grid, reference plane, or level.
        
            document: The document.
            datumId: The id of the grid, reference plane, or level.
            Returns: The newly created sketch plane.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetPlane(self):
        """
        GetPlane(self: SketchPlane) -> Plane
        
            Returns the corresponding Plane.
            Returns: The plane upon which elements created with this sketch plane will lie.
        """
        pass

    def GetPlaneReference(self):
        """
        GetPlaneReference(self: SketchPlane) -> Reference
        
            Returns a reference to this element as a plane.
            Returns: The reference.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsSuitableForModelElements = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the sketch plane can be assigned to model elements.

Get: IsSuitableForModelElements(self: SketchPlane) -> bool

"""



class SKPImportOptions(BaseImportOptions, IDisposable):
    """
    The import options used to import SKP format files.
    
    SKPImportOptions(option: SKPImportOptions)
    SKPImportOptions()
    """
    def Dispose(self):
        """ Dispose(self: BaseImportOptions, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BaseImportOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, option=None):
        """
        __new__(cls: type, option: SKPImportOptions)
        __new__(cls: type)
        """
        pass


class SkyBackgroundSettings(BackgroundSettings, IDisposable):
    """ Represents the rendering sky background settings. """
    def Dispose(self):
        """ Dispose(self: BackgroundSettings, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: BackgroundSettings, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class SlabEdge(HostedSweep, IDisposable):
    """ An object that represents a slab edge within the Autodesk Revit project. """
    def AddSegment(self, targetRef):
        """
        AddSegment(self: SlabEdge, targetRef: Reference)
            Add segments to the slab edge.
        
            targetRef: Segment's reference on which want to be added.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    SlabEdgeType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves/set an object that represents the type of the SlabEdge.

Get: SlabEdgeType(self: SlabEdge) -> SlabEdgeType

Set: SlabEdgeType(self: SlabEdge) = value
"""



class SlabEdgeType(HostedSweepType, IDisposable):
    """
    An object that represents the slab edge type
    in Autodesk Revit.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class SlabShapeCrease(object):
    """ A crease used in Slab Shape Editing. """
    CreaseType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of the crease.

Get: CreaseType(self: SlabShapeCrease) -> SlabShapeCreaseType

"""

    Curve = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The geometry of the crease.

Get: Curve(self: SlabShapeCrease) -> Curve

"""

    EndPoints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The vertices of the crease.

Get: EndPoints(self: SlabShapeCrease) -> SlabShapeVertexArray

"""



class SlabShapeCreaseArray(APIObject, IDisposable, IEnumerable):
    """
    An array that can contain any number of creases used in Slab Shape Editing.
    
    SlabShapeCreaseArray()
    """
    def Append(self, item):
        """
        Append(self: SlabShapeCreaseArray, item: SlabShapeCrease)
            Add the item to the end of the array.
        
            item: The item to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: SlabShapeCreaseArray)
            Removes every item from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: SlabShapeCreaseArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: SlabShapeCreaseArray) -> SlabShapeCreaseArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: SlabShapeCreaseArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: SlabShapeCreaseArray, item: SlabShapeCrease, index: int)
            Insert the specified item into the array.
        
            item: The item to be inserted into the array.
            index: The item will be inserted before this index.
            Returns: Returns whether the item was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SlabShapeCreaseArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: SlabShapeCreaseArray) -> SlabShapeCreaseArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: SlabShapeCreaseArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the array.

Get: Size(self: SlabShapeCreaseArray) -> int

"""



class SlabShapeCreaseArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to an array of creases used for Slab Shape Editing.
    
    SlabShapeCreaseArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: SlabShapeCreaseArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: SlabShapeCreaseArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SlabShapeCreaseArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: SlabShapeCreaseArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: SlabShapeCreaseArrayIterator) -> object

"""



class SlabShapeCreaseType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all Crease types of Slab Shape Edit.
    
    enum SlabShapeCreaseType, values: Auto (3), Boundary (1), Invalid (0), UserDrawn (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Auto = None
    Boundary = None
    Invalid = None
    UserDrawn = None
    value__ = None


class SlabShapeEditor(object):
    """ An object used for Slab Shape Editing. """
    def DrawPoint(self, location):
        """
        DrawPoint(self: SlabShapeEditor, location: XYZ) -> SlabShapeVertex
        
            Adds a point to the corresponding slab, roof or floor.
        
            location: The location of the point.
            Returns: The newly created vertex.
        """
        pass

    def DrawSplitLine(self, startVertex, endVertex):
        """
        DrawSplitLine(self: SlabShapeEditor, startVertex: SlabShapeVertex, endVertex: SlabShapeVertex) -> SlabShapeCreaseArray
        
            Draws a split line on the corresponding slab, roof or floor.
        
            startVertex: The vertex to start the split line.
            endVertex: The vertex to end the split line.
            Returns: The newly created creases.
        """
        pass

    def Enable(self):
        """
        Enable(self: SlabShapeEditor)
            Enables the slab shape editing functionality.
        """
        pass

    def ModifySubElement(self, *__args):
        """
        ModifySubElement(self: SlabShapeEditor, vertex: SlabShapeVertex, offset: float)
            Manipulates the vertex on the corresponding slab, roof or floor.
        
            vertex: The vertex.
            offset: The new value of the vertex offset.
        ModifySubElement(self: SlabShapeEditor, crease: SlabShapeCrease, offset: float)
            Manipulates the crease on the corresponding slab, roof or floor.
        
            crease: The crease.
            offset: The new value of the crease offset, which is the average of offsets of its ends.
        """
        pass

    def PickSupport(self, gLine):
        """
        PickSupport(self: SlabShapeEditor, gLine: Line)
            Picks an element to support the slab.  This method will define split lines and 
             create constant bearing lines for the slab.
        
        
            gLine: A line from a support element such as a beam.
        """
        pass

    def ResetSlabShape(self):
        """
        ResetSlabShape(self: SlabShapeEditor)
            Removes the modifications made during editing and resets the element geometry 
             back to the unmodified state.
        """
        pass

    IsEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the slab shape editing functionality is enabled.

Get: IsEnabled(self: SlabShapeEditor) -> bool

"""

    SlabShapeCreases = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All of the creases that can be edited.

Get: SlabShapeCreases(self: SlabShapeEditor) -> SlabShapeCreaseArray

"""

    SlabShapeVertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All of the vertices that can be edited.

Get: SlabShapeVertices(self: SlabShapeEditor) -> SlabShapeVertexArray

"""



class SlabShapeVertex(object):
    """ A vertex used in Slab Shape Editing. """
    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position of the vertex.

Get: Position(self: SlabShapeVertex) -> XYZ

"""

    VertexType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of the vertex.

Get: VertexType(self: SlabShapeVertex) -> SlabShapeVertexType

"""



class SlabShapeVertexArray(APIObject, IDisposable, IEnumerable):
    """
    An array that can contain any number of vertices used in Slab Shape Editing.
    
    SlabShapeVertexArray()
    """
    def Append(self, item):
        """
        Append(self: SlabShapeVertexArray, item: SlabShapeVertex)
            Add the item to the end of the array.
        
            item: The item to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: SlabShapeVertexArray)
            Removes every item from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: SlabShapeVertexArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: SlabShapeVertexArray) -> SlabShapeVertexArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: SlabShapeVertexArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: SlabShapeVertexArray, item: SlabShapeVertex, index: int)
            Insert the specified item into the array.
        
            item: The item to be inserted into the array.
            index: The item will be inserted before this index.
            Returns: Returns whether the item was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SlabShapeVertexArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: SlabShapeVertexArray) -> SlabShapeVertexArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: SlabShapeVertexArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of objects that are in the array.

Get: Size(self: SlabShapeVertexArray) -> int

"""



class SlabShapeVertexArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to an array of vertices used for Slab Shape Editing.
    
    SlabShapeVertexArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: SlabShapeVertexArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: SlabShapeVertexArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SlabShapeVertexArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: SlabShapeVertexArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: SlabShapeVertexArrayIterator) -> object

"""



class SlabShapeVertexType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all Vertex types of Slab Shape Edit.
    
    enum SlabShapeVertexType, values: Corner (1), Edge (2), Interior (3), Invalid (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Corner = None
    Edge = None
    Interior = None
    Invalid = None
    value__ = None


class SlantedOrVerticalColumnType(Enum, IComparable, IFormattable, IConvertible):
    """
    This enum class is used for the BuiltInParameter SLANTED_COLUMN_TYPE_PARAM.
    
    enum SlantedOrVerticalColumnType, values: CT_Angle (1), CT_EndPoint (2), CT_Vertical (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CT_Angle = None
    CT_EndPoint = None
    CT_Vertical = None
    value__ = None


class Solid(GeometryObject, IDisposable):
    """ A 3d solid. """
    def ComputeCentroid(self):
        """
        ComputeCentroid(self: Solid) -> XYZ
        
            Returns the Centroid of this solid.
            Returns: The XYZ point of the Centroid of this solid.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def GetBoundingBox(self):
        """
        GetBoundingBox(self: Solid) -> BoundingBoxXYZ
        
            Retrieves a box that circumscribes the solid geometry.
        """
        pass

    def IntersectWithCurve(self, curve, options):
        """
        IntersectWithCurve(self: Solid, curve: Curve, options: SolidCurveIntersectionOptions) -> SolidCurveIntersection
        
            Calculates and returns the intersection between a curve and this solid.
        
            curve: The curve.
            options: The options.  If NULL, the default options will be used.
            Returns: The intersection results.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: GeometryObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Edges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The edges that belong to the solid.

Get: Edges(self: Solid) -> EdgeArray

"""

    Faces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The faces that belong to the solid.

Get: Faces(self: Solid) -> FaceArray

"""

    SurfaceArea = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the total surface area of this solid.

Get: SurfaceArea(self: Solid) -> float

"""

    Volume = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the signed volume of this solid.

Get: Volume(self: Solid) -> float

"""



class SolidCurveIntersection(object, IEnumerable[Curve], IEnumerable, IDisposable):
    """ This class represents the results of a calculation of intersection between a solid volume and a curve. """
    def Dispose(self):
        """ Dispose(self: SolidCurveIntersection) """
        pass

    def GetCurveSegment(self, index):
        """
        GetCurveSegment(self: SolidCurveIntersection, index: int) -> Curve
        
            Gets the curve segment generated by intersection.
        
            index: The index.
            Returns: The curve.
        """
        pass

    def GetCurveSegmentExtents(self, index):
        """
        GetCurveSegmentExtents(self: SolidCurveIntersection, index: int) -> CurveExtents
        
            Gets the extents for the given curve segment generated by intersection.
        
            index: The index.
            Returns: The curve extents.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: SolidCurveIntersection) -> IEnumerator[Curve]
        
            Returns an enumerator that iterates through a collection.
            Returns: An IEnumerator object that can be used to iterate through the collection.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SolidCurveIntersection, disposing: bool) """
        pass

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Curve](enumerable: IEnumerable[Curve], value: Curve) -> bool """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SolidCurveIntersection) -> bool

"""

    ResultType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The result type used to calculate the intersections.

Get: ResultType(self: SolidCurveIntersection) -> SolidCurveIntersectionMode

"""

    SegmentCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of segments in the results.

Get: SegmentCount(self: SolidCurveIntersection) -> int

"""



class SolidCurveIntersectionMode(Enum, IComparable, IFormattable, IConvertible):
    """
    Represents the types of results available for calculating the intersection between a solid and a curve.
    
    enum SolidCurveIntersectionMode, values: CurveSegmentsInside (0), CurveSegmentsOutside (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CurveSegmentsInside = None
    CurveSegmentsOutside = None
    value__ = None


class SolidCurveIntersectionOptions(object, IDisposable):
    """
    This class contains the options used to calculate the intersection between a solid and a curve.
    
    SolidCurveIntersectionOptions()
    """
    def Dispose(self):
        """ Dispose(self: SolidCurveIntersectionOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SolidCurveIntersectionOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SolidCurveIntersectionOptions) -> bool

"""

    ResultType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of results expected by the calculation.  The default is CurveSegmentsInside.

Get: ResultType(self: SolidCurveIntersectionOptions) -> SolidCurveIntersectionMode

Set: ResultType(self: SolidCurveIntersectionOptions) = value
"""



class SolidGeometry(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible ways of exporting solids in 3D views.
    
    enum SolidGeometry, values: ACIS (1), Polymesh (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ACIS = None
    Polymesh = None
    value__ = None


class SolidOptions(object, IDisposable):
    """
    A class containing optional information to control the properties of the Solid generated by the GeometryCreationUtilities routines.
    
    SolidOptions(materialId: ElementId, graphicsStyleId: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: SolidOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SolidOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, materialId, graphicsStyleId):
        """ __new__(cls: type, materialId: ElementId, graphicsStyleId: ElementId) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    GraphicsStyleId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines the graphics style id for the Solid.

Get: GraphicsStyleId(self: SolidOptions) -> ElementId

Set: GraphicsStyleId(self: SolidOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SolidOptions) -> bool

"""

    MaterialId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines the material id for the Solid.

Get: MaterialId(self: SolidOptions) -> ElementId

Set: MaterialId(self: SolidOptions) = value
"""



class SolidOrShellTessellationControls(object, IDisposable):
    """
    Controls various aspects of the triangulation produced by SolutUtils::tessellateSolidOrShell.
    
    SolidOrShellTessellationControls()
    """
    def DisableLevelOfDetail(self):
        """
        DisableLevelOfDetail(self: SolidOrShellTessellationControls)
            Disables the use of levelOfDetail. The use of levelOfDetail is enabled by 
             calling setLevelOfDetail (with a valid input).
        """
        pass

    def Dispose(self):
        """ Dispose(self: SolidOrShellTessellationControls) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SolidOrShellTessellationControls, disposing: bool) """
        pass

    def UseLevelOfDetail(self):
        """
        UseLevelOfDetail(self: SolidOrShellTessellationControls) -> bool
        
            Returns true if the use of levelOfDetail is enabled, false if not. The use of 
             levelOfDetail is enabled
           by calling setLevelOfDetail (with a valid input).
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Accuracy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A positive real number specifying how accurately a triangulation should approximate a solid or shell.

Get: Accuracy(self: SolidOrShellTessellationControls) -> float

Set: Accuracy(self: SolidOrShellTessellationControls) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SolidOrShellTessellationControls) -> bool

"""

    LevelOfDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An number between 0 and 1 (inclusive) specifying the level of detail for the triangulation of a solid or shell.

Get: LevelOfDetail(self: SolidOrShellTessellationControls) -> float

Set: LevelOfDetail(self: SolidOrShellTessellationControls) = value
"""

    MinAngleInTriangle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A non-negative real number specifying the minimum allowed angle for any triangle in the triangulation, in radians.

Get: MinAngleInTriangle(self: SolidOrShellTessellationControls) -> float

Set: MinAngleInTriangle(self: SolidOrShellTessellationControls) = value
"""

    MinExternalAngleBetweenTriangles = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A positive real number specifying the minimum allowed value for the external angle between two adjacent triangles, in radians.

Get: MinExternalAngleBetweenTriangles(self: SolidOrShellTessellationControls) -> float

Set: MinExternalAngleBetweenTriangles(self: SolidOrShellTessellationControls) = value
"""



class SolidSolidCutUtils(object):
    """ Exposes utilities which can cause one solid to cut another. """
    @staticmethod
    def AddCutBetweenSolids(document, solidToBeCut, cuttingSolid, splitFacesOfCuttingSolid=None):
        """
        AddCutBetweenSolids(document: Document, solidToBeCut: Element, cuttingSolid: Element)
            Adds a solid-solid cut for the two elements.
        
            document: The document containing the two elements.
            solidToBeCut: The solid to be cut.
            cuttingSolid: The cutting solid.
        AddCutBetweenSolids(document: Document, solidToBeCut: Element, cuttingSolid: Element, splitFacesOfCuttingSolid: bool)
            Adds a solid-solid cut for the two elements with the option to control 
             splitting of faces of the cutting solid.
        
        
            document: The document containing the two elements.
            solidToBeCut: The solid to be cut.
            cuttingSolid: The cutting solid.
            splitFacesOfCuttingSolid: True to split faces of cutting solid where it intersects the solid to be cut, 
             false otherwise.
        """
        pass

    @staticmethod
    def CanElementCutElement(cuttingElement, cutElement, reason):
        """
        CanElementCutElement(cuttingElement: Element, cutElement: Element) -> (bool, CutFailureReason)
        
            Verifies if the cutting element can add a solid cut to the target element.
        
            cuttingElement: The cutting element.
            cutElement: The element to be cut.
            Returns: True if the cutting element can add a solid cut to the target element, false 
             otherwise.
        """
        pass

    @staticmethod
    def CutExistsBetweenElements(first, second, firstCutsSecond):
        """
        CutExistsBetweenElements(first: Element, second: Element) -> (bool, bool)
        
            Checks that if there is a solid-solid cut between two elements.
        
            first: The solid being cut or the cutting solid.
            second: The solid being cut or the cutting solid.
            Returns: True if there is a solid-solid cut between the input elements, false otherwise.
        """
        pass

    @staticmethod
    def GetCuttingSolids(element):
        """
        GetCuttingSolids(element: Element) -> ICollection[ElementId]
        
            Gets all the solids which cut the input element.
        
            element: The input element.
            Returns: The ids of the solids which cut the input element.
        """
        pass

    @staticmethod
    def GetSolidsBeingCut(element):
        """
        GetSolidsBeingCut(element: Element) -> ICollection[ElementId]
        
            Get all the solids which are cut by the input element.
        
            element: The input element.
            Returns: The ids of the solids which are cut by the input element.
        """
        pass

    @staticmethod
    def IsAllowedForSolidCut(element):
        """
        IsAllowedForSolidCut(element: Element) -> bool
        
            Validates that the element is eligible for a solid-solid cut.
        
            element: The solid to be cut or the cutting solid.
            Returns: True if the input element can participate in a solid-solid cut.  False 
             otherwise.
        """
        pass

    @staticmethod
    def IsElementFromAppropriateContext(element):
        """
        IsElementFromAppropriateContext(element: Element) -> bool
        
            Validates that the element is from an appropriate document.
        
            element: The solid to be cut or the cutting solid.
            Returns: True if the element is from an appropriate document for solid-solid cuts, false 
             otherwise.
        """
        pass

    @staticmethod
    def RemoveCutBetweenSolids(document, first, second):
        """
        RemoveCutBetweenSolids(document: Document, first: Element, second: Element)
            Removes the solid-solid cut between the two elements if it exists.
        
            document: The document containing the two elements
            first: The solid being cut or the cutting solid.
            second: The solid being cut or the cutting solid.
        """
        pass

    @staticmethod
    def SplitFacesOfCuttingSolid(first, second, split):
        """
        SplitFacesOfCuttingSolid(first: Element, second: Element, split: bool)
            Causes the faces of the cutting element where it intersects the element it is 
             cutting to be split or unsplit.
        
        
            first: The solid being cut or the cutting solid
            second: The solid being cut or the cutting solid
            split: True to split the faces of intersection, false to unsplit them.
        """
        pass

    __all__ = [
        'AddCutBetweenSolids',
        'CanElementCutElement',
        'CutExistsBetweenElements',
        'GetCuttingSolids',
        'GetSolidsBeingCut',
        'IsAllowedForSolidCut',
        'IsElementFromAppropriateContext',
        'RemoveCutBetweenSolids',
        'SplitFacesOfCuttingSolid',
    ]


class SolidUtils(object):
    """ Contains utility functions for solid operations. """
    @staticmethod
    def Clone(solid):
        """
        Clone(solid: Solid) -> Solid
        
            Creates a new Solid which is a copy of the input Solid.
        
            solid: The input solid to be copied.
            Returns: The newly created Solid.
        """
        pass

    @staticmethod
    def CreateTransformed(solid, transform):
        """
        CreateTransformed(solid: Solid, transform: Transform) -> Solid
        
            Creates a new Solid which is the transformation of the input Solid.
        
            solid: The input solid to be transformed.
            transform: The transform (which must be conformal).
            Returns: The newly created Solid.
        """
        pass

    @staticmethod
    def IsValidForTessellation(solidOrShell):
        """
        IsValidForTessellation(solidOrShell: Solid) -> bool
        
            Tests if the input solid or shell is valid for tessellation.
        
            solidOrShell: The solid or shell.
            Returns: True if the solid or shell is valid for tessellation, false otherwise.
        """
        pass

    @staticmethod
    def SplitVolumes(solid):
        """
        SplitVolumes(solid: Solid) -> IList[Solid]
        
            Splits a solid geometry into several separate solids.
        
            solid: The solid.
            Returns: The split solid geometries.
        """
        pass

    @staticmethod
    def TessellateSolidOrShell(solidOrShell, tessellationControls):
        """
        TessellateSolidOrShell(solidOrShell: Solid, tessellationControls: SolidOrShellTessellationControls) -> TriangulatedSolidOrShell
        
            This function facets (i.e., triangulates) a solid or an open shell. Each 
             boundary
           component of the solid or shell is represented by a single 
             triangulated structure.
        
        
            solidOrShell: The solid or shell to be faceted.
            tessellationControls: This input controls various aspects of the triangulation.
            Returns: The triangulated structures corresponding to the boundary components of the
           
             input solid or the components of the input shell.
        """
        pass

    __all__ = [
        'Clone',
        'CreateTransformed',
        'IsValidForTessellation',
        'SplitVolumes',
        'TessellateSolidOrShell',
    ]


class SortingOrder(Enum, IComparable, IFormattable, IConvertible):
    """
    Enumerated type representing the sorting order of a collection of objects.
    
    enum SortingOrder, values: Ascending (1), Descending (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Ascending = None
    Descending = None
    value__ = None


class SpacingRule(APIObject, IDisposable):
    """
    A rule for specifying a set of equidistant,
    parallel gridlines within a region.
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SpacingRule) """
        pass

    def SetLayoutFixedDistance(self, distance, just, gridlinesRotation, offset):
        """
        SetLayoutFixedDistance(self: SpacingRule, distance: float, just: SpacingRuleJustification, gridlinesRotation: float, offset: float)
            Set the Layout property to FixedDistance.
        """
        pass

    def SetLayoutFixedNumber(self, number, just, gridlinesRotation, offset):
        """
        SetLayoutFixedNumber(self: SpacingRule, number: int, just: SpacingRuleJustification, gridlinesRotation: float, offset: float)
            Set the Layout property to FixedNumber.
        """
        pass

    def SetLayoutMaximumSpacing(self, distance, just, gridlinesRotation, offset):
        """
        SetLayoutMaximumSpacing(self: SpacingRule, distance: float, just: SpacingRuleJustification, gridlinesRotation: float, offset: float)
            Set the Layout property to MaximumSpacing.
        """
        pass

    def SetLayoutMinimumSpacing(self, distance, just, gridlinesRotation, offset):
        """
        SetLayoutMinimumSpacing(self: SpacingRule, distance: float, just: SpacingRuleJustification, gridlinesRotation: float, offset: float)
            Set the Layout property to MinimumSpacing.
        """
        pass

    def SetLayoutNone(self):
        """
        SetLayoutNone(self: SpacingRule)
            Set the Layout property to None.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BeltMeasurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """On a curved surface, BeltMeasurement specifies where the
grid's distances are measured.

Get: BeltMeasurement(self: SpacingRule) -> float

Set: BeltMeasurement(self: SpacingRule) = value
"""

    Distance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The exact distance between layout
lines.

Get: Distance(self: SpacingRule) -> float

Set: Distance(self: SpacingRule) = value
"""

    GridlinesRotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An additional rotation to be applied
to this set of grid lines.

Get: GridlinesRotation(self: SpacingRule) -> float

Set: GridlinesRotation(self: SpacingRule) = value
"""

    HasBeltMeasurement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the gridlines are not parallel due to surface
curvature, and the BeltMeasurement property therefore
applies.

Get: HasBeltMeasurement(self: SpacingRule) -> bool

"""

    Justification = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The justification of the lines within
the region.

Get: Justification(self: SpacingRule) -> SpacingRuleJustification

Set: Justification(self: SpacingRule) = value
"""

    Layout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A choice of several gridline layout rules.

Get: Layout(self: SpacingRule) -> SpacingRuleLayout

"""

    Number = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The exact number of lines in the
region.

Get: Number(self: SpacingRule) -> int

Set: Number(self: SpacingRule) = value
"""

    Offset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """An additional offset applied to the first
gridline.

Get: Offset(self: SpacingRule) -> float

Set: Offset(self: SpacingRule) = value
"""



class SpacingRuleJustification(Enum, IComparable, IFormattable, IConvertible):
    """
    Justification property of spacing rule
    
    enum SpacingRuleJustification, values: Beginning (4), Center (2), End (5)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Beginning = None
    Center = None
    End = None
    value__ = None


class SpacingRuleLayout(Enum, IComparable, IFormattable, IConvertible):
    """
    Rules for laying out a series of equidistant points or parallel lines
    
    enum SpacingRuleLayout, values: FixedDistance (1), FixedNumber (2), MaximumSpacing (3), MinimumSpacing (5), None (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FixedDistance = None
    FixedNumber = None
    MaximumSpacing = None
    MinimumSpacing = None
    None = None
    value__ = None


class SpatialElementBoundaryLocation(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing boundary options of spatial element geometry calculation.
    
    enum SpatialElementBoundaryLocation, values: Center (1), CoreBoundary (2), CoreCenter (3), Finish (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Center = None
    CoreBoundary = None
    CoreCenter = None
    Finish = None
    value__ = None


class SpatialElementBoundaryOptions(object, IDisposable):
    """
    Options that can be passed to a SpatialElementBoundaryCalculator to influence the results of the calculation.
    
    SpatialElementBoundaryOptions()
    """
    def Dispose(self):
        """ Dispose(self: SpatialElementBoundaryOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SpatialElementBoundaryOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SpatialElementBoundaryOptions) -> bool

"""

    SpatialElementBoundaryLocation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The boundary of spatial element for geometry calculation.

Get: SpatialElementBoundaryLocation(self: SpatialElementBoundaryOptions) -> SpatialElementBoundaryLocation

Set: SpatialElementBoundaryLocation(self: SpatialElementBoundaryOptions) = value
"""

    StoreFreeBoundaryFaces = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether to include the free boundary faces in the result.

Get: StoreFreeBoundaryFaces(self: SpatialElementBoundaryOptions) -> bool

Set: StoreFreeBoundaryFaces(self: SpatialElementBoundaryOptions) = value
"""



class SpatialElementBoundarySubface(object, IDisposable):
    """ SpatialElementBoundarySubface represents the geometry boundary information of spatial element. """
    def Dispose(self):
        """ Dispose(self: SpatialElementBoundarySubface) """
        pass

    def GetBoundingElementFace(self):
        """
        GetBoundingElementFace(self: SpatialElementBoundarySubface) -> Face
        
            Returns the face of the bounding element.
            Returns: The face of the bounding element.
        """
        pass

    def GetSpatialElementFace(self):
        """
        GetSpatialElementFace(self: SpatialElementBoundarySubface) -> Face
        
            Returns the face of the spatial element's 3D geometry.
            Returns: The face of the spatial element's 3D geometry.
        """
        pass

    def GetSubface(self):
        """
        GetSubface(self: SpatialElementBoundarySubface) -> Face
        
            Returns a face that represents the portion of the room face bounded by the 
             boundary element.
        
            Returns: The sub-face.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SpatialElementBoundarySubface, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SpatialElementBoundarySubface) -> bool

"""

    SpatialBoundaryElement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Element that gave rise to this room face.

Get: SpatialBoundaryElement(self: SpatialElementBoundarySubface) -> LinkElementId

"""

    SubfaceArisesFromElementFace = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the subface is coincident with a portion of a (possibly offset) face of the element.

Get: SubfaceArisesFromElementFace(self: SpatialElementBoundarySubface) -> bool

"""

    SubfaceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Type of the subface.

Get: SubfaceType(self: SpatialElementBoundarySubface) -> SubfaceType

"""

    Valid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the subface instance is valid and can be used.

Get: Valid(self: SpatialElementBoundarySubface) -> bool

"""



class SpatialElementCalculationLocation(Element, IDisposable):
    """
    The Spatial Element Calculation Location is used to specify the room/space where an
       element should be considered as placed.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    MarkerPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position of the spatial element calculation location marker.

Get: MarkerPosition(self: SpatialElementCalculationLocation) -> XYZ

"""



class SpatialElementCalculationPoint(SpatialElementCalculationLocation, IDisposable):
    """
    SpatialElementCalculationPoint is used as the search point for family instances
       placement inside rooms and spaces.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The position of the "in" spatial element calculation point.

Get: Position(self: SpatialElementCalculationPoint) -> XYZ

Set: Position(self: SpatialElementCalculationPoint) = value
"""



class SpatialElementFromToCalculationPoints(SpatialElementCalculationLocation, IDisposable):
    """
    SpatialElementFromToCalculationPoints is used to specify the search points for a family instance which connects
       two rooms or spaces, such as a door or window. The points determine which room or space is considered the "from"
       and which is considered the "to".
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def Flip(self):
        """
        Flip(self: SpatialElementFromToCalculationPoints)
            flip the direction of the "from" and "to" points
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def IsAcceptableFromPosition(self, fromPosition):
        """
        IsAcceptableFromPosition(self: SpatialElementFromToCalculationPoints, fromPosition: XYZ) -> bool
        
            Checks whether a given "from" position is valid.
            Returns: True if the input is an acceptable "from" position and False otherwise.
        """
        pass

    def IsAcceptableToPosition(self, toPosition):
        """
        IsAcceptableToPosition(self: SpatialElementFromToCalculationPoints, toPosition: XYZ) -> bool
        
            Checks whether a given "to" position is valid.
            Returns: True if the input is an acceptable "to" position and False otherwise.
        """
        pass

    def MakeFromPositionAcceptable(self, newFromLocation):
        """
        MakeFromPositionAcceptable(self: SpatialElementFromToCalculationPoints, newFromLocation: XYZ) -> XYZ
        
            This function takes a potential "from" point and converts it to be a similar 
             point on the opposite side of the family's host from
           the "to" point if 
             necessary.
        
        
            newFromLocation: The desired "from" location
            Returns: The valid "from" location.
        """
        pass

    def MakeToPositionAcceptable(self, newToLocation):
        """
        MakeToPositionAcceptable(self: SpatialElementFromToCalculationPoints, newToLocation: XYZ) -> XYZ
        
            This function takes a potential "to" point and converts it to be a similar 
             point on the opposite side of the family's host from
           the "from" point if 
             necessary.
        
        
            newToLocation: The desired "to" location
            Returns: The valid "to" location.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    FromPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The "from" position of spatial element connecting calculation point.

Get: FromPosition(self: SpatialElementFromToCalculationPoints) -> XYZ

Set: FromPosition(self: SpatialElementFromToCalculationPoints) = value
"""

    ToPosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The "to" position of spatial element connecting calculation point.

Get: ToPosition(self: SpatialElementFromToCalculationPoints) -> XYZ

Set: ToPosition(self: SpatialElementFromToCalculationPoints) = value
"""



class SpatialElementGeometryCalculator(object, IDisposable):
    """
    Use this class to calculate the geometry of a spatial element and obtain the relationships between the geometry and
       the element's boundary elements.
    
    SpatialElementGeometryCalculator(aDoc: Document, options: SpatialElementBoundaryOptions)
    SpatialElementGeometryCalculator(aDoc: Document)
    """
    def CalculateSpatialElementGeometry(self, spatialElement):
        """
        CalculateSpatialElementGeometry(self: SpatialElementGeometryCalculator, spatialElement: SpatialElement) -> SpatialElementGeometryResults
        
            Compute the spatial element geometry and returns the boundary face information.
        
            spatialElement: Specifies the spatial element needs to be computed, should be Room or Space.
            Returns: Requested boundary face information.
        """
        pass

    @staticmethod
    def CanCalculateGeometry(spatialElement):
        """
        CanCalculateGeometry(spatialElement: SpatialElement) -> bool
        
            This indicates whether the input spatial element is a valid one.
        
            spatialElement: The spatial element to be checked if its geometry can be calculated.
            Returns: It will return false if the room/space is not enclosed in 2d or has no 
             location, or the height is too small.
        """
        pass

    def Dispose(self):
        """ Dispose(self: SpatialElementGeometryCalculator) """
        pass

    def GetOptions(self):
        """
        GetOptions(self: SpatialElementGeometryCalculator) -> SpatialElementBoundaryOptions
        
            The options that control the calculation.
            Returns: The options.
        """
        pass

    @staticmethod
    def IsRoomOrSpace(spatialElement):
        """
        IsRoomOrSpace(spatialElement: SpatialElement) -> bool
        
            This indicates whether the input spatial element is a room or a space.
        
            spatialElement: The spatial element to be checked if it is a room or a space or not.
            Returns: True if the input spatial element is a room or a space, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SpatialElementGeometryCalculator, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, aDoc, options=None):
        """
        __new__(cls: type, aDoc: Document, options: SpatialElementBoundaryOptions)
        __new__(cls: type, aDoc: Document)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SpatialElementGeometryCalculator) -> bool

"""



class SpatialElementGeometryResults(object, IDisposable):
    """ The results of spatial element geometry calculation. """
    def Dispose(self):
        """ Dispose(self: SpatialElementGeometryResults) """
        pass

    def GetBoundaryFaceInfo(self, face):
        """
        GetBoundaryFaceInfo(self: SpatialElementGeometryResults, face: Face) -> IList[SpatialElementBoundarySubface]
        
            Query the spatial element boundary face information with the given face.
        
            face: The face from the spatial element's geometry.
            Returns: Sub-faces related to the room bounding elements that define the spatial element 
             face. Returns ll if there is no corresponding boundary information with the 
             given face.
        """
        pass

    def GetGeometry(self):
        """
        GetGeometry(self: SpatialElementGeometryResults) -> Solid
        
            The solid from the spatial element.
            Returns: Requested solid.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SpatialElementGeometryResults, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SpatialElementGeometryResults) -> bool

"""



class SpatialElementTagOrientation(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing tag orientation options that are supported by SpatialElementTags.
    
    enum SpatialElementTagOrientation, values: Horizontal (0), Model (2), Vertical (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Horizontal = None
    Model = None
    value__ = None
    Vertical = None


class SpatialElementType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing types of spaces.
    
    enum SpatialElementType, values: Area (2), Room (1), Space (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Area = None
    Room = None
    Space = None
    value__ = None


class SpecialType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing special types that can appear in an Autodesk.Revit.DB.ExportLayerTable.
       These types do not represent an independent category in Revit, but can be mapped to specific layers on export.
    
    enum SpecialType, values: Default (-1), ExteriorWall (2), FoundationWall (3), InteriorWall (1), RetainingWall (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Default = None
    ExteriorWall = None
    FoundationWall = None
    InteriorWall = None
    RetainingWall = None
    value__ = None


class SpotDimension(Dimension, IDisposable):
    """ An object that represents a spot dimension within the Revit project. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Location = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get a location point object. This is the location of the spot dimension.

Get: Location(self: SpotDimension) -> Location

"""

    SpotDimensionType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The dimension style of this dimension.

Get: SpotDimensionType(self: SpotDimension) -> SpotDimensionType

Set: SpotDimensionType(self: SpotDimension) = value
"""



class SpotDimensionType(DimensionType, IDisposable):
    """ A type element containing the properties of a spot elevation. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class StairsEditScope(EditScope, IDisposable):
    """
    StairsEditScope allows user to maintain a stairs-editing session.
    
    StairsEditScope(document: Document, transactionName: str)
    """
    def Dispose(self):
        """ Dispose(self: EditScope, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: EditScope, disposing: bool) """
        pass

    def Start(self, *__args):
        """
        Start(self: StairsEditScope, baseLevelId: ElementId, topLevelId: ElementId) -> ElementId
        
            Creates a new empty stairs element with a default stairs type in the specified 
             levels
           and then starts stairs edit mode and editing the new stairs.
        
        
            baseLevelId: The base level on which the stairs is to be placed.
            topLevelId: The top level where the stairs is to reach.
            Returns: ElementId of the new stairs.
        Start(self: StairsEditScope, stairsId: ElementId) -> ElementId
        
            Starts an stairs edit mode for an existing Stairs element
        
            stairsId: The stairs element to be edited.
            Returns: ElementId of the editing stairs. It should be the same as the input stairsId
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, document, transactionName):
        """ __new__(cls: type, document: Document, transactionName: str) """
        pass

    IsPermitted = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Tells if the StairsEditScope is permitted to start.

Get: IsPermitted(self: StairsEditScope) -> bool

"""



class StartingViewSettings(Element, IDisposable):
    """
    The initial view settings for a document dictate which view will initially be open when this model
       is opened.  These settings are available for all Revit project documents.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetStartingViewSettings(doc):
        """
        GetStartingViewSettings(doc: Document) -> StartingViewSettings
        
            Returns the starting view settings for the specified document.
        
            doc: The document to get the settings from, which must be a project document.
            Returns: The starting view settings for the document.
        """
        pass

    def IsAcceptableStartingView(self, viewId):
        """
        IsAcceptableStartingView(self: StartingViewSettings, viewId: ElementId) -> bool
        
            Checks whether the given Id is an acceptable starting view.  InvalidElementId 
             corresponds to "Last Viewed" and is therefore also acceptable.
        
        
            viewId: The Id of the element to check.
            Returns: True if the view is acceptable, False if it is not.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the specific view that will be opened when the model is loaded.  InvalidElementId indicates
   that no view has been specified.  In that case, Revit will open the last views that were open at the
   time the file was saved.

Get: ViewId(self: StartingViewSettings) -> ElementId

Set: ViewId(self: StartingViewSettings) = value
"""



class StickSymbolLocation(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the stick symbol location on the UI, which is used for the BuiltInParameter STRUCTURAL_STICK_SYMBOL_LOCATION.
    
    enum StickSymbolLocation, values: StickViewBottom (2), StickViewCenter (0), StickViewLocLine (3), StickViewTop (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    StickViewBottom = None
    StickViewCenter = None
    StickViewLocLine = None
    StickViewTop = None
    value__ = None


class StorageType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all of the internal parameter data storage types that Autodesk Revit supports.
    
    enum StorageType, values: Double (2), ElementId (4), Integer (1), None (0), String (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Double = None
    ElementId = None
    Integer = None
    None = None
    String = None
    value__ = None


class StringParameterValue(ParameterValue, IDisposable):
    """
    A class that holds a String value of a parameter element.
    
    StringParameterValue(value: str)
    StringParameterValue()
    """
    def Dispose(self):
        """ Dispose(self: ParameterValue, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ParameterValue, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, value=None):
        """
        __new__(cls: type, value: str)
        __new__(cls: type)
        """
        pass

    Value = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The stored value

Get: Value(self: StringParameterValue) -> str

Set: Value(self: StringParameterValue) = value
"""



class StructDeckEmbeddingType(Enum, IComparable, IFormattable, IConvertible):
    """
    Used in class CompoundStructure to specify the usage of a layer whose function is StructuralDeck.
    
    enum StructDeckEmbeddingType, values: Invalid (-1), MergeWithLayerAbove (0), Standalone (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Invalid = None
    MergeWithLayerAbove = None
    Standalone = None
    value__ = None


class StructuralAsset(object, IDisposable):
    """
    Represents the properties of a material pertinent to structural analysis.
    
    StructuralAsset(name: str, structuralAssetClass: StructuralAssetClass)
    """
    def Copy(self):
        """
        Copy(self: StructuralAsset) -> StructuralAsset
        
            Produces a copy of the asset.
            Returns: A copy of the asset.
        """
        pass

    def Dispose(self):
        """ Dispose(self: StructuralAsset) """
        pass

    def Equals(self, *__args):
        """
        Equals(self: StructuralAsset, other: StructuralAsset) -> bool
        
            Determines whether this structural asset is equal to another.
        
            other: The structural asset with which to compare this structural asset.
            Returns: True if the given structural asset is equal to this one, otherwise false.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: StructuralAsset, disposing: bool) """
        pass

    def SetPoissonRatio(self, poissonRatio):
        """
        SetPoissonRatio(self: StructuralAsset, poissonRatio: float)
            Sets the Poisson ratio of the asset.
        """
        pass

    def SetShearModulus(self, shearModulus):
        """
        SetShearModulus(self: StructuralAsset, shearModulus: float)
            Sets the shear modulus of the asset.
        """
        pass

    def SetThermalExpansionCoefficient(self, thermalExpCoeff):
        """
        SetThermalExpansionCoefficient(self: StructuralAsset, thermalExpCoeff: float)
            Sets the thermal expansion coefficient of the asset.
        """
        pass

    def SetYoungModulus(self, youngModulus):
        """
        SetYoungModulus(self: StructuralAsset, youngModulus: float)
            Sets the Young's modulus of the asset.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, name, structuralAssetClass):
        """ __new__(cls: type, name: str, structuralAssetClass: StructuralAssetClass) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Behavior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Flag indicating whether elements of this material behave isotropically or orthotropically.

Get: Behavior(self: StructuralAsset) -> StructuralBehavior

Set: Behavior(self: StructuralAsset) = value
"""

    ConcreteBendingReinforcement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The bending reinforcement of the asset.

Get: ConcreteBendingReinforcement(self: StructuralAsset) -> float

Set: ConcreteBendingReinforcement(self: StructuralAsset) = value
"""

    ConcreteCompression = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The compression strength of concrete-based assets.

Get: ConcreteCompression(self: StructuralAsset) -> float

Set: ConcreteCompression(self: StructuralAsset) = value
"""

    ConcreteShearReinforcement = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The shear reinforcement of the asset.

Get: ConcreteShearReinforcement(self: StructuralAsset) -> float

Set: ConcreteShearReinforcement(self: StructuralAsset) = value
"""

    ConcreteShearStrengthReduction = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The shear strength reduction of the asset.

Get: ConcreteShearStrengthReduction(self: StructuralAsset) -> float

Set: ConcreteShearStrengthReduction(self: StructuralAsset) = value
"""

    DampingRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The damping ratio of the asset.

Get: DampingRatio(self: StructuralAsset) -> float

Set: DampingRatio(self: StructuralAsset) = value
"""

    Density = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The density of the asset.

Get: Density(self: StructuralAsset) -> float

Set: Density(self: StructuralAsset) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: StructuralAsset) -> bool

"""

    Lightweight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Flag indicating whether the asset describes a material that is light-weight or not.

Get: Lightweight(self: StructuralAsset) -> bool

Set: Lightweight(self: StructuralAsset) = value
"""

    MetalReductionFactor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The reduction factor of the asset.

Get: MetalReductionFactor(self: StructuralAsset) -> float

Set: MetalReductionFactor(self: StructuralAsset) = value
"""

    MetalResistanceCalculationStrength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The resistance calculation strength of the asset.

Get: MetalResistanceCalculationStrength(self: StructuralAsset) -> float

Set: MetalResistanceCalculationStrength(self: StructuralAsset) = value
"""

    MinimumTensileStrength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The minimum tensile strength of the asset.

Get: MinimumTensileStrength(self: StructuralAsset) -> float

Set: MinimumTensileStrength(self: StructuralAsset) = value
"""

    MinimumYieldStress = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The minimum yield stress of the asset.

Get: MinimumYieldStress(self: StructuralAsset) -> float

Set: MinimumYieldStress(self: StructuralAsset) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the structural asset.

Get: Name(self: StructuralAsset) -> str

Set: Name(self: StructuralAsset) = value
"""

    PoissonRatio = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Poisson ratio of the asset.

Get: PoissonRatio(self: StructuralAsset) -> XYZ

Set: PoissonRatio(self: StructuralAsset) = value
"""

    ShearModulus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The shear modulus of the asset.

Get: ShearModulus(self: StructuralAsset) -> XYZ

Set: ShearModulus(self: StructuralAsset) = value
"""

    StructuralAssetClass = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of material that this structural asset describes (e.g. wood, concrete, metal.)

Get: StructuralAssetClass(self: StructuralAsset) -> StructuralAssetClass

"""

    SubClass = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sub-class of the asset.

Get: SubClass(self: StructuralAsset) -> str

Set: SubClass(self: StructuralAsset) = value
"""

    ThermalExpansionCoefficient = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The thermal expansion coefficient of the asset.

Get: ThermalExpansionCoefficient(self: StructuralAsset) -> XYZ

Set: ThermalExpansionCoefficient(self: StructuralAsset) = value
"""

    WoodBendingStrength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The bending strength of the asset.

Get: WoodBendingStrength(self: StructuralAsset) -> float

Set: WoodBendingStrength(self: StructuralAsset) = value
"""

    WoodGrade = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The grade of wood used in a wood-based asset.

Get: WoodGrade(self: StructuralAsset) -> str

Set: WoodGrade(self: StructuralAsset) = value
"""

    WoodParallelCompressionStrength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The parallel compression strength of the asset.

Get: WoodParallelCompressionStrength(self: StructuralAsset) -> float

Set: WoodParallelCompressionStrength(self: StructuralAsset) = value
"""

    WoodParallelShearStrength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The parallel shear strength of the asset.

Get: WoodParallelShearStrength(self: StructuralAsset) -> float

Set: WoodParallelShearStrength(self: StructuralAsset) = value
"""

    WoodPerpendicularCompressionStrength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The perpendicular compression strength of the asset.

Get: WoodPerpendicularCompressionStrength(self: StructuralAsset) -> float

Set: WoodPerpendicularCompressionStrength(self: StructuralAsset) = value
"""

    WoodPerpendicularShearStrength = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The perpendicular shear strength of the asset.

Get: WoodPerpendicularShearStrength(self: StructuralAsset) -> float

Set: WoodPerpendicularShearStrength(self: StructuralAsset) = value
"""

    WoodSpecies = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The species of wood used in a wood-based asset.

Get: WoodSpecies(self: StructuralAsset) -> str

Set: WoodSpecies(self: StructuralAsset) = value
"""

    YoungModulus = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Young's modulus of the asset.

Get: YoungModulus(self: StructuralAsset) -> XYZ

Set: YoungModulus(self: StructuralAsset) = value
"""



class StructuralAssetClass(Enum, IComparable, IFormattable, IConvertible):
    """
    Represents the type of material described by a structural asset.  This enum value is returned by Autodesk::Revit::DB::StructuralAsset::StructuralAssetClass.
    
    enum StructuralAssetClass, values: Basic (1), Concrete (4), Gas (7), Generic (2), Liquid (6), Metal (3), Plastic (8), Undefined (0), Wood (5)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Basic = None
    Concrete = None
    Gas = None
    Generic = None
    Liquid = None
    Metal = None
    Plastic = None
    Undefined = None
    value__ = None
    Wood = None


class StructuralBehavior(Enum, IComparable, IFormattable, IConvertible):
    """
    Specifies whether structural elements behave orthotropically, isotropically, or transverse-isotropically.
    
    enum StructuralBehavior, values: Isotropic (0), Orthotropic (1), TransverseIsotropic (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Isotropic = None
    Orthotropic = None
    TransverseIsotropic = None
    value__ = None


class StructuralReleaseType(Enum, IComparable, IFormattable, IConvertible):
    """
    Type of structural release, which is used for the BuiltIn parameter STRUCTURAL_END_RELEASE_TYPE.
    
    enum StructuralReleaseType, values: kBendingMoment (2), kFixed (0), kPinned (1), kUserDefined (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    kBendingMoment = None
    kFixed = None
    kPinned = None
    kUserDefined = None
    value__ = None


class SubfaceType(Enum, IComparable, IFormattable, IConvertible):
    """
    Meaning of a subface's type.
    
    enum SubfaceType, values: Bottom (0), Side (2), Top (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Bottom = None
    Side = None
    Top = None
    value__ = None


class SubTransaction(object, IDisposable):
    """
    Sub-transactions are objects that provide control over a subset of changes in a document.
    
    SubTransaction(document: Document)
    """
    def Commit(self):
        """
        Commit(self: SubTransaction) -> TransactionStatus
        
            Commits all changes made to the model made during the sub-transaction.
            Returns: If finished successfully, this method returns TransactionStatus.Committed
        """
        pass

    def Dispose(self):
        """ Dispose(self: SubTransaction) """
        pass

    def GetStatus(self):
        """
        GetStatus(self: SubTransaction) -> TransactionStatus
        
            Returns the current status of the sub-transaction.
            Returns: The current status of the sub-transaction.
        """
        pass

    def HasEnded(self):
        """
        HasEnded(self: SubTransaction) -> bool
        
            Determines whether the sub-transaction has ended already.
            Returns: True if the sub-transaction has already been committed or rolled back, False 
             otherwise.
        """
        pass

    def HasStarted(self):
        """
        HasStarted(self: SubTransaction) -> bool
        
            Determines whether the sub-transaction has been started yet.
            Returns: True if the sub-transaction has already started, False otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SubTransaction, disposing: bool) """
        pass

    def RollBack(self):
        """
        RollBack(self: SubTransaction) -> TransactionStatus
        
            Discards all changes made to the model during the sub-transaction.
            Returns: If finished successfully, this method returns TransactionStatus.RolledBack.
        """
        pass

    def Start(self):
        """
        Start(self: SubTransaction) -> TransactionStatus
        
            Starts the sub-transaction.
            Returns: If started successfully, this method returns TransactionStatus.Started.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, document):
        """ __new__(cls: type, document: Document) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SubTransaction) -> bool

"""



class SunAndShadowSettings(Element, IDisposable):
    """ The SunAndShadowSettings class represents the sun control. """
    @staticmethod
    def CalculateTimeZone(latitude, longitude):
        """
        CalculateTimeZone(latitude: float, longitude: float) -> float
        
            Use Revit's utilities to calculate the time zone for a given longitude and 
             latitude.
        
        
            latitude: The latitude.
            longitude: The longitude.
            Returns: The time zone, in hours, ranging from +12 hours to -12 hours with 0 being GMT.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def FitToModel(self):
        """
        FitToModel(self: SunAndShadowSettings)
            Adjust SunAndShadowSettings to fit around the current model geometry.
        """
        pass

    @staticmethod
    def GetActiveSunAndShadowSettings(aDocument):
        """
        GetActiveSunAndShadowSettings(aDocument: Document) -> Element
        
            Returns the current SunAndShadowSettings element assigned to the active view 
             for the
           supplied document.
        
        
            aDocument: The document.
            Returns: The active SunAndShadowSettings element for the supplied document.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetFrameAltitude(self, frame):
        """
        GetFrameAltitude(self: SunAndShadowSettings, frame: float) -> float
        
            Identifies the altitude of the sun (angle in radians) for a specific frame.
        
            frame: Frame for which time is requested
            Returns: Altitude angle (radians)
        """
        pass

    def GetFrameAzimuth(self, frame):
        """
        GetFrameAzimuth(self: SunAndShadowSettings, frame: float) -> float
        
            Identifies the azimuth of the sun (angle in radians) for a specific frame.
        
            frame: Frame for which time is requested
            Returns: Azimuth angle (radians).  This is measured counterclockwise from the X axis 
             (East direction).  Note that this
           is a different frame of reference than is 
             used by Revit for the Lighting Study Azimuth value.
        """
        pass

    def GetFrameTime(self, frame):
        """
        GetFrameTime(self: SunAndShadowSettings, frame: float) -> DateTime
        
            Identifies the date and time of the SunAndShadowSettings element for a given 
             frame.
        
        
            frame: Frame for which time is requested
            Returns: The date and time.  The value will be in Coordinated Universal Time (UTC).
        """
        pass

    def GetMatchingPreset(self):
        """
        GetMatchingPreset(self: SunAndShadowSettings) -> str
        
            Finds the name of the 'per-document' SunAndShadowSettings that matches the 
             properties
           of this per-view element.
        
            Returns: Name of the per-document SunAndShadowSettings that matches the view specific 
             element.
        """
        pass

    def GetSunrise(self, date):
        """
        GetSunrise(self: SunAndShadowSettings, date: DateTime) -> DateTime
        
            Identifies the sunrise time for the SunAndShadowSettings element at its current 
             location
           and indicated date.
        
        
            date: The date for which to determine sunrise time.
            Returns: The date and time.  The value will be in Coordinated Universal Time (UTC).
        """
        pass

    def GetSunset(self, date):
        """
        GetSunset(self: SunAndShadowSettings, date: DateTime) -> DateTime
        
            Identifies the sunset time for the SunAndShadowSettings element at its current 
             location
           and indicated date.
        
        
            date: The date for which to determine sunset time.
            Returns: The date and time.  The value will be in Coordinated Universal Time (UTC).
        """
        pass

    def IsAfterStartDateAndTime(self, time):
        """
        IsAfterStartDateAndTime(self: SunAndShadowSettings, time: DateTime) -> bool
        
            Checks whether the end date and time is valid.
        
            time: Date and time value
            Returns: True if the date and time is valid, false otherwise.
        """
        pass

    def IsBeforeEndDateAndTime(self, time):
        """
        IsBeforeEndDateAndTime(self: SunAndShadowSettings, time: DateTime) -> bool
        
            Checks whether the start date and time is valid.
        
            time: Date and time value
            Returns: True if the date and time is valid, false otherwise.
        """
        pass

    def IsFrameValid(self, frame):
        """
        IsFrameValid(self: SunAndShadowSettings, frame: float) -> bool
        
            Checks whether the frame is valid for the supplied SunAndShadowSettings.
        
            frame: Frame value
            Returns: True if the frame is valid for the SunAndShadowSettings, false otherwise.
        """
        pass

    def IsGroundPlaneLevelValid(self, levelId):
        """
        IsGroundPlaneLevelValid(self: SunAndShadowSettings, levelId: ElementId) -> bool
        
            Checks whether the element represents a valid Ground Plane level.
        
            levelId: Level element id.
            Returns: True if the element is a valid Ground Plane Level, false otherwise.
        """
        pass

    def IsTimeIntervalValid(self, interval):
        """
        IsTimeIntervalValid(self: SunAndShadowSettings, interval: SunStudyTimeInterval) -> bool
        
            Checks whether the time interval is valid for the SunAndShadowType.
        
            interval: Time interval value.
            Returns: True if the time interval is valid for the current SunAndShadowType, false 
             otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    ActiveFrame = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the active animation frame for a single-day or multi-day study,
   starting at 1.0 for the first frame and incrementing in intervals of 1.0.

Get: ActiveFrame(self: SunAndShadowSettings) -> float

Set: ActiveFrame(self: SunAndShadowSettings) = value
"""

    ActiveFrameTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the date and time of the SunAndShadowSettings element for the active frame.

Get: ActiveFrameTime(self: SunAndShadowSettings) -> DateTime

"""

    Altitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Altitude setting (angle in radians). This is only relevant when dealing with a SunAndShadowSettings
   element that uses lighting mode.

Get: Altitude(self: SunAndShadowSettings) -> float

Set: Altitude(self: SunAndShadowSettings) = value
"""

    Azimuth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Azimuth setting (angle in radians). This is only relevant when dealing with a SunAndShadowSettings
   element that uses lighting mode.

Get: Azimuth(self: SunAndShadowSettings) -> float

Set: Azimuth(self: SunAndShadowSettings) = value
"""

    EndDateAndTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the end date and time.

Get: EndDateAndTime(self: SunAndShadowSettings) -> DateTime

Set: EndDateAndTime(self: SunAndShadowSettings) = value
"""

    GroundPlaneHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the ground plane height.

Get: GroundPlaneHeight(self: SunAndShadowSettings) -> float

"""

    GroundPlaneLevelId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the element id of the Ground Plane level for the SunAndShadowSettings element.

Get: GroundPlaneLevelId(self: SunAndShadowSettings) -> ElementId

Set: GroundPlaneLevelId(self: SunAndShadowSettings) = value
"""

    Latitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the current latitude used by the SunAndShadowSettings element.

Get: Latitude(self: SunAndShadowSettings) -> float

"""

    Longitude = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the current longitude used by the SunAndShadowSettings element.

Get: Longitude(self: SunAndShadowSettings) -> float

"""

    NumberOfFrames = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the total number of animation frames for a single-day or multi-day study.

Get: NumberOfFrames(self: SunAndShadowSettings) -> float

"""

    ProjectLocationId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the ProjectLocation element used by the SunAndShadowSettings element.

Get: ProjectLocationId(self: SunAndShadowSettings) -> ElementId

"""

    ProjectLocationName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the name of the project location used by the SunAndShadowSettings element.

Get: ProjectLocationName(self: SunAndShadowSettings) -> str

"""

    RelativeToView = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether the SunAndShadowSettings element is relative to the view
   direction. This is only relevant for lighting mode.

Get: RelativeToView(self: SunAndShadowSettings) -> bool

Set: RelativeToView(self: SunAndShadowSettings) = value
"""

    SharesSettings = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether settings are shared globally.

Get: SharesSettings(self: SunAndShadowSettings) -> bool

Set: SharesSettings(self: SunAndShadowSettings) = value
"""

    StartDateAndTime = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the start or current date and time.

Get: StartDateAndTime(self: SunAndShadowSettings) -> DateTime

Set: StartDateAndTime(self: SunAndShadowSettings) = value
"""

    SunAndShadowType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the type of the SunAndShadowSettings element.

Get: SunAndShadowType(self: SunAndShadowSettings) -> SunAndShadowType

Set: SunAndShadowType(self: SunAndShadowSettings) = value
"""

    SunriseToSunset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether the current single day sun study is set to run from
   sunrise to sunset.

Get: SunriseToSunset(self: SunAndShadowSettings) -> bool

Set: SunriseToSunset(self: SunAndShadowSettings) = value
"""

    TimeInterval = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the time interval between animation frames.

Get: TimeInterval(self: SunAndShadowSettings) -> SunStudyTimeInterval

Set: TimeInterval(self: SunAndShadowSettings) = value
"""

    TimeZone = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the time zone.

Get: TimeZone(self: SunAndShadowSettings) -> float

"""

    UsesDST = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether the SunAndShadowSettings element is using daylight savings time.

Get: UsesDST(self: SunAndShadowSettings) -> bool

"""

    UsesGroundPlane = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether the SunAndShadowSettings element uses a ground plane.

Get: UsesGroundPlane(self: SunAndShadowSettings) -> bool

Set: UsesGroundPlane(self: SunAndShadowSettings) = value
"""

    Visible = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Visibility in current view for a per-view SunAndShadowSettings element.

Get: Visible(self: SunAndShadowSettings) -> bool

Set: Visible(self: SunAndShadowSettings) = value
"""



class SunAndShadowType(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum of sun study type.
    
    enum SunAndShadowType, values: Lighting (3), MultiDayStudy (2), OneDayStudy (1), StillImage (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Lighting = None
    MultiDayStudy = None
    OneDayStudy = None
    StillImage = None
    value__ = None


class SunStudyTimeInterval(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum of sun study time interval.
    
    enum SunStudyTimeInterval, values: Day (4), Hour (3), Minutes15 (0), Minutes30 (1), Minutes45 (2), Month (6), Week (5)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Day = None
    Hour = None
    Minutes15 = None
    Minutes30 = None
    Minutes45 = None
    Month = None
    value__ = None
    Week = None


class Sweep(GenericForm, IDisposable):
    """ A sweep solid or void form. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsTrajectorySegmentationEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The trajectory segmentation option for the sweep.

Get: IsTrajectorySegmentationEnabled(self: Sweep) -> bool

Set: IsTrajectorySegmentationEnabled(self: Sweep) = value
"""

    MaxSegmentAngle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The maximum segment angle of the sweep in radians.

Get: MaxSegmentAngle(self: Sweep) -> float

Set: MaxSegmentAngle(self: Sweep) = value
"""

    Path3d = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The selected curves used for the sweep path.

Get: Path3d(self: Sweep) -> Path3d

"""

    PathSketch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sketched path for the sweep.

Get: PathSketch(self: Sweep) -> Sketch

"""

    ProfileSketch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The profile sketch of the sweep.

Get: ProfileSketch(self: Sweep) -> Sketch

"""

    ProfileSymbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The family symbol profile details for the sweep.

Get: ProfileSymbol(self: Sweep) -> FamilySymbolProfile

"""



class SweptBlend(GenericForm, IDisposable):
    """ A swept blend solid or void form. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetVertexConnectionMap(self):
        """
        GetVertexConnectionMap(self: SweptBlend) -> VertexIndexPairArray
        
            Gets the mapping between the vertices in the top and bottom profiles.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetVertexConnectionMap(self, vertexMap):
        """
        SetVertexConnectionMap(self: SweptBlend, vertexMap: VertexIndexPairArray)
            Sets the mapping between the vertices in the top and bottom profiles.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BottomProfile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The curves which make up the bottom profile of the sketch.

Get: BottomProfile(self: SweptBlend) -> CurveArrArray

"""

    BottomProfileSymbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The bottom family symbol profile of the swept blend.

Get: BottomProfileSymbol(self: SweptBlend) -> FamilySymbolProfile

"""

    BottomSketch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The bottom profile sketch of the swept blend.

Get: BottomSketch(self: SweptBlend) -> Sketch

"""

    PathSketch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sketched path for the swept blend.

Get: PathSketch(self: SweptBlend) -> Sketch

"""

    SelectedPath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The selected curve used for the swept blend path.

Get: SelectedPath(self: SweptBlend) -> Curve

"""

    TopProfile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The curves which make up the top profile of the sketch.

Get: TopProfile(self: SweptBlend) -> CurveArrArray

"""

    TopProfileSymbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The top family symbol profile of the swept blend.

Get: TopProfileSymbol(self: SweptBlend) -> FamilySymbolProfile

"""

    TopSketch = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The top profile sketch of the swept blend.

Get: TopSketch(self: SweptBlend) -> Sketch

"""



class SweptProfile(object, IDisposable):
    """ Represents an extruded profile swept along a driving curve. """
    def Dispose(self):
        """ Dispose(self: SweptProfile) """
        pass

    def GetDrivingCurve(self):
        """
        GetDrivingCurve(self: SweptProfile) -> Curve
        
            Provides access to the curve that dictates the path of the swept profile.
            Returns: A curve that defines the path of the swept profile.
        """
        pass

    def GetSweptProfile(self):
        """
        GetSweptProfile(self: SweptProfile) -> Profile
        
            Returns an object that describes the profile that is swept along the driving 
             curve.
        
            Returns: A geometric profile object.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SweptProfile, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    EndSetBack = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The distance from the end of the driving curve to the point where the sweep actually ends.

Get: EndSetBack(self: SweptProfile) -> float

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SweptProfile) -> bool

"""

    StartSetBack = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The distance from the start of the driving curve to the point where the sweep actually begins.

Get: StartSetBack(self: SweptProfile) -> float

"""



class SymbolicCurve(CurveElement, IDisposable):
    """ A curve that provides information but is not intended to represent actual geometry in an element. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetVisibility(self):
        """
        GetVisibility(self: SymbolicCurve) -> FamilyElementVisibility
        
            Gets the visibility for the symbolic curve.
            Returns: A copy of visibility settings for the symbolic curve.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetVisibility(self, visibility):
        """
        SetVisibility(self: SymbolicCurve, visibility: FamilyElementVisibility)
            Sets the visibility for the symbolic curve.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsDrawnInForeground = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if this curve will be drawn in the foreground of the family instance.

Get: IsDrawnInForeground(self: SymbolicCurve) -> bool

Set: IsDrawnInForeground(self: SymbolicCurve) = value
"""

    ReferenceType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates the type of reference.

Get: ReferenceType(self: SymbolicCurve) -> ReferenceType

Set: ReferenceType(self: SymbolicCurve) = value
"""

    Subcategory = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The subcategory.

Get: Subcategory(self: SymbolicCurve) -> GraphicsStyle

Set: Subcategory(self: SymbolicCurve) = value
"""



class SymbolicCurveArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains model curves.
    
    SymbolicCurveArray()
    """
    def Append(self, item):
        """
        Append(self: SymbolicCurveArray, item: SymbolicCurve)
            Add the model curve to the end of the array.
        
            item: The model curve to be added.
        """
        pass

    def Clear(self):
        """
        Clear(self: SymbolicCurveArray)
            Removes every model curve from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: SymbolicCurveArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: SymbolicCurveArray) -> SymbolicCurveArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: SymbolicCurveArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """
        Insert(self: SymbolicCurveArray, item: SymbolicCurve, index: int)
            Insert the specified model curve into the array.
        
            item: The model curve to be inserted into the array.
            index: The model curve will be inserted before this index.
            Returns: Returns whether the model curve was inserted into the array.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SymbolicCurveArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: SymbolicCurveArray) -> SymbolicCurveArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: SymbolicCurveArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of model curves that are in the array.

Get: Size(self: SymbolicCurveArray) -> int

"""



class SymbolicCurveArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a model curve array.
    
    SymbolicCurveArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: SymbolicCurveArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: SymbolicCurveArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SymbolicCurveArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: SymbolicCurveArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: SymbolicCurveArrayIterator) -> object

"""



class SynchronizeWithCentralOptions(object, IDisposable):
    """
    Options to control behavior of synchronization with central.
    
    SynchronizeWithCentralOptions()
    """
    def Dispose(self):
        """ Dispose(self: SynchronizeWithCentralOptions) """
        pass

    def GetRelinquishOptions(self):
        """
        GetRelinquishOptions(self: SynchronizeWithCentralOptions) -> RelinquishOptions
        
            Gets the options which govern whether or not to relinquish elements and workset 
             types.
        
            Returns: The options.  If ll, synchronize with central will relinquish the current 
             user's ownership of all worksets and all elements.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: SynchronizeWithCentralOptions, disposing: bool) """
        pass

    def SetRelinquishOptions(self, relinquishOptions):
        """
        SetRelinquishOptions(self: SynchronizeWithCentralOptions, relinquishOptions: RelinquishOptions)
            Sets the options which govern whether or not to relinquish elements and workset 
             types.
        
        
            relinquishOptions: The options.  If ll, synchronize with central will relinquish the current 
             user's ownership of all worksets and all elements.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Comment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """User description of changes made since the last Sync with Central.  Empty by default.

Get: Comment(self: SynchronizeWithCentralOptions) -> str

Set: Comment(self: SynchronizeWithCentralOptions) = value
"""

    Compact = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether Revit should compact the central model while synchronizing with central.
   This option reduces the size of the central model but many increase the time it takes to perform the save.
   False by default.

Get: Compact(self: SynchronizeWithCentralOptions) -> bool

Set: Compact(self: SynchronizeWithCentralOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: SynchronizeWithCentralOptions) -> bool

"""

    RelinquishBorrowedElements = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether Revit should relinquish borrowed elements after synchronizing with central.

Get: RelinquishBorrowedElements(self: SynchronizeWithCentralOptions) -> bool

"""

    RelinquishFamilyWorksets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether Revit should relinquish Family worksets after synchronizing with central.

Get: RelinquishFamilyWorksets(self: SynchronizeWithCentralOptions) -> bool

"""

    RelinquishProjectStandardWorksets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether Revit should relinquish Project Standard worksets after synchronizing with central.

Get: RelinquishProjectStandardWorksets(self: SynchronizeWithCentralOptions) -> bool

"""

    RelinquishUserCreatedWorksets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether Revit should relinquish user-created Standard worksets after synchronizing with central.

Get: RelinquishUserCreatedWorksets(self: SynchronizeWithCentralOptions) -> bool

"""

    RelinquishViewWorksets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether Revit should relinquish View worksets after synchronizing with central.

Get: RelinquishViewWorksets(self: SynchronizeWithCentralOptions) -> bool

"""

    SaveLocalAfter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True means to save local after saving changes to central.  True by default.
   Silently ignored if the model in the current session is central rather than local.

Get: SaveLocalAfter(self: SynchronizeWithCentralOptions) -> bool

Set: SaveLocalAfter(self: SynchronizeWithCentralOptions) = value
"""

    SaveLocalBefore = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True means to save local before the first reload latest if there are changes not yet saved to local.
   True by default.  Silently ignored if the model in the current session is central rather than local.

Get: SaveLocalBefore(self: SynchronizeWithCentralOptions) -> bool

Set: SaveLocalBefore(self: SynchronizeWithCentralOptions) = value
"""

    SaveLocalFile = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether Revit will save the local file at least once while synchronizing with central.

Get: SaveLocalFile(self: SynchronizeWithCentralOptions) -> bool

"""



class TableCellCalculatedValueData(object, IDisposable):
    """ The TableCellCalculatedValueData stores the data for calculated value """
    def Dispose(self):
        """ Dispose(self: TableCellCalculatedValueData) """
        pass

    def GetName(self):
        """
        GetName(self: TableCellCalculatedValueData) -> str
        
            Gets the name of the calculated value.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TableCellCalculatedValueData, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TableCellCalculatedValueData) -> bool

"""



class TableCellCombinedParameterData(object, IDisposable):
    """ The TableCellCombinedParameterData stores the data for combined parameters """
    @staticmethod
    def Create():
        """
        Create() -> TableCellCombinedParameterData
        
            construct a TableCellCombinedParameterData
        """
        pass

    def Dispose(self):
        """ Dispose(self: TableCellCombinedParameterData) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TableCellCombinedParameterData, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    CategoryId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Category id for this parameter

Get: CategoryId(self: TableCellCombinedParameterData) -> ElementId

Set: CategoryId(self: TableCellCombinedParameterData) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TableCellCombinedParameterData) -> bool

"""

    ParamId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The parameter id

Get: ParamId(self: TableCellCombinedParameterData) -> ElementId

Set: ParamId(self: TableCellCombinedParameterData) = value
"""

    Prefix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The prefix for this parameter

Get: Prefix(self: TableCellCombinedParameterData) -> str

Set: Prefix(self: TableCellCombinedParameterData) = value
"""

    SampleValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sample/example value for the parameter in text form

Get: SampleValue(self: TableCellCombinedParameterData) -> str

Set: SampleValue(self: TableCellCombinedParameterData) = value
"""

    Separator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The separator for this parameter

Get: Separator(self: TableCellCombinedParameterData) -> str

Set: Separator(self: TableCellCombinedParameterData) = value
"""

    Suffix = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The suffix for this parameter

Get: Suffix(self: TableCellCombinedParameterData) -> str

Set: Suffix(self: TableCellCombinedParameterData) = value
"""



class TableCellStyle(object, IDisposable):
    """
    The TableCellStyle class contains the appearance settings for a given table cell, column, or table.
    
    TableCellStyle(other: TableCellStyle)
    TableCellStyle()
    """
    def Dispose(self):
        """ Dispose(self: TableCellStyle) """
        pass

    def GetCellStyleOverrideOptions(self):
        """
        GetCellStyleOverrideOptions(self: TableCellStyle) -> TableCellStyleOverrideOptions
        
            Gets cell style override options of this cell.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TableCellStyle, disposing: bool) """
        pass

    def ResetOverride(self):
        """
        ResetOverride(self: TableCellStyle)
            Resets any overrides applied to this cell.
        """
        pass

    def SetCellStyleOverrideOptions(self, helper):
        """
        SetCellStyleOverrideOptions(self: TableCellStyle, helper: TableCellStyleOverrideOptions)
            Sets cell style override options of this cell.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, other=None):
        """
        __new__(cls: type, other: TableCellStyle)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    BackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The background color of this cell in the grid view.

Get: BackgroundColor(self: TableCellStyle) -> Color

Set: BackgroundColor(self: TableCellStyle) = value
"""

    BorderBottomLineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element id (GraphicsStyle element) for the bottom line of the cell border.

Get: BorderBottomLineStyle(self: TableCellStyle) -> ElementId

Set: BorderBottomLineStyle(self: TableCellStyle) = value
"""

    BorderLeftLineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element id (GraphicsStyle element) for the left line of the cell border.

Get: BorderLeftLineStyle(self: TableCellStyle) -> ElementId

Set: BorderLeftLineStyle(self: TableCellStyle) = value
"""

    BorderRightLineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element id (GraphicsStyle element) for the right line of the cell border.

Get: BorderRightLineStyle(self: TableCellStyle) -> ElementId

Set: BorderRightLineStyle(self: TableCellStyle) = value
"""

    BorderTopLineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element id (GraphicsStyle element) for the top line of the cell border.

Get: BorderTopLineStyle(self: TableCellStyle) -> ElementId

Set: BorderTopLineStyle(self: TableCellStyle) = value
"""

    FontHorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The horizontal alignment style of text font.

Get: FontHorizontalAlignment(self: TableCellStyle) -> HorizontalAlignmentStyle

Set: FontHorizontalAlignment(self: TableCellStyle) = value
"""

    FontName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The font used for this style

Get: FontName(self: TableCellStyle) -> str

Set: FontName(self: TableCellStyle) = value
"""

    FontVerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The vertical alignment style of text font.

Get: FontVerticalAlignment(self: TableCellStyle) -> VerticalAlignmentStyle

Set: FontVerticalAlignment(self: TableCellStyle) = value
"""

    IsEnabled = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the status whether this cell is enabled.

Get: IsEnabled(self: TableCellStyle) -> bool

Set: IsEnabled(self: TableCellStyle) = value
"""

    IsFontBold = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets whether the text font is set to bold of this cell.

Get: IsFontBold(self: TableCellStyle) -> bool

Set: IsFontBold(self: TableCellStyle) = value
"""

    IsFontItalic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets whether the text font is set to italic of this cell.

Get: IsFontItalic(self: TableCellStyle) -> bool

Set: IsFontItalic(self: TableCellStyle) = value
"""

    IsFontUnderline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets whether the text font is set to Underline of this cell.

Get: IsFontUnderline(self: TableCellStyle) -> bool

Set: IsFontUnderline(self: TableCellStyle) = value
"""

    IsInactivePhaseload = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets whether this is an inactive phase load cell.

Get: IsInactivePhaseload(self: TableCellStyle) -> bool

Set: IsInactivePhaseload(self: TableCellStyle) = value
"""

    IsOverridden = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the cell is overridden or not.

Get: IsOverridden(self: TableCellStyle) -> bool

"""

    IsReadOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets whether this cell is read only.

Get: IsReadOnly(self: TableCellStyle) -> bool

Set: IsReadOnly(self: TableCellStyle) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TableCellStyle) -> bool

"""

    SheetBackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The background color of this cell in the sheet view.

Get: SheetBackgroundColor(self: TableCellStyle) -> Color

"""

    TextColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text color of this cell.

Get: TextColor(self: TableCellStyle) -> Color

Set: TextColor(self: TableCellStyle) = value
"""

    TextOrientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The orientation of the cell (for vertical/horizontal text) with input in degrees multiplied by 10

Get: TextOrientation(self: TableCellStyle) -> int

Set: TextOrientation(self: TableCellStyle) = value
"""

    TextSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The text size.

Get: TextSize(self: TableCellStyle) -> float

Set: TextSize(self: TableCellStyle) = value
"""



class TableCellStyleOverrideOptions(object, IDisposable):
    """
    This helper class represents the overridden characteristics of the associated cell.
    
    TableCellStyleOverrideOptions(other: TableCellStyleOverrideOptions)
    TableCellStyleOverrideOptions()
    """
    def Dispose(self):
        """ Dispose(self: TableCellStyleOverrideOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TableCellStyleOverrideOptions, disposing: bool) """
        pass

    def SetAllOverrides(self, bOverride):
        """
        SetAllOverrides(self: TableCellStyleOverrideOptions, bOverride: bool)
            Sets all overrides to a specific value.
        
            bOverride: The value that will be assigned to all the overrides.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, other=None):
        """
        __new__(cls: type, other: TableCellStyleOverrideOptions)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    BackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the background color characteristic is overridden.

Get: BackgroundColor(self: TableCellStyleOverrideOptions) -> bool

Set: BackgroundColor(self: TableCellStyleOverrideOptions) = value
"""

    Bold = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the bold characteristic is overridden.

Get: Bold(self: TableCellStyleOverrideOptions) -> bool

Set: Bold(self: TableCellStyleOverrideOptions) = value
"""

    BorderBottomLineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the border bottom line style characteristic is overridden.

Get: BorderBottomLineStyle(self: TableCellStyleOverrideOptions) -> bool

Set: BorderBottomLineStyle(self: TableCellStyleOverrideOptions) = value
"""

    BorderLeftLineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the border left line style characteristic is overridden.

Get: BorderLeftLineStyle(self: TableCellStyleOverrideOptions) -> bool

Set: BorderLeftLineStyle(self: TableCellStyleOverrideOptions) = value
"""

    BorderLineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the border line style characteristic is overridden.

Get: BorderLineStyle(self: TableCellStyleOverrideOptions) -> bool

Set: BorderLineStyle(self: TableCellStyleOverrideOptions) = value
"""

    BorderRightLineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the border right line style characteristic is overridden.

Get: BorderRightLineStyle(self: TableCellStyleOverrideOptions) -> bool

Set: BorderRightLineStyle(self: TableCellStyleOverrideOptions) = value
"""

    BorderTopLineStyle = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the border top line style characteristic is overridden.

Get: BorderTopLineStyle(self: TableCellStyleOverrideOptions) -> bool

Set: BorderTopLineStyle(self: TableCellStyleOverrideOptions) = value
"""

    Font = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the font name characteristic is overridden.

Get: Font(self: TableCellStyleOverrideOptions) -> bool

Set: Font(self: TableCellStyleOverrideOptions) = value
"""

    FontColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the font color characteristic is overridden.

Get: FontColor(self: TableCellStyleOverrideOptions) -> bool

Set: FontColor(self: TableCellStyleOverrideOptions) = value
"""

    FontSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the font size characteristic is overridden.

Get: FontSize(self: TableCellStyleOverrideOptions) -> bool

Set: FontSize(self: TableCellStyleOverrideOptions) = value
"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the horizontal alignment characteristic is overridden.

Get: HorizontalAlignment(self: TableCellStyleOverrideOptions) -> bool

Set: HorizontalAlignment(self: TableCellStyleOverrideOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TableCellStyleOverrideOptions) -> bool

"""

    Italics = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the italics characteristic is overridden.

Get: Italics(self: TableCellStyleOverrideOptions) -> bool

Set: Italics(self: TableCellStyleOverrideOptions) = value
"""

    TextOrientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the text orientation characteristic is overridden.

Get: TextOrientation(self: TableCellStyleOverrideOptions) -> bool

Set: TextOrientation(self: TableCellStyleOverrideOptions) = value
"""

    Underline = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the underline characteristic is overridden.

Get: Underline(self: TableCellStyleOverrideOptions) -> bool

Set: Underline(self: TableCellStyleOverrideOptions) = value
"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the vertical alignment characteristic is overridden.

Get: VerticalAlignment(self: TableCellStyleOverrideOptions) -> bool

Set: VerticalAlignment(self: TableCellStyleOverrideOptions) = value
"""



class TableData(object, IDisposable):
    """
    The TableData class is implemented to hold most of the data that describe
       the style of the rows, columns, and cells in a table.
    """
    def Dispose(self):
        """ Dispose(self: TableData) """
        pass

    def GetSectionData(self, *__args):
        """
        GetSectionData(self: TableData, sectionType: SectionType) -> TableSectionData
        
            Returns the pointer to the section data array element at the specified section 
             type.
        
        
            sectionType: The section type of section data array. If the integral value of the section 
             type is out of the boundary of section data array,
           null is returned.
        
        GetSectionData(self: TableData, nIndex: int) -> TableSectionData
        
            Returns the section data array element at the specified index.
        
            nIndex: The index of section data array. If the index is out of the boundary of section 
             data array,
           ll is returned.
        """
        pass

    def IsEqual(self, OtherElem):
        """
        IsEqual(self: TableData, OtherElem: TableData) -> bool
        
            Checks if this element is equal in value to the other element.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TableData, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    FreezeColumnsAndRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """set to true if the columns and rows should be unmovable by the slider grips

Get: FreezeColumnsAndRows(self: TableData) -> bool

Set: FreezeColumnsAndRows(self: TableData) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TableData) -> bool

"""

    NumberOfSections = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the number of items in section data array.

Get: NumberOfSections(self: TableData) -> int

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the table width in feet

Get: Width(self: TableData) -> float

Set: Width(self: TableData) = value
"""

    WidthInPixels = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the width of the panel schedule in pixels

Get: WidthInPixels(self: TableData) -> int

"""



class TableMergedCell(object, IDisposable):
    """
    The TableMergedCell class defines a merged area of the upper-left and lower-right of a table grid.
    
    TableMergedCell(top: int, left: int, bottom: int, right: int)
    TableMergedCell()
    """
    def Dispose(self):
        """ Dispose(self: TableMergedCell) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TableMergedCell, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, top=None, left=None, bottom=None, right=None):
        """
        __new__(cls: type, top: int, left: int, bottom: int, right: int)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Bottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies the row index of the bottom-right corner of a table grid.

Get: Bottom(self: TableMergedCell) -> int

Set: Bottom(self: TableMergedCell) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TableMergedCell) -> bool

"""

    Left = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies the column index of the top-left corner of a table grid.

Get: Left(self: TableMergedCell) -> int

Set: Left(self: TableMergedCell) = value
"""

    Right = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies the column index of the bottom-right corner of a table grid.

Get: Right(self: TableMergedCell) -> int

Set: Right(self: TableMergedCell) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies the row index of the top-left corner of a table grid.

Get: Top(self: TableMergedCell) -> int

Set: Top(self: TableMergedCell) = value
"""



class TableSectionData(object, IDisposable):
    """
    The TableSectionData class represents a serialized version of an instance of
       section table data. The class holds row, column and cell data.
    """
    def AllowOverrideCellStyle(self, nRow, nCol):
        """
        AllowOverrideCellStyle(self: TableSectionData, nRow: int, nCol: int) -> bool
        
            Identifies if the style can be overridden in the given cell.
            Returns: True if allow to override cell style.
        """
        pass

    def CanInsertColumn(self, nIndex):
        """
        CanInsertColumn(self: TableSectionData, nIndex: int) -> bool
        
            Verifies if a new column can be inserted at the given index.
        
            nIndex: An integer index.
            Returns: True if the column can be inserted, false otherwise.
        """
        pass

    def CanInsertRow(self, nIndex):
        """
        CanInsertRow(self: TableSectionData, nIndex: int) -> bool
        
            Verifies if a new row can be inserted at the given index.
            Returns: True if the row can be inserted, false otherwise.
        """
        pass

    def CanRemoveColumn(self, nIndex):
        """
        CanRemoveColumn(self: TableSectionData, nIndex: int) -> bool
        
            Verifies that if the column at the given index can be removed.
        
            nIndex: An integer index.
            Returns: True if the column can be removed, false otherwise.
        """
        pass

    def CanRemoveRow(self, nIndex):
        """
        CanRemoveRow(self: TableSectionData, nIndex: int) -> bool
        
            Verifies that if the row at the given index can be removed..
        
            nIndex: An integer index.
            Returns: True if the row can be removed, false otherwise
        """
        pass

    def ClearCell(self, nRow, nCol):
        """
        ClearCell(self: TableSectionData, nRow: int, nCol: int)
            Deletes text or image, or removes parameter of this cell.
        """
        pass

    def Dispose(self):
        """ Dispose(self: TableSectionData) """
        pass

    def GetCellCalculatedValue(self, *__args):
        """
        GetCellCalculatedValue(self: TableSectionData, nRow: int, nCol: int) -> TableCellCalculatedValueData
        
            Gets the calculated value for the specified cell
        GetCellCalculatedValue(self: TableSectionData, nCol: int) -> TableCellCalculatedValueData
        
            Gets the calculated value for the specified column
        """
        pass

    def GetCellCategoryId(self, *__args):
        """
        GetCellCategoryId(self: TableSectionData, nRow: int, nCol: int) -> ElementId
        
            Returns a cell's CategoryId and if no CategoryId exists for this cell,
           it 
             would come from the column.
           Associated with the paramId to find the correct 
             element.
        
        GetCellCategoryId(self: TableSectionData, nCol: int) -> ElementId
        
            Returns a column's ParamId
           Associated with the paramId to find the correct 
             element
        """
        pass

    def GetCellCombinedParameters(self, *__args):
        """
        GetCellCombinedParameters(self: TableSectionData, nRow: int, nCol: int) -> IList[TableCellCombinedParameterData]
        
            Returns an array of combined parameter data for the specified cell
        GetCellCombinedParameters(self: TableSectionData, nCol: int) -> IList[TableCellCombinedParameterData]
        
            Returns an array of combined parameter data for the specified column
        """
        pass

    def GetCellFormatOptions(self, *__args):
        """
        GetCellFormatOptions(self: TableSectionData, nRow: int, nCol: int, ccda: Document) -> FormatOptions
        
            Returns a cell's FormatOptions and if no FormatOptions exists for this cell,
          
              it would come from the column, or the row, or the section.
        
        GetCellFormatOptions(self: TableSectionData, nCol: int, ccda: Document) -> FormatOptions
        
            Returns a column's cell FormatOptions and if no FormatOptions exists for this 
             column,
           it would come from the section.
        """
        pass

    def GetCellParamId(self, *__args):
        """
        GetCellParamId(self: TableSectionData, nRow: int, nCol: int) -> ElementId
        
            Returns a cell's ParamId and if no ParamId exists for this cell,
           it would 
             come from the column
        
        GetCellParamId(self: TableSectionData, nCol: int) -> ElementId
        
            Returns a column's ParamId
        """
        pass

    def GetCellText(self, nRow, nCol):
        """
        GetCellText(self: TableSectionData, nRow: int, nCol: int) -> str
        
            Returns the text shown by this cell, if the cell's type is CellType.Text or 
             CellType.ParameterText.
        
        
            nRow: The cell row.
            nCol: The cell column.
            Returns: The text in the cell, or an empty string if the type if not CellType.Text or 
             CellType.ParameterText.
        """
        pass

    def GetCellType(self, *__args):
        """
        GetCellType(self: TableSectionData, nRow: int, nCol: int) -> CellType
        
            Returns a cell's Type and if no Type exists for this cell,
           it would come 
             from the column, or the row, or the section
        
        GetCellType(self: TableSectionData, nCol: int) -> CellType
        
            Returns a column's cell type and if no type exists for this column,
           it 
             would come from the section
        """
        pass

    def GetCellUnitType(self, nRow, nCol):
        """
        GetCellUnitType(self: TableSectionData, nRow: int, nCol: int) -> UnitType
        
            Gets the unit type of a cell, if applicable.
        
            nRow: The row index of the cell
            nCol: The column index of the cell
            Returns: The unit type, or UT_Undefined if the cell does not contain a number with units.
        """
        pass

    def GetColumnWidth(self, nCol):
        """
        GetColumnWidth(self: TableSectionData, nCol: int) -> float
        
            Returns a column's width in feet
        """
        pass

    def GetColumnWidthInPixels(self, nCol):
        """
        GetColumnWidthInPixels(self: TableSectionData, nCol: int) -> int
        
            This returns a column's width in pixels
        """
        pass

    def GetMergedCell(self, nRow, nCol):
        """
        GetMergedCell(self: TableSectionData, nRow: int, nCol: int) -> TableMergedCell
        
            Gets the whole merged cell that this cell is a part of.
        
            nRow: The cell row.
            nCol: The cell column.
        """
        pass

    def GetRowHeight(self, nRow):
        """
        GetRowHeight(self: TableSectionData, nRow: int) -> float
        
            Returns a row's height in feet
        """
        pass

    def GetRowHeightInPixels(self, nRow):
        """
        GetRowHeightInPixels(self: TableSectionData, nRow: int) -> int
        
            This returns a row's height in pixels
        """
        pass

    def GetTableCellStyle(self, nRow, nCol):
        """
        GetTableCellStyle(self: TableSectionData, nRow: int, nCol: int) -> TableCellStyle
        
            Returns a cell's style and if no style exists for this cell,
           it would come 
             from the column, or the section
        """
        pass

    def InsertColumn(self, index):
        """
        InsertColumn(self: TableSectionData, index: int)
            Inserts a new column at the specified index relative to the current set of 
             columns.
        
        
            index: An integer index.
        """
        pass

    def InsertImage(self, nRow, nColumn, imageSymbolId):
        """
        InsertImage(self: TableSectionData, nRow: int, nColumn: int, imageSymbolId: ElementId)
            Inserts a image in the given cell.
        
            nRow: The given row index.
            nColumn: The given column index.
            imageSymbolId: The element id of the image symbol.
        """
        pass

    def InsertRow(self, nIndex):
        """
        InsertRow(self: TableSectionData, nIndex: int)
            Inserts a row data at a specified index.
        
            nIndex: An integer index.
        """
        pass

    def IsAcceptableParamIdAndCategoryId(self, *__args):
        """
        IsAcceptableParamIdAndCategoryId(self: TableSectionData, paramId: ElementId, categoryId: ElementId) -> bool
        
            Identifies if the given parameter id and category id can be assigned to a cell 
             in this table.
        
            Returns: True if the ParamId and CategoryId are all acceptable.
        IsAcceptableParamIdAndCategoryId(self: TableSectionData, nRow: int, paramId: ElementId, categoryId: ElementId) -> bool
        
            Identifies if the given parameter id and category id can be assigned to a cell 
             in the given row in this table.
        
        
            nRow: row index
            Returns: True if the ParamId and CategoryId are all valid.
        """
        pass

    def IsCellFormattable(self, nRow, nCol):
        """
        IsCellFormattable(self: TableSectionData, nRow: int, nCol: int) -> bool
        
            Determines whether the cell is formattable or not
        
            nRow: The row index of the cell
            nCol: The column index of the cell
        """
        pass

    def IsCellOverridden(self, *__args):
        """
        IsCellOverridden(self: TableSectionData, nRow: int, nCol: int) -> bool
        
            Indicates if the cell is overridden or not.
        IsCellOverridden(self: TableSectionData, nCol: int) -> bool
        
            Indicates if the column is overridden or not.
        """
        pass

    def IsDataOutOfDate(self):
        """
        IsDataOutOfDate(self: TableSectionData) -> bool
        
            Indicates whether the data in this section is out of date.
            Returns: True if the data in this section is out of date, false otherwise.
        """
        pass

    def IsValidColumnNumber(self, nCol):
        """
        IsValidColumnNumber(self: TableSectionData, nCol: int) -> bool
        
            Verifies if the column number is valid.
        
            nCol: The column number.
            Returns: True if the column number is between FirstColumnNumber and LastColumnNumber, 
             false otherwise.
        """
        pass

    def IsValidImageSymbolId(self, imageSymbolId):
        """
        IsValidImageSymbolId(self: TableSectionData, imageSymbolId: ElementId) -> bool
        
            Identifies if the element id represents a valid ImageSymbol element.
        
            imageSymbolId: The element id of the image symbol.
        """
        pass

    def IsValidRowNumber(self, nRow):
        """
        IsValidRowNumber(self: TableSectionData, nRow: int) -> bool
        
            Verifies if the row number is valid.
        
            nRow: The row number.
            Returns: True if the row number is between FirstRowNumber and LastRowNumber, false 
             otherwise.
        """
        pass

    def MergeCells(self, mergedCell):
        """
        MergeCells(self: TableSectionData, mergedCell: TableMergedCell)
            Merges cells for the given area.
        """
        pass

    def RefreshData(self):
        """
        RefreshData(self: TableSectionData) -> bool
        
            Rebuilds the data in this section if it is out of date.
            Returns: True if the data is up to date after the refresh.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TableSectionData, disposing: bool) """
        pass

    def RemoveColumn(self, nIndex):
        """
        RemoveColumn(self: TableSectionData, nIndex: int)
            Removes a column data at a specified index.
        
            nIndex: An integer index
        """
        pass

    def RemoveRow(self, nIndex):
        """
        RemoveRow(self: TableSectionData, nIndex: int)
            Removes a row data at a specified index.
        
            nIndex: An integer index.
        """
        pass

    def ResetCellOverride(self, *__args):
        """
        ResetCellOverride(self: TableSectionData, nRow: int, nCol: int)
            Resets the override of the cell.
        ResetCellOverride(self: TableSectionData, nCol: int)
            Resets the override of the column.
        """
        pass

    def SetCellCalculatedValue(self, *__args):
        """
        SetCellCalculatedValue(self: TableSectionData, nRow: int, nCol: int, pCalcValue: TableCellCalculatedValueData)
            Allows the caller to set the calculated value for a specified cell
        SetCellCalculatedValue(self: TableSectionData, nCol: int, pCalcValue: TableCellCalculatedValueData)
            Allows the caller to set the calculated value for a specified column
        """
        pass

    def SetCellCombinedParameters(self, *__args):
        """ SetCellCombinedParameters(self: TableSectionData, nRow: int, nCol: int, paramData: IList[TableCellCombinedParameterData])SetCellCombinedParameters(self: TableSectionData, nCol: int, paramData: IList[TableCellCombinedParameterData]) """
        pass

    def SetCellFormatOptions(self, nRow, nCol, options):
        """
        SetCellFormatOptions(self: TableSectionData, nRow: int, nCol: int, options: FormatOptions)
            Sets a cell's FormatOptions.
        
            nRow: The row index of the cell
            nCol: The column index of the cell
            options: The format option to assign
        """
        pass

    def SetCellParamIdAndCategoryId(self, *__args):
        """
        SetCellParamIdAndCategoryId(self: TableSectionData, nRow: int, nCol: int, paramId: ElementId, categoryId: ElementId)
            Sets a cell's category and parameter Id
        SetCellParamIdAndCategoryId(self: TableSectionData, nCol: int, paramId: ElementId, categoryId: ElementId)
            Sets a column's category and parameter Id
        """
        pass

    def SetCellStyle(self, *__args):
        """
        SetCellStyle(self: TableSectionData, nRow: int, nCol: int, Style: TableCellStyle)
            Sets a cell's style
        SetCellStyle(self: TableSectionData, nCol: int, Style: TableCellStyle)
            Sets a column's style.
        SetCellStyle(self: TableSectionData, Style: TableCellStyle)
            Sets a section's style
        """
        pass

    def SetCellText(self, nRow, nCol, text):
        """
        SetCellText(self: TableSectionData, nRow: int, nCol: int, text: str)
            Sets a cell's to display the specified text.
        
            nRow: The cell row.
            nCol: The cell column.
            text: The text to show in the cell.
        """
        pass

    def SetCellType(self, *__args):
        """
        SetCellType(self: TableSectionData, nRow: int, nCol: int, type: CellType)
            Sets a cell's Type
        SetCellType(self: TableSectionData, nCol: int, type: CellType)
            Sets a column's cell type
        """
        pass

    def SetColumnWidth(self, nCol, width):
        """
        SetColumnWidth(self: TableSectionData, nCol: int, width: float)
            Sets a column's width in feet
        """
        pass

    def SetColumnWidthInPixels(self, nCol, width):
        """
        SetColumnWidthInPixels(self: TableSectionData, nCol: int, width: int)
            This sets a column's width in pixels
        """
        pass

    def SetMergedCell(self, nRow, nCol, mergedCell):
        """
        SetMergedCell(self: TableSectionData, nRow: int, nCol: int, mergedCell: TableMergedCell)
            Sets the merged cell that this cell is a part of.
        
            nRow: The cell row.
            nCol: The cell column.
        """
        pass

    def SetRowHeight(self, nRow, height):
        """
        SetRowHeight(self: TableSectionData, nRow: int, height: float)
            Sets a row's height in feet
        """
        pass

    def SetRowHeightInPixels(self, nRow, height):
        """
        SetRowHeightInPixels(self: TableSectionData, nRow: int, height: int)
            This sets a row's height in pixels
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    FirstColumnNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The first column in this section of the table.

Get: FirstColumnNumber(self: TableSectionData) -> int

"""

    FirstRowNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The first row in this section of the table.

Get: FirstRowNumber(self: TableSectionData) -> int

"""

    HideSection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not the section is hidden.

Get: HideSection(self: TableSectionData) -> bool

Set: HideSection(self: TableSectionData) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TableSectionData) -> bool

"""

    LastColumnNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The last column in this section of the table.

Get: LastColumnNumber(self: TableSectionData) -> int

"""

    LastRowNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The last row in this section of the table.

Get: LastRowNumber(self: TableSectionData) -> int

"""

    NeedsRefresh = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the table data need to refresh.

Get: NeedsRefresh(self: TableSectionData) -> bool

Set: NeedsRefresh(self: TableSectionData) = value
"""

    NumberOfColumns = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the number of items in column data array.

Get: NumberOfColumns(self: TableSectionData) -> int

Set: NumberOfColumns(self: TableSectionData) = value
"""

    NumberOfRows = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets or sets the number of items in row data array.

Get: NumberOfRows(self: TableSectionData) -> int

Set: NumberOfRows(self: TableSectionData) = value
"""



class TableView(View, IDisposable):
    """
    This represents a view that shows a table.
       Most of the layout data for the table is contained in the TableData class.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetAvailableParameterCategories(self, sectionType, row):
        """
        GetAvailableParameterCategories(self: TableView, sectionType: SectionType, row: int) -> IList[ElementId]
        
            Get all available parameter categories.
        
            sectionType: The section the row lies in.
            row: The row.
            Returns: The available parameter categories.
        """
        pass

    @staticmethod
    def GetAvailableParameters(cda, categoryId):
        """
        GetAvailableParameters(cda: Document, categoryId: ElementId) -> IList[ElementId]
        
            Gets a list of valid parameters for the specified category that can be used in 
             the table view.
        
        
            cda: The document.
            categoryId: The specified element category id.
            Returns: The IDs of all valid parameters.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: View, view: View) -> BoundingBoxXYZ """
        pass

    def GetCalculatedValueName(self, sectionType, row, column):
        """
        GetCalculatedValueName(self: TableView, sectionType: SectionType, row: int, column: int) -> str
        
            Gets the calculated value name for a cell from the template view.
        
            sectionType: The section type.
            row: The row.
            column: The column.
            Returns: The name of the calculated value.
        """
        pass

    def GetCalculatedValueText(self, sectionType, row, column):
        """
        GetCalculatedValueText(self: TableView, sectionType: SectionType, row: int, column: int) -> str
        
            Gets the calculated value text for a cell from the instance view.
        
            sectionType: The section type.
            row: The row.
            column: The column.
            Returns: The calculated value text.
        """
        pass

    def GetCellText(self, sectionType, row, column):
        """
        GetCellText(self: TableView, sectionType: SectionType, row: int, column: int) -> str
        
            Gets the cell's text based on its type
        
            sectionType: The requested section type
            row: Row Number in the Section
            column: Column Number in the Section
            Returns: The text for the given cell
        """
        pass

    def IsValidSectionType(self, sectionType):
        """
        IsValidSectionType(self: TableView, sectionType: SectionType) -> bool
        
            Identifies if the section type is valid for this view.
        
            sectionType: The section type.
            Returns: True if the Section Type is valid, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    MaximumColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the maximum column width

Get: MaximumColumnWidth(self: TableView) -> int

"""

    MaximumGridWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the allowed maximum grid width

Get: MaximumGridWidth(self: TableView) -> int

"""

    MaximumRowHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the maximum row height

Get: MaximumRowHeight(self: TableView) -> int

"""

    MinimumColumnWidth = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the minimum column width

Get: MinimumColumnWidth(self: TableView) -> int

"""

    MinimumRowHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the minimum row height

Get: MinimumRowHeight(self: TableView) -> int

"""

    TargetId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """the element id of the element that is being viewed

Get: TargetId(self: TableView) -> ElementId

Set: TargetId(self: TableView) = value
"""



class TagMode(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing tag mode that are supported for IndependentTags.
    
    enum TagMode, values: TM_ADDBY_CATEGORY (0), TM_ADDBY_MATERIAL (2), TM_ADDBY_MULTICATEGORY (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    TM_ADDBY_CATEGORY = None
    TM_ADDBY_MATERIAL = None
    TM_ADDBY_MULTICATEGORY = None
    value__ = None


class TagOrientation(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing tag orientation options that are supported by IndependentTags.
    
    enum TagOrientation, values: Horizontal (0), Vertical (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Horizontal = None
    value__ = None
    Vertical = None


class TemporaryViewMode(Enum, IComparable, IFormattable, IConvertible):
    """
    Enumeration to represent the various temporary view modes a view can be in.
    
    enum TemporaryViewMode, values: ExplodedView (6), PreviewFamilyVisibility (8), Raytrace (5), RevealConstraints (7), RevealHiddenElements (1), TemporaryHideIsolate (2), TemporaryViewProperties (4), WorksharingDisplay (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    ExplodedView = None
    PreviewFamilyVisibility = None
    Raytrace = None
    RevealConstraints = None
    RevealHiddenElements = None
    TemporaryHideIsolate = None
    TemporaryViewProperties = None
    value__ = None
    WorksharingDisplay = None


class TemporaryViewModes(APIObject, IDisposable):
    """ A data structure containing data related to temporary view modes. """
    def DeactivateAllModes(self):
        """
        DeactivateAllModes(self: TemporaryViewModes)
            Deactivates all temporary modes that are currently active.
        """
        pass

    def DeactivateMode(self, mode):
        """
        DeactivateMode(self: TemporaryViewModes, mode: TemporaryViewMode)
            Deactivates the given temporary mode.
        
            mode: The mode to deactivate
        """
        pass

    def Dispose(self):
        """ Dispose(self: TemporaryViewModes, A_0: bool) """
        pass

    def GetCaption(self, mode):
        """
        GetCaption(self: TemporaryViewModes, mode: TemporaryViewMode) -> str
        
            A text caption to use for the given mode.
        
            mode: The mode to get a caption for.
            Returns: Text of the caption. The text is localized.
        """
        pass

    def IsModeActive(self, mode):
        """
        IsModeActive(self: TemporaryViewModes, mode: TemporaryViewMode) -> bool
        
            Tests whether a given mode is currently active or not.
        
            mode: The mode being tested
        """
        pass

    def IsModeAvailable(self, mode):
        """
        IsModeAvailable(self: TemporaryViewModes, mode: TemporaryViewMode) -> bool
        
            Tests whether a temporary view mode is currently available in the associated 
             view.
        
        
            mode: The mode to evaluate
            Returns: True of the temporary mode is currently available in the associated view.
        """
        pass

    def IsModeEnabled(self, mode):
        """
        IsModeEnabled(self: TemporaryViewModes, mode: TemporaryViewMode) -> bool
        
            Tests whether a temporary view mode is currently enabled in the associated view.
        
            mode: The mode to evaluate
            Returns: True if the requested mode is available and enabled in the associated view; 
             False otherwise.
        """
        pass

    def IsValidState(self, state):
        """
        IsValidState(self: TemporaryViewModes, state: PreviewFamilyVisibilityMode) -> bool
        
            Tests whether the given state is valid for the associated view and the context 
             the view is currently in.
        
        
            state: A state of the PreviewFamilyVisibilityMode
            Returns: Returns True if the state is applicable for the view; False otherwise.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TemporaryViewModes, disposing: bool)ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TemporaryViewModes) -> bool

"""

    PreviewFamilyVisibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current state of the PreviewFamilyVisibility mode in the associated view.

Get: PreviewFamilyVisibility(self: TemporaryViewModes) -> PreviewFamilyVisibilityMode

Set: PreviewFamilyVisibility(self: TemporaryViewModes) = value
"""

    RevealConstraints = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current state of the RevealConstraints mode in the associated view.

Get: RevealConstraints(self: TemporaryViewModes) -> bool

Set: RevealConstraints(self: TemporaryViewModes) = value
"""

    RevealHiddenElements = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current state of the RevealHiddenElements mode in the associated view.

Get: RevealHiddenElements(self: TemporaryViewModes) -> bool

Set: RevealHiddenElements(self: TemporaryViewModes) = value
"""

    WorksharingDisplay = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current state of the WorksharingDisplay mode in the associated view.

Get: WorksharingDisplay(self: TemporaryViewModes) -> WorksharingDisplayMode

Set: WorksharingDisplay(self: TemporaryViewModes) = value
"""


    PreviewFamilyVisibilityDefaultOnState = False
    PreviewFamilyVisibilityDefaultUncutState = False


class TessellatedBuildIssue(object, IDisposable):
    """
    Types of issues encountered while constructing geometrical objects
       from the tessellated face sets.
    """
    def Dispose(self):
        """ Dispose(self: TessellatedBuildIssue) """
        pass

    def GetIssueDescription(self):
        """
        GetIssueDescription(self: TessellatedBuildIssue) -> str
        
            Gets a string describing the issue. If the issue does
           not present a 
             problem, then an empty string is returned.
        
            Returns: Description of the issue.
        """
        pass

    def IsValidIssue(self):
        """
        IsValidIssue(self: TessellatedBuildIssue) -> bool
        
            Reports whether the issue is well-formed, valid and does
           describe a real 
             problem.
        
            Returns: Whether the issue is well formed and does describe a real problem.
        """
        pass

    def MakesDataUnusable(self):
        """
        MakesDataUnusable(self: TessellatedBuildIssue) -> bool
        
            Reports whether this issue makes some data unusable ('true')
           or is only 
             shows that data format conventions were broken,
           but the data are still 
             usable (false).
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TessellatedBuildIssue, disposing: bool) """
        pass

    def ReportIssueToDataSource(self):
        """
        ReportIssueToDataSource(self: TessellatedBuildIssue) -> bool
        
            Reports whether this issue should be reported to the
           company which wrote 
             the software which produced the face set data
           (true), or to Autodesk 
             (false).
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TessellatedBuildIssue) -> bool

"""

    NumberEncountered = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """How many times this issue was encountered in its face set
   during the face set processing. This number can be less
   than the total number of such issues in the face set, as
   the face set processing could be aborted due to
   the presence of the issues which could not be handled.

Get: NumberEncountered(self: TessellatedBuildIssue) -> int

"""



class TessellatedBuildIssueType(Enum, IComparable, IFormattable, IConvertible):
    """
    Issues, which can be encountered while building a polymesh,
       or a shell, or a solid from data, describing
       tessellated shapes.
    
    enum TessellatedBuildIssueType, values: AllFine (0), DegenOriginalLoop (18), EdgeTraversalForFlip (24), EdgeTwiceUsedByFace (20), EmptyFace (1), EmptyLoop (2), FaceWithIslands (15), InconsistentInnerOuterOriginalLoopCCW (19), InconsitentMultiEdgeTraversalForFlip (25), InternalError (28), InternalLightError (29), InternalMissingError (30), InternalUtilityError (27), IntersectingOriginalLoops (14), LoopOnBestFitSelfIntersects (13), LostAllLoops (9), LostTooManyLoopVertices (6), NonManifoldEdge (21), NonPlanarFace (10), NotSetYet (32), NumberOfIssueTypes (33), OriginalLoopGeomAcuteAngle (7), OriginalLoopMeshAcuteAngle (8), OriginalLoopsProximity (16), OriginalPointsTooFarFromTheirPlane (11), OuterLoopIsNotFirst (17), OverlappingAdjacentFaces (22), PartitionPointsTooFarFromTrueEdge (23), TooFewOriginalVertices (3), TooShortOriginalLoopGeomSegment (5), TooShortOriginalLoopMeshSegment (4), TooSmallVertexSegementDistInFinalLoop (26), TooSmallVertexSegementDistInOriginalLoop (12), UnarticulatedNonManifoldEdge (31)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AllFine = None
    DegenOriginalLoop = None
    EdgeTraversalForFlip = None
    EdgeTwiceUsedByFace = None
    EmptyFace = None
    EmptyLoop = None
    FaceWithIslands = None
    InconsistentInnerOuterOriginalLoopCCW = None
    InconsitentMultiEdgeTraversalForFlip = None
    InternalError = None
    InternalLightError = None
    InternalMissingError = None
    InternalUtilityError = None
    IntersectingOriginalLoops = None
    LoopOnBestFitSelfIntersects = None
    LostAllLoops = None
    LostTooManyLoopVertices = None
    NonManifoldEdge = None
    NonPlanarFace = None
    NotSetYet = None
    NumberOfIssueTypes = None
    OriginalLoopGeomAcuteAngle = None
    OriginalLoopMeshAcuteAngle = None
    OriginalLoopsProximity = None
    OriginalPointsTooFarFromTheirPlane = None
    OuterLoopIsNotFirst = None
    OverlappingAdjacentFaces = None
    PartitionPointsTooFarFromTrueEdge = None
    TooFewOriginalVertices = None
    TooShortOriginalLoopGeomSegment = None
    TooShortOriginalLoopMeshSegment = None
    TooSmallVertexSegementDistInFinalLoop = None
    TooSmallVertexSegementDistInOriginalLoop = None
    UnarticulatedNonManifoldEdge = None
    value__ = None


class TessellatedFace(object, IDisposable):
    """
    Defines a planar face bounded by a polyline in 3d space. A face
       consists of a single connected component and can have holes.
    
    TessellatedFace(allLoopVertices: IList[IList[XYZ]], materialId: ElementId)
    TessellatedFace(outerLoopVertices: IList[XYZ], materialId: ElementId)
    """
    def Dispose(self):
        """ Dispose(self: TessellatedFace) """
        pass

    def GetBoundaryLoops(self):
        """
        GetBoundaryLoops(self: TessellatedFace) -> IList[IList[XYZ]]
        
            Get loops bounding the face.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TessellatedFace, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, allLoopVertices: IList[IList[XYZ]], materialId: ElementId)
        __new__(cls: type, outerLoopVertices: IList[XYZ], materialId: ElementId)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TessellatedFace) -> bool

"""

    MaterialId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Material of the face.

Get: MaterialId(self: TessellatedFace) -> ElementId

Set: MaterialId(self: TessellatedFace) = value
"""



class TessellatedShapeBuilder(ShapeBuilder, IDisposable):
    """
    A class that permits structured building of geometry or
       a mesh from a collection of connected faces.
       Contains all closed face sets and custom precisions.
    
    TessellatedShapeBuilder()
    """
    def AddFace(self, face):
        """
        AddFace(self: TessellatedShapeBuilder, face: TessellatedFace)
            Adds a face to the currently open connected face set.
        
            face: Face to add. The 'face' parameter can be added only once, as its
           boundary 
             loops will be cleared while adding and 'face' will become unusable.
        """
        pass

    def AreTargetAndFallbackCompatible(self, target, fallback):
        """
        AreTargetAndFallbackCompatible(self: TessellatedShapeBuilder, target: TessellatedShapeBuilderTarget, fallback: TessellatedShapeBuilderFallback) -> bool
        
            Checks whether this combination of fallback and target parameters
           can be 
             used as a valid combination of inputs.
        
        
            target: What kind of geometrical objects should be built.
            fallback: What should be done if a geometrical object described by 'target'
           parameter 
             cannot be built using all data from all stored face sets.
        
            Returns: True if the combination of fallback and target are a valid combination, false
         
               otherwise.
        """
        pass

    def Build(self):
        """
        Build(self: TessellatedShapeBuilder)
            Builds the designated geometrical objects from the stored face sets. Stores the 
             result in this TessellatedShapeBuilder object.
        """
        pass

    def CancelConnectedFaceSet(self):
        """
        CancelConnectedFaceSet(self: TessellatedShapeBuilder)
            Cancels the current face set - i.e., all data from it will be lost
           and the 
             builder will have no open connected face set anymore.
        """
        pass

    def Clear(self):
        """
        Clear(self: TessellatedShapeBuilder)
            Erases all face set and clears the logs, if any.
        """
        pass

    def CloseConnectedFaceSet(self):
        """
        CloseConnectedFaceSet(self: TessellatedShapeBuilder)
            Closes the currently open connected face set.
        """
        pass

    @staticmethod
    def CreateMeshByExtrusion(profileLoops, extrusionDirection, extrusionDistance, materialId):
        """ CreateMeshByExtrusion(profileLoops: IList[CurveLoop], extrusionDirection: XYZ, extrusionDistance: float, materialId: ElementId) -> MeshFromGeometryOperationResult """
        pass

    def Dispose(self):
        """ Dispose(self: ShapeBuilder, A_0: bool) """
        pass

    def DoesFaceHaveEnoughLoopsAndVertices(self, face):
        """
        DoesFaceHaveEnoughLoopsAndVertices(self: TessellatedShapeBuilder, face: TessellatedFace) -> bool
        
            Checks whether 'face' has enough loops and vertcies to be valid.
        
            face: The face to check.
        """
        pass

    def GetBuildResult(self):
        """
        GetBuildResult(self: TessellatedShapeBuilder) -> TessellatedShapeBuilderResult
        
            Get the built geometry, build status and other data stored in 
             TessellatedShapeBuilderResult. Clears the stored data.
        """
        pass

    def OpenConnectedFaceSet(self, isSolid):
        """
        OpenConnectedFaceSet(self: TessellatedShapeBuilder, isSolid: bool)
            Opens a new connected face set.
        
            isSolid: Whether the face set, which is being open, should be build as a solid or as a 
             void.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ShapeBuilder, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Fallback = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines acceptable fallback if the desired type of geometry can't be built.

Get: Fallback(self: TessellatedShapeBuilder) -> TessellatedShapeBuilderFallback

Set: Fallback(self: TessellatedShapeBuilder) = value
"""

    GraphicsStyleId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Optional - if set, the built geometry will use that graphics style.

Get: GraphicsStyleId(self: TessellatedShapeBuilder) -> ElementId

Set: GraphicsStyleId(self: TessellatedShapeBuilder) = value
"""

    IsFaceSetOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Flag whether the current set of connected faces is open and
   additional tessellation faces can be added to it.

Get: IsFaceSetOpen(self: TessellatedShapeBuilder) -> bool

"""

    LogInteger = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Integer value used for logging, if it is performed. Usually
   the number of the face set(s) in the IFC file, from which they
   are imported. Any value is acceptable.

Get: LogInteger(self: TessellatedShapeBuilder) -> int

Set: LogInteger(self: TessellatedShapeBuilder) = value
"""

    LogString = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """String used for logging, if any. Usually the name of the file from which
   face sets were imported.

Get: LogString(self: TessellatedShapeBuilder) -> str

Set: LogString(self: TessellatedShapeBuilder) = value
"""

    NumberOfCompletedFaceSets = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Number of completed face sets.

Get: NumberOfCompletedFaceSets(self: TessellatedShapeBuilder) -> int

"""

    OwnerInfo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """String used for logging, if any. Usually describes the element or object, which
   either defined or will own the geoemtrical objects to be built.

Get: OwnerInfo(self: TessellatedShapeBuilder) -> str

Set: OwnerInfo(self: TessellatedShapeBuilder) = value
"""

    Target = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Requests the type of geometry to be built.

Get: Target(self: TessellatedShapeBuilder) -> TessellatedShapeBuilderTarget

Set: Target(self: TessellatedShapeBuilder) = value
"""



class TessellatedShapeBuilderFallback(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes what  TessellatedShapeBuilder function
       should do, if it cannot build a requested Autodesk.Revit.DB.TessellatedShapeBuilderTarget.
    
    enum TessellatedShapeBuilderFallback, values: Abort (0), Mesh (2), Salvage (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Abort = None
    Mesh = None
    Salvage = None
    value__ = None


class TessellatedShapeBuilderOutcome(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the outcome of TessellatedShapeBuilder attempt
       to build geometrical objects.
    
    enum TessellatedShapeBuilderOutcome, values: Mesh (1), Mixed (2), Nothing (3), Sheet (5), Solid (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Mesh = None
    Mixed = None
    Nothing = None
    Sheet = None
    Solid = None
    value__ = None


class TessellatedShapeBuilderResult(object, IDisposable):
    """
    Describes what TessellatedShapeBuilder has
       construct.
    """
    def Dispose(self):
        """ Dispose(self: TessellatedShapeBuilderResult) """
        pass

    def GetGeometricalObjects(self):
        """
        GetGeometricalObjects(self: TessellatedShapeBuilderResult) -> IList[GeometryObject]
        
            When called the first time, returns geometrical objects which were built.
           
             Later calls will throw exceptions.
        
            Returns: Geometrical object which were built.
        """
        pass

    def GetIssuesForFaceSet(self, setIndex):
        """
        GetIssuesForFaceSet(self: TessellatedShapeBuilderResult, setIndex: int) -> IList[TessellatedBuildIssue]
        
            Returns the array of issues encountered while processing
           a face set with 
             index 'setIndex'.
        
        
            setIndex: Index of the face set.
            Returns: Array of issues encountered while processing a face set
           with index 
             'setIndex'.
        """
        pass

    def GetNumberOfFaceSets(self):
        """
        GetNumberOfFaceSets(self: TessellatedShapeBuilderResult) -> int
        
            Gets number of face sets for which 'this' result was obtained.
            Returns: The number of face sets.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TessellatedShapeBuilderResult, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AreObjectsAvailable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Shows whether 'issues' still contains the original data or whether
   these data have already been relinquished by 'getGeometricalObjects'.
   The former is true, the later is false.

Get: AreObjectsAvailable(self: TessellatedShapeBuilderResult) -> bool

"""

    HasInvalidData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether there were any inconsistencies in the face sets,
   stored in the tessellated shape builder while building
   geometrical objects.

Get: HasInvalidData(self: TessellatedShapeBuilderResult) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TessellatedShapeBuilderResult) -> bool

"""

    Outcome = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """What kinds of geometrical objects were built.

Get: Outcome(self: TessellatedShapeBuilderResult) -> TessellatedShapeBuilderOutcome

"""



class TessellatedShapeBuilderTarget(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes what TessellatedShapeBuilder
       should generate, if possible.
    
    enum TessellatedShapeBuilderTarget, values: AnyGeometry (1), Mesh (2), Solid (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AnyGeometry = None
    Mesh = None
    Solid = None
    value__ = None


class TextAlignFlags(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all the Text align flags.
    
    enum TextAlignFlags, values: TEF_ALIGN_BOTTOM (2048), TEF_ALIGN_CENTER (128), TEF_ALIGN_LEFT (64), TEF_ALIGN_MIDDLE (1024), TEF_ALIGN_RIGHT (256), TEF_ALIGN_TOP (512)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    TEF_ALIGN_BOTTOM = None
    TEF_ALIGN_CENTER = None
    TEF_ALIGN_LEFT = None
    TEF_ALIGN_MIDDLE = None
    TEF_ALIGN_RIGHT = None
    TEF_ALIGN_TOP = None
    value__ = None


class TextAlignMask(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all the Text align mask.
    
    enum TextAlignMask, values: horzAlignMask (448), vertAlignMask (3584)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    horzAlignMask = None
    value__ = None
    vertAlignMask = None


class TextBaselineStyle(Enum, IComparable, IFormattable, IConvertible):
    """
    Supported styles of text position relative to the normal baseline.
    
    enum TextBaselineStyle, values: Normal (0), Subscript (1), Superscript (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Normal = None
    Subscript = None
    Superscript = None
    value__ = None


class TextElement(Element, IDisposable):
    """ Base class representing text elements in Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetMaximumAllowedWidth(cdda=None, typeId=None):
        """
        GetMaximumAllowedWidth(self: TextElement) -> float
        
            Returns the maximum width the text element can be assigned.
            Returns: The maximum allowed width in paper space [ft].
        GetMaximumAllowedWidth(cdda: Document, typeId: ElementId) -> float
        
            Returns the maximum width the text element can be created with.
        
            cdda: A document containing the new text element's type
            typeId: Id of the text type
            Returns: The maximum allowed width in paper space [ft].
        """
        pass

    @staticmethod
    def GetMinimumAllowedWidth(cdda=None, typeId=None):
        """
        GetMinimumAllowedWidth(self: TextElement) -> float
        
            Returns the minimum width the text element can be assigned.
            Returns: The minimum allowed width in paper space [ft].
        GetMinimumAllowedWidth(cdda: Document, typeId: ElementId) -> float
        
            Returns the minimum width a text element can be created with.
        
            cdda: A document containing the new text element's type
            typeId: Id of the text type
            Returns: The minimum allowed width in paper space [ft].
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BaseDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Direction of the base line of the text element.

Get: BaseDirection(self: TextElement) -> XYZ

"""

    Coord = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Position of the text (in model coordinates.)

Get: Coord(self: TextElement) -> XYZ

Set: Coord(self: TextElement) = value
"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Height of the area of the text content.

Get: Height(self: TextElement) -> float

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Horizontal alignment of the text content within the text area of the element.

Get: HorizontalAlignment(self: TextElement) -> HorizontalTextAlignment

Set: HorizontalAlignment(self: TextElement) = value
"""

    IsTextWrappingActive = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A flag identifying whether text-wrapping is currently active in this text element or not.

Get: IsTextWrappingActive(self: TextElement) -> bool

"""

    KeepRotatedTextReadable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A flag to control how text behaves inside a rotated text element.

Get: KeepRotatedTextReadable(self: TextElement) -> bool

Set: KeepRotatedTextReadable(self: TextElement) = value
"""

    Symbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the type of the TextElement object.

Get: Symbol(self: TextElement) -> TextElementType

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The content of the element as a plain string stripped of all formating.

Get: Text(self: TextElement) -> str

Set: Text(self: TextElement) = value
"""

    UpDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Direction along the vertical axis of letters of the text note.

Get: UpDirection(self: TextElement) -> XYZ

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Vertical alignment of the text content within the text area of the element.

Get: VerticalAlignment(self: TextElement) -> VerticalTextAlignment

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Width of the area of the text content.

Get: Width(self: TextElement) -> float

Set: Width(self: TextElement) = value
"""



class TextElementBackground(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all the background mode for the built-in parameter TEXT_BACKGROUND.
    
    enum TextElementBackground, values: TBGR_OPAQUE (0), TBGR_TRANSPARENT (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    TBGR_OPAQUE = None
    TBGR_TRANSPARENT = None
    value__ = None


class TextElementType(LineAndTextAttrSymbol, IDisposable):
    """ An object that represents a text style. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class TextListStyle(Enum, IComparable, IFormattable, IConvertible):
    """
    Supported styles of text list paragraphs.
    
    enum TextListStyle, values: Bullet (1), LetterLowercase (3), LetterUppercase (4), None (0), NumberArabic (2), NumberRomanLowercase (5), NumberRomanUppercase (6)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Bullet = None
    LetterLowercase = None
    LetterUppercase = None
    None = None
    NumberArabic = None
    NumberRomanLowercase = None
    NumberRomanUppercase = None
    value__ = None


class TextNode(RenderNode, IDisposable):
    """ This is a class representing a text annotation object in a model-exporting process. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def GetFormattedText(self):
        """
        GetFormattedText(self: TextNode) -> FormattedText
        
            Returns an Autodesk.Revit.DB.FormattedText object that contains text and 
             associated formatting of this TextNode.
        
            Returns: The object that contains the text and associated formatting of of the text in 
             this text note.
        """
        pass

    def GetFormattedTextRuns(self):
        """
        GetFormattedTextRuns(self: TextNode) -> IList[FormattedTextRun]
        
            Returns a list of separated runs of formatted text.
            Returns: A collection of instances of Autodesk.Revit.DB.FormattedTextRun.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BaseDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Direction of the base line of the text object in model space.

Get: BaseDirection(self: TextNode) -> XYZ

"""

    Color = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the text.

Get: Color(self: TextNode) -> Color

"""

    FontHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Height [ft] of the text font, in model space.

Get: FontHeight(self: TextNode) -> float

"""

    FontName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the text font.

Get: FontName(self: TextNode) -> str

"""

    Height = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Height [ft] of the area of the text content in model space.

Get: Height(self: TextNode) -> float

"""

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates default horizontal alignment of the text.

Get: HorizontalAlignment(self: TextNode) -> HorizontalTextAlignment

"""

    IsBold = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the default formatting is set to bold text.

Get: IsBold(self: TextNode) -> bool

"""

    IsForRightToLeftReading = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the text uses Right-To-Left reading order.

Get: IsForRightToLeftReading(self: TextNode) -> bool

"""

    IsItalic = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the default formatting is set to italic text.

Get: IsItalic(self: TextNode) -> bool

"""

    IsKeptReadable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates text behavior inside a rotated text object.

Get: IsKeptReadable(self: TextNode) -> bool

"""

    IsTransparent = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the text background is transparent or opaque.

Get: IsTransparent(self: TextNode) -> bool

"""

    IsUnderlined = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the default formatting is set to underlined text.

Get: IsUnderlined(self: TextNode) -> bool

"""

    Position = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Position of the text in model coordinates.

Get: Position(self: TextNode) -> XYZ

"""

    TabSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The size [ft] of the interval between tab stops, in model space.

Get: TabSize(self: TextNode) -> float

"""

    Text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The content of the text annotation as a plain string stripped of all formatting.

Get: Text(self: TextNode) -> str

"""

    TextSize = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Height [ft] of the text in model space.

Get: TextSize(self: TextNode) -> float

"""

    UpDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Direction along the vertical axis of letters of the text object in model space.

Get: UpDirection(self: TextNode) -> XYZ

"""

    VerticalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates default vertical alignment of the text.

Get: VerticalAlignment(self: TextNode) -> VerticalTextAlignment

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Width [ft] of the area of the text content in model space.

Get: Width(self: TextNode) -> float

"""

    WidthScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Scale applied to the width of the text.

Get: WidthScale(self: TextNode) -> float

"""



class TextNote(TextElement, IDisposable):
    """ A class representing text note annotations in Revit. """
    def AddLeader(self, leaderType):
        """
        AddLeader(self: TextNote, leaderType: TextNoteLeaderTypes) -> Leader
        
            Adds a leader to the text note.
        
            leaderType: Type of the leader being added.
            Returns: The newly added leader.
        """
        pass

    @staticmethod
    def Create(document, viewId, position, *__args):
        """
        Create(document: Document, viewId: ElementId, position: XYZ, text: str, options: TextNoteOptions) -> TextNote
        
            Creates a new unwrapped text note element with the given properties.
        
            document: A valid Revit document that is currently modifiable (i.e. with an open 
             transaction).
        
            viewId: Id of the graphic view in which the note is to be created.
            position: A model position of the new note.
           Note that the position's relation to the 
             text's bounding box depends on the requested text alignment
           (set via the 
             Options argument). It will be the box' top-left corner for a left-aligned text,
             
           the top-right corner for a right-aligned text, and middle-top point if the 
             text is to be centered.
        
            text: Text to populate the text note with.
            options: Options to control behavior and appearance of the text note.
            Returns: The newly created text note.
        Create(document: Document, viewId: ElementId, position: XYZ, text: str, typeId: ElementId) -> TextNote
        
            Creates a new unwrapped TextNote element with the given properties.
        
            document: A valid Revit document that is currently modifiable (i.e. with an open 
             transaction).
        
            viewId: Id of the graphic view in which the note is to be created.
            position: A model position of the new note.
           For a left-aligned text (default), the 
             origin is set at the top-left corner of the note's bounding box.
        
            text: Text to populate the text note with.
            typeId: Id of the text type to use for the new text note.
            Returns: The newly created text note.
        Create(document: Document, viewId: ElementId, position: XYZ, width: float, text: str, options: TextNoteOptions) -> TextNote
        
            Creates a new line-wrapping text note element of the given width and properties.
        
            document: A valid Revit document that is currently modifiable (i.e. with an open 
             transaction).
        
            viewId: Id of the graphic view in which the note is to be created.
            position: A model position of the new note.
           Note that the position's relation to the 
             text's bounding box depends on the requested text alignment
           (set via the 
             Options argument). It will be the box' top-left corner for a left-aligned text,
             
           the top-right corner for a right-aligned text, and middle-top point if the 
             text is to be centered.
        
            width: Width [ft] of the text in paper space (i.e. as it is measured when printed.)
          
              If a line of text is longer than the given specified Width, the text will be 
             automatically wrapped.
           If a a zero Width is supplied then this method will 
             create an unwrapped text note element.
        
            text: Text to populate the text note with.
            options: Options to control behavior and appearance of the text note.
            Returns: The newly created text note.
        Create(document: Document, viewId: ElementId, position: XYZ, width: float, text: str, typeId: ElementId) -> TextNote
        
            Creates a new line-wrapping text note element of the given width and properties.
        
            document: A valid Revit document that is currently modifiable (i.e. with an open 
             transaction).
        
            viewId: Id of the graphic view in which the note is to be created.
            position: A model position of the new note.
           For a left-aligned text (default), the 
             origin is set at the top-left corner of the note's bounding box.
        
            width: Width [ft] of the text in paper space (i.e. as it is measured when printed.)
          
              If a line of text is longer than the specified Width, the text will be 
             automatically wrapped.
           If a a zero Width is supplied then this method will 
             create an unwrapped text note element.
        
            text: Text to populate the text note with.
            typeId: Id of the text type to use for the new text note.
            Returns: The newly created text note.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetFormattedText(self):
        """
        GetFormattedText(self: TextNote) -> FormattedText
        
            Returns an object that contains text and associated formatting of this note.
            Returns: The object that contains the text and associated formatting of of the text in 
             this text note.
        """
        pass

    def GetLeaders(self):
        """
        GetLeaders(self: TextNote) -> IList[Leader]
        
            Returns a collection of leaders currently attached to the text note.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveLeaders(self):
        """
        RemoveLeaders(self: TextNote)
            Removes all leaders currently attached to the text note.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetFormattedText(self, formattedText):
        """
        SetFormattedText(self: TextNote, formattedText: FormattedText)
            Sets the text and associated formatting of the text of in this text note with
         
               a given FormattedText object.
        
        
            formattedText: The FormattedText object containing the text and associated formatting of the 
             text.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    LeaderCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Number of leader objects currently attached to the text note.

Get: LeaderCount(self: TextNote) -> int

"""

    LeaderLeftAttachment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Attachment position of leaders on the left side of the text note.

Get: LeaderLeftAttachment(self: TextNote) -> LeaderAtachement

Set: LeaderLeftAttachment(self: TextNote) = value
"""

    LeaderRightAttachment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Attachment position of leaders on the right side of the text note.

Get: LeaderRightAttachment(self: TextNote) -> LeaderAtachement

Set: LeaderRightAttachment(self: TextNote) = value
"""

    TextNoteType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Access the type of the TextNote object.

Get: TextNoteType(self: TextNote) -> TextNoteType

Set: TextNoteType(self: TextNote) = value
"""



class TextNoteLeaderStyles(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all the Leader styles.
    
    enum TextNoteLeaderStyles, values: LCS_NONE (0), LCS_ONE_SEG_ARC (2), LCS_ONE_SEG_LINE (1), LCS_TWO_SEG_LINE (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    LCS_NONE = None
    LCS_ONE_SEG_ARC = None
    LCS_ONE_SEG_LINE = None
    LCS_TWO_SEG_LINE = None
    value__ = None


class TextNoteLeaderTypes(Enum, IComparable, IFormattable, IConvertible):
    """
    Types of text-note leaders
    
    enum TextNoteLeaderTypes, values: TNLT_ARC_L (2), TNLT_ARC_R (3), TNLT_STRAIGHT_L (0), TNLT_STRAIGHT_R (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    TNLT_ARC_L = None
    TNLT_ARC_R = None
    TNLT_STRAIGHT_L = None
    TNLT_STRAIGHT_R = None
    value__ = None


class TextNoteOptions(object, IDisposable):
    """
    Options to use when creating a new text note element.
    
    TextNoteOptions(typeId: ElementId)
    TextNoteOptions()
    """
    def Dispose(self):
        """ Dispose(self: TextNoteOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TextNoteOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, typeId=None):
        """
        __new__(cls: type, typeId: ElementId)
        __new__(cls: type)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    HorizontalAlignment = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Horizontal alignment of the text.

Get: HorizontalAlignment(self: TextNoteOptions) -> HorizontalTextAlignment

Set: HorizontalAlignment(self: TextNoteOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TextNoteOptions) -> bool

"""

    KeepRotatedTextReadable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Flag controling whether a rotate text is to stay oriented to be always readable.

Get: KeepRotatedTextReadable(self: TextNoteOptions) -> bool

Set: KeepRotatedTextReadable(self: TextNoteOptions) = value
"""

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Base line angle of a text note, in radians.

Get: Rotation(self: TextNoteOptions) -> float

Set: Rotation(self: TextNoteOptions) = value
"""

    TypeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of a text type that defines the style of a text note.

Get: TypeId(self: TextNoteOptions) -> ElementId

Set: TypeId(self: TextNoteOptions) = value
"""



class TextNoteType(TextElementType, IDisposable):
    """ An object that represents a text note style. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class TextRange(object, IDisposable):
    """
    An object that is used to identify a range of characters in a
       Autodesk.Revit.DB.FormattedText.
    
    TextRange(start: int, length: int)
    TextRange()
    TextRange(other: TextRange)
    """
    def Dispose(self):
        """ Dispose(self: TextRange) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TextRange, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, start: int, length: int)
        __new__(cls: type)
        __new__(cls: type, other: TextRange)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    End = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The index of the first character after the end of the range

Get: End(self: TextRange) -> int

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TextRange) -> bool

"""

    Length = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The length of the range.

Get: Length(self: TextRange) -> int

Set: Length(self: TextRange) = value
"""

    Start = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The start index of a range within the Autodesk.Revit.DB.FormattedText.

Get: Start(self: TextRange) -> int

Set: Start(self: TextRange) = value
"""



class TextTreatment(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing possible text treatment modes.
    
    enum TextTreatment, values: Approximate (1), Exact (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Approximate = None
    Exact = None
    value__ = None


class ThermalAsset(object, IDisposable):
    """
    Represents the properties of a material pertinent to energy analysis.
    
    ThermalAsset(name: str, materialType: ThermalMaterialType)
    """
    def Copy(self):
        """
        Copy(self: ThermalAsset) -> ThermalAsset
        
            Produces a copy of the asset.
            Returns: A copy of the asset.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ThermalAsset) """
        pass

    def Equals(self, *__args):
        """
        Equals(self: ThermalAsset, other: ThermalAsset) -> bool
        
            Determines whether this thermal asset is equal to another.
        
            other: The thermal asset to compare with this one.
            Returns: True if the given thermal asset is equal to this one, otherwise false.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ThermalAsset, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, name, materialType):
        """ __new__(cls: type, name: str, materialType: ThermalMaterialType) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Behavior = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Flag indicating whether elements of this material behave isotropically or orthotropically.

Get: Behavior(self: ThermalAsset) -> StructuralBehavior

Set: Behavior(self: ThermalAsset) = value
"""

    Compressibility = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The compressibility of the asset.

Get: Compressibility(self: ThermalAsset) -> float

Set: Compressibility(self: ThermalAsset) = value
"""

    Density = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The density of the asset.

Get: Density(self: ThermalAsset) -> float

Set: Density(self: ThermalAsset) = value
"""

    ElectricalResistivity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The electrical resistivity of the asset.

Get: ElectricalResistivity(self: ThermalAsset) -> float

Set: ElectricalResistivity(self: ThermalAsset) = value
"""

    Emissivity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The emissivity of the asset.

Get: Emissivity(self: ThermalAsset) -> float

Set: Emissivity(self: ThermalAsset) = value
"""

    GasViscosity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The gas viscosity of the asset.

Get: GasViscosity(self: ThermalAsset) -> float

Set: GasViscosity(self: ThermalAsset) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ThermalAsset) -> bool

"""

    LiquidViscosity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The liquid viscosity of the asset.

Get: LiquidViscosity(self: ThermalAsset) -> float

Set: LiquidViscosity(self: ThermalAsset) = value
"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the thermal asset.

Get: Name(self: ThermalAsset) -> str

Set: Name(self: ThermalAsset) = value
"""

    Permeability = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The permeability of the asset.

Get: Permeability(self: ThermalAsset) -> float

Set: Permeability(self: ThermalAsset) = value
"""

    Porosity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The porosity of the asset.

Get: Porosity(self: ThermalAsset) -> float

Set: Porosity(self: ThermalAsset) = value
"""

    Reflectivity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The reflectivity of the asset.

Get: Reflectivity(self: ThermalAsset) -> float

Set: Reflectivity(self: ThermalAsset) = value
"""

    SpecificHeat = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The specific heat of the asset.

Get: SpecificHeat(self: ThermalAsset) -> float

Set: SpecificHeat(self: ThermalAsset) = value
"""

    SpecificHeatOfVaporization = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The specific heat of vaporization of the asset.

Get: SpecificHeatOfVaporization(self: ThermalAsset) -> float

Set: SpecificHeatOfVaporization(self: ThermalAsset) = value
"""

    ThermalConductivity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The thermal conductivity of the asset.

Get: ThermalConductivity(self: ThermalAsset) -> float

Set: ThermalConductivity(self: ThermalAsset) = value
"""

    ThermalMaterialType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of material that this thermal asset describes (e.g. solid, liquid, gas.)

Get: ThermalMaterialType(self: ThermalAsset) -> ThermalMaterialType

"""

    TransmitsLight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A boolean flag that indicates whether or not the asset transmits light.

Get: TransmitsLight(self: ThermalAsset) -> bool

Set: TransmitsLight(self: ThermalAsset) = value
"""

    VaporPressure = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The vapor pressure of the asset.

Get: VaporPressure(self: ThermalAsset) -> float

Set: VaporPressure(self: ThermalAsset) = value
"""



class ThermalMaterialType(Enum, IComparable, IFormattable, IConvertible):
    """
    Represents the thermal material type.
    
    enum ThermalMaterialType, values: Gas (1), Liquid (2), Solid (3), Undefined (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Gas = None
    Liquid = None
    Solid = None
    Undefined = None
    value__ = None


class ThermalProperties(APIObject, IDisposable):
    """
    Class specific to thermal properties for assembly types, such as Wall,
       Floor, Ceiling, Roof and Building Pad.
    """
    def Dispose(self):
        """ Dispose(self: ThermalProperties, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ThermalProperties, disposing: bool)ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Absorptance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Value of absorptance.

Get: Absorptance(self: ThermalProperties) -> float

Set: Absorptance(self: ThermalProperties) = value
"""

    HeatTransferCoefficient = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The heat transfer coefficient value (U-Value).
   The unit is watts per meter-squared kelvin (W/(m^2*K)).

Get: HeatTransferCoefficient(self: ThermalProperties) -> float

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ThermalProperties) -> bool

"""

    Roughness = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Value of roughness.

Get: Roughness(self: ThermalProperties) -> int

Set: Roughness(self: ThermalProperties) = value
"""

    ThermalMass = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The calculated thermal mass value.
   The unit is kilogram feet-squared per second squared kelvin (kg ft^2/(s^2 K)).

Get: ThermalMass(self: ThermalProperties) -> float

"""

    ThermalResistance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The calculated thermal resistance value (R-Value).
   The unit is meter-squared kelvin per watt ((m^2*K)/Watt).

Get: ThermalResistance(self: ThermalProperties) -> float

"""



class TilePattern(ElementType, IDisposable):
    """
    An object representing a tile pattern that may
    be applied to a DividedSurface.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    TilePatternType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The built-in system tile pattern specified by
this object.

Get: TilePatternType(self: TilePattern) -> TilePatternsBuiltIn

"""

    TilesPerSeedNode = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the number of tiles located at each seed node.

Get: TilesPerSeedNode(self: TilePattern) -> int

"""



class TilePatterns(APIObject, IDisposable):
    """
    The TilePatterns object is an interface for retrieving the TilePattern objects
    within the Document.
    """
    def Dispose(self):
        """ Dispose(self: TilePatterns, A_0: bool) """
        pass

    def GetTilePattern(self, tilePatternBuiltIn):
        """
        GetTilePattern(self: TilePatterns, tilePatternBuiltIn: TilePatternsBuiltIn) -> TilePattern
        
            Retrieve a TilePattern object from a built-in type.
            Returns: A TilePattern object, or ll if the document is not a 
        Massing Family.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class TilePatternsBuiltIn(Enum, IComparable, IFormattable, IConvertible):
    """
    Revit's built-in tile patterns.
    See Autodesk.Revit.DB.TilePattern.
    
    enum TilePatternsBuiltIn, values: Arrows (11), HalfStep (5), Hexagon (4), Octagon (13), OctagonRotate (14), Rectangle (1), RectangleCheckerboard (8), Rhomboid (3), RhomboidCheckerboard (9), ThirdStep (6), Triangle_Bent (2), Triangle_Flat (15), TriangleCheckerboard_Bent (7), TriangleCheckerboard_Flat (16), TriangleStep_Bent (10), ZigZag (12)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Arrows = None
    HalfStep = None
    Hexagon = None
    Octagon = None
    OctagonRotate = None
    Rectangle = None
    RectangleCheckerboard = None
    Rhomboid = None
    RhomboidCheckerboard = None
    ThirdStep = None
    TriangleCheckerboard_Bent = None
    TriangleCheckerboard_Flat = None
    TriangleStep_Bent = None
    Triangle_Bent = None
    Triangle_Flat = None
    value__ = None
    ZigZag = None


class Transaction(object, IDisposable):
    """
    Transactions are context-like objects that guard any changes made to a Revit model
    
    Transaction(document: Document, name: str)
    Transaction(document: Document)
    """
    def Commit(self, options=None):
        """
        Commit(self: Transaction) -> TransactionStatus
        
            Commits all changes made to the model during the transaction.
            Returns: If finished successfully, this method returns TransactionStatus.Committed.
           
             Note it is possible the RolledBack status is returned instead as an outcome
           
             of failure handling. If TransactionStatus::Pending is returned it means that
          
              failure handling has not been finalized yet and Revit awaits a user actions.
         
               Until committing is fully finalized, no changes to the document can be made
         
               (including starting of new transactions).The returned status does not have to 
             be necessarily the same as
           the status returned by 
             Autodesk.Revit.DB.Transaction.GetStatus even when the method is called
           
             immediately after committing the transaction. Such a difference may happen due 
             to actions
           made by a transaction finalizer, if there was one set.
           (See 
             Autodesk.Revit.DB.FailureHandlingOptions for more details.)
        
        Commit(self: Transaction, options: FailureHandlingOptions) -> TransactionStatus
        
            Commits all changes made to the model during the transaction.
        
            options: A set of Autodesk.Revit.DB.FailureHandlingOptionsoptions
           to be used for 
             handling eventual failures during this call.
           The options are only used 
             temporarily during the commitment process. After
           the transaction is 
             finished, the options will be reset to their default values.
        
            Returns: If finished successfully, this method returns TransactionStatus.Committed
           
             Note it is possible the RolledBack status is returned instead as an outcome
           
             of failure handling. If TransactionStatus.Pending is returned it means that
           
             failure handling has not been finalized yet and Revit awaits user's actions.
          
              Until committing is fully finalized, no changes to the document can be made
          
              (including starting of new transactions).Be aware that the returned status 
             does not have to be necessarily the same like
           the status returned by 
             Autodesk.Revit.DB.Transaction.GetStatus even when the method is called
           
             immediately after committing the transaction. Such difference may happen due to 
             actions
           made by a transaction finalizer, if there was one set.
           (See 
             Autodesk.Revit.DB.FailureHandlingOptions for more details.)
        """
        pass

    def Dispose(self):
        """ Dispose(self: Transaction) """
        pass

    def GetFailureHandlingOptions(self):
        """
        GetFailureHandlingOptions(self: Transaction) -> FailureHandlingOptions
        
            Returns the current failure handling options.
            Returns: An instance of FailureHandlingOptions
        """
        pass

    def GetName(self):
        """
        GetName(self: Transaction) -> str
        
            Returns the transaction's name.
            Returns: The transaction's current name.
        """
        pass

    def GetStatus(self):
        """
        GetStatus(self: Transaction) -> TransactionStatus
        
            Returns the current status of the transaction.
            Returns: The current status of the transaction.
        """
        pass

    def HasEnded(self):
        """
        HasEnded(self: Transaction) -> bool
        
            Determines whether the transaction has ended already.
            Returns: True if the transaction has already been committed or rolled back, False 
             otherwise.
        """
        pass

    def HasStarted(self):
        """
        HasStarted(self: Transaction) -> bool
        
            Determines whether the transaction has been started yet.
            Returns: True if the transaction has already started, False otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Transaction, disposing: bool) """
        pass

    def RollBack(self, options=None):
        """
        RollBack(self: Transaction) -> TransactionStatus
        
            Rolls back all changes made to the model during the transaction.
            Returns: If finished successfully, this method returns TransactionStatus.RolledBack.
           
             Be aware that the returned status does not have to be necessarily the same like
             
           the status returned by Autodesk.Revit.DB.Transaction.GetStatus even when 
             the method is called
           immediately after rolling back the transaction. Such 
             difference may happen due to actions
           made by a transaction finalizer, if 
             there was one set.
           (See Autodesk.Revit.DB.FailureHandlingOptions for more 
             details.)
        
        RollBack(self: Transaction, options: FailureHandlingOptions) -> TransactionStatus
        
            Rolls back all changes made to the model during the transaction.
        
            options: A set of Autodesk.Revit.DB.FailureHandlingOptionsoptions
           to be used for 
             handling eventual failures during this call.
           The options are only used 
             temporarily during this rolling back process. After
           the transaction is 
             finished, the options will be reset to their default values.
        
            Returns: If finished successfully, this method returns TransactionStatus.RolledBack.
           
             Be aware that the returned status does not have to be necessarily the same like
             
           the status returned by Autodesk.Revit.DB.Transaction.GetStatus even when 
             the method is called
           immediately after rolling back the transaction. Such 
             difference may happen due to actions
           made by a transaction finalizer, if 
             there was one set.
           (See Autodesk.Revit.DB.FailureHandlingOptions for more 
             details.)
        """
        pass

    def SetFailureHandlingOptions(self, options):
        """
        SetFailureHandlingOptions(self: Transaction, options: FailureHandlingOptions)
            Sets options for handling failures to be used when the transaction is being 
             committed or rolled back.
        
        
            options: An instance of FailureHandlingOptions to be applied to the transaction
        """
        pass

    def SetName(self, name):
        """
        SetName(self: Transaction, name: str)
            Sets the transaction's name.
        
            name: A name for the transaction.
        """
        pass

    def Start(self, name=None):
        """
        Start(self: Transaction) -> TransactionStatus
        
            Starts the transaction.
            Returns: If finished successfully, this method returns TransactionStatus.Started.
           
             Note that unless starting is successful, changes cannot be made to the 
             document.
        
        Start(self: Transaction, name: str) -> TransactionStatus
        
            Starts the transaction with an assigned name.
        
            name: Name of the transaction; If the transaction already has name, this new one will 
             preplace it.
           The name will appear on the Undo menu in Revit if the 
             transaction is successfully committed.
        
            Returns: If finished successfully, this method returns TransactionStatus.Started.
           
             Note that unless starting is successful, changes cannot be made to the 
             document.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, document, name=None):
        """
        __new__(cls: type, document: Document, name: str)
        __new__(cls: type, document: Document)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: Transaction) -> bool

"""



class TransactionGroup(object, IDisposable):
    """
    Transaction groups aggregate a number of transactions.
    
    TransactionGroup(document: Document, transGroupName: str)
    TransactionGroup(document: Document)
    """
    def Assimilate(self):
        """
        Assimilate(self: TransactionGroup) -> TransactionStatus
        
            Assimilates all inner transactions by merging them into a single undo item.
            Returns: If finished successfully, this method returns TransactionStatus.Committed.
        """
        pass

    def Commit(self):
        """
        Commit(self: TransactionGroup) -> TransactionStatus
        
            Commits the transaction group.
            Returns: If finished successfully, this method returns TransactionStatus.Committed.
        """
        pass

    def Dispose(self):
        """ Dispose(self: TransactionGroup) """
        pass

    def GetName(self):
        """
        GetName(self: TransactionGroup) -> str
        
            Returns the transaction group's name. It could be an empty string.
            Returns: The transaction group's current name.
        """
        pass

    def GetStatus(self):
        """
        GetStatus(self: TransactionGroup) -> TransactionStatus
        
            Gets the current status of the transaction group.
            Returns: The current status of the transaction group.
        """
        pass

    def HasEnded(self):
        """
        HasEnded(self: TransactionGroup) -> bool
        
            Determines whether the transaction group has ended already.
            Returns: True if the transaction group has already been committed or rolled back, False 
             otherwise.
        """
        pass

    def HasStarted(self):
        """
        HasStarted(self: TransactionGroup) -> bool
        
            Determines whether the transaction has been started yet.
            Returns: True if the transaction group has already started, False otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TransactionGroup, disposing: bool) """
        pass

    def RollBack(self):
        """
        RollBack(self: TransactionGroup) -> TransactionStatus
        
            Rolls back the transaction group, which effectively undoes all transactions 
             committed inside the group.
        
            Returns: If finished successfully, this method returns TransactionStatus.RolledBack.
        """
        pass

    def SetName(self, name):
        """
        SetName(self: TransactionGroup, name: str)
            Sets the transaction group's name.
        
            name: A name for the transaction group.
        """
        pass

    def Start(self, transGroupName=None):
        """
        Start(self: TransactionGroup) -> TransactionStatus
        
            Starts the transaction group
            Returns: If started successfully, this method returns TransactionStatus.Started.
        Start(self: TransactionGroup, transGroupName: str) -> TransactionStatus
        
            Starts the transaction group with an assigned name.
        
            transGroupName: Name of the group.
           The name will be used only for a group that is 
             Autodesk.Revit.DB.TransactionGroup.Assimilateassimilated at the end.
        
            Returns: If started successfully, this method returns TransactionStatus.Started.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, document, transGroupName=None):
        """
        __new__(cls: type, document: Document, transGroupName: str)
        __new__(cls: type, document: Document)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsFailureHandlingForcedModal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Forces all transactions finished inside this group to use modal failure handling
   regardless of what failure handling options are set for those transactions.

Get: IsFailureHandlingForcedModal(self: TransactionGroup) -> bool

Set: IsFailureHandlingForcedModal(self: TransactionGroup) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TransactionGroup) -> bool

"""



class TransactionStatus(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing the possible statuses associated with a Transaction, TransactionGroup, or SubTransaction,
       or the result of a particular method call on one of those objects.
    
    enum TransactionStatus, values: Committed (3), Error (5), Pending (4), Proceed (6), RolledBack (2), Started (1), Uninitialized (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Committed = None
    Error = None
    Pending = None
    Proceed = None
    RolledBack = None
    Started = None
    Uninitialized = None
    value__ = None


class TransactWithCentralOptions(object, IDisposable):
    """
    Options to customize Revit behavior when accessing the central model.
    
    TransactWithCentralOptions()
    """
    def Dispose(self):
        """ Dispose(self: TransactWithCentralOptions) """
        pass

    def GetLockCallback(self):
        """
        GetLockCallback(self: TransactWithCentralOptions) -> ICentralLockedCallback
        
            Gets the callback object that changes Revit's default behavior of endlessly 
             waiting and repeatedly trying to lock a central model.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TransactWithCentralOptions, disposing: bool) """
        pass

    def SetLockCallback(self, lockCallback):
        """
        SetLockCallback(self: TransactWithCentralOptions, lockCallback: ICentralLockedCallback)
            Sets or resets a callback object that would allow an external application to 
             change Revit's default behavior of endlessly waiting and repeatedly trying to 
             lock a central model.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TransactWithCentralOptions) -> bool

"""



class Transform(APIObject, IDisposable):
    """
    A transformation of the affine 3-space.
    
    Transform(source: Transform)
    """
    def AlmostEqual(self, right):
        """
        AlmostEqual(self: Transform, right: Transform) -> bool
        
            Determines whether this transformation and the specified transformation are the 
             same within the tolerance (1.0e-09).
        
        
            right: The transformation to compare with this transformation.
            Returns: True if the two transformations are equal; otherwise, false.
        """
        pass

    @staticmethod
    def CreateReflection(plane):
        """
        CreateReflection(plane: Plane) -> Transform
        
            Creates a transform that represents a reflection across the given plane.
        
            plane: The plane.
            Returns: The new transform.
        """
        pass

    @staticmethod
    def CreateRotation(axis, angle):
        """
        CreateRotation(axis: XYZ, angle: float) -> Transform
        
            Creates a transform that represents a rotation about the given axis at (0, 0, 
             0).
        
        
            axis: The rotation axis.
            angle: The angle.
            Returns: The new transform.
        """
        pass

    @staticmethod
    def CreateRotationAtPoint(axis, angle, origin):
        """
        CreateRotationAtPoint(axis: XYZ, angle: float, origin: XYZ) -> Transform
        
            Creates a transform that represents a rotation about the given axis at the 
             specified point.
        
        
            axis: The rotation axis.
            angle: The angle.
            origin: The origin point.
            Returns: The new transform.
        """
        pass

    @staticmethod
    def CreateTranslation(vector):
        """
        CreateTranslation(vector: XYZ) -> Transform
        
            Creates a transform that represents a translation via the specified vector.
        
            vector: The translation vector.
            Returns: The new transform.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def Multiply(self, right):
        """
        Multiply(self: Transform, right: Transform) -> Transform
        
            Multiplies this transformation by the specified transformation and returns the 
             result.
        
        
            right: The specified transformation.
            Returns: The transformation equal to the composition of the two transformations.
        """
        pass

    def OfPoint(self, point):
        """
        OfPoint(self: Transform, point: XYZ) -> XYZ
        
            Applies the transformation to the point and returns the result.
        
            point: The point to transform.
            Returns: The transformed point.
        """
        pass

    def OfVector(self, vec):
        """
        OfVector(self: Transform, vec: XYZ) -> XYZ
        
            Applies the transform to the vector
        
            vec: The vector to be transformed
            Returns: The new vector after transform
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Transform) """
        pass

    def ScaleBasis(self, scale):
        """
        ScaleBasis(self: Transform, scale: float) -> Transform
        
            Scales the basis vectors of this transformation and returns the result.
        
            scale: The scale value.
            Returns: The transformation equal to the composition of the two transformations.
        """
        pass

    def ScaleBasisAndOrigin(self, scale):
        """
        ScaleBasisAndOrigin(self: Transform, scale: float) -> Transform
        
            Scales the basis vectors and the origin of this transformation and returns the 
             result.
        
        
            scale: The scale value.
            Returns: The transformation equal to the composition of the two transformations.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __mul__(self, *args): #cannot find CLR method
        """ x.__mul__(y) <==> x*y """
        pass

    @staticmethod # known case of __new__
    def __new__(self, source):
        """ __new__(cls: type, source: Transform) """
        pass

    def __rmul__(self, *args): #cannot find CLR method
        """
        __rmul__(left: Transform, right: Transform) -> Transform
        
            Multiplies the two specified transforms.
        
            left: The first transformation.
            right: The second transformation.
            Returns: The transformation equal to the composition of the two transformations.
        """
        pass

    BasisX = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The basis of the X axis of this transformation.

Get: BasisX(self: Transform) -> XYZ

Set: BasisX(self: Transform) = value
"""

    BasisY = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The basis of the Y axis of this transformation.

Get: BasisY(self: Transform) -> XYZ

Set: BasisY(self: Transform) = value
"""

    BasisZ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The basis of the Z axis of this transformation.

Get: BasisZ(self: Transform) -> XYZ

Set: BasisZ(self: Transform) = value
"""

    Determinant = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The determinant of this transformation.

Get: Determinant(self: Transform) -> float

"""

    HasReflection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The boolean value that indicates whether this transformation produces reflection.

Get: HasReflection(self: Transform) -> bool

"""

    Inverse = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The inverse transformation of this transformation.

Get: Inverse(self: Transform) -> Transform

"""

    IsConformal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The boolean value that indicates whether this transformation is conformal.

Get: IsConformal(self: Transform) -> bool

"""

    IsIdentity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The boolean value that indicates whether this transformation is an identity.

Get: IsIdentity(self: Transform) -> bool

"""

    IsTranslation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The boolean value that indicates whether this transformation is a translation.

Get: IsTranslation(self: Transform) -> bool

"""

    Origin = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines the origin of the old coordinate system in the new coordinate system.

Get: Origin(self: Transform) -> XYZ

Set: Origin(self: Transform) = value
"""

    Scale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The real number that represents the scale of the transformation.

Get: Scale(self: Transform) -> float

"""


    Identity = None


class TransmissionData(object, IDisposable):
    """
    A class representing information on all external file references
       in a document.
    
    TransmissionData(other: TransmissionData)
    """
    def Dispose(self):
        """ Dispose(self: TransmissionData) """
        pass

    @staticmethod
    def DocumentIsNotTransmitted(filePath):
        """
        DocumentIsNotTransmitted(filePath: ModelPath) -> bool
        
            Determines whether the document at a given file location
           is not transmitted.
        
            filePath: The path to the document whose transmitted state will be checked.
            Returns: False if the document is a transmitted file, true otherwise.
        """
        pass

    def GetAllExternalFileReferenceIds(self):
        """
        GetAllExternalFileReferenceIds(self: TransmissionData) -> ICollection[ElementId]
        
            Gets the ids of all ExternalFileReferences.
            Returns: The ids of all ExternalFileReferences.
        """
        pass

    def GetDesiredReferenceData(self, elemId):
        """
        GetDesiredReferenceData(self: TransmissionData, elemId: ElementId) -> ExternalFileReference
        
            Gets the ExternalFileReference representing path
           and load status 
             information to be used the next time
           this TransmissionData's document is 
             loaded.
        
        
            elemId: The ElementId of the Element which the external file
           reference is a 
             component of.
        
            Returns: An ExternalFileReference containing the requested
           path and load status 
             information for an external file
        """
        pass

    def GetLastSavedReferenceData(self, elemId):
        """
        GetLastSavedReferenceData(self: TransmissionData, elemId: ElementId) -> ExternalFileReference
        
            Gets the ExternalFileReference representing path
           and load status 
             information concerning the most
           recent time this TransmissionData's 
             document was opened.
        
        
            elemId: The ElementId of the Element which the external file
           reference is a 
             component of.
        
            Returns: An ExternalFileReference containing the previous
           path and load status 
             information for an external file
        """
        pass

    @staticmethod
    def IsDocumentTransmitted(filePath):
        """
        IsDocumentTransmitted(filePath: ModelPath) -> bool
        
            Determines whether the document at a given file location
           is transmitted.
        
            filePath: The path to the document whose transmitted state will be checked.
            Returns: True if the document is a transmitted file, false otherwise.
        """
        pass

    @staticmethod
    def ReadTransmissionData(path):
        """
        ReadTransmissionData(path: ModelPath) -> TransmissionData
        
            Reads the TransmissionData associated with the
           file at the given location.
        
            path: A ModelPath indicating the file Revit should read
           the TransmissionData of.
        
                If this ModelPath is a file path, it must be an absolute path.
        
            Returns: The TransmissionData containing external file
           information for the file at 
             the given location.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TransmissionData, disposing: bool) """
        pass

    def SetDesiredReferenceData(self, elemId, path, pathType, shouldLoad):
        """
        SetDesiredReferenceData(self: TransmissionData, elemId: ElementId, path: ModelPath, pathType: PathType, shouldLoad: bool)
            Sets the ExternalFileReference information which
           Revit should use the next 
             time it opens the document
           which this TransmissionData belongs to.
        
        
            elemId: The id of the element associated with this reference.
            path: A ModelPath indicating the location to load the external
           file reference 
             from.
        
            pathType: A PathType value indicating what type of path the ModelPath is.
            shouldLoad: True if the external file should be loaded the next time Revit
           opens the 
             document. False if it should be unloaded.
        """
        pass

    @staticmethod
    def WriteTransmissionData(path, data):
        """
        WriteTransmissionData(path: ModelPath, data: TransmissionData)
            Writes the given TransmissionData into the Revit file at the
           given location.
        
            path: A ModelPath indicating the file Revit should write
           the TransmissionData of.
             
           This ModelPath must be a file path and an absolute path.
        
            data: The TransmissionData to be written into the document.
           Note that Revit will 
             not check that the ElementIds in
           the TransmissionData correspond to real 
             Elements.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, other):
        """ __new__(cls: type, other: TransmissionData) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsTransmitted = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Determines whether this file has been transmitted or not.

Get: IsTransmitted(self: TransmissionData) -> bool

Set: IsTransmitted(self: TransmissionData) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TransmissionData) -> bool

"""

    UserData = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A string which users can store notes in.

Get: UserData(self: TransmissionData) -> str

Set: UserData(self: TransmissionData) = value
"""

    Version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The format version for TransmissionData

Get: Version(self: TransmissionData) -> int

"""



class TransmittedModelOptions(Enum, IComparable, IFormattable, IConvertible):
    """
    Enum giving desired behavior when opening or saving a transmitted
       workshared model.
    
    enum TransmittedModelOptions, values: CancelOperation (2), KeepAsTransmitted (1), SaveAsNewCentral (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CancelOperation = None
    KeepAsTransmitted = None
    SaveAsNewCentral = None
    value__ = None


class TriangleInShellComponent(object, IDisposable):
    """
    This class represents a triangle in a TriangulatedShellComponent object. The triangle is
       defined by its vertices, which are specified by their indices in the
       TriangulatedShellComponent's array of vertices.
    
    TriangleInShellComponent(other: TriangleInShellComponent)
    """
    def Dispose(self):
        """ Dispose(self: TriangleInShellComponent) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TriangleInShellComponent, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, other):
        """ __new__(cls: type, other: TriangleInShellComponent) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TriangleInShellComponent) -> bool

"""

    VertexIndex0 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Index of the triangle's first vertex in the TriangulatedShellComponent's array of vertices.

Get: VertexIndex0(self: TriangleInShellComponent) -> int

"""

    VertexIndex1 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Index of the triangle's second vertex in the TriangulatedShellComponent's array of vertices.

Get: VertexIndex1(self: TriangleInShellComponent) -> int

"""

    VertexIndex2 = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Index of the triangle's third vertex in the TriangulatedShellComponent's array of vertices.

Get: VertexIndex2(self: TriangleInShellComponent) -> int

"""



class TriangulatedShellComponent(object, IDisposable):
    """
    This class represents a triangulated boundary component of a solid or a
       triangulated connected component of a shell.
    """
    def Clear(self):
        """
        Clear(self: TriangulatedShellComponent)
            Empties the contents of this TriangulatedShellComponent.
        """
        pass

    def Dispose(self):
        """ Dispose(self: TriangulatedShellComponent) """
        pass

    def GetTriangle(self, triangleIndex):
        """
        GetTriangle(self: TriangulatedShellComponent, triangleIndex: int) -> TriangleInShellComponent
        
            Returns the triangle corresponding to the given index.
        
            triangleIndex: The index of the triangle (between 0 and TriangleCount-1, inclusive).
            Returns: The triangle.
        """
        pass

    def GetVertex(self, vertexIndex):
        """
        GetVertex(self: TriangulatedShellComponent, vertexIndex: int) -> XYZ
        
            Returns the vertex with a given index.
        
            vertexIndex: The index of the vertex (between 0 and getVertexCount()-1, inclusive).
            Returns: A copy of the requested vertex.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TriangulatedShellComponent, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsClosed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if and only if the triangulation represents a topologically closed shell
   (i.e., each edge is shared by two triangles).

Get: IsClosed(self: TriangulatedShellComponent) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TriangulatedShellComponent) -> bool

"""

    TriangleCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of triangles in the triangulation.

Get: TriangleCount(self: TriangulatedShellComponent) -> int

"""

    VertexCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of vertices in the triangulation.

Get: VertexCount(self: TriangulatedShellComponent) -> int

"""



class TriangulatedSolidOrShell(object, IDisposable):
    """ This class represents a triangulated solid or shell. """
    def Dispose(self):
        """ Dispose(self: TriangulatedSolidOrShell) """
        pass

    def GetShellComponent(self, componentIndex):
        """
        GetShellComponent(self: TriangulatedSolidOrShell, componentIndex: int) -> TriangulatedShellComponent
        
            Returns the specified shell component of a solid or shell. Input componentIndex 
             must lie
           between 0 and ShellComponentCount-1, inclusive. The returned 
             TriangulatedShellComponent
           should not be modified by the caller.
        
        
                    Returns: The component.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TriangulatedSolidOrShell, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TriangulatedSolidOrShell) -> bool

"""

    ShellComponentCount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of TriangulatedShellComponents that this TriangulatedSolidOrShell contains.

Get: ShellComponentCount(self: TriangulatedSolidOrShell) -> int

"""



class TriangulationInterface(object, IDisposable):
    """ This abstract class provides an interface for querying a triangulation structure (vertices and triangles). """
    def Dispose(self):
        """ Dispose(self: TriangulationInterface) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TriangulationInterface, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TriangulationInterface) -> bool

"""



class TriangulationInterfaceForTriangulatedShellComponent(TriangulationInterface, IDisposable):
    """
    This class is used to call FacetingUtils::convertTrianglesToQuads with a triangulation defined
       by a TriangulatedShellComponent.
    
    TriangulationInterfaceForTriangulatedShellComponent(externalTriangulatedShellComponent: TriangulatedShellComponent)
    """
    def Dispose(self):
        """ Dispose(self: TriangulationInterface, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TriangulationInterface, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, externalTriangulatedShellComponent):
        """ __new__(cls: type, externalTriangulatedShellComponent: TriangulatedShellComponent) """
        pass


class TriangulationInterfaceForTriangulatedSolidOrShell(TriangulationInterface, IDisposable):
    """
    This class is used to call FacetingUtils::convertTrianglesToQuads with a triangulation defined
       by a TriangulatedSolidOrShell.
    
    TriangulationInterfaceForTriangulatedSolidOrShell(externalTriangulatedSolidOrShell: TriangulatedSolidOrShell)
    """
    def Dispose(self):
        """ Dispose(self: TriangulationInterface, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TriangulationInterface, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, externalTriangulatedSolidOrShell):
        """ __new__(cls: type, externalTriangulatedSolidOrShell: TriangulatedSolidOrShell) """
        pass


class TriOrQuadFacet(object, IDisposable):
    """ This class represents a triangle or quadrilateral in a faceted structure. """
    def Dispose(self):
        """ Dispose(self: TriOrQuadFacet) """
        pass

    def GetVertexIndex(self, index):
        """
        GetVertexIndex(self: TriOrQuadFacet, index: int) -> int
        
            Returns the index of the specified vertex of this facet (as an index into the 
             external array
           of vertices in the TriangulationInterface that was used to 
             create the list of TriOrQuadFacets).
        
        
            index: Index of the desired vertex in this TriOrQuadFacet (between 0 and 
             NumberOfVertices-1, inclusive).
        
            Returns: The index of the specified vertex in the external array of vertices (only valid 
             if NumberOfVertices >= 3).
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: TriOrQuadFacet, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: TriOrQuadFacet) -> bool

"""

    Normal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """A unit normal vector for this facet.

Get: Normal(self: TriOrQuadFacet) -> XYZ

"""

    NumberOfVertices = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of vertices (3 for a triangle, 4 for a quadrilateral, 0 for an unset TriOrQuadFacet).

Get: NumberOfVertices(self: TriOrQuadFacet) -> int

"""



class TypeBinding(ElementBinding, IDisposable):
    """
    TypeBinding objects are used to bind a property to a Revit type, such as a wall type.
    
    TypeBinding(categories: CategorySet)
    TypeBinding()
    """
    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, categories=None):
        """
        __new__(cls: type, categories: CategorySet)
        __new__(cls: type)
        """
        pass


class UnderlayOrientation(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates how elements in the underlay are viewed.
    
    enum UnderlayOrientation, values: LookingDown (0), LookingUp (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    LookingDown = None
    LookingUp = None
    value__ = None


class UnitFormatUtils(object):
    """ A utility class for formatting and parsing numbers with units. """
    @staticmethod
    def Format(units, unitType, value, maxAccuracy, forEditing, formatValueOptions=None):
        """
        Format(units: Units, unitType: UnitType, value: float, maxAccuracy: bool, forEditing: bool, formatValueOptions: FormatValueOptions) -> str
        
            Formats a number with units into a string.
        
            units: The units formatting settings, typically obtained from 
             Autodesk.Revit.DB.Document.GetUnitsDocument.GetUnits().
        
            unitType: The unit type of the value to format.
            value: The value to format, in Revit's internal units.
            maxAccuracy: True if the value should be rounded to an increased accuracy level appropriate 
             for editing or understanding the precise value stored in the model.  False if 
             the accuracy specified by the FormatOptions should be used, appropriate for 
             printed drawings.
        
            forEditing: True if the formatting should be modified as necessary so that the formatted 
             string can be successfully parsed, for example by suppressing digit grouping.  
             False if unmodified settings should be used, suitable for display only.
        
            formatValueOptions: Additional formatting options.
            Returns: The formatted string.
        Format(units: Units, unitType: UnitType, value: float, maxAccuracy: bool, forEditing: bool) -> str
        
            Formats a number with units into a string.
        
            units: The units formatting settings, typically obtained from 
             Autodesk.Revit.DB.Document.GetUnitsDocument.GetUnits().
        
            unitType: The unit type of the value to format.
            value: The value to format, in Revit's internal units.
            maxAccuracy: True if the value should be rounded to an increased accuracy level appropriate 
             for editing or understanding the precise value stored in the model.  False if 
             the accuracy specified by the FormatOptions should be used, appropriate for 
             printed drawings.
        
            forEditing: True if the formatting should be modified as necessary so that the formatted 
             string can be successfully parsed, for example by suppressing digit grouping.  
             False if unmodified settings should be used, suitable for display only.
        
            Returns: The formatted string.
        """
        pass

    @staticmethod
    def TryParse(units, unitType, stringToParse, *__args):
        """
        TryParse(units: Units, unitType: UnitType, stringToParse: str, valueParsingOptions: ValueParsingOptions) -> (bool, float, str)
        
            Parses a formatted string into a number with units if possible.
        
            units: The units formatting settings, typically obtained from 
             Autodesk.Revit.DB.Document.GetUnitsDocument.GetUnits().
        
            unitType: The target unit type for the value.
            stringToParse: The string to parse.
            valueParsingOptions: Additional parsing options.
            Returns: True if the string can be parsed, false otherwise.
        TryParse(units: Units, unitType: UnitType, stringToParse: str, valueParsingOptions: ValueParsingOptions) -> (bool, float)
        
            Parses a formatted string into a number with units if possible.
        
            units: The units formatting settings, typically obtained from 
             Autodesk.Revit.DB.Document.GetUnitsDocument.GetUnits().
        
            unitType: The target unit type for the value.
            stringToParse: The string to parse.
            valueParsingOptions: Additional parsing options.
            Returns: True if the string can be parsed, false otherwise.
        TryParse(units: Units, unitType: UnitType, stringToParse: str) -> (bool, float, str)
        
            Parses a formatted string into a number with units if possible.
        
            units: The units formatting settings, typically obtained from 
             Autodesk.Revit.DB.Document.GetUnitsDocument.GetUnits().
        
            unitType: The target unit type for the value.
            stringToParse: The string to parse.
            Returns: True if the string can be parsed, false otherwise.
        TryParse(units: Units, unitType: UnitType, stringToParse: str) -> (bool, float)
        
            Parses a formatted string into a number with units if possible.
        
            units: The units formatting settings, typically obtained from 
             Autodesk.Revit.DB.Document.GetUnitsDocument.GetUnits().
        
            unitType: The target unit type for the value.
            stringToParse: The string to parse.
            Returns: True if the string can be parsed, false otherwise.
        """
        pass

    __all__ = [
        'Format',
        'TryParse',
    ]


class UnitGroup(Enum, IComparable, IFormattable, IConvertible):
    """
    A group of related unit types, primarily classified by discipline.
    
    enum UnitGroup, values: Common (0), Electrical (3), Energy (5), HVAC (2), Piping (4), Structural (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Common = None
    Electrical = None
    Energy = None
    HVAC = None
    Piping = None
    Structural = None
    value__ = None


class Units(object, IDisposable):
    """
    A document's default settings for formatting numbers with units.
    
    Units(unitSystem: UnitSystem)
    """
    def Dispose(self):
        """ Dispose(self: Units) """
        pass

    def GetFormatOptions(self, unitType):
        """
        GetFormatOptions(self: Units, unitType: UnitType) -> FormatOptions
        
            Gets the default FormatOptions for a unit type.
        
            unitType: The unit type.
            Returns: A copy of the FormatOptions.
        """
        pass

    @staticmethod
    def GetModifiableUnitTypes():
        """
        GetModifiableUnitTypes() -> IList[UnitType]
        
            Gets all unit types for which the default FormatOptions can be modified.
            Returns: The unit types for which the FormatOptions can be modified.
        """
        pass

    @staticmethod
    def IsModifiableUnitType(unitType):
        """
        IsModifiableUnitType(unitType: UnitType) -> bool
        
            Checks whether the default FormatOptions can be modified for a given unit type.
        
            unitType: The unit type to check.
            Returns: True if the FormatOptions can be modified, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Units, disposing: bool) """
        pass

    def SetFormatOptions(self, unitType, options):
        """
        SetFormatOptions(self: Units, unitType: UnitType, options: FormatOptions)
            Sets the default FormatOptions for a unit type.
        
            unitType: The unit type.
            options: The ForrmatOptions.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, unitSystem):
        """ __new__(cls: type, unitSystem: UnitSystem) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    DecimalSymbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The symbol used to separate the integer and fractional parts of a number.

Get: DecimalSymbol(self: Units) -> DecimalSymbol

Set: DecimalSymbol(self: Units) = value
"""

    DigitGroupingAmount = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of digits in each group when numbers are formatted with digit grouping.

Get: DigitGroupingAmount(self: Units) -> DigitGroupingAmount

Set: DigitGroupingAmount(self: Units) = value
"""

    DigitGroupingSymbol = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The symbol used to separate groups of digits when numbers are formatted with digit grouping.

Get: DigitGroupingSymbol(self: Units) -> DigitGroupingSymbol

Set: DigitGroupingSymbol(self: Units) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: Units) -> bool

"""



class UnitSymbolType(Enum, IComparable, IFormattable, IConvertible):
    """
    The unit symbol displayed in the formatted string representation of a number to indicate the units of the value.
    
    enum UnitSymbolType, values: UST_ACRES (701), UST_AMPERE (6901), UST_ATM (5401), UST_BAHT (17510), UST_BAR (5501), UST_BTU (3101), UST_BTU_PER_F (18601), UST_BTU_PER_H (4201), UST_BTU_PER_H_CU_FT (16701), UST_BTU_PER_H_FT_DEGREE_F (23101), UST_BTU_PER_H_SQ_FT (16601), UST_BTU_PER_H_SQ_FT_DEGREE_F (15501), UST_BTU_PER_LB (23301), UST_BTU_PER_LB_DEGREE_F (23201), UST_BTU_PER_S (4101), UST_CAL (3201), UST_CAL_PER_S (4301), UST_CD (8101), UST_CD_PER_SQ_M (8001), UST_CF (1301), UST_CFM (6302), UST_CFM_PER_CF (16902), UST_CFM_PER_CU_FT (16901), UST_CFM_PER_SF (15602), UST_CFM_PER_SQ_FT (15601), UST_CFM_PER_TON (17101), UST_CHINESE_HONG_KONG_SAR (17506), UST_CM (101), UST_CM_CARET_2 (2102), UST_CM_CARET_3 (2402), UST_CM_PER_MIN (6201), UST_CM_SUP_2 (2101), UST_CM_SUP_3 (2401), UST_CM_SUP_4 (20001), UST_CM_SUP_6 (20501), UST_CMH (6602), UST_CMS (6502), UST_COLON_10 (15801), UST_COLON_12 (15901), UST_CP (13101), UST_CPS (7601), UST_CU_FT_PER_MIN (6301), UST_CU_M_PER_H (6601), UST_CU_M_PER_S (6501), UST_CY (1001), UST_DA_N (8801), UST_DA_N_DASH_M (11201), UST_DA_N_DASH_M_PER_M (14001), UST_DA_N_PER_M (9601), UST_DA_N_PER_M_SUP_2 (10401), UST_DEGREE_C (5701), UST_DEGREE_C_DIFFERENCE (24401), UST_DEGREE_F (5601), UST_DEGREE_F_DIFFERENCE (24301), UST_DEGREE_R (5901), UST_DEGREE_R_DIFFERENCE (24601), UST_DEGREE_SYMBOL (1501), UST_DELTA_DEGREE_C (24402), UST_DELTA_DEGREE_F (24302), UST_DELTA_DEGREE_R (24602), UST_DELTA_KELVIN (24502), UST_DM (23601), UST_DOLLAR (17501), UST_DONG (17509), UST_EURO_PREFIX (17503), UST_EURO_SUFFIX (17502), UST_FC (7801), UST_FEET_OF_WATER (12803), UST_FEET_OF_WATER_PER_100FT (12703), UST_FL (7901), UST_FL_LOWERCASE (7902), UST_FOOT_SINGLE_QUOTE (302), UST_FPM (6002), UST_FPS (13202), UST_FT (303), UST_FT_CARET_2 (1103), UST_FT_CARET_3 (1303), UST_FT_OF_WATER (12802), UST_FT_OF_WATER_PER_100FT (12702), UST_FT_PER_KIP (12001), UST_FT_PER_MIN (6001), UST_FT_PER_S (13201), UST_FT_PER_SQ_S (19501), UST_FT_SUP_2 (1102), UST_FT_SUP_2_PER_KIP (12201), UST_FT_SUP_3 (1302), UST_FT_SUP_3_PER_KIP (12401), UST_FT_SUP_4 (19701), UST_FT_SUP_6 (20201), UST_FTC (7802), UST_FTH2O (12801), UST_FTH2O_PER_100FT (12701), UST_FTL (7903), UST_GAL (2701), UST_GAL_PER_H (6801), UST_GAL_PER_MIN (6701), UST_GPH (6802), UST_GPM (6702), UST_GR_PER_H_SQ_FT_IN_HG (23401), UST_GRAD (21501), UST_H (22001), UST_H_SQ_FT_DEGREE_F_PER_BTU (18401), UST_HECTARES (801), UST_HP (8601), UST_HZ (7501), UST_IN (602), UST_IN_CARET_2 (2002), UST_IN_CARET_3 (2302), UST_IN_HG (5201), UST_IN_PER_SQ_S (19401), UST_IN_SUP_2 (2001), UST_IN_SUP_3 (2301), UST_IN_SUP_4 (19801), UST_IN_SUP_6 (20301), UST_IN_WG (4701), UST_IN_WG_PER_100FT (3701), UST_INCH_DOUBLE_QUOTE (601), UST_INV_DEGREE_C (13801), UST_INV_DEGREE_F (13701), UST_INV_K_N (12501), UST_INV_KIP (12601), UST_J_PER_G (22801), UST_J_PER_G_CELSIUS (22701), UST_J_PER_KELVIN (18701), UST_J_PER_KG_CELSIUS (23701), UST_JOULE (3401), UST_K_N (8901), UST_K_N_DASH_M (11301), UST_K_N_DASH_M_PER_M (14101), UST_K_N_M_PER_DEGREE (15101), UST_K_N_M_PER_DEGREE_PER_M (15301), UST_K_N_PER_CM_SUP_2 (17801), UST_K_N_PER_M (9701), UST_K_N_PER_M_SUP_2 (10501), UST_K_N_PER_MM_SUP_2 (18001), UST_KCAL (3301), UST_KCAL_PER_S (4401), UST_KELVIN (5801), UST_KELVIN_DIFFERENCE (24501), UST_KG_PER_CU_M (2801), UST_KGF (9201), UST_KGF_DASH_M (11601), UST_KGF_DASH_M_PER_M (14401), UST_KGF_PER_M (10001), UST_KGF_PER_M_SUP_2 (10801), UST_KGM (18901), UST_KGM_PER_M (21201), UST_KGM_PER_SQ_M (22401), UST_KILOAMPERE (7001), UST_KILOPASCAL (4901), UST_KILOVOLT (7301), UST_KILOVOLTAMPERE (8501), UST_KILOWATT (4001), UST_KIP (9101), UST_KIP_DASH_FT (11501), UST_KIP_DASH_FT_PER_FT (14301), UST_KIP_FT_PER_DEGREE (15001), UST_KIP_FT_PER_DEGREE_PER_FT (15201), UST_KIP_PER_FT (9901), UST_KIP_PER_IN_SUP_3 (13601), UST_KIP_PER_SQ_FT (10702), UST_KIP_PER_SQ_IN (13302), UST_KIPS_PER_CU_FT (14901), UST_KIPS_PER_IN (14801), UST_KJ (22301), UST_KJ_PER_KELVIN (18801), UST_KM_PER_H (22101), UST_KM_PER_SQ_S (19301), UST_KN_PER_M_SUP_3 (13401), UST_KRONER (17511), UST_KSF (10701), UST_KSI (13301), UST_KWH (3501), UST_L (2601), UST_L_PER_M (24201), UST_L_PER_S (6401), UST_L_PER_S_CU_M (17001), UST_L_PER_S_KW (17201), UST_L_PER_S_SQ_M (15702), UST_LB_FORCE (9401), UST_LB_FORCE_DASH_FT (11801), UST_LB_FORCE_DASH_FT_PER_FT (14601), UST_LB_FORCE_PER_CU_FT (13501), UST_LB_FORCE_PER_FT (10201), UST_LB_FORCE_PER_FT_H (14701), UST_LB_FORCE_PER_FT_S (13001), UST_LB_FORCE_PER_SQ_FT (11002), UST_LB_FORCE_PER_SQ_IN (5102), UST_LB_MASS (19101), UST_LB_MASS_PER_CU_FT (2901), UST_LB_MASS_PER_CU_IN (3001), UST_LB_MASS_PER_FT (21301), UST_LBF (9402), UST_LBF_DASH_FT (11802), UST_LBF_DASH_FT_PER_FT (14602), UST_LBF_PER_CU_FT (13502), UST_LBF_PER_FT (10202), UST_LBF_PER_SQ_FT (11003), UST_LBF_PER_SQ_IN (5105), UST_LBM (19102), UST_LBM_PER_CU_FT (2902), UST_LBM_PER_CU_IN (3002), UST_LBM_PER_FT (21302), UST_LBM_PER_FT_H (14702), UST_LBM_PER_FT_S (13002), UST_LBM_PER_SQ_FT (22501), UST_LF (301), UST_LM (8301), UST_LM_PER_W (17601), UST_LPM (24202), UST_LPS (6402), UST_LPS_PER_SQ_M (15701), UST_LX (7701), UST_M (1), UST_M_CARET_2 (1202), UST_M_CARET_3 (1402), UST_M_N (9001), UST_M_N_DASH_M (11401), UST_M_N_DASH_M_PER_M (14201), UST_M_N_PER_M (9801), UST_M_N_PER_M_SUP_2 (10601), UST_M_PER_K_N (11901), UST_M_PER_S (6101), UST_M_PER_SQ_S (19201), UST_M_SUP_2 (1201), UST_M_SUP_2_PER_K_N (12101), UST_M_SUP_3 (1401), UST_M_SUP_3_PER_K_N (12301), UST_M_SUP_4 (20101), UST_M_SUP_6 (20601), UST_MEGAPASCAL (5001), UST_MI_PER_H (22201), UST_MI_PER_SQ_S (19601), UST_MILLIAMPERE (7101), UST_MILLIVOLT (7401), UST_MIN (21901), UST_MM (201), UST_MM_CARET_2 (2202), UST_MM_CARET_3 (2502), UST_MM_HG (5301), UST_MM_SUP_2 (2201), UST_MM_SUP_3 (2501), UST_MM_SUP_4 (19901), UST_MM_SUP_6 (20401), UST_MS (21701), UST_N (8701), UST_N_DASH_M (11101), UST_N_DASH_M_PER_M (13901), UST_N_PER_M (9501), UST_N_PER_M_SUP_2 (10301), UST_N_PER_MM_SUP_2 (17901), UST_NG_PER_PA_S_SQ_M (22901), UST_NONE (0), UST_OHM_M (23001), UST_ONE_COLON (18201), UST_PA_S (12901), UST_PASCAL (4801), UST_PASCAL_PER_M (3801), UST_PER_MILLE_SIGN (23501), UST_PERCENT_SIGN (1901), UST_POUND (17504), UST_PSF (11001), UST_PSI (5101), UST_PSIA (5104), UST_PSIG (5103), UST_RAD (21401), UST_RAD_PER_S (21601), UST_S (21801), UST_SF (1101), UST_SF_PER_KBTU_PER_H (17702), UST_SF_PER_MBH (17701), UST_SF_PER_TON (17302), UST_SHEQEL (17508), UST_SLOPE_DEGREE_SYMBOL (16001), UST_SQ_CM_PER_M (21001), UST_SQ_FT_PER_FT (20701), UST_SQ_FT_PER_KBTU_PER_H (17704), UST_SQ_FT_PER_MBH (17703), UST_SQ_FT_PER_TON (17301), UST_SQ_IN_PER_FT (20801), UST_SQ_M_K_PER_WATT (18501), UST_SQ_M_PER_KW (17401), UST_SQ_M_PER_M (21101), UST_SQ_MM_PER_M (20901), UST_TF (9301), UST_TF_DASH_M (11701), UST_TF_DASH_M_PER_M (14501), UST_TF_PER_M (10101), UST_TF_PER_M_SUP_2 (10901), UST_THERM (3601), UST_TM (19001), UST_TON (16801), UST_TON_OF_REFRIGERATION (16802), UST_UIN_PER_IN_F (23901), UST_UM_PER_M_C (23801), UST_USGPH (6803), UST_USGPM (6703), UST_USTONNES_FORCE_AS_MASS_ST (24105), UST_USTONNES_FORCE_AS_MASS_T (24104), UST_USTONNES_FORCE_AS_MASS_TONS (24103), UST_USTONNES_FORCE_STF (24102), UST_USTONNES_FORCE_TONSF (24101), UST_USTONNES_MASS_ST (24003), UST_USTONNES_MASS_T (24002), UST_USTONNES_MASS_TONS (24001), UST_VOLT (7201), UST_VOLTAMPERE (8401), UST_WATT (3901), UST_WATT_PER_CU_FT (16401), UST_WATT_PER_CU_M (16501), UST_WATT_PER_SQ_FT (4501), UST_WATT_PER_SQ_M (4601), UST_WATT_PER_SQ_M_K (15401), UST_WATTS_PER_METER_KELVIN (22601), UST_WON (17507), UST_YEN (17505)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    UST_ACRES = None
    UST_AMPERE = None
    UST_ATM = None
    UST_BAHT = None
    UST_BAR = None
    UST_BTU = None
    UST_BTU_PER_F = None
    UST_BTU_PER_H = None
    UST_BTU_PER_H_CU_FT = None
    UST_BTU_PER_H_FT_DEGREE_F = None
    UST_BTU_PER_H_SQ_FT = None
    UST_BTU_PER_H_SQ_FT_DEGREE_F = None
    UST_BTU_PER_LB = None
    UST_BTU_PER_LB_DEGREE_F = None
    UST_BTU_PER_S = None
    UST_CAL = None
    UST_CAL_PER_S = None
    UST_CD = None
    UST_CD_PER_SQ_M = None
    UST_CF = None
    UST_CFM = None
    UST_CFM_PER_CF = None
    UST_CFM_PER_CU_FT = None
    UST_CFM_PER_SF = None
    UST_CFM_PER_SQ_FT = None
    UST_CFM_PER_TON = None
    UST_CHINESE_HONG_KONG_SAR = None
    UST_CM = None
    UST_CMH = None
    UST_CMS = None
    UST_CM_CARET_2 = None
    UST_CM_CARET_3 = None
    UST_CM_PER_MIN = None
    UST_CM_SUP_2 = None
    UST_CM_SUP_3 = None
    UST_CM_SUP_4 = None
    UST_CM_SUP_6 = None
    UST_COLON_10 = None
    UST_COLON_12 = None
    UST_CP = None
    UST_CPS = None
    UST_CU_FT_PER_MIN = None
    UST_CU_M_PER_H = None
    UST_CU_M_PER_S = None
    UST_CY = None
    UST_DA_N = None
    UST_DA_N_DASH_M = None
    UST_DA_N_DASH_M_PER_M = None
    UST_DA_N_PER_M = None
    UST_DA_N_PER_M_SUP_2 = None
    UST_DEGREE_C = None
    UST_DEGREE_C_DIFFERENCE = None
    UST_DEGREE_F = None
    UST_DEGREE_F_DIFFERENCE = None
    UST_DEGREE_R = None
    UST_DEGREE_R_DIFFERENCE = None
    UST_DEGREE_SYMBOL = None
    UST_DELTA_DEGREE_C = None
    UST_DELTA_DEGREE_F = None
    UST_DELTA_DEGREE_R = None
    UST_DELTA_KELVIN = None
    UST_DM = None
    UST_DOLLAR = None
    UST_DONG = None
    UST_EURO_PREFIX = None
    UST_EURO_SUFFIX = None
    UST_FC = None
    UST_FEET_OF_WATER = None
    UST_FEET_OF_WATER_PER_100FT = None
    UST_FL = None
    UST_FL_LOWERCASE = None
    UST_FOOT_SINGLE_QUOTE = None
    UST_FPM = None
    UST_FPS = None
    UST_FT = None
    UST_FTC = None
    UST_FTH2O = None
    UST_FTH2O_PER_100FT = None
    UST_FTL = None
    UST_FT_CARET_2 = None
    UST_FT_CARET_3 = None
    UST_FT_OF_WATER = None
    UST_FT_OF_WATER_PER_100FT = None
    UST_FT_PER_KIP = None
    UST_FT_PER_MIN = None
    UST_FT_PER_S = None
    UST_FT_PER_SQ_S = None
    UST_FT_SUP_2 = None
    UST_FT_SUP_2_PER_KIP = None
    UST_FT_SUP_3 = None
    UST_FT_SUP_3_PER_KIP = None
    UST_FT_SUP_4 = None
    UST_FT_SUP_6 = None
    UST_GAL = None
    UST_GAL_PER_H = None
    UST_GAL_PER_MIN = None
    UST_GPH = None
    UST_GPM = None
    UST_GRAD = None
    UST_GR_PER_H_SQ_FT_IN_HG = None
    UST_H = None
    UST_HECTARES = None
    UST_HP = None
    UST_HZ = None
    UST_H_SQ_FT_DEGREE_F_PER_BTU = None
    UST_IN = None
    UST_INCH_DOUBLE_QUOTE = None
    UST_INV_DEGREE_C = None
    UST_INV_DEGREE_F = None
    UST_INV_KIP = None
    UST_INV_K_N = None
    UST_IN_CARET_2 = None
    UST_IN_CARET_3 = None
    UST_IN_HG = None
    UST_IN_PER_SQ_S = None
    UST_IN_SUP_2 = None
    UST_IN_SUP_3 = None
    UST_IN_SUP_4 = None
    UST_IN_SUP_6 = None
    UST_IN_WG = None
    UST_IN_WG_PER_100FT = None
    UST_JOULE = None
    UST_J_PER_G = None
    UST_J_PER_G_CELSIUS = None
    UST_J_PER_KELVIN = None
    UST_J_PER_KG_CELSIUS = None
    UST_KCAL = None
    UST_KCAL_PER_S = None
    UST_KELVIN = None
    UST_KELVIN_DIFFERENCE = None
    UST_KGF = None
    UST_KGF_DASH_M = None
    UST_KGF_DASH_M_PER_M = None
    UST_KGF_PER_M = None
    UST_KGF_PER_M_SUP_2 = None
    UST_KGM = None
    UST_KGM_PER_M = None
    UST_KGM_PER_SQ_M = None
    UST_KG_PER_CU_M = None
    UST_KILOAMPERE = None
    UST_KILOPASCAL = None
    UST_KILOVOLT = None
    UST_KILOVOLTAMPERE = None
    UST_KILOWATT = None
    UST_KIP = None
    UST_KIPS_PER_CU_FT = None
    UST_KIPS_PER_IN = None
    UST_KIP_DASH_FT = None
    UST_KIP_DASH_FT_PER_FT = None
    UST_KIP_FT_PER_DEGREE = None
    UST_KIP_FT_PER_DEGREE_PER_FT = None
    UST_KIP_PER_FT = None
    UST_KIP_PER_IN_SUP_3 = None
    UST_KIP_PER_SQ_FT = None
    UST_KIP_PER_SQ_IN = None
    UST_KJ = None
    UST_KJ_PER_KELVIN = None
    UST_KM_PER_H = None
    UST_KM_PER_SQ_S = None
    UST_KN_PER_M_SUP_3 = None
    UST_KRONER = None
    UST_KSF = None
    UST_KSI = None
    UST_KWH = None
    UST_K_N = None
    UST_K_N_DASH_M = None
    UST_K_N_DASH_M_PER_M = None
    UST_K_N_M_PER_DEGREE = None
    UST_K_N_M_PER_DEGREE_PER_M = None
    UST_K_N_PER_CM_SUP_2 = None
    UST_K_N_PER_M = None
    UST_K_N_PER_MM_SUP_2 = None
    UST_K_N_PER_M_SUP_2 = None
    UST_L = None
    UST_LBF = None
    UST_LBF_DASH_FT = None
    UST_LBF_DASH_FT_PER_FT = None
    UST_LBF_PER_CU_FT = None
    UST_LBF_PER_FT = None
    UST_LBF_PER_SQ_FT = None
    UST_LBF_PER_SQ_IN = None
    UST_LBM = None
    UST_LBM_PER_CU_FT = None
    UST_LBM_PER_CU_IN = None
    UST_LBM_PER_FT = None
    UST_LBM_PER_FT_H = None
    UST_LBM_PER_FT_S = None
    UST_LBM_PER_SQ_FT = None
    UST_LB_FORCE = None
    UST_LB_FORCE_DASH_FT = None
    UST_LB_FORCE_DASH_FT_PER_FT = None
    UST_LB_FORCE_PER_CU_FT = None
    UST_LB_FORCE_PER_FT = None
    UST_LB_FORCE_PER_FT_H = None
    UST_LB_FORCE_PER_FT_S = None
    UST_LB_FORCE_PER_SQ_FT = None
    UST_LB_FORCE_PER_SQ_IN = None
    UST_LB_MASS = None
    UST_LB_MASS_PER_CU_FT = None
    UST_LB_MASS_PER_CU_IN = None
    UST_LB_MASS_PER_FT = None
    UST_LF = None
    UST_LM = None
    UST_LM_PER_W = None
    UST_LPM = None
    UST_LPS = None
    UST_LPS_PER_SQ_M = None
    UST_LX = None
    UST_L_PER_M = None
    UST_L_PER_S = None
    UST_L_PER_S_CU_M = None
    UST_L_PER_S_KW = None
    UST_L_PER_S_SQ_M = None
    UST_M = None
    UST_MEGAPASCAL = None
    UST_MILLIAMPERE = None
    UST_MILLIVOLT = None
    UST_MIN = None
    UST_MI_PER_H = None
    UST_MI_PER_SQ_S = None
    UST_MM = None
    UST_MM_CARET_2 = None
    UST_MM_CARET_3 = None
    UST_MM_HG = None
    UST_MM_SUP_2 = None
    UST_MM_SUP_3 = None
    UST_MM_SUP_4 = None
    UST_MM_SUP_6 = None
    UST_MS = None
    UST_M_CARET_2 = None
    UST_M_CARET_3 = None
    UST_M_N = None
    UST_M_N_DASH_M = None
    UST_M_N_DASH_M_PER_M = None
    UST_M_N_PER_M = None
    UST_M_N_PER_M_SUP_2 = None
    UST_M_PER_K_N = None
    UST_M_PER_S = None
    UST_M_PER_SQ_S = None
    UST_M_SUP_2 = None
    UST_M_SUP_2_PER_K_N = None
    UST_M_SUP_3 = None
    UST_M_SUP_3_PER_K_N = None
    UST_M_SUP_4 = None
    UST_M_SUP_6 = None
    UST_N = None
    UST_NG_PER_PA_S_SQ_M = None
    UST_NONE = None
    UST_N_DASH_M = None
    UST_N_DASH_M_PER_M = None
    UST_N_PER_M = None
    UST_N_PER_MM_SUP_2 = None
    UST_N_PER_M_SUP_2 = None
    UST_OHM_M = None
    UST_ONE_COLON = None
    UST_PASCAL = None
    UST_PASCAL_PER_M = None
    UST_PA_S = None
    UST_PERCENT_SIGN = None
    UST_PER_MILLE_SIGN = None
    UST_POUND = None
    UST_PSF = None
    UST_PSI = None
    UST_PSIA = None
    UST_PSIG = None
    UST_RAD = None
    UST_RAD_PER_S = None
    UST_S = None
    UST_SF = None
    UST_SF_PER_KBTU_PER_H = None
    UST_SF_PER_MBH = None
    UST_SF_PER_TON = None
    UST_SHEQEL = None
    UST_SLOPE_DEGREE_SYMBOL = None
    UST_SQ_CM_PER_M = None
    UST_SQ_FT_PER_FT = None
    UST_SQ_FT_PER_KBTU_PER_H = None
    UST_SQ_FT_PER_MBH = None
    UST_SQ_FT_PER_TON = None
    UST_SQ_IN_PER_FT = None
    UST_SQ_MM_PER_M = None
    UST_SQ_M_K_PER_WATT = None
    UST_SQ_M_PER_KW = None
    UST_SQ_M_PER_M = None
    UST_TF = None
    UST_TF_DASH_M = None
    UST_TF_DASH_M_PER_M = None
    UST_TF_PER_M = None
    UST_TF_PER_M_SUP_2 = None
    UST_THERM = None
    UST_TM = None
    UST_TON = None
    UST_TON_OF_REFRIGERATION = None
    UST_UIN_PER_IN_F = None
    UST_UM_PER_M_C = None
    UST_USGPH = None
    UST_USGPM = None
    UST_USTONNES_FORCE_AS_MASS_ST = None
    UST_USTONNES_FORCE_AS_MASS_T = None
    UST_USTONNES_FORCE_AS_MASS_TONS = None
    UST_USTONNES_FORCE_STF = None
    UST_USTONNES_FORCE_TONSF = None
    UST_USTONNES_MASS_ST = None
    UST_USTONNES_MASS_T = None
    UST_USTONNES_MASS_TONS = None
    UST_VOLT = None
    UST_VOLTAMPERE = None
    UST_WATT = None
    UST_WATTS_PER_METER_KELVIN = None
    UST_WATT_PER_CU_FT = None
    UST_WATT_PER_CU_M = None
    UST_WATT_PER_SQ_FT = None
    UST_WATT_PER_SQ_M = None
    UST_WATT_PER_SQ_M_K = None
    UST_WON = None
    UST_YEN = None
    value__ = None


class UnitSystem(Enum, IComparable, IFormattable, IConvertible):
    """
    A system of measurement: Metric or Imperial units.
    
    enum UnitSystem, values: Imperial (1), Metric (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Imperial = None
    Metric = None
    value__ = None


class UnitType(Enum, IComparable, IFormattable, IConvertible):
    """
    The type of physical quantity to be measured, for example length or force.
    
    enum UnitType, values: UT_Acceleration (92), UT_Angle (3), UT_Area (1), UT_AreaForce (28), UT_AreaForcePerLength (54), UT_AreaForceScale (32), UT_Bar_Diameter (93), UT_Color_Temperature (75), UT_Crack_Width (94), UT_Currency (72), UT_Custom (-1), UT_DecSheetLength (76), UT_Displacement_Deflection (95), UT_Electrical_Apparent_Power (34), UT_Electrical_CableTraySize (82), UT_Electrical_ConduitSize (83), UT_Electrical_Current (19), UT_Electrical_Demand_Factor (86), UT_Electrical_Efficacy (73), UT_Electrical_Frequency (21), UT_Electrical_Illuminance (22), UT_Electrical_Luminance (78), UT_Electrical_Luminous_Flux (23), UT_Electrical_Luminous_Intensity (77), UT_Electrical_Potential (20), UT_Electrical_Power (24), UT_Electrical_Power_Density (35), UT_Electrical_Resistivity (121), UT_Electrical_Temperature (81), UT_Electrical_TemperatureDifference (129), UT_Electrical_Wattage (74), UT_Energy (96), UT_Force (26), UT_ForceLengthPerAngle (51), UT_ForcePerLength (50), UT_ForceScale (30), UT_HVAC_Airflow (15), UT_HVAC_Airflow_Density (58), UT_HVAC_Airflow_Divided_By_Cooling_Load (67), UT_HVAC_Airflow_Divided_By_Volume (66), UT_HVAC_Area_Divided_By_Cooling_Load (68), UT_HVAC_Area_Divided_By_Heating_Load (79), UT_HVAC_CoefficientOfHeatTransfer (57), UT_HVAC_Cooling_Load (60), UT_HVAC_Cooling_Load_Divided_By_Area (61), UT_HVAC_Cooling_Load_Divided_By_Volume (62), UT_HVAC_CrossSection (17), UT_HVAC_Density (7), UT_HVAC_DuctInsulationThickness (87), UT_HVAC_DuctLiningThickness (88), UT_HVAC_DuctSize (16), UT_HVAC_Energy (8), UT_HVAC_Factor (80), UT_HVAC_Friction (9), UT_HVAC_HeatGain (18), UT_HVAC_Heating_Load (63), UT_HVAC_Heating_Load_Divided_By_Area (64), UT_HVAC_Heating_Load_Divided_By_Volume (65), UT_HVAC_Permeability (120), UT_HVAC_Power (10), UT_HVAC_Power_Density (11), UT_HVAC_Pressure (12), UT_HVAC_Roughness (25), UT_HVAC_Slope (70), UT_HVAC_SpecificHeat (118), UT_HVAC_SpecificHeatOfVaporization (119), UT_HVAC_Temperature (13), UT_HVAC_TemperatureDifference (127), UT_HVAC_ThermalConductivity (117), UT_HVAC_ThermalMass (91), UT_HVAC_ThermalResistance (90), UT_HVAC_Velocity (14), UT_HVAC_Viscosity (56), UT_Length (0), UT_LinearForce (27), UT_LinearForceLengthPerAngle (53), UT_LinearForcePerLength (52), UT_LinearForceScale (31), UT_LinearMoment (48), UT_LinearMomentScale (49), UT_Mass (98), UT_Mass_per_Unit_Length (99), UT_MassDensity (122), UT_MassPerUnitArea (123), UT_Moment (29), UT_Moment_of_Inertia (100), UT_MomentScale (33), UT_Number (4), UT_Period (102), UT_Pipe_Dimension (124), UT_PipeInsulationThickness (89), UT_PipeMass (125), UT_PipeMassPerUnitLength (126), UT_PipeSize (43), UT_Piping_Density (36), UT_Piping_Flow (37), UT_Piping_Friction (38), UT_Piping_Pressure (39), UT_Piping_Roughness (44), UT_Piping_Slope (71), UT_Piping_Temperature (40), UT_Piping_TemperatureDifference (128), UT_Piping_Velocity (41), UT_Piping_Viscosity (42), UT_Piping_Volume (55), UT_Pulsation (103), UT_Reinforcement_Area (104), UT_Reinforcement_Area_per_Unit_Length (105), UT_Reinforcement_Cover (106), UT_Reinforcement_Length (85), UT_Reinforcement_Spacing (107), UT_Reinforcement_Volume (84), UT_Rotation (108), UT_Section_Area (109), UT_Section_Dimension (110), UT_Section_Modulus (111), UT_Section_Property (112), UT_SheetLength (5), UT_SiteAngle (6), UT_Slope (59), UT_Stress (45), UT_Structural_Frequency (97), UT_Structural_Velocity (113), UT_Surface_Area (101), UT_ThermalExpansion (47), UT_Undefined (-2), UT_UnitWeight (46), UT_Volume (2), UT_Warping_Constant (114), UT_Weight (115), UT_Weight_per_Unit_Length (116), UT_WireSize (69)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    UT_Acceleration = None
    UT_Angle = None
    UT_Area = None
    UT_AreaForce = None
    UT_AreaForcePerLength = None
    UT_AreaForceScale = None
    UT_Bar_Diameter = None
    UT_Color_Temperature = None
    UT_Crack_Width = None
    UT_Currency = None
    UT_Custom = None
    UT_DecSheetLength = None
    UT_Displacement_Deflection = None
    UT_Electrical_Apparent_Power = None
    UT_Electrical_CableTraySize = None
    UT_Electrical_ConduitSize = None
    UT_Electrical_Current = None
    UT_Electrical_Demand_Factor = None
    UT_Electrical_Efficacy = None
    UT_Electrical_Frequency = None
    UT_Electrical_Illuminance = None
    UT_Electrical_Luminance = None
    UT_Electrical_Luminous_Flux = None
    UT_Electrical_Luminous_Intensity = None
    UT_Electrical_Potential = None
    UT_Electrical_Power = None
    UT_Electrical_Power_Density = None
    UT_Electrical_Resistivity = None
    UT_Electrical_Temperature = None
    UT_Electrical_TemperatureDifference = None
    UT_Electrical_Wattage = None
    UT_Energy = None
    UT_Force = None
    UT_ForceLengthPerAngle = None
    UT_ForcePerLength = None
    UT_ForceScale = None
    UT_HVAC_Airflow = None
    UT_HVAC_Airflow_Density = None
    UT_HVAC_Airflow_Divided_By_Cooling_Load = None
    UT_HVAC_Airflow_Divided_By_Volume = None
    UT_HVAC_Area_Divided_By_Cooling_Load = None
    UT_HVAC_Area_Divided_By_Heating_Load = None
    UT_HVAC_CoefficientOfHeatTransfer = None
    UT_HVAC_Cooling_Load = None
    UT_HVAC_Cooling_Load_Divided_By_Area = None
    UT_HVAC_Cooling_Load_Divided_By_Volume = None
    UT_HVAC_CrossSection = None
    UT_HVAC_Density = None
    UT_HVAC_DuctInsulationThickness = None
    UT_HVAC_DuctLiningThickness = None
    UT_HVAC_DuctSize = None
    UT_HVAC_Energy = None
    UT_HVAC_Factor = None
    UT_HVAC_Friction = None
    UT_HVAC_HeatGain = None
    UT_HVAC_Heating_Load = None
    UT_HVAC_Heating_Load_Divided_By_Area = None
    UT_HVAC_Heating_Load_Divided_By_Volume = None
    UT_HVAC_Permeability = None
    UT_HVAC_Power = None
    UT_HVAC_Power_Density = None
    UT_HVAC_Pressure = None
    UT_HVAC_Roughness = None
    UT_HVAC_Slope = None
    UT_HVAC_SpecificHeat = None
    UT_HVAC_SpecificHeatOfVaporization = None
    UT_HVAC_Temperature = None
    UT_HVAC_TemperatureDifference = None
    UT_HVAC_ThermalConductivity = None
    UT_HVAC_ThermalMass = None
    UT_HVAC_ThermalResistance = None
    UT_HVAC_Velocity = None
    UT_HVAC_Viscosity = None
    UT_Length = None
    UT_LinearForce = None
    UT_LinearForceLengthPerAngle = None
    UT_LinearForcePerLength = None
    UT_LinearForceScale = None
    UT_LinearMoment = None
    UT_LinearMomentScale = None
    UT_Mass = None
    UT_MassDensity = None
    UT_MassPerUnitArea = None
    UT_Mass_per_Unit_Length = None
    UT_Moment = None
    UT_MomentScale = None
    UT_Moment_of_Inertia = None
    UT_Number = None
    UT_Period = None
    UT_PipeInsulationThickness = None
    UT_PipeMass = None
    UT_PipeMassPerUnitLength = None
    UT_PipeSize = None
    UT_Pipe_Dimension = None
    UT_Piping_Density = None
    UT_Piping_Flow = None
    UT_Piping_Friction = None
    UT_Piping_Pressure = None
    UT_Piping_Roughness = None
    UT_Piping_Slope = None
    UT_Piping_Temperature = None
    UT_Piping_TemperatureDifference = None
    UT_Piping_Velocity = None
    UT_Piping_Viscosity = None
    UT_Piping_Volume = None
    UT_Pulsation = None
    UT_Reinforcement_Area = None
    UT_Reinforcement_Area_per_Unit_Length = None
    UT_Reinforcement_Cover = None
    UT_Reinforcement_Length = None
    UT_Reinforcement_Spacing = None
    UT_Reinforcement_Volume = None
    UT_Rotation = None
    UT_Section_Area = None
    UT_Section_Dimension = None
    UT_Section_Modulus = None
    UT_Section_Property = None
    UT_SheetLength = None
    UT_SiteAngle = None
    UT_Slope = None
    UT_Stress = None
    UT_Structural_Frequency = None
    UT_Structural_Velocity = None
    UT_Surface_Area = None
    UT_ThermalExpansion = None
    UT_Undefined = None
    UT_UnitWeight = None
    UT_Volume = None
    UT_Warping_Constant = None
    UT_Weight = None
    UT_Weight_per_Unit_Length = None
    UT_WireSize = None
    value__ = None


class UnitUtils(object):
    """ A utility class of functions related to units. """
    @staticmethod
    def Convert(value, currentDisplayUnit, desiredDisplayUnit):
        """
        Convert(value: float, currentDisplayUnit: DisplayUnitType, desiredDisplayUnit: DisplayUnitType) -> float
        
            Converts a value from one display unit to another, such as square feet to 
             square meters.
        
        
            value: The value to convert.
            currentDisplayUnit: The current display unit.
            desiredDisplayUnit: The desired display unit.
            Returns: The converted value.
        """
        pass

    @staticmethod
    def ConvertFromInternalUnits(value, displayUnit):
        """
        ConvertFromInternalUnits(value: float, displayUnit: DisplayUnitType) -> float
        
            Converts a value from Revit's internal units to a given display unit.
        
            value: The value to convert.
            displayUnit: The desired display unit.
            Returns: The converted value.
        """
        pass

    @staticmethod
    def ConvertToInternalUnits(value, displayUnit):
        """
        ConvertToInternalUnits(value: float, displayUnit: DisplayUnitType) -> float
        
            Converts a value from a given display unit to Revit's internal units.
        
            value: The value to convert.
            displayUnit: The value's display unit.
            Returns: The converted value.
        """
        pass

    @staticmethod
    def GetTypeCatalogString(*__args):
        """
        GetTypeCatalogString(unitType: UnitType) -> str
        
            Gets the string used in type catalogs to identify a given unit type.
        
            unitType: The unit type.
            Returns: The type catalog string, or an empty string if the unit type cannot be used in 
             type catalogs.
        
        GetTypeCatalogString(displayUnit: DisplayUnitType) -> str
        
            Gets the string used in type catalogs to identify a given display unit.
        
            displayUnit: The display unit.
            Returns: The type catalog string, or an empty string if the display unit cannot be used 
             in type catalogs.
        """
        pass

    @staticmethod
    def GetUnitGroup(unitType):
        """
        GetUnitGroup(unitType: UnitType) -> UnitGroup
        
            Gets the unit group for a given unit type.
        
            unitType: The unit type.
            Returns: The unit group.
        """
        pass

    @staticmethod
    def GetValidDisplayUnits(unitType=None):
        """
        GetValidDisplayUnits() -> IList[DisplayUnitType]
        
            Gets all valid display units.
            Returns: The valid display units.
        GetValidDisplayUnits(unitType: UnitType) -> IList[DisplayUnitType]
        
            Gets all valid display units for a given unit type.
        
            unitType: The unit type.
            Returns: The valid display units.
        """
        pass

    @staticmethod
    def GetValidUnitTypes():
        """
        GetValidUnitTypes() -> IList[UnitType]
        
            Gets all valid unit types.
            Returns: The valid unit types.
        """
        pass

    @staticmethod
    def IsValidDisplayUnit(*__args):
        """
        IsValidDisplayUnit(displayUnit: DisplayUnitType) -> bool
        
            Checks whether a display unit is valid.
        
            displayUnit: The display unit to check.
            Returns: True if the display unit is valid, false otherwise.
        IsValidDisplayUnit(unitType: UnitType, displayUnit: DisplayUnitType) -> bool
        
            Checks whether a display unit is valid for a given unit type.
        
            unitType: The unit type.
            displayUnit: The display unit to check.
            Returns: True if the display unit is valid, false otherwise.
        """
        pass

    @staticmethod
    def IsValidUnitType(unitType):
        """
        IsValidUnitType(unitType: UnitType) -> bool
        
            Checks whether a unit type is valid.
        
            unitType: The unit type to check.
            Returns: True if the unit type is valid, false otherwise.
        """
        pass

    __all__ = [
        'Convert',
        'ConvertFromInternalUnits',
        'ConvertToInternalUnits',
        'GetTypeCatalogString',
        'GetUnitGroup',
        'GetValidDisplayUnits',
        'GetValidUnitTypes',
        'IsValidDisplayUnit',
        'IsValidUnitType',
    ]


class UpdaterData(object, IDisposable):
    """ Service class that is passed to an Updater to prove access to update execution context """
    def Dispose(self):
        """ Dispose(self: UpdaterData) """
        pass

    def GetAddedElementIds(self):
        """
        GetAddedElementIds(self: UpdaterData) -> ICollection[ElementId]
        
            Returns set of elements newly added to the document.
           This set is mutually 
             exclusive of elements returned by getDeletedElementIds() and 
             getModifiedElementIds().
        
            Returns: Set of elements that were added to the document and triggered the call to 
             execute()
           Note: This will only return elements if the trigger registered 
             for the associated updater
           contains the ChangeType returned by 
             Element::getChangeTypeElementAddition()
        """
        pass

    def GetDeletedElementIds(self):
        """
        GetDeletedElementIds(self: UpdaterData) -> ICollection[ElementId]
        
            Returns set of elements that were deleted from the document.
           This set is 
             mutually exclusive of elements returned by getAddedElementIds() and 
             getModifiedElementIds().
        
            Returns: Set of elements that were deleted from the document and triggered the call to 
             execute()
           Note: This will only return elements if the trigger registered 
             for the associated updater
           contains the ChangeType returned by 
             Element::getChangeTypeElementDeletion()
        """
        pass

    def GetDocument(self):
        """
        GetDocument(self: UpdaterData) -> Document
        
            Returns document associated with this UpdaterData
        """
        pass

    def GetModifiedElementIds(self):
        """
        GetModifiedElementIds(self: UpdaterData) -> ICollection[ElementId]
        
            Returns set of elements that were modified.
           This set is mutually exclusive 
             of elements returned by getAddedElementIds() and getDeletedElementIds().
        
            Returns: Set of elements that were modified in the document and triggered the call to 
             execute()
           Note: This set only contains modified elements (i.e. it is 
             mutually exclusive of elements returned
           by getAddedElementIds() and 
             getDeletedElementIds()). It does not contain any elements that were
           added 
             to or deleted from the document during the current transaction.
           Newly 
             added/deleted elements will be reported by 
             getAddedElementIds()/getDeletedElementIds(),
           even if they were also 
             modified during the same transaction, but only if 
             ChangeTypeElementAddition/Deletion
           is registered as a trigger for the 
             current Updater. I.e. Element creation and modification in
           the same 
             transaction is considered to be "creation" only. Newly created elements are not 
             considered to be
           "modified" and are therefore not returned as part of 
             getModifiedElementIds()
        """
        pass

    def IsChangeTriggered(self, id, type):
        """
        IsChangeTriggered(self: UpdaterData, id: ElementId, type: ChangeType) -> bool
        
            Allows updater to check if specific change has happened to an element.
           
             Compares input type to the types that caused Updater::execute() to be 
             triggered.
           If input type was not registered as a trigger for the associated 
             Updater, this
           method will always return false for that ChangeType.
           For 
             example, if the only trigger registered for UpdaterX is ChangeTypeAny for 
             Element A,
           then passing in ChangeTypeGeometry will return false even if the 
             geometry of A changed because
           the registered trigger was ChangeTypeAny. 
             However, passing in ChangeTypeAny will return true.
        
        
            id: Id of element to check
            type: ChangeType to check
            Returns: True if ChangeType happened to specified element
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: UpdaterData, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: UpdaterData) -> bool

"""



class UpdaterId(object, IDisposable):
    """
    A unique identifier of an Updater
    
    UpdaterId(addInId: AddInId, val: Guid)
    """
    def Dispose(self):
        """ Dispose(self: UpdaterId) """
        pass

    def GetAddInId(self):
        """
        GetAddInId(self: UpdaterId) -> AddInId
        
            AddInId of the UpdaterId
        """
        pass

    def GetGUID(self):
        """
        GetGUID(self: UpdaterId) -> Guid
        
            GUID value of the UpdaterId
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: UpdaterId, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, addInId, val):
        """ __new__(cls: type, addInId: AddInId, val: Guid) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: UpdaterId) -> bool

"""



class UpdaterInfo(object, IDisposable):
    """ Information of an updater, such as: Name, AdditionalInformation, name of the application that owns the updater, etc. """
    def Dispose(self):
        """ Dispose(self: UpdaterInfo) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: UpdaterInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AdditionalInformation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Additional information about the updater.

Get: AdditionalInformation(self: UpdaterInfo) -> str

"""

    ApplicationName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Name of the application that owns the updater.

Get: ApplicationName(self: UpdaterInfo) -> str

"""

    IsOptional = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the updater is optional or not.

Get: IsOptional(self: UpdaterInfo) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: UpdaterInfo) -> bool

"""

    UpdaterName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Name of the updater.

Get: UpdaterName(self: UpdaterInfo) -> str

"""



class UpdaterRegistry(object, IDisposable):
    """ An object that stores and manages all updaters registered in the current session. """
    @staticmethod
    def AddTrigger(id, *__args):
        """
        AddTrigger(id: UpdaterId, document: Document, elements: ICollection[ElementId], change: ChangeType)AddTrigger(id: UpdaterId, document: Document, filter: ElementFilter, change: ChangeType)
            Adds trigger with the specified element filter and ChangeType for the specified 
             document
        
        
            id: Id of updater that trigger should be added to
            document: Document that elements in 'elements' are contained in
            filter: Element filter that defines elements that affect this trigger
            change: ChangeType associated with this trigger
        AddTrigger(id: UpdaterId, filter: ElementFilter, change: ChangeType)
            Adds trigger with the specified element filter and ChangeType for all documents 
             associated with this Updater
        
        
            id: Id of updater that trigger should be added to
            filter: Element filter that defines elements that affect this trigger
            change: ChangeType associated with this trigger
        """
        pass

    @staticmethod
    def DisableUpdater(id):
        """
        DisableUpdater(id: UpdaterId)
            Disables the updater.
        
            id: The updater id.
        """
        pass

    def Dispose(self):
        """ Dispose(self: UpdaterRegistry) """
        pass

    @staticmethod
    def EnableUpdater(id):
        """
        EnableUpdater(id: UpdaterId)
            Enables the updater.
        
            id: The updater id.
        """
        pass

    @staticmethod
    def GetIsUpdaterOptional(id):
        """
        GetIsUpdaterOptional(id: UpdaterId) -> bool
        
            Check if the updater is optional or not.
        
            id: Id of the updater to check
            Returns: Returns True if the updater is optional, False otherwise.
        """
        pass

    @staticmethod
    def GetRegisteredUpdaterInfos(document=None):
        """
        GetRegisteredUpdaterInfos(document: Document) -> IList[UpdaterInfo]
        
            Returns information about all updaters applicable to the given document.
        
            document: The document to which sought updaters are applicable to.
            Returns: List of UpdaterInfo structures
        GetRegisteredUpdaterInfos() -> IList[UpdaterInfo]
        
            Returns UpdaterInfos for all the application-wide updaters.
            Returns: List of UpdaterInfo structures
        """
        pass

    @staticmethod
    def IsUpdaterEnabled(id):
        """
        IsUpdaterEnabled(id: UpdaterId) -> bool
        
            Checks if the updater is enabled or not.
        
            id: The updater id.
            Returns: Returns true if the updater is enabled, false otherwise.
        """
        pass

    @staticmethod
    def IsUpdaterRegistered(id, document=None):
        """
        IsUpdaterRegistered(id: UpdaterId) -> bool
        
            Checks whether updater with the given id is registered
        
            id: Id of the updater being tested.
            Returns: Returns true if the updater is registered.
        IsUpdaterRegistered(id: UpdaterId, document: Document) -> bool
        
            Checks whether updater with the given id is registered in a document.
        
            id: Id of the updater being tested.
            document: Document in which this updater is tested whether it's registered or not.
            Returns: Returns True if the updater is registered in the given document.
        """
        pass

    @staticmethod
    def RegisterUpdater(updater, *__args):
        """
        RegisterUpdater(updater: IUpdater, document: Document)
            Registers the updater for a specified document, which means
           the updater can 
             only be triggered by changes made in that document.
        
        
            updater: Updater to be registered
            document: Document for which this updater is to be registered
        RegisterUpdater(updater: IUpdater)
            Registers an updater application-wide, which means
           the updater may get 
             triggered in any open document.
        
        
            updater: Updater to be registered
        RegisterUpdater(updater: IUpdater, document: Document, isOptional: bool)
            Registers the updater for a specified document, which means
           the updater can 
             only be triggered by changes made in that document.
        
        
            updater: Updater to be registered.
            document: Document for which this updater is to be registered.
            isOptional: This argument controls whether the updater should be required next time a 
             document
           is open in which the updater had been previously used. If a 
             non-optional updater is
           not found (i.e. currently not registered), the end 
             user will be presented with a warning
           and choices to resolve the situation.
        
        RegisterUpdater(updater: IUpdater, isOptional: bool)
            Registers an updater application-wide, which means
           the updater may get 
             triggered in any open document.
        
        
            updater: Updater to be registered
            isOptional: This argument controls whether the updater should be required next time a 
             document
           is open in which the updater had been previously used. If a 
             non-optional updater is
           not found (i.e. currently not registered), the end 
             user will be presented with a warning
           and choices to resolve the situation.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: UpdaterRegistry, disposing: bool) """
        pass

    @staticmethod
    def RemoveAllTriggers(id):
        """
        RemoveAllTriggers(id: UpdaterId)
            Removes all triggers associated with Updater with specified UpdaterId.
           Does 
             not unregister updater.
        
        
            id: Id of specified updater
        """
        pass

    @staticmethod
    def RemoveDocumentTriggers(id, document):
        """
        RemoveDocumentTriggers(id: UpdaterId, document: Document)
            Removes all triggers associated with specified document and Updater
           Does 
             not unregister updater.
        
        
            id: Id of specified updater
            document: Document for which to remove triggers
        """
        pass

    @staticmethod
    def SetExecutionOrder(first, second):
        """
        SetExecutionOrder(first: UpdaterId, second: UpdaterId)
            Forces execution order between two updaters
           Execution order: first before 
             second
        
        
            first: Id of first Updater
            second: Id of second Updater
        """
        pass

    @staticmethod
    def SetIsUpdaterOptional(id, isOptional):
        """
        SetIsUpdaterOptional(id: UpdaterId, isOptional: bool)
            Sets a flag indicating whether an updater is optional or not.
        
            id: Id of the updater
            isOptional: Use True to make the updater optional, false to make it a mandatory updater.
        """
        pass

    @staticmethod
    def UnregisterUpdater(id, document=None):
        """
        UnregisterUpdater(id: UpdaterId)
            Removes the updater associated with the input id from the UpdaterRegistry.
           
             Also removes all triggers associated with the Updater.
        
        
            id: Id of updater to be removed
        UnregisterUpdater(id: UpdaterId, document: Document)
            Unregisters an updater for the given document.
        
            id: Id of updater to be unregistered.
            document: Document for which this updater is to be unregistered.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: UpdaterRegistry) -> bool

"""



class UV(object):
    """
    Object representing coordinates in 2-dimensional space.
    
    UV(u: float, v: float)
    UV()
    """
    def Add(self, source):
        """
        Add(self: UV, source: UV) -> UV
        
            Adds the specified 2-D vector to this 2-D vector and returns the result.
        
            source: The vector to add to this vector.
            Returns: The 2-D vector equal to the sum of the two vectors.
        """
        pass

    def AngleTo(self, source):
        """
        AngleTo(self: UV, source: UV) -> float
        
            Returns the angle between this vector and the specified vector.
        
            source: The specified vector.
            Returns: The real number between 0 and 2*PI equal to the angle between the two vectors 
             in radians.
        """
        pass

    def CrossProduct(self, source):
        """
        CrossProduct(self: UV, source: UV) -> float
        
            The cross product of this 2-D vector and the specified 2-D vector.
        
            source: The vector to multiply with this vector.
            Returns: The real number equal to the cross product.
        """
        pass

    def DistanceTo(self, source):
        """
        DistanceTo(self: UV, source: UV) -> float
        
            Returns the distance from this 2-D point to the specified 2-D point.
        
            source: The specified point.
            Returns: The real number equal to the distance between the two points.
        """
        pass

    def Divide(self, value):
        """
        Divide(self: UV, value: float) -> UV
        
            Divides this 2-D vector by the specified value and returns the result.
        
            value: The value to divide this vector by.
            Returns: The divided 2-D vector.
        """
        pass

    def DotProduct(self, source):
        """
        DotProduct(self: UV, source: UV) -> float
        
            The dot product of this 2-D vector and the specified 2-D vector.
        
            source: The vector to multiply with this vector.
            Returns: The real number equal to the dot product.
        """
        pass

    def GetLength(self):
        """
        GetLength(self: UV) -> float
        
            The length of this 2-D vector.
        """
        pass

    def IsAlmostEqualTo(self, source, tolerance=None):
        """
        IsAlmostEqualTo(self: UV, source: UV) -> bool
        
            Determines whether this 2-D vector and the specified 2-D vector are the same 
             within the tolerance (1.0e-09).
        
        
            source: The vector to compare with this vector.
            Returns: True if the vectors are the same; otherwise, false.
        IsAlmostEqualTo(self: UV, source: UV, tolerance: float) -> bool
        
            Determines whether this 2-D vector and the specified 2-D vector are the same 
             within a specified tolerance.
        
        
            source: The vector to compare with this vector.
            tolerance: The tolerance for equality check.
            Returns: True if the vectors are the same; otherwise, false.
        """
        pass

    def IsUnitLength(self):
        """
        IsUnitLength(self: UV) -> bool
        
            The boolean value indicates whether this 2-D vector is of unit length.
        """
        pass

    def IsZeroLength(self):
        """
        IsZeroLength(self: UV) -> bool
        
            The boolean value indicates whether this 2-D vector is a zero vector.
        """
        pass

    def Multiply(self, value):
        """
        Multiply(self: UV, value: float) -> UV
        
            Multiplies this 2-D vector by the specified value and returns the result.
        
            value: The value to multiply with this vector.
            Returns: The multiplied 2-D vector.
        """
        pass

    def Negate(self):
        """
        Negate(self: UV) -> UV
        
            Negates this 2-D vector.
            Returns: The 2-D vector opposite to this vector.
        """
        pass

    def Normalize(self):
        """
        Normalize(self: UV) -> UV
        
            Returns a new UV whose coordinates are the normalized values from this vector.
            Returns: The normalized UV or zero if the vector is almost Zero.
        """
        pass

    def Subtract(self, source):
        """
        Subtract(self: UV, source: UV) -> UV
        
            Subtracts the specified 2-D vector from this 2-D vector and returns the result.
        
            source: The vector to subtract from this vector.
            Returns: The 2-D vector equal to the difference between the two vectors.
        """
        pass

    def ToString(self):
        """
        ToString(self: UV) -> str
        
            Gets formatted string showing (U, V) with values formatted to 9 decimal places.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __div__(self, *args): #cannot find CLR method
        """ x.__div__(y) <==> x/y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __mul__(self, *args): #cannot find CLR method
        """ x.__mul__(y) <==> x*y """
        pass

    def __neg__(self, *args): #cannot find CLR method
        """ x.__neg__() <==> -x """
        pass

    @staticmethod # known case of __new__
    def __new__(self, u=None, v=None):
        """
        __new__(cls: type, u: float, v: float)
        __new__(cls: type)
        """
        pass

    def __radd__(self, *args): #cannot find CLR method
        """
        __radd__(left: UV, right: UV) -> UV
        
            Adds the two specified 2-D vectors and returns the result.
        
            left: The first vector.
            right: The second vector.
            Returns: The 2-D vector equal to the sum of the two source vectors.
        """
        pass

    def __rmul__(self, *args): #cannot find CLR method
        """
        __rmul__(value: float, right: UV) -> UV
        
            The product of the specified number and the specified 2-D vector.
        
            value: The value to multiply with the specified vector.
            right: The vector to multiply with the value.
            Returns: The multiplied 2-D vector.
        """
        pass

    def __rsub__(self, *args): #cannot find CLR method
        """
        __rsub__(left: UV, right: UV) -> UV
        
            Subtracts the two specified 2-D vectors and returns the result.
        
            left: The first vector.
            right: The second vector.
            Returns: The 2-D vector equal to the difference between the two source vectors.
        """
        pass

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        pass

    U = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the first coordinate.

Get: U(self: UV) -> float

"""

    V = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the second coordinate.

Get: V(self: UV) -> float

"""


    BasisU = None
    BasisV = None
    Zero = None


class UVGridlineType(Enum, IComparable, IFormattable, IConvertible):
    """
    A choice between U-gridlines or V-gridlines of a divided surface
       U Gridlines
       V Gridlines
    
    enum UVGridlineType, values: U (0), V (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    U = None
    V = None
    value__ = None


class ValueAtPointBase(object, IDisposable):
    """ A base class representing storage of values at a given point. """
    def ClearAllFlags(self):
        """
        ClearAllFlags(self: ValueAtPointBase)
            Sets flags for all measurements to ValueAtPointFlags::None.
        """
        pass

    def ClearFlagsAt(self, measurement):
        """
        ClearFlagsAt(self: ValueAtPointBase, measurement: int)
            Sets flags for the given measurement to ValueAtPointFlags::None.
        
            measurement: Measurement for which to clear flags.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ValueAtPointBase) """
        pass

    def GetFlags(self, measurement):
        """
        GetFlags(self: ValueAtPointBase, measurement: int) -> int
        
            Returns flags for the given measurement.
        
            measurement: Measurement number for which flags are returned.
            Returns: Flags value for the measurement.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ValueAtPointBase, disposing: bool) """
        pass

    def SetFlags(self, flags, measurement=None):
        """
        SetFlags(self: ValueAtPointBase, flags: IList[int])SetFlags(self: ValueAtPointBase, flags: int)
            Sets the flags associated to all measurements to the same value.
        
            flags: Value of flags, uniform for all measurements.
           Flags values are defined in 
             the enumerated class ValueAtPointFlags and are combined into the int value.
        
        SetFlags(self: ValueAtPointBase, flags: int, measurement: int)
            Sets the flags associated to a given measurement.
        
            flags: The value of the flags to set.
           Flags values are defined in the enumerated 
             class ValueAtPointFlags and are combined into the int value.
        
            measurement: Measurement for which to set flags.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ValueAtPointBase) -> bool

"""



class ValueAtPointFlags(Enum, IComparable, IFormattable, IConvertible):
    """
    Enumerated type containing flags related to the display on particular points.
       Enumerated type that stores bit values of flags that can be set at any domain point.
    
    enum ValueAtPointFlags, values: DisplayFence (2), DisplayText (1), None (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    DisplayFence = None
    DisplayText = None
    None = None
    value__ = None


class ValueParsingOptions(object, IDisposable):
    """
    Options for parsing strings into numbers with units.
    
    ValueParsingOptions()
    """
    def Dispose(self):
        """ Dispose(self: ValueParsingOptions) """
        pass

    def GetFormatOptions(self):
        """
        GetFormatOptions(self: ValueParsingOptions) -> FormatOptions
        
            Gets the FormatOptions to optionally override the default settings in the Units 
             class.
        
            Returns: A copy of the FormatOptions.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ValueParsingOptions, disposing: bool) """
        pass

    def SetFormatOptions(self, formatOptions):
        """
        SetFormatOptions(self: ValueParsingOptions, formatOptions: FormatOptions)
            Sets the FormatOptions to optionally override the default settings in the Units 
             class.
        
        
            formatOptions: The FormatOptions.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    AllowedValues = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The allowable range of values to be parsed.

Get: AllowedValues(self: ValueParsingOptions) -> AllowedValues

Set: AllowedValues(self: ValueParsingOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ValueParsingOptions) -> bool

"""



class VertexIndexPair(object):
    """
    Represents a connection between vertices in the top and bottom profile of a blend.
    
    VertexIndexPair(iTop: int, iBottom: int)
    """
    @staticmethod # known case of __new__
    def __new__(self, iTop, iBottom):
        """ __new__(cls: type, iTop: int, iBottom: int) """
        pass

    Bottom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The index of the vertex pair from the bottom profile.

Get: Bottom(self: VertexIndexPair) -> int

Set: Bottom(self: VertexIndexPair) = value
"""

    Top = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The index of the vertex pair from the top profile.

Get: Top(self: VertexIndexPair) -> int

Set: Top(self: VertexIndexPair) = value
"""



class VertexIndexPairArray(APIObject, IDisposable, IEnumerable):
    """
    An array that contains VertexIndex pairs.
    
    VertexIndexPairArray()
    """
    def Append(self, item):
        """ Append(self: VertexIndexPairArray, item: VertexIndexPair) """
        pass

    def Clear(self):
        """
        Clear(self: VertexIndexPairArray)
            Removes every VertexIndex pair from the array, rendering it empty.
        """
        pass

    def Dispose(self):
        """ Dispose(self: VertexIndexPairArray, A_0: bool) """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: VertexIndexPairArray) -> VertexIndexPairArrayIterator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: VertexIndexPairArray) -> IEnumerator
        
            Retrieve a forward moving iterator to the array.
            Returns: Returns a forward moving iterator to the array.
        """
        pass

    def Insert(self, item, index):
        """ Insert(self: VertexIndexPairArray, item: VertexIndexPair, index: int) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: VertexIndexPairArray) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: VertexIndexPairArray) -> VertexIndexPairArrayIterator
        
            Retrieve a backward moving iterator to the array.
            Returns: Returns a backward moving iterator to the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the array is empty.

Get: IsEmpty(self: VertexIndexPairArray) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of VertexIndex pairs that are in the array.

Get: Size(self: VertexIndexPairArray) -> int

"""



class VertexIndexPairArrayIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to an array of VertexIndex pairs.
    
    VertexIndexPairArrayIterator()
    """
    def Dispose(self):
        """ Dispose(self: VertexIndexPairArrayIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: VertexIndexPairArrayIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the array.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: VertexIndexPairArrayIterator) """
        pass

    def Reset(self):
        """
        Reset(self: VertexIndexPairArrayIterator)
            Bring the iterator back to the start of the array.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: VertexIndexPairArrayIterator) -> object

"""



class VertexPair(object, IDisposable):
    """
    Indices of a pair of vertices in two CurveLoops(one vertex in each loop).
    
    VertexPair(firstVertexIdx: int, secondVertexIdx: int)
    """
    def Dispose(self):
        """ Dispose(self: VertexPair) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: VertexPair, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, firstVertexIdx, secondVertexIdx):
        """ __new__(cls: type, firstVertexIdx: int, secondVertexIdx: int) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    First = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the first index of VertexPair.

Get: First(self: VertexPair) -> int

Set: First(self: VertexPair) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: VertexPair) -> bool

"""

    Second = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies the second index of VertexPair.

Get: Second(self: VertexPair) -> int

Set: Second(self: VertexPair) = value
"""



class VerticalAlignmentStyle(Enum, IComparable, IFormattable, IConvertible):
    """
    Declares the vertical alignment style of font.
    
    enum VerticalAlignmentStyle, values: Bottom (8), Middle (4), Top (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Bottom = None
    Middle = None
    Top = None
    value__ = None


class VerticalTextAlignment(Enum, IComparable, IFormattable, IConvertible):
    """
    Supported kinds of text vertical alignment within the text containing box.
    
    enum VerticalTextAlignment, values: Bottom (1), Middle (2), Top (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Bottom = None
    Middle = None
    Top = None
    value__ = None


class View3D(View, IDisposable):
    """ Class for 3D views """
    def CanResetCameraTarget(self):
        """
        CanResetCameraTarget(self: View3D) -> bool
        
            Checks whether the camera target can be reset for this view.
            Returns: True if camera target can be reset for this view, false otherwise.
        """
        pass

    def CanSaveOrientation(self):
        """
        CanSaveOrientation(self: View3D) -> bool
        
            Returns true if the View3D's orientation can be saved, false otherwise.
            Returns: True if the View3D's orientation can be saved, false otherwise.
        """
        pass

    def CanToggleBetweenPerspectiveAndIsometric(self):
        """
        CanToggleBetweenPerspectiveAndIsometric(self: View3D) -> bool
        
            Checks whether this view can toggle between perspective and isometric.
            Returns: True if this view can be toggled, false otherwise.
        """
        pass

    @staticmethod
    def CreateIsometric(document, viewFamilyTypeId):
        """
        CreateIsometric(document: Document, viewFamilyTypeId: ElementId) -> View3D
        
            Returns a new isometric View3D.
        
            document: The document to which the new View3D will be added.
            viewFamilyTypeId: The id of the ViewFamilyType which will be used by the new View3D.  The type 
             needs to be a ThreeDimensional ViewType.
        
            Returns: The new isometric View3D.
        """
        pass

    @staticmethod
    def CreatePerspective(document, viewFamilyTypeId):
        """
        CreatePerspective(document: Document, viewFamilyTypeId: ElementId) -> View3D
        
            Returns a new perspective View3D.
        
            document: The document to which the new View3D will be added.
            viewFamilyTypeId: The id of the ViewFamilyType which will be used by the new View3D.  The type 
             needs to be a ThreeDimensional ViewType.
        
            Returns: The new perspective View3D.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: View, view: View) -> BoundingBoxXYZ """
        pass

    def GetOrientation(self):
        """
        GetOrientation(self: View3D) -> ViewOrientation3D
        
            Gets the current non-saved orientation of the View3D.
            Returns: The current non-saved orientation of the View3D.
        """
        pass

    def GetRenderingSettings(self):
        """
        GetRenderingSettings(self: View3D) -> RenderingSettings
        
            Returns the current rendering settings for this 3d view.
            Returns: The returned object represents the current rendering settings.
           If you 
             change the returned object, you need to call SetRenderingSettings to apply the 
             new settings back to Revit.
        """
        pass

    def GetSavedOrientation(self):
        """
        GetSavedOrientation(self: View3D) -> ViewOrientation3D
        
            Gets the saved orientation of the View3D.
            Returns: The saved orientation of the View3D.
        """
        pass

    def GetSectionBox(self):
        """
        GetSectionBox(self: View3D) -> BoundingBoxXYZ
        
            Gets a copy of the section box for this 3D view.
            Returns: The section box.  Note that the section box can be rotated and transformed and 
             thus you will need to use
           Autodesk.Revit.DB.BoundingBoxXYZ.Transform to
           
             interpret the coordinates of the corners or sides of the box in model 
             coordinates.
        """
        pass

    def HasBeenLocked(self):
        """
        HasBeenLocked(self: View3D) -> bool
        
            Identifies if the view has ever been locked.
        """
        pass

    def OrientTo(self, forwardDirection):
        """
        OrientTo(self: View3D, forwardDirection: XYZ)
            Reorients the view to align with the forward direction.
        
            forwardDirection: The forward direction.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def ResetCameraTarget(self):
        """
        ResetCameraTarget(self: View3D)
            Resets the camera target to the center of the field of view.
        """
        pass

    def RestoreOrientationAndLock(self):
        """
        RestoreOrientationAndLock(self: View3D)
            Locks the view and restores its orientation.
        """
        pass

    def SaveOrientation(self):
        """
        SaveOrientation(self: View3D)
            Converts the temporary orientation of the View3D into its saved orientation.
        """
        pass

    def SaveOrientationAndLock(self):
        """
        SaveOrientationAndLock(self: View3D)
            Locks the view and saves its orientation
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetOrientation(self, newViewOrientation3D):
        """
        SetOrientation(self: View3D, newViewOrientation3D: ViewOrientation3D)
            Sets the temporary orientation of the View3D.  The new orientation is not saved 
             in the document.
        
        
            newViewOrientation3D: The new orientation to set.
        """
        pass

    def SetRenderingSettings(self, settings):
        """
        SetRenderingSettings(self: View3D, settings: RenderingSettings)
            Changes the rendering settings for this 3d view.
        
            settings: The new rendering settings to be applied to this view.
        """
        pass

    def SetSectionBox(self, boundingBoxXYZ):
        """
        SetSectionBox(self: View3D, boundingBoxXYZ: BoundingBoxXYZ)
            Sets the section box for this 3D view.
        
            boundingBoxXYZ: The bounding box to use for the section box.  To turn off the section box, set 
             Autodesk.Revit.DB.View3D.IsSectionBoxActive to false.
           Individual bound 
             enabled flags in the input box are ignored.
        """
        pass

    def ToggleToIsometric(self):
        """
        ToggleToIsometric(self: View3D)
            Toggles this view to isometric.
        """
        pass

    def ToggleToPerspective(self):
        """
        ToggleToPerspective(self: View3D)
            Toggles this view to perspective.
        """
        pass

    def Unlock(self):
        """
        Unlock(self: View3D)
            Unlocks the view. Has no effect if the view is already unlocked.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsLocked = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the view is locked.

Get: IsLocked(self: View3D) -> bool

"""

    IsPerspective = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether this is a perspective view.

Get: IsPerspective(self: View3D) -> bool

"""

    IsSectionBoxActive = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether or not the section box is active in this 3D view.

Get: IsSectionBoxActive(self: View3D) -> bool

Set: IsSectionBoxActive(self: View3D) = value
"""



class ViewCropRegionShapeManager(object, IDisposable):
    """ A class that provides access to settings related to the crop assigned to a view or a reference callout. """
    def Dispose(self):
        """ Dispose(self: ViewCropRegionShapeManager) """
        pass

    def GetAnnotationCropShape(self):
        """
        GetAnnotationCropShape(self: ViewCropRegionShapeManager) -> CurveLoop
        
            Gets the annotation crop box assigned to the view.
            Returns: The annotation crop boundary.
        """
        pass

    def GetCropShape(self):
        """
        GetCropShape(self: ViewCropRegionShapeManager) -> IList[CurveLoop]
        
            Gets the crop boundaries that are curently active.
            Returns: The crop boundaries.
        """
        pass

    def GetSplitRegionMaximum(self, regionIndex):
        """
        GetSplitRegionMaximum(self: ViewCropRegionShapeManager, regionIndex: int) -> float
        
            Returns the proportional location of the maximum boundary of the specified 
             split crop region.
        
        
            regionIndex: Index of region to be split horizontally (numbering starts with 0).
            Returns: A value from 0 to 1 representing the maximum location for the regions split 
             boundary.
           This number represents the location as a ratio along the 
             non-split rectangular crop.
        """
        pass

    def GetSplitRegionMinimum(self, regionIndex):
        """
        GetSplitRegionMinimum(self: ViewCropRegionShapeManager, regionIndex: int) -> float
        
            Returns the proportional location of the minimum boundary of the specified 
             split crop region.
        
        
            regionIndex: Index of region to be split horizontally (numbering starts with 0).
            Returns: A value from 0 to 1 representing the minimum location for the regions split 
             boundary.
           This number represents the location as a ratio along the 
             non-split rectangular crop.
        """
        pass

    def IsCropRegionShapeValid(self, boundary):
        """
        IsCropRegionShapeValid(self: ViewCropRegionShapeManager, boundary: CurveLoop) -> bool
        
            Verifies that boundary represents one closed curve loop without 
             self-intersections,
           consisting of non-zero length straight lines in a plane 
             parallel to the view plane.
        
        
            boundary: The crop boundary.
            Returns: True if the passed crop boundary represents one closed curve loop without 
             self-intersections,
           consisting of non-zero length straight lines in a plane 
             parallel to the view plane.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ViewCropRegionShapeManager, disposing: bool) """
        pass

    def RemoveCropRegionShape(self):
        """
        RemoveCropRegionShape(self: ViewCropRegionShapeManager)
            Removes any non-rectangular boundary of the view's crop.
        """
        pass

    def RemoveSplit(self):
        """
        RemoveSplit(self: ViewCropRegionShapeManager)
            Removes any split applied to the view's crop.
        """
        pass

    def RemoveSplitRegion(self, regionIndex):
        """
        RemoveSplitRegion(self: ViewCropRegionShapeManager, regionIndex: int)
            Removes one region in split crop.
        
            regionIndex: Index of region to be deleted (numbering starts with 0).
        """
        pass

    def SetCropShape(self, boundary):
        """
        SetCropShape(self: ViewCropRegionShapeManager, boundary: CurveLoop)
            Sets the boundary of the view's crop to the specified shape.
        
            boundary: The crop boundary.
        """
        pass

    def SplitRegionHorizontally(self, regionIndex, leftPart, rightPart):
        """
        SplitRegionHorizontally(self: ViewCropRegionShapeManager, regionIndex: int, leftPart: float, rightPart: float)
            Splits horizontally one region in split crop.
        
            regionIndex: Index of region to be split horizontally (numbering starts with 0).
            leftPart: Relative portion of the original region to become the new left region (0 to 1).
            rightPart: Relative portion of the original region to become the new right region (0 to 1).
        """
        pass

    def SplitRegionVertically(self, regionIndex, topPart, bottomPart):
        """
        SplitRegionVertically(self: ViewCropRegionShapeManager, regionIndex: int, topPart: float, bottomPart: float)
            Splits vertically one region in split crop.
        
            regionIndex: Index of region to be split vertically (numbering starts with 0).
            topPart: Relative portion of the original region to become the new top region (0 to 1).
            bottomPart: Relative portion of the original region to become the new bottom region (0 to 
             1).
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    BottomAnnotationCropOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset from the bottom of the view crop that determines the location of the annotation crop bottom boundary.

Get: BottomAnnotationCropOffset(self: ViewCropRegionShapeManager) -> float

Set: BottomAnnotationCropOffset(self: ViewCropRegionShapeManager) = value
"""

    CanBeSplit = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Verifies that the crop of the associated view is permitted to have multiple regions.

Get: CanBeSplit(self: ViewCropRegionShapeManager) -> bool

"""

    CanHaveAnnotationCrop = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Verifies that the view is allowed to have an annotation crop.

Get: CanHaveAnnotationCrop(self: ViewCropRegionShapeManager) -> bool

"""

    CanHaveShape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Verifies that the crop of the associated view is permitted to have a non-rectangular shape.

Get: CanHaveShape(self: ViewCropRegionShapeManager) -> bool

"""

    IsSplitHorizontally = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not the view's crop is split (and the split is horizontal).

Get: IsSplitHorizontally(self: ViewCropRegionShapeManager) -> bool

"""

    IsSplitVertically = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not the view's crop is split (and the split is vertical).

Get: IsSplitVertically(self: ViewCropRegionShapeManager) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ViewCropRegionShapeManager) -> bool

"""

    LeftAnnotationCropOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset from the left of the view crop that determines the location of the annotation crop left boundary.

Get: LeftAnnotationCropOffset(self: ViewCropRegionShapeManager) -> float

Set: LeftAnnotationCropOffset(self: ViewCropRegionShapeManager) = value
"""

    NumberOfSplitRegions = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The number of split crop regions (1 if the crop is not currently split).

Get: NumberOfSplitRegions(self: ViewCropRegionShapeManager) -> int

"""

    RightAnnotationCropOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset from the right of the view crop that determines the location of the annotation crop right boundary.

Get: RightAnnotationCropOffset(self: ViewCropRegionShapeManager) -> float

Set: RightAnnotationCropOffset(self: ViewCropRegionShapeManager) = value
"""

    ShapeSet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not the view crop has a non-rectangular shape set.

Get: ShapeSet(self: ViewCropRegionShapeManager) -> bool

"""

    Split = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not the view crop is split.

Get: Split(self: ViewCropRegionShapeManager) -> bool

"""

    TopAnnotationCropOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset from the top of the view crop that determines the location of the annotation crop top boundary.

Get: TopAnnotationCropOffset(self: ViewCropRegionShapeManager) -> float

Set: TopAnnotationCropOffset(self: ViewCropRegionShapeManager) = value
"""



class ViewDetailLevel(Enum, IComparable, IFormattable, IConvertible):
    """
    Detail level of the view
    
    enum ViewDetailLevel, values: Coarse (1), Fine (3), Medium (2), Undefined (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Coarse = None
    Fine = None
    Medium = None
    Undefined = None
    value__ = None


class ViewDiscipline(Enum, IComparable, IFormattable, IConvertible):
    """
    Discipline of the view
    
    enum ViewDiscipline, values: Architectural (1), Coordination (4095), Electrical (8), Mechanical (4), Plumbing (16), Structural (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Architectural = None
    Coordination = None
    Electrical = None
    Mechanical = None
    Plumbing = None
    Structural = None
    value__ = None


class ViewDisplayBackground(object, IDisposable):
    """
    Set of values that control how background is drawn in a view.
       Background can only be set for a 3d view or for a section or elevation view.
    """
    @staticmethod
    def CreateGradient(skyColor, horizonColor, groundColor):
        """
        CreateGradient(skyColor: Color, horizonColor: Color, groundColor: Color) -> ViewDisplayBackground
        
            Creates an object that can be passed to DBView::setBackground function
           to 
             set the background of the Gradient type.
        
        
            skyColor: The top of the sky gradient if the sky is visible.
            horizonColor: The bottom or the sky gradient if the sky is visible,
           or the top of the 
             ground gradient otherwise.
        
            groundColor: The ground color if the sky is visible (ground shown in uniform color),
           or 
             the bottom of the ground gradient if the sky is not visible.
        
            Returns: New background object to pass to DBView::setBackground.
        """
        pass

    @staticmethod
    def CreateImage(imagePath, flags, imageOffsets, imageScales):
        """
        CreateImage(imagePath: str, flags: ViewDisplayBackgroundImageFlags, imageOffsets: UV, imageScales: UV) -> ViewDisplayBackground
        
            Creates an object that can be passed to DBView::setBackground function
           to 
             set the background of the Image type.
        
        
            imagePath: File path with the image to be used.
            flags: Combination of flags (binary) that control how image is displayed in relation
         
               to the view/crop boundary.
        
            imageOffsets: Horizontal (u) and vertical (v) offsets of the image.
            imageScales: Horizontal (u) and vertical (v) scales of the image (1 == no change).
            Returns: New background object to pass to DBView::setBackground.
        """
        pass

    @staticmethod
    def CreateSky():
        """
        CreateSky() -> ViewDisplayBackground
        
            Creates an object that can be passed to DBView::setBackground function
           to 
             set the background of the SunAndClouds type.
        
            Returns: New background object to pass to DBView::setBackground.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ViewDisplayBackground) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ViewDisplayBackground, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    BackgroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the horizon when the type is 'Gradient'.

Get: BackgroundColor(self: ViewDisplayBackground) -> Color

"""

    GroundColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the ground when the type is 'Gradient' or 'SunAndClouds'.

Get: GroundColor(self: ViewDisplayBackground) -> Color

"""

    HorizontalImageOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The distance between the left viewport boundary and the left edge of the background image.

Get: HorizontalImageOffset(self: ViewDisplayBackground) -> float

"""

    HorizontalImageScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The horizontal scale of the background image; the scale of 1.0 puts the image pixel-to-pixel.

Get: HorizontalImageScale(self: ViewDisplayBackground) -> float

"""

    ImageFlags = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The image alignment indicators when the type is 'Image'.

Get: ImageFlags(self: ViewDisplayBackground) -> ViewDisplayBackgroundImageFlags

"""

    ImagePath = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The path to the image file when the type is 'Image'.

Get: ImagePath(self: ViewDisplayBackground) -> str

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ViewDisplayBackground) -> bool

"""

    SkyColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The color of the sky when the type is 'Gradient'.

Get: SkyColor(self: ViewDisplayBackground) -> Color

"""

    Type = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type of the background.

Get: Type(self: ViewDisplayBackground) -> ViewDisplayBackgroundType

"""

    VerticalImageOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The distance between the bottom viewport boundary and the bottom edge of the background image.

Get: VerticalImageOffset(self: ViewDisplayBackground) -> float

"""

    VerticalImageScale = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The vertical scale of the background image; the scale of 1.0 puts the image pixel-to-pixel.

Get: VerticalImageScale(self: ViewDisplayBackground) -> float

"""



class ViewDisplayBackgroundImageFlags(Enum, IComparable, IFormattable, IConvertible):
    """
    A collection of bit flags that control how the background image is positioned
       in relation to the crop region (or the view boundary).
    
    enum ViewDisplayBackgroundImageFlags, values: FitToScreen (1), FixedAspectRatio (2), None (0), UseTiling (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FitToScreen = None
    FixedAspectRatio = None
    None = None
    UseTiling = None
    value__ = None


class ViewDisplayBackgroundType(Enum, IComparable, IFormattable, IConvertible):
    """
    A collection of settings defining the type of the view background
    
    enum ViewDisplayBackgroundType, values: Gradient (257), Image (258), None (256), SunAndClouds (512)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Gradient = None
    Image = None
    None = None
    SunAndClouds = None
    value__ = None


class ViewDisplayDepthCueing(object, IDisposable):
    """ Represents the settings for depth cueing. """
    def Dispose(self):
        """ Dispose(self: ViewDisplayDepthCueing) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ViewDisplayDepthCueing, disposing: bool) """
        pass

    def SetStartEndPercentages(self, startPercentage, endPercentage):
        """
        SetStartEndPercentages(self: ViewDisplayDepthCueing, startPercentage: int, endPercentage: int)
            Sets start and end percentages.
        
            startPercentage: The start percentage defines where depth cueing starts.
            endPercentage: The end percentage defines where depth cueing ends.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    EnableDepthCueing = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to enable depth cueing. False to disable it.

Get: EnableDepthCueing(self: ViewDisplayDepthCueing) -> bool

Set: EnableDepthCueing(self: ViewDisplayDepthCueing) = value
"""

    EndPercentage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The end percentage defines where depth cueing ends.
   Values between 0 and 100.

Get: EndPercentage(self: ViewDisplayDepthCueing) -> int

"""

    FadeTo = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fade to defines the maximum fading in per cent.
   Values between 0 and 100.

Get: FadeTo(self: ViewDisplayDepthCueing) -> int

Set: FadeTo(self: ViewDisplayDepthCueing) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ViewDisplayDepthCueing) -> bool

"""

    StartPercentage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The start percentage defines where depth cueing starts.
   Values between 0 and 100.

Get: StartPercentage(self: ViewDisplayDepthCueing) -> int

"""



class ViewDisplayEdges(Enum, IComparable, IFormattable, IConvertible):
    """
    A collection of settings defining how visible edges are displayed
    
    enum ViewDisplayEdges, values: None (0), Simple (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    None = None
    Simple = None
    value__ = None


class ViewDisplayModel(object, IDisposable):
    """
    Represents the settings for displaying model graphics.
       version 2: m_showHiddenLines type changed bool -> ShowHiddenLinesValues::Enum
    """
    def Dispose(self):
        """ Dispose(self: ViewDisplayModel) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ViewDisplayModel, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    EnableSilhouettes = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to show silhouettes edges. False to disable showing them.

Get: EnableSilhouettes(self: ViewDisplayModel) -> bool

Set: EnableSilhouettes(self: ViewDisplayModel) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ViewDisplayModel) -> bool

"""

    ShowHiddenLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to enable hidden lines. False to disable showing them.

Get: ShowHiddenLines(self: ViewDisplayModel) -> ShowHiddenLinesValues

Set: ShowHiddenLines(self: ViewDisplayModel) = value
"""

    SilhouetteEdgesGStyleId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Style ID for silhouette edges

Get: SilhouetteEdgesGStyleId(self: ViewDisplayModel) -> ElementId

Set: SilhouetteEdgesGStyleId(self: ViewDisplayModel) = value
"""

    SmoothEdges = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to enable "smooth edge" (anti-aliasing) effect. False to disable it.

Get: SmoothEdges(self: ViewDisplayModel) -> bool

Set: SmoothEdges(self: ViewDisplayModel) = value
"""

    Transparency = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The percentage (0..100) of surface transparency
   0 means the surfaces are opaque, 100 means they are fully transparent

Get: Transparency(self: ViewDisplayModel) -> int

Set: Transparency(self: ViewDisplayModel) = value
"""



class ViewDisplaySketchyLines(object, IDisposable):
    """ Represents the settings for sketchy lines. """
    def Dispose(self):
        """ Dispose(self: ViewDisplaySketchyLines) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ViewDisplaySketchyLines, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    EnableSketchyLines = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True to enable sketchy lines visibility. False to disable it.

Get: EnableSketchyLines(self: ViewDisplaySketchyLines) -> bool

Set: EnableSketchyLines(self: ViewDisplaySketchyLines) = value
"""

    Extension = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The extension scale value. Controls the magnitude of line's extension.
   Values between 0 and 10.

Get: Extension(self: ViewDisplaySketchyLines) -> int

Set: Extension(self: ViewDisplaySketchyLines) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ViewDisplaySketchyLines) -> bool

"""

    Jitter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The jitter defines jitteriness of the line.
   Values between 0 and 10.

Get: Jitter(self: ViewDisplaySketchyLines) -> int

Set: Jitter(self: ViewDisplaySketchyLines) = value
"""



class ViewDuplicateOption(Enum, IComparable, IFormattable, IConvertible):
    """
    Options for duplicating views
    
    enum ViewDuplicateOption, values: AsDependent (1), Duplicate (0), WithDetailing (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AsDependent = None
    Duplicate = None
    value__ = None
    WithDetailing = None


class ViewFamily(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type that corresponds to the type of a Revit view.
    
    enum ViewFamily, values: AreaPlan (110), CeilingPlan (111), CostReport (106), Detail (113), Drafting (108), Elevation (114), FloorPlan (109), GraphicalColumnSchedule (119), ImageView (104), Invalid (101), Legend (117), LoadsReport (115), PanelSchedule (118), PressureLossReport (116), Schedule (105), Section (112), Sheet (107), StructuralPlan (120), ThreeDimensional (102), Walkthrough (103)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AreaPlan = None
    CeilingPlan = None
    CostReport = None
    Detail = None
    Drafting = None
    Elevation = None
    FloorPlan = None
    GraphicalColumnSchedule = None
    ImageView = None
    Invalid = None
    Legend = None
    LoadsReport = None
    PanelSchedule = None
    PressureLossReport = None
    Schedule = None
    Section = None
    Sheet = None
    StructuralPlan = None
    ThreeDimensional = None
    value__ = None
    Walkthrough = None


class ViewFamilyType(ElementType, IDisposable):
    """ Represents a type of a Revit view. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def IsValidDefaultTemplate(self, templateId):
        """
        IsValidDefaultTemplate(self: ViewFamilyType, templateId: ElementId) -> bool
        
            Verifies that the input can be used as a default template for this view type.
        
            templateId: Id to be validated as default template.
            Returns: True if %templateId% is valid as default template, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    DefaultTemplateId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The default template id assigned to this view type.

Get: DefaultTemplateId(self: ViewFamilyType) -> ElementId

Set: DefaultTemplateId(self: ViewFamilyType) = value
"""

    PlanViewDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The PlanViewDirection of this view.

Get: PlanViewDirection(self: ViewFamilyType) -> PlanViewDirection

Set: PlanViewDirection(self: ViewFamilyType) = value
"""

    ViewFamily = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The ViewFamily for this view type.

Get: ViewFamily(self: ViewFamilyType) -> ViewFamily

"""



class ViewNavigationToolSettings(Element, IDisposable):
    """ Represents the settings contained in the document associated to the View Navigation tools (such as the View Cube). """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetHomeCamera(self):
        """
        GetHomeCamera(self: ViewNavigationToolSettings) -> HomeCamera
        
            Gets a copy of the structure containing information about the store Home view 
             orientation.
        
            Returns: A copy of the structure containing information about the store Home view 
             orientation, or
           ll if there is no home view set for this document.
        """
        pass

    @staticmethod
    def GetViewNavigationToolSettings(pADoc):
        """
        GetViewNavigationToolSettings(pADoc: Document) -> ViewNavigationToolSettings
        
            Gets the instance of the settings for the given document.
        
            pADoc: The document.
            Returns: The instance of the settings for the given document.
        """
        pass

    def IsHomeCameraSet(self):
        """
        IsHomeCameraSet(self: ViewNavigationToolSettings) -> bool
        
            Checks if the home view is set in the settings.
            Returns: Returns true if home view is set, otherwise false.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ViewNode(RenderNode, IDisposable):
    """ A render node that represents a view. """
    def Dispose(self):
        """ Dispose(self: RenderNode, A_0: bool) """
        pass

    def GetCameraInfo(self):
        """
        GetCameraInfo(self: ViewNode) -> CameraInfo
        
            Information about the observation point (the camera) of the view.
            Returns: An instance of CameraInfo or ll if there is no info associated with the view
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: RenderNode, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    LevelOfDetail = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The level of detail the view is going to be rendered at.

Get: LevelOfDetail(self: ViewNode) -> int

Set: LevelOfDetail(self: ViewNode) = value
"""

    ViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The Id of the view element.

Get: ViewId(self: ViewNode) -> ElementId

"""



class ViewOrientation3D(object, IDisposable):
    """
    Container for the point and vectors which define View3D's orientation.
    
    ViewOrientation3D(eyePosition: XYZ, upDirection: XYZ, forwardDirection: XYZ)
    """
    def Dispose(self):
        """ Dispose(self: ViewOrientation3D) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ViewOrientation3D, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, eyePosition, upDirection, forwardDirection):
        """ __new__(cls: type, eyePosition: XYZ, upDirection: XYZ, forwardDirection: XYZ) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    EyePosition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The eye position point

Get: EyePosition(self: ViewOrientation3D) -> XYZ

"""

    ForwardDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The forward direction vector

Get: ForwardDirection(self: ViewOrientation3D) -> XYZ

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ViewOrientation3D) -> bool

"""

    UpDirection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The up direction vector

Get: UpDirection(self: ViewOrientation3D) -> XYZ

"""



class ViewPlan(View, IDisposable):
    """ Class for plan views """
    def CheckPlanViewRangeValidity(self, planViewRange):
        """
        CheckPlanViewRangeValidity(self: ViewPlan, planViewRange: PlanViewRange) -> IList[PlanViewRangeError]
        
            Checks if the plan view range is valid.
        
            planViewRange: The view range to validate.
            Returns: List of enums describing any errors in the plan view range.
        """
        pass

    @staticmethod
    def Create(document, viewFamilyTypeId, levelId):
        """
        Create(document: Document, viewFamilyTypeId: ElementId, levelId: ElementId) -> ViewPlan
        
            Creates a new ViewPlan.
        
            document: The document to which the ViewPlan will be added.
            viewFamilyTypeId: The id of the ViewFamilyType which will be used by the new ViewPlan.  The type 
             needs to be a FloorPlan, CeilingPlan, AreaPlan, or StructuralPlan ViewType.
        
            levelId: The id of the Level to associate with the new plan view.
            Returns: The new ViewPlan.
        """
        pass

    @staticmethod
    def CreateAreaPlan(document, areaSchemeId, levelId):
        """
        CreateAreaPlan(document: Document, areaSchemeId: ElementId, levelId: ElementId) -> ViewPlan
        
            Creates a new area plan ViewPlan.
        
            document: The document to which the area plan will be added.
            areaSchemeId: The id of the AreaScheme which will be used by the area plan.
            levelId: The id of the Level to associate with the area plan.
            Returns: The new area plan ViewPlan.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: View, view: View) -> BoundingBoxXYZ """
        pass

    def GetUnderlayBaseLevel(self):
        """
        GetUnderlayBaseLevel(self: ViewPlan) -> ElementId
        
            Returns the element id of the level that defines the bottom of the underlay 
             range.
        
            Returns: If InvalidElementId is returned, then the underlay base level is not set and no 
             elements will be displayed as underlay.
        """
        pass

    def GetUnderlayOrientation(self):
        """
        GetUnderlayOrientation(self: ViewPlan) -> UnderlayOrientation
        
            Returns the underlay orientation of this view.
            Returns: The underlay orientation for this view.
        """
        pass

    def GetUnderlayTopLevel(self):
        """
        GetUnderlayTopLevel(self: ViewPlan) -> ElementId
        
            Returns the element id of the level that defines the top of the underlay range.
            Returns: If the underlay base level is a valid level, and this method returns 
             InvalidElementId, then the underlay range is unbounded,
           and consists of 
             everything above the underlay base level.
        """
        pass

    def GetViewRange(self):
        """
        GetViewRange(self: ViewPlan) -> PlanViewRange
        
            Gets the view range.
            Returns: The view range.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetUnderlayBaseLevel(self, levelId):
        """
        SetUnderlayBaseLevel(self: ViewPlan, levelId: ElementId)
            Sets the level whose elevation will determine the bottom of the underlay range.
             
           The elevation of the next highest level will be used to determine the top 
             of the underlay range.
        
        
            levelId: The element id of a level in the project or else InvalidElementId.
        """
        pass

    def SetUnderlayOrientation(self, uo):
        """
        SetUnderlayOrientation(self: ViewPlan, uo: UnderlayOrientation)
            Sets the underlay orientation for this view.
        
            uo: The underlay orientation for this view.
        """
        pass

    def SetUnderlayRange(self, baseLevelId, topLevelId):
        """
        SetUnderlayRange(self: ViewPlan, baseLevelId: ElementId, topLevelId: ElementId)
            Sets the underlay base and underlay top to the specified levels.
        
            baseLevelId: The element id of a level in the project or InvalidElementId. If 
             InvalidElementId,
           then the underlay base level is not set and no elements 
             will be displayed as underlay.
        
            topLevelId: The element id of a level in the project or InvalidElementId. If 
             InvalidElementId,
           then the underlay range is unbounded.
        """
        pass

    def SetViewRange(self, planViewRange):
        """
        SetViewRange(self: ViewPlan, planViewRange: PlanViewRange)
            Sets the view range.
        
            planViewRange: The view range.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AreaScheme = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The area scheme.

Get: AreaScheme(self: ViewPlan) -> AreaScheme

"""



class ViewPlanType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing plan view types.
    
    enum ViewPlanType, values: CeilingPlan (2), FloorPlan (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CeilingPlan = None
    FloorPlan = None
    value__ = None


class Viewport(Element, IDisposable):
    """ An element that establishes the placement of a view on a sheet. """
    @staticmethod
    def CanAddViewToSheet(document, viewSheetId, viewId):
        """
        CanAddViewToSheet(document: Document, viewSheetId: ElementId, viewId: ElementId) -> bool
        
            Verifies that the view can be added to the ViewSheet.
        
            document: The document in which the views reside.
            viewSheetId: The ViewSheet on which the view will be placed.
            viewId: The view which will be checked to see if it can be placed on the sheet.
            Returns: True if the view can be added to the ViewSheet, false otherwise.
        """
        pass

    @staticmethod
    def Create(document, viewSheetId, viewId, point):
        """
        Create(document: Document, viewSheetId: ElementId, viewId: ElementId, point: XYZ) -> Viewport
        
            Creates a new Viewport at a given location on a sheet.
        
            document: The document to which the new Viewport will be added.
            viewSheetId: The ViewSheet on which the new Viewport will be placed.
            viewId: The view shown in the Viewport.
            point: The new Viewport will be centered on this point.
            Returns: The new Viewport.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetBoxCenter(self):
        """
        GetBoxCenter(self: Viewport) -> XYZ
        
            Returns the center of the outline of the viewport on the sheet, excluding the 
             viewport label.
        
            Returns: The center of the outline of the viewport on the sheet.
        """
        pass

    def GetBoxOutline(self):
        """
        GetBoxOutline(self: Viewport) -> Outline
        
            Returns the outline of the viewport on the sheet, excluding the viewport label.
            Returns: The outline of the viewport on the sheet.
        """
        pass

    def GetLabelOutline(self):
        """
        GetLabelOutline(self: Viewport) -> Outline
        
            Gets the outline viewport's label on the sheet.
            Returns: The outline of the viewport's label on the sheet.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def SetBoxCenter(self, newCenterPoint):
        """
        SetBoxCenter(self: Viewport, newCenterPoint: XYZ)
            Moves this viewport so that the center of the box outline (excluding the 
             viewport label) is at a given point.
        
        
            newCenterPoint: The desired center for the box outline.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Rotation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The rotation of the viewport on the sheet.

Get: Rotation(self: Viewport) -> ViewportRotation

Set: Rotation(self: Viewport) = value
"""

    SheetId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element id of the ViewSheet on which the viewport appears,
   or InvalidElementId if this viewport does not associate a view
   with placement onto a sheet.

Get: SheetId(self: Viewport) -> ElementId

"""

    ViewId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element id of the associated View.

Get: ViewId(self: Viewport) -> ElementId

"""



class ViewportRotation(Enum, IComparable, IFormattable, IConvertible):
    """
    Rotation of the viewport
    
    enum ViewportRotation, values: Clockwise (1), Counterclockwise (2), None (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Clockwise = None
    Counterclockwise = None
    None = None
    value__ = None


class ViewSchedule(TableView, IDisposable):
    """ A schedule view. """
    def CanGroupHeaders(self, top, left, bottom, right):
        """
        CanGroupHeaders(self: ViewSchedule, top: int, left: int, bottom: int, right: int) -> bool
        
            Indicates if selected headers can be grouped for this schedule.
        
            top: The index of the top row of the selected headers.
            left: The index of the left column of the selected headers.
            bottom: The index of the bottom row of the selected headers.
            right: The index of the right column of the selected headers.
            Returns: True if the selected headers can be grouped, false otherwise.
        """
        pass

    def CanUngroupHeaders(self, top, left, bottom, right):
        """
        CanUngroupHeaders(self: ViewSchedule, top: int, left: int, bottom: int, right: int) -> bool
        
            Indicates if selected headers can be ungrouped.
        
            top: The index of the top row of the selected headers.
            left: The index of the left column of the selected headers.
            bottom: The index of the bottom row of the selected headers.
            right: The index of the right column of the selected headers.
            Returns: True if the selected headers can be grouped, false otherwise.
        """
        pass

    @staticmethod
    def CreateKeynoteLegend(document):
        """
        CreateKeynoteLegend(document: Document) -> ViewSchedule
        
            Creates a keynote legend.
        
            document: The document to which the new schedule will be added.
            Returns: The newly created schedule.
        """
        pass

    @staticmethod
    def CreateKeySchedule(document, categoryId):
        """
        CreateKeySchedule(document: Document, categoryId: ElementId) -> ViewSchedule
        
            Create a key schedule.
        
            document: The document to which the new schedule will be added.
            categoryId: The ID of the category of elements that the schedule's keys will be associated 
             with.
        
            Returns: The newly created schedule.
        """
        pass

    @staticmethod
    def CreateMaterialTakeoff(document, categoryId):
        """
        CreateMaterialTakeoff(document: Document, categoryId: ElementId) -> ViewSchedule
        
            Creates a material takeoff.
        
            document: The document to which the new schedule will be added.
            categoryId: The ID of the category whose elements will be included in the schedule,
           or 
             InvalidElementId for a multi-category schedule.
        
            Returns: The newly created schedule.
        """
        pass

    @staticmethod
    def CreateNoteBlock(document, familyId):
        """
        CreateNoteBlock(document: Document, familyId: ElementId) -> ViewSchedule
        
            Creates a note block.
        
            document: The document to which the new schedule will be added.
            familyId: The ID of the family whose elements will be included in the schedule.
            Returns: The newly created schedule.
        """
        pass

    @staticmethod
    def CreateRevisionSchedule(document):
        """
        CreateRevisionSchedule(document: Document) -> ViewSchedule
        
            Creates a revision schedule.
        
            document: The titleblock family document to which the new schedule will be added.
            Returns: The newly created schedule.
        """
        pass

    @staticmethod
    def CreateSchedule(document, categoryId, areaSchemeId=None):
        """
        CreateSchedule(document: Document, categoryId: ElementId) -> ViewSchedule
        
            Creates a regular schedule.
        
            document: The document to which the new schedule will be added.
            categoryId: The ID of the category whose elements will be included in the schedule, or 
             InvalidElementId for a multi-category schedule.
        
            Returns: The newly created schedule.
        CreateSchedule(document: Document, categoryId: ElementId, areaSchemeId: ElementId) -> ViewSchedule
        
            Creates a regular schedule that can relate to a specific area scheme.
        
            document: The document to which the new schedule will be added.
            categoryId: The ID of the category whose elements will be included in the schedule, or 
             InvalidElementId for a multi-category schedule.
        
            areaSchemeId: The ID of an area scheme in an area schedule, InvalidElementId otherwise.
            Returns: The newly created schedule.
        """
        pass

    @staticmethod
    def CreateSheetList(document):
        """
        CreateSheetList(document: Document) -> ViewSchedule
        
            Creates a sheet list.
        
            document: The document to which the new schedule will be added.
            Returns: The newly created schedule.
        """
        pass

    @staticmethod
    def CreateViewList(document):
        """
        CreateViewList(document: Document) -> ViewSchedule
        
            Creates a view list.
        
            document: The document to which the new schedule will be added.
            Returns: The newly created schedule.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def Export(self, folder, name, options):
        """
        Export(self: ViewSchedule, folder: str, name: str, options: ViewScheduleExportOptions)
            Exports the schedule data to a text file.
        
            folder: Path to the location where the file will be saved.
            name: Name of file.
            options: Options that relate to schedule export.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: View, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetDefaultNameForKeynoteLegend(document):
        """
        GetDefaultNameForKeynoteLegend(document: Document) -> str
        
            Gets the default view name that will be used when creating a keynote legend.
        
            document: The document to which the new schedule will be added.
            Returns: The default view name.
        """
        pass

    @staticmethod
    def GetDefaultNameForKeySchedule(document, categoryId):
        """
        GetDefaultNameForKeySchedule(document: Document, categoryId: ElementId) -> str
        
            Gets the default view name that will be used when creating a key schedule.
        
            document: The document to which the new schedule will be added.
            categoryId: The ID of the category of elements that the schedule's keys will be associated 
             with.
        
            Returns: The default view name.
        """
        pass

    @staticmethod
    def GetDefaultNameForMaterialTakeoff(document, categoryId):
        """
        GetDefaultNameForMaterialTakeoff(document: Document, categoryId: ElementId) -> str
        
            Gets the default view name that will be used when creating a material takeoff.
        
            document: The document to which the new schedule will be added.
            categoryId: The ID of the category whose elements will be included in the schedule, or 
             InvalidElementId for a multi-category schedule.
        
            Returns: The default view name.
        """
        pass

    @staticmethod
    def GetDefaultNameForNoteBlock(document):
        """
        GetDefaultNameForNoteBlock(document: Document) -> str
        
            Gets the default view name that will be used when creating a note block.
        
            document: The document to which the new schedule will be added.
            Returns: The default view name.
        """
        pass

    @staticmethod
    def GetDefaultNameForRevisionSchedule(document):
        """
        GetDefaultNameForRevisionSchedule(document: Document) -> str
        
            Gets the default view name that will be used when creating a revision schedule.
        
            document: The titleblock family document to which the new schedule will be added.
            Returns: The default view name.
        """
        pass

    @staticmethod
    def GetDefaultNameForSchedule(document, categoryId, areaSchemeId=None):
        """
        GetDefaultNameForSchedule(document: Document, categoryId: ElementId) -> str
        
            Gets the default view name that will be used when creating a regular schedule.
        
            document: The document to which the new schedule will be added.
            categoryId: The ID of the category whose elements will be included in the schedule, or 
             InvalidElementId for a multi-category schedule.
        
            Returns: The default view name.
        GetDefaultNameForSchedule(document: Document, categoryId: ElementId, areaSchemeId: ElementId) -> str
        
            Gets the default view name that will be used when creating a schedule.
        
            document: The document to which the new schedule will be added.
            categoryId: The ID of the category whose elements will be included in the schedule, or 
             InvalidElementId for a multi-category schedule.
        
            areaSchemeId: The ID of an area scheme in an area schedule, InvalidElementId otherwise.
            Returns: The default view name.
        """
        pass

    @staticmethod
    def GetDefaultNameForSheetList(document):
        """
        GetDefaultNameForSheetList(document: Document) -> str
        
            Gets the default view name that will be used when creating a sheet list.
        
            document: The document to which the new schedule will be added.
            Returns: The default view name.
        """
        pass

    @staticmethod
    def GetDefaultNameForViewList(document):
        """
        GetDefaultNameForViewList(document: Document) -> str
        
            Gets the default view name that will be used when creating a view list.
        
            document: The document to which the new schedule will be added.
            Returns: The default view name.
        """
        pass

    @staticmethod
    def GetDefaultParameterNameForKeySchedule(document, categoryId):
        """
        GetDefaultParameterNameForKeySchedule(document: Document, categoryId: ElementId) -> str
        
            Gets the default parameter name that will be used when creating a key schedule.
        
            document: The document to which the new schedule will be added.
            categoryId: The ID of the category of elements that the schedule's keys will be associated 
             with.
        
            Returns: The default parameter name.
        """
        pass

    def GetTableData(self):
        """
        GetTableData(self: ViewSchedule) -> TableData
        
            Gets the writable table data object.
            Returns: The schedule data object.
        """
        pass

    @staticmethod
    def GetValidCategoriesForKeySchedule():
        """
        GetValidCategoriesForKeySchedule() -> ICollection[ElementId]
        
            Gets a list of categories that can be used for a key schedule.
            Returns: The IDs of all valid categories.
        """
        pass

    @staticmethod
    def GetValidCategoriesForMaterialTakeoff():
        """
        GetValidCategoriesForMaterialTakeoff() -> ICollection[ElementId]
        
            Gets a list of categories that can be used for a material takeoff.
            Returns: The IDs of all valid categories.
        """
        pass

    @staticmethod
    def GetValidCategoriesForSchedule():
        """
        GetValidCategoriesForSchedule() -> ICollection[ElementId]
        
            Gets a list of categories that can be used for a regular schedule.
            Returns: The IDs of all valid categories.
        """
        pass

    @staticmethod
    def GetValidFamiliesForNoteBlock(document):
        """
        GetValidFamiliesForNoteBlock(document: Document) -> ICollection[ElementId]
        
            Gets a list of families that can be used for a note block.
        
            document: The document.
            Returns: The IDs of all valid families.
        """
        pass

    def GroupHeaders(self, top, left, bottom, right, caption=None):
        """
        GroupHeaders(self: ViewSchedule, top: int, left: int, bottom: int, right: int)
            Groups schedule header cells.
        
            top: The index of the top row of the selected headers.
            left: The index of the left column of the selected headers.
            bottom: The index of the bottom row of the selected headers.
            right: The index of the right column of the selected headers.
        GroupHeaders(self: ViewSchedule, top: int, left: int, bottom: int, right: int, caption: str)
            Groups schedule header cells.
        
            top: The index of the top row of the selected headers.
            left: The index of the left column of the selected headers.
            bottom: The index of the bottom row of the selected headers.
            right: The index of the right column of the selected headers.
            caption: The header caption.
        """
        pass

    def HasImageField(self):
        """
        HasImageField(self: ViewSchedule) -> bool
        
            Checks whether the schedule definition includes any image-related fields and if 
             any elements in the schedule actually have images in those fields.
        
            Returns: True if the schedule has at least one image field showing at least one image, 
             false otherwise.
        """
        pass

    def IsDataOutOfDate(self):
        """
        IsDataOutOfDate(self: ViewSchedule) -> bool
        
            Indicates whether the schedule data is out of date.
            Returns: True if the schedule data is out of date, false otherwise.
        """
        pass

    @staticmethod
    def IsValidCategoryForKeySchedule(categoryId):
        """
        IsValidCategoryForKeySchedule(categoryId: ElementId) -> bool
        
            Checks whether a category can be used for a key schedule.
        
            categoryId: The category ID to check.
            Returns: True if the category can be used for a key schedule,
           false otherwise.
        """
        pass

    @staticmethod
    def IsValidCategoryForMaterialTakeoff(categoryId):
        """
        IsValidCategoryForMaterialTakeoff(categoryId: ElementId) -> bool
        
            Checks whether a category can be used for a material takeoff.
        
            categoryId: The category ID to check.
            Returns: True if the category can be used for a material takeoff,
           false otherwise.
        """
        pass

    @staticmethod
    def IsValidCategoryForSchedule(categoryId):
        """
        IsValidCategoryForSchedule(categoryId: ElementId) -> bool
        
            Checks whether a category can be used for a regular schedule.
        
            categoryId: The category ID to check.
            Returns: True if the category can be used for a regular schedule,
           false otherwise.
        """
        pass

    @staticmethod
    def IsValidFamilyForNoteBlock(document, familyId):
        """
        IsValidFamilyForNoteBlock(document: Document, familyId: ElementId) -> bool
        
            Checks whether a family can be used for a note block.
        
            document: The document.
            familyId: The family ID to check.
            Returns: True if the family can be used for a note block,
           false otherwise.
        """
        pass

    def IsValidTextTypeId(self, textTypeId):
        """
        IsValidTextTypeId(self: ViewSchedule, textTypeId: ElementId) -> bool
        
            Identifies if the input id represents a valid text type id for use in the 
             schedule properties.
        
        
            textTypeId: The element id of the text type.
        """
        pass

    def RefreshData(self):
        """
        RefreshData(self: ViewSchedule) -> bool
        
            Rebuilds the schedule data if it is out of date.
            Returns: True if the data is up to date after the refresh.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RestoreImageSize(self):
        """
        RestoreImageSize(self: ViewSchedule)
            Restores all images to their original sizes.
        """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def UngroupHeaders(self, top, left, bottom, right):
        """
        UngroupHeaders(self: ViewSchedule, top: int, left: int, bottom: int, right: int)
            Ungroups selected headers of schedule.
        
            top: The index of the top row of the selected headers.
            left: The index of the left column of the selected headers.
            bottom: The index of the bottom row of the selected headers.
            right: The index of the right column of the selected headers.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    BodyTextTypeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines the default text style used for the data section of the schedule.

Get: BodyTextTypeId(self: ViewSchedule) -> ElementId

Set: BodyTextTypeId(self: ViewSchedule) = value
"""

    Definition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The primary ScheduleDefinition.

Get: Definition(self: ViewSchedule) -> ScheduleDefinition

"""

    EmbeddedDefinition = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The embedded ScheduleDefinition.

Get: EmbeddedDefinition(self: ViewSchedule) -> ScheduleDefinition

"""

    HeaderTextTypeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines the default text style used in the column headers in the body section of the schedule.

Get: HeaderTextTypeId(self: ViewSchedule) -> ElementId

Set: HeaderTextTypeId(self: ViewSchedule) = value
"""

    ImageRowHeight = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines the image row height in the schedule.

Get: ImageRowHeight(self: ViewSchedule) -> float

Set: ImageRowHeight(self: ViewSchedule) = value
"""

    IsInternalKeynoteSchedule = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if this ViewSchedule is an internal schedule used when keynotes are filtered based on the elements that are shown on a sheet.

Get: IsInternalKeynoteSchedule(self: ViewSchedule) -> bool

"""

    IsTitleblockRevisionSchedule = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if this ViewSchedule is an internal schedule used to display revision schedules as part of a titleblock.

Get: IsTitleblockRevisionSchedule(self: ViewSchedule) -> bool

"""

    KeyScheduleParameterName = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """In a key schedule, the name of the parameter for choosing one of the keys.

Get: KeyScheduleParameterName(self: ViewSchedule) -> str

Set: KeyScheduleParameterName(self: ViewSchedule) = value
"""

    TitleTextTypeId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Defines the default text style used in the header section of the schedule.

Get: TitleTextTypeId(self: ViewSchedule) -> ElementId

Set: TitleTextTypeId(self: ViewSchedule) = value
"""



class ViewScheduleExportOptions(object, IDisposable):
    """
    The export options used to export schedule views.
    
    ViewScheduleExportOptions()
    ViewScheduleExportOptions(other: ViewScheduleExportOptions)
    """
    def Dispose(self):
        """ Dispose(self: ViewScheduleExportOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ViewScheduleExportOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, other=None):
        """
        __new__(cls: type)
        __new__(cls: type, other: ViewScheduleExportOptions)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ColumnHeaders = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """How to export column headers. Default is MultipleRows.

Get: ColumnHeaders(self: ViewScheduleExportOptions) -> ExportColumnHeaders

Set: ColumnHeaders(self: ViewScheduleExportOptions) = value
"""

    FieldDelimiter = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """How to delimit fields. Default is Tab.

Get: FieldDelimiter(self: ViewScheduleExportOptions) -> str

Set: FieldDelimiter(self: ViewScheduleExportOptions) = value
"""

    HeadersFootersBlanks = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether to export group headers, footers, and blank lines. Default is true.

Get: HeadersFootersBlanks(self: ViewScheduleExportOptions) -> bool

Set: HeadersFootersBlanks(self: ViewScheduleExportOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: ViewScheduleExportOptions) -> bool

"""

    TextQualifier = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """How to qualify text fields. Default is DoubleQuote.

Get: TextQualifier(self: ViewScheduleExportOptions) -> ExportTextQualifier

Set: TextQualifier(self: ViewScheduleExportOptions) = value
"""

    Title = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether or not to export the schedule title. Default is true.

Get: Title(self: ViewScheduleExportOptions) -> bool

Set: Title(self: ViewScheduleExportOptions) = value
"""



class ViewSection(View, IDisposable):
    """ ViewSection covers sections, details, elevations, and callouts, all in their reference and non-reference variations. """
    @staticmethod
    def CreateCallout(document, parentViewId, viewFamilyTypeId, point1, point2):
        """
        CreateCallout(document: Document, parentViewId: ElementId, viewFamilyTypeId: ElementId, point1: XYZ, point2: XYZ) -> View
        
            Creates a new callout view.
        
            document: The document to which the new callout will be added.
            parentViewId: The view in which the callout appears.
           Callouts can be created in 
             FloorPlan, CeilingPlan, StructuralPlan, Section, Elevation,
           and Detail 
             views.
        
            viewFamilyTypeId: The id of the ViewFamilyType which will be used by the new callout ViewSection.
             
           Detail ViewFamilyTypes can be used in all parent views except for 
             CeilingPlan and Drafting views.
           FloorPlan, CeilingPlan, StructuralPlan, 
             Section, and Elevation ViewFamilyTypes may be
           be used in parent views that 
             also use a type with the same ViewFamily enum value.
           For example, in 
             StructuralPlan parent views both StructuralPlan and Detail ViewFamilyTypes are 
             allowed.
        
            point1: Determines the extents of the callout symbol in the parent view.
            point2: Determine the extents of the callout symbol in the parent view.
            Returns: The new callout view.  The view will be either a ViewSection, ViewPlan or 
             ViewDetail.
        """
        pass

    @staticmethod
    def CreateDetail(document, viewFamilyTypeId, sectionBox):
        """
        CreateDetail(document: Document, viewFamilyTypeId: ElementId, sectionBox: BoundingBoxXYZ) -> ViewSection
        
            Returns a new detail ViewSection.
        
            document: The document to which the new detail ViewSection will be added.
            viewFamilyTypeId: The id of the ViewFamilyType which will be used by the new detail ViewSection.  
             The type needs to be a Detail ViewFamily.
        
            sectionBox: The BoundingBoxXYZ which specifies the new ViewSection's view direction and 
             extents.
        
            Returns: The new detail ViewSection.
        """
        pass

    @staticmethod
    def CreateReferenceCallout(document, parentViewId, viewIdToReference, point1, point2):
        """
        CreateReferenceCallout(document: Document, parentViewId: ElementId, viewIdToReference: ElementId, point1: XYZ, point2: XYZ)
            Creates a new reference callout.
        
            document: The document to which the new reference callout will be added.
            parentViewId: The view in which the callout symbol appears.
           Callouts can be created in 
             FloorPlan, CeilingPlan, StructuralPlan, Section, Elevation,
           Drafting, and 
             Detail views.
        
            viewIdToReference: The view which will be referenced.  The ViewFamilyType of the referenced view 
             will be used
           by the new reference callout.
           Only cropped views can be 
             referenced, unless the referenced view is a Drafting view.
           Drafting views 
             can always be referenced regardless of the parent view type.
           Elevation 
             views can be referenced from Elevation and Drafting parent views.
           Section 
             views can be referenced from Section and Drafting parent views.
           Detail 
             views can be referenced from all parent views except for in FloorPlan, 
             CeilingPlan and
           StructuralPlan parent views where only 
             horizontally-oriented Detail views can be referenced.
           FloorPlan, 
             CeilingPlan and StructuralPlan views can be referenced from FloorPlan, 
             CeilingPlan
           and StructuralPlan parent views.
        
            point1: One corner of the callout symbol in the parent view.
            point2: The other diagonally opposed corner of the callout symbol in the parent view.
        """
        pass

    @staticmethod
    def CreateReferenceSection(document, parentViewId, viewIdToReference, headPoint, tailPoint):
        """
        CreateReferenceSection(document: Document, parentViewId: ElementId, viewIdToReference: ElementId, headPoint: XYZ, tailPoint: XYZ)
            Creates a new reference section.
        
            document: The document to which the reference section will be added.
            parentViewId: The view in which the new reference section marker will appear.
           Reference 
             sections can be created in FloorPlan, CeilingPlan, StructuralPlan, Section, 
             Elevation,
           Drafting, and Detail views.
        
            viewIdToReference: Detail, Drafting and Section views can be referenced.
           The ViewFamilyType of 
             the referenced view will be used by the new reference section.
        
            headPoint: Determines the location of the section marker's head in the parent view.
            tailPoint: Determines the location of the section marker's tail in the parent view.
        """
        pass

    @staticmethod
    def CreateSection(document, viewFamilyTypeId, sectionBox):
        """
        CreateSection(document: Document, viewFamilyTypeId: ElementId, sectionBox: BoundingBoxXYZ) -> ViewSection
        
            Returns a new section ViewSection.
        
            document: The document to which the new section ViewSection will be added.
            viewFamilyTypeId: The id of the ViewFamilyType which will be used by the new section ViewSection. 
              The type needs to be a Section ViewFamily.
        
            sectionBox: The BoundingBoxXYZ which specifies the new ViewSection's view direction and 
             extents.
        
            Returns: The new section ViewSection.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: View, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def IsParentViewValidForCallout(document, parentViewId):
        """
        IsParentViewValidForCallout(document: Document, parentViewId: ElementId) -> bool
        
            This validator checks that the parent view is appropriate for callout views.
        
            document: The document which contains the ViewFamilyType and parent view.
            parentViewId: The view in which the new callout will appear.
           Callouts can be created in 
             FloorPlan, CeilingPlan, StructuralPlan, Section, Elevation,
           and Detail 
             views.
        
            Returns: True if the ViewFamilyType can be used for callout views in the parent view, 
             false otherwise.
        """
        pass

    @staticmethod
    def IsViewFamilyTypeValidForCallout(document, viewFamilyTypeId, parentViewId):
        """
        IsViewFamilyTypeValidForCallout(document: Document, viewFamilyTypeId: ElementId, parentViewId: ElementId) -> bool
        
            This validator checks that the ViewFamilyType is appropriate for callout views 
             in the
           input parent view.
        
        
            document: The document which contains the ViewFamilyType and parent view.
            viewFamilyTypeId: The id of the ViewFamilyType which will be used by the new callout ViewSection.
             
           Detail ViewFamilyTypes can be used in all parent views except for 
             CeilingPlan and Drafting views.
           FloorPlan, CeilingPlan, StructuralPlan, 
             Section, Elevation, and Detail ViewFamilyTypes may be
           be used in parent 
             views that also use a type with the same ViewFamily enum value.
           For 
             example, in StructuralPlan views both StructuralPlan and Detail ViewFamilyTypes 
             are allowed.
        
            parentViewId: The view in which the new callout will appear.
           Callouts can be created in 
             FloorPlan, CeilingPlan, StructuralPlan, Section, Elevation,
           and Detail 
             views.
        
            Returns: True if the ViewFamilyType can be used for callout views in the parent view, 
             false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class ViewSet(APIObject, IDisposable, IEnumerable):
    """
    A set that contains views.
    
    ViewSet()
    """
    def Clear(self):
        """
        Clear(self: ViewSet)
            Removes every view from the set, rendering it empty.
        """
        pass

    def Contains(self, item):
        """
        Contains(self: ViewSet, item: View) -> bool
        
            Tests for the existence of a view within the set.
        
            item: The view to be searched for.
            Returns: The Contains method returns True if the view is within the set, otherwise False.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ViewSet, A_0: bool) """
        pass

    def Erase(self, item):
        """
        Erase(self: ViewSet, item: View) -> int
        
            Removes a specified view from the set.
        
            item: The view to be erased.
            Returns: The number of views that were erased from the set.
        """
        pass

    def ForwardIterator(self):
        """
        ForwardIterator(self: ViewSet) -> ViewSetIterator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def GetEnumerator(self):
        """
        GetEnumerator(self: ViewSet) -> IEnumerator
        
            Retrieve a forward moving iterator to the set.
            Returns: Returns a forward moving iterator to the set.
        """
        pass

    def Insert(self, item):
        """
        Insert(self: ViewSet, item: View) -> bool
        
            Insert the specified view into the set.
        
            item: The view to be inserted into the set.
            Returns: Returns whether the view was inserted into the set.
        """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def ReverseIterator(self):
        """
        ReverseIterator(self: ViewSet) -> ViewSetIterator
        
            Retrieve a backward moving iterator to the set.
            Returns: Returns a backward moving iterator to the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerable) -> object """
        pass

    IsEmpty = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Test to see if the set is empty.

Get: IsEmpty(self: ViewSet) -> bool

"""

    Size = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the number of views that are in the set.

Get: Size(self: ViewSet) -> int

"""



class ViewSetIterator(APIObject, IDisposable, IEnumerator):
    """
    An iterator to a view set.
    
    ViewSetIterator()
    """
    def Dispose(self):
        """ Dispose(self: ViewSetIterator, A_0: bool) """
        pass

    def MoveNext(self):
        """
        MoveNext(self: ViewSetIterator) -> bool
        
            Move the iterator one item forward.
            Returns: Returns True if the iterator was successfully moved forward one item and the 
             Current
                    property will return a valid item. False will be returned 
             it the iterator has reached the end of
                    the set.
        """
        pass

    def next(self, *args): #cannot find CLR method
        """ next(self: object) -> object """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Reset(self):
        """
        Reset(self: ViewSetIterator)
            Bring the iterator back to the start of the set.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __iter__(self, *args): #cannot find CLR method
        """ __iter__(self: IEnumerator) -> object """
        pass

    Current = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves the item that is the current focus of the iterator.

Get: Current(self: ViewSetIterator) -> object

"""



class ViewShapeBuilder(ShapeBuilder, IDisposable):
    """
    Builds and verifies a view-specific shape representation that would typically be stored in a DirectShape object.
       Currently limited to curve-based representations for plan and elevation views.
    
    ViewShapeBuilder(targetViewType: DirectShapeTargetViewType)
    ViewShapeBuilder()
    """
    def AddCurve(self, GCurve):
        """
        AddCurve(self: ViewShapeBuilder, GCurve: Curve)
            Add a curve to the GRep associated to this ViewShapeBuilder.
        
            GCurve: The curve to be added.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ShapeBuilder, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ShapeBuilder, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: ViewShapeBuilder)
            Clears the accumulated geometry and resets other ViewShapeBuilder parameters to 
             invalid values.
        """
        pass

    @staticmethod
    def ValidateCurve(GCurve, targetViewType=None):
        """
        ValidateCurve(self: ViewShapeBuilder, GCurve: Curve) -> bool
        
            Validates curve to be added to the view-specific shape being constructed. 
             Called by AddCurve() to validate input. Expects a valid view normal to be set 
             prior to the call.
        
        
            GCurve: Curve object to be validated.
            Returns: True is %GCurve% is acceptable as a part of view-specific shape representation 
             being built.
        
        ValidateCurve(GCurve: Curve, targetViewType: DirectShapeTargetViewType) -> bool
        
            Validates curve to be added to the view-specific shape being constructed. 
             Called by AddCurve() to validate input.
           This function may be used to 
             pre-validate the geometry being added to avoid AddCurve() throwing an 
             InvalidArgumentException
        
        
            GCurve: Curve object to be validated.
            targetViewType: View type for which this curve is intended.
            Returns: True is %GCurve% is acceptable as a part of view-specific shape representation.
        """
        pass

    @staticmethod
    def ValidateShape(shape, targetViewType):
        """ ValidateShape(shape: IList[GeometryObject], targetViewType: DirectShapeTargetViewType) -> bool """
        pass

    @staticmethod
    def ValidateViewType(targetViewType):
        """
        ValidateViewType(targetViewType: DirectShapeTargetViewType) -> bool
        
            Validates the incoming view type. As of today, the only allowed view type is 
             Plan.
        
            Returns: True if %targetViewType% is DirectShapeTargetViewType::Plan
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, targetViewType=None):
        """
        __new__(cls: type, targetViewType: DirectShapeTargetViewType)
        __new__(cls: type)
        """
        pass

    ViewNormal = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Normal of the view that will display the shape being built. Must be set explicitly before adding any geometry. Must be a unit vector.
   This is used to validate incoming geometry - it must be orthogonal to the viewNormal.

Get: ViewNormal(self: ViewShapeBuilder) -> XYZ

Set: ViewNormal(self: ViewShapeBuilder) = value
"""

    ViewType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """View type where the view-specific shape currently being built will be used

Get: ViewType(self: ViewShapeBuilder) -> DirectShapeTargetViewType

Set: ViewType(self: ViewShapeBuilder) = value
"""



class ViewSheet(View, IDisposable):
    """ Class for ViewSheet """
    def ConvertToRealSheet(self, titleBlockTypeId):
        """
        ConvertToRealSheet(self: ViewSheet, titleBlockTypeId: ElementId)
            Converts a placeholder sheet to a real one with an optional titleblock.
        
            titleBlockTypeId: The id of the placeholder sheet, or invalidElementId if no titleblock should be 
             added.
        """
        pass

    @staticmethod
    def Create(document, titleBlockTypeId):
        """
        Create(document: Document, titleBlockTypeId: ElementId) -> ViewSheet
        
            Creates a new ViewSheet.
        
            document: The document to which the ViewSheet will be added.
            titleBlockTypeId: The type id of the TitleBlock type which will be used by the new ViewSheet.
           
             For no TitleBlock, pass invalid element ID.
        
            Returns: The new ViewSheet.
        """
        pass

    @staticmethod
    def CreatePlaceholder(aDoc):
        """
        CreatePlaceholder(aDoc: Document) -> ViewSheet
        
            Creates a placeholder sheet in a document.
        
            aDoc: The document.
            Returns: The placeholder sheet.
        """
        pass

    def DeleteViewport(self, viewport):
        """
        DeleteViewport(self: ViewSheet, viewport: Viewport)
            Removes a viewport from the sheet by deleting it from the document.
        
            viewport: The viewport that will be deleted and removed from the sheet.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetAdditionalRevisionIds(self):
        """
        GetAdditionalRevisionIds(self: ViewSheet) -> ICollection[ElementId]
        
            Gets the Revisions that are additionally included in the sheet's revision 
             schedules.
        
            Returns: The additionally included Revisions for the sheet's revision schedules.
        """
        pass

    def GetAllPlacedViews(self):
        """
        GetAllPlacedViews(self: ViewSheet) -> ISet[ElementId]
        
            Returns the ElementIds of Views placed on this sheet.
            Returns: The ids of the views on this sheet.
        """
        pass

    def GetAllRevisionIds(self):
        """
        GetAllRevisionIds(self: ViewSheet) -> IList[ElementId]
        
            Gets the ordered array of Revisions which participate in the sheet's revision 
             schedules.
        
            Returns: The ordered array of ids of Revisions participating in the sheet's revision 
             schedules.
        """
        pass

    def GetAllViewports(self):
        """
        GetAllViewports(self: ViewSheet) -> ICollection[ElementId]
        
            Returns the ElementIds of Viewports on this sheet.
            Returns: The Viewports on this sheet.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: View, view: View) -> BoundingBoxXYZ """
        pass

    def GetCurrentRevision(self):
        """
        GetCurrentRevision(self: ViewSheet) -> ElementId
        
            Returns the most recent numbered Revision shown on this ViewSheet.
            Returns: The Id of the most recent numbered Revision shown on this ViewSheet or 
             InvalidElementId if none are shown.
        """
        pass

    def GetRevisionCloudNumberOnSheet(self, revisionCloudId):
        """
        GetRevisionCloudNumberOnSheet(self: ViewSheet, revisionCloudId: ElementId) -> str
        
            Gets the Revision Number for a RevisionCloud on this sheet.
        
            revisionCloudId: The id of the RevisionCLoud.
            Returns: Returns the Revision Number as it will appear on this sheet or ll if there is 
             no Revision Number assigned on this sheet.
        """
        pass

    def GetRevisionNumberOnSheet(self, revisionId):
        """
        GetRevisionNumberOnSheet(self: ViewSheet, revisionId: ElementId) -> str
        
            Gets the Revision Number for a particular Revision as it will appear on this 
             sheet.
        
        
            revisionId: The id of the Revision.
            Returns: Returns the Revision Number as it will appear on this sheet or ll if the 
             Revision does not appear on this sheet.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def SetAdditionalRevisionIds(self, projectRevisionIds):
        """ SetAdditionalRevisionIds(self: ViewSheet, projectRevisionIds: ICollection[ElementId]) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsPlaceholder = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies whether or not the view sheet represents a placeholder sheet.

Get: IsPlaceholder(self: ViewSheet) -> bool

"""

    SheetNumber = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sheet number of the document.

Get: SheetNumber(self: ViewSheet) -> str

Set: SheetNumber(self: ViewSheet) = value
"""



class ViewSheetSet(Element, IDisposable, IViewSheetSet):
    """
    Represents ViewSheetSets stored in a document.
    ViewSheetSets can be stored so that the same printing task can be executed multiple times.
    """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The view sheet set name.

Get: Name(self: ViewSheetSet) -> str

Set: Name(self: ViewSheetSet) = value
"""

    Views = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The views.

Get: Views(self: ViewSheetSet) -> ViewSet

Set: Views(self: ViewSheetSet) = value
"""



class ViewSheetSetting(APIObject, IDisposable):
    """ Represents the View/Sheet Set (Application Menu->Print) within Autodesk Revit. """
    def Delete(self):
        """
        Delete(self: ViewSheetSetting) -> bool
        
            Delete the current view sheet set, and make the In-Session set as the current 
             one.
        
            Returns: False if Delete operation fails, otherwise True.
        """
        pass

    def Dispose(self):
        """ Dispose(self: APIObject, A_0: bool) """
        pass

    def ReleaseManagedResources(self, *args): #cannot find CLR method
        """ ReleaseManagedResources(self: APIObject) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: APIObject) """
        pass

    def Rename(self, newName):
        """
        Rename(self: ViewSheetSetting, newName: str) -> bool
        
            Rename the current view sheet set.
        
            newName: View sheet set name to be renamed as.
            Returns: False if Rename operation fails, otherwise True.
        """
        pass

    def Revert(self):
        """
        Revert(self: ViewSheetSetting)
            Revert the current view sheet set.
        """
        pass

    def Save(self):
        """
        Save(self: ViewSheetSetting) -> bool
        
            Save the changes for the current view sheet set.
            Returns: False if save operation fails, otherwise True.
        """
        pass

    def SaveAs(self, newName):
        """
        SaveAs(self: ViewSheetSetting, newName: str) -> bool
        
            Save the current view sheet set to another view sheet set with the specified 
             name.
        
        
            newName: View sheet set name to be saved as.
            Returns: False if Save As operation fails, otherwise True.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    AvailableViews = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """All views that can be printed.

Get: AvailableViews(self: ViewSheetSetting) -> ViewSet

"""

    CurrentViewSheetSet = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current view sheet set of PrintSetup.

Get: CurrentViewSheetSet(self: ViewSheetSetting) -> IViewSheetSet

Set: CurrentViewSheetSet(self: ViewSheetSetting) = value
"""

    InSession = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The in-session view sheet set of Print Setup.

Get: InSession(self: ViewSheetSetting) -> InSessionViewSheetSet

"""



class ViewTemplateApplicationOption(Enum, IComparable, IFormattable, IConvertible):
    """
    Options for applying view templates
    
    enum ViewTemplateApplicationOption, values: AllParameters (0), AllParametersAndStickIfNone (2), UncontrolledParameters (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AllParameters = None
    AllParametersAndStickIfNone = None
    UncontrolledParameters = None
    value__ = None


class ViewType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing available view types.
    
    enum ViewType, values: AreaPlan (116), CeilingPlan (2), ColumnSchedule (122), CostReport (119), Detail (118), DraftingView (10), DrawingSheet (6), Elevation (3), EngineeringPlan (115), FloorPlan (1), Internal (214), Legend (11), LoadsReport (120), PanelSchedule (123), PresureLossReport (121), ProjectBrowser (7), Rendering (125), Report (8), Schedule (5), Section (117), SystemBrowser (12), ThreeD (4), Undefined (0), Walkthrough (124)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AreaPlan = None
    CeilingPlan = None
    ColumnSchedule = None
    CostReport = None
    Detail = None
    DraftingView = None
    DrawingSheet = None
    Elevation = None
    EngineeringPlan = None
    FloorPlan = None
    Internal = None
    Legend = None
    LoadsReport = None
    PanelSchedule = None
    PresureLossReport = None
    ProjectBrowser = None
    Rendering = None
    Report = None
    Schedule = None
    Section = None
    SystemBrowser = None
    ThreeD = None
    Undefined = None
    value__ = None
    Walkthrough = None


class VirtualPrinterType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated to list Virtual Printer Types in Revit.
    
    enum VirtualPrinterType, values: AdobePDF (1), DWFWriter (2), None (0), XPSWriter (3)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    AdobePDF = None
    DWFWriter = None
    None = None
    value__ = None
    XPSWriter = None


class Visibility(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the visibility of a particular geometry object.
    
    enum Visibility, values: Contextual (2), Highlight (1), Invisible (3), Visible (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Contextual = None
    Highlight = None
    Invisible = None
    value__ = None
    Visible = None


class Wall(HostObject, IDisposable):
    """ Represents a wall in Autodesk Revit. """
    @staticmethod
    def Create(document, *__args):
        """
        Create(document: Document, curve: Curve, wallTypeId: ElementId, levelId: ElementId, height: float, offset: float, flip: bool, structural: bool) -> Wall
        
            Creates a new rectangular profile wall within the project using the specified 
             wall type, height, and offset.
        
        
            document: The document in which the new wall is created.
            curve: An arc or line representing the base line of the wall.
            wallTypeId: Id of the wall type to be used by the new wall instead of the default type.
            levelId: Id of the level on which the wall is to be placed.
            height: The height of the wall other than the default height.
            offset: Modifies the wall's Base Offset parameter to determine its vertical placement.
            flip: Change which side of the wall is considered to be the inside and outside of the 
             wall.
        
            structural: If set, specifies that the wall is structural in nature.
            Returns: If successful a new wall object within the project.
        Create(document: Document, curve: Curve, levelId: ElementId, structural: bool) -> Wall
        
            Creates a new rectangular profile wall within the project using the default 
             wall style.
        
        
            document: The document in which the new wall is created.
            curve: An arc or line representing the base line of the wall.
            levelId: Id of the level on which the wall is to be placed.
            structural: If set, specifies that the wall is structural in nature.
            Returns: If successful a new wall object within the project.
        Create(document: Document, profile: IList[Curve], structural: bool) -> Wall
        Create(document: Document, profile: IList[Curve], wallTypeId: ElementId, levelId: ElementId, structural: bool, normal: XYZ) -> Wall
        Create(document: Document, profile: IList[Curve], wallTypeId: ElementId, levelId: ElementId, structural: bool) -> Wall
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def Flip(self):
        """
        Flip(self: Wall)
            The wall orientation will be flipped.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetStackedWallMemberIds(self):
        """
        GetStackedWallMemberIds(self: Wall) -> IList[ElementId]
        
            Get the sub walls which belongs to the wall.
            Returns: If the wall is a stacked wall, the Ids of the sub will be returned in 
             bottom-top order.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    CurtainGrid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the grid object of a curtain wall

Get: CurtainGrid(self: Wall) -> CurtainGrid

"""

    Flipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Property to test whether the wall orientation is flipped.

Get: Flipped(self: Wall) -> bool

"""

    IsStackedWall = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the wall is a stacked wall.

Get: IsStackedWall(self: Wall) -> bool

"""

    IsStackedWallMember = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Identifies if the wall is a member of a stacked wall.

Get: IsStackedWallMember(self: Wall) -> bool

"""

    Orientation = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The normal vector projected from the exterior side of the wall.

Get: Orientation(self: Wall) -> XYZ

"""

    StackedWallOwnerId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the stacked wall which contains this stacked wall member.

Get: StackedWallOwnerId(self: Wall) -> ElementId

"""

    StructuralUsage = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes  the wall's designated structural usage.

Get: StructuralUsage(self: Wall) -> StructuralWallUsage

Set: StructuralUsage(self: Wall) = value
"""

    WallType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Retrieves or changes the type of the wall.

Get: WallType(self: Wall) -> WallType

Set: WallType(self: Wall) = value
"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Get the overall thickness of the wall.

Get: Width(self: Wall) -> float

"""



class WallFoundation(HostObject, IDisposable):
    """ An object that represents a wall foundation element. """
    @staticmethod
    def Create(document, typeId, wallId):
        """
        Create(document: Document, typeId: ElementId, wallId: ElementId) -> WallFoundation
        
            Creates a new wall foundation within the project.
        
            document: The document.
            typeId: The id of the wall foundation type of the newly created wall foundation.
            wallId: The id of the host wall of the newly created wall foundation.
            Returns: If successful, returns the newly created wall foundation, ll otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetFoundationType(self):
        """
        GetFoundationType(self: WallFoundation) -> WallFoundationType
        
            Gets an object that represents the type of the foundation.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetFoundationType(self, type):
        """
        SetFoundationType(self: WallFoundation, type: WallFoundationType)
            Sets an object that represents the type of the foundation.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    WallId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns the id of the host wall.

Get: WallId(self: WallFoundation) -> ElementId

"""



class WallFoundationType(HostObjAttributes, IDisposable):
    """ An object that represents the type of a wall foundation in Autodesk Revit. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class WallFunction(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the function of a specified WallType, as specified in the parameter FUNCTION_PARAM on the WallType.
    
    enum WallFunction, values: Coreshaft (5), Exterior (1), Foundation (2), Interior (0), Retaining (3), Soffit (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Coreshaft = None
    Exterior = None
    Foundation = None
    Interior = None
    Retaining = None
    Soffit = None
    value__ = None


class WallKind(Enum, IComparable, IFormattable, IConvertible):
    """
    Describes the fundamental type of wall, such as curtain wall or stacked wall.
    
    enum WallKind, values: Basic (0), Curtain (1), Stacked (2), Unknown (-1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Basic = None
    Curtain = None
    Stacked = None
    Unknown = None
    value__ = None


class WallLocationLine(Enum, IComparable, IFormattable, IConvertible):
    """
    This enumerated type represents the options for alignment of a wall's location line.
    
    enum WallLocationLine, values: CoreCenterline (1), CoreExterior (4), CoreInterior (5), FinishFaceExterior (2), FinishFaceInterior (3), WallCenterline (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CoreCenterline = None
    CoreExterior = None
    CoreInterior = None
    FinishFaceExterior = None
    FinishFaceInterior = None
    value__ = None
    WallCenterline = None


class WallSide(Enum, IComparable, IFormattable, IConvertible):
    """
    Represents the possible sides of a wall where a sweep or reveal may be attached.
    
    enum WallSide, values: Exterior (0), Interior (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Exterior = None
    Interior = None
    value__ = None


class WallSweep(HostObject, IDisposable):
    """ Represents a wall sweep or reveal. """
    @staticmethod
    def Create(wall, wallSweepType, wallSweepInfo):
        """
        Create(wall: Wall, wallSweepType: ElementId, wallSweepInfo: WallSweepInfo) -> WallSweep
        
            Creates a new wall sweep or reveal.
        
            wall: The wall upon which to create the new sweep or reveal.
            wallSweepType: The wall sweep or reveal type.
            wallSweepInfo: The information that describes the new wall sweep or reveal.
            Returns: The new wall sweep.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetHostIds(self):
        """
        GetHostIds(self: WallSweep) -> IList[ElementId]
        
            Gets a list of all host walls on which the sweep resides.
            Returns: The list of wall ids.
        """
        pass

    def GetWallSweepInfo(self):
        """
        GetWallSweepInfo(self: WallSweep) -> WallSweepInfo
        
            Gets the information of the wall sweep or reveal.
            Returns: The information that describes the wall sweep or reveal.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    @staticmethod
    def WallAllowsWallSweep(wall):
        """
        WallAllowsWallSweep(wall: Wall) -> bool
        
            Validates that the wall is of a type that may be a host for a wall sweep or 
             reveal.
        
        
            wall: The wall.
            Returns: True if the wall may host a wall sweep, false otherwise.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class WallSweepInfo(object, IDisposable):
    """
    Represents a wall sweep or reveal of a vertically compound structure.
    
    WallSweepInfo(type: WallSweepType, vertical: bool)
    WallSweepInfo(fixed: bool, type: WallSweepType)
    """
    def Dispose(self):
        """ Dispose(self: WallSweepInfo) """
        pass

    def IsEqual(self, toCompare):
        """
        IsEqual(self: WallSweepInfo, toCompare: WallSweepInfo) -> bool
        
            Determines if the input object is equivalent to this WallSweepInfo.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: WallSweepInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, type: WallSweepType, vertical: bool)
        __new__(cls: type, fixed: bool, type: WallSweepType)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    CutsWall = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if you want the sweep to cut geometry out of the host wall.

Get: CutsWall(self: WallSweepInfo) -> bool

Set: CutsWall(self: WallSweepInfo) = value
"""

    DefaultSetback = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The sweep setback distance from inserts, such as windows and doors.

Get: DefaultSetback(self: WallSweepInfo) -> float

Set: DefaultSetback(self: WallSweepInfo) = value
"""

    Distance = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The distance from either the top or base of the wall.

Get: Distance(self: WallSweepInfo) -> float

Set: Distance(self: WallSweepInfo) = value
"""

    DistanceMeasuredFrom = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if Distance is measured from the top or bottom of the wall.

Get: DistanceMeasuredFrom(self: WallSweepInfo) -> DistanceMeasuredFrom

Set: DistanceMeasuredFrom(self: WallSweepInfo) = value
"""

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The id of the sweep or reveal.

Get: Id(self: WallSweepInfo) -> int

Set: Id(self: WallSweepInfo) = value
"""

    IsCutByInserts = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the sweep is cut by wall inserts.

Get: IsCutByInserts(self: WallSweepInfo) -> bool

Set: IsCutByInserts(self: WallSweepInfo) = value
"""

    IsFixed = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the described wall sweep is fixed.  A sweep is fixed if it is a part of a vertical compound structure.

Get: IsFixed(self: WallSweepInfo) -> bool

"""

    IsProfileFlipped = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates if the profile is applied upside-down.

Get: IsProfileFlipped(self: WallSweepInfo) -> bool

Set: IsProfileFlipped(self: WallSweepInfo) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: WallSweepInfo) -> bool

"""

    IsVertical = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether the sweep or reveal is swept vertically or horizontally.

Get: IsVertical(self: WallSweepInfo) -> bool

"""

    MaterialId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element id of the material used to create the sweep or reveal.

Get: MaterialId(self: WallSweepInfo) -> ElementId

Set: MaterialId(self: WallSweepInfo) = value
"""

    ProfileId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The element id of the profile family used to create the sweep or reveal.

Get: ProfileId(self: WallSweepInfo) -> ElementId

Set: ProfileId(self: WallSweepInfo) = value
"""

    WallOffset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The offset from the sweep or reveal to the wall.

Get: WallOffset(self: WallSweepInfo) -> float

Set: WallOffset(self: WallSweepInfo) = value
"""

    WallSide = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The side of the wall to which the sweep or reveal is attached.

Get: WallSide(self: WallSweepInfo) -> WallSide

Set: WallSide(self: WallSweepInfo) = value
"""

    WallSweepType = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The type (either a wall sweep or a reveal).

Get: WallSweepType(self: WallSweepInfo) -> WallSweepType

Set: WallSweepType(self: WallSweepInfo) = value
"""



class WallSweepType(Enum, IComparable, IFormattable, IConvertible):
    """
    Represents the possible types for methods affecting wall sweeps or reveals.
    
    enum WallSweepType, values: Reveal (1), Sweep (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Reveal = None
    Sweep = None
    value__ = None


class WallType(HostObjAttributes, IDisposable):
    """ Represents a specific type of wall, such as 'Generic -8" '. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    Function = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The wall function.

Get: Function(self: WallType) -> WallFunction

Set: Function(self: WallType) = value
"""

    Kind = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The nature of the wall.

Get: Kind(self: WallType) -> WallKind

"""

    ThermalProperties = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The calculated and settable thermal properties of the WallType

Get: ThermalProperties(self: WallType) -> ThermalProperties

"""

    Width = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The overall thickness of this type of wall.

Get: Width(self: WallType) -> float

"""



class WallUtils(object):
    """ General Wall utility methods """
    @staticmethod
    def AllowWallJoinAtEnd(wall, end):
        """
        AllowWallJoinAtEnd(wall: Wall, end: int)
            Allows the wall's end to join to other walls. If that end is near other walls 
             it will become joined as a result.
        
        
            wall: The wall in question
            end: 0 or 1 for the beginning or end of the wall's curve
        """
        pass

    @staticmethod
    def DisallowWallJoinAtEnd(wall, end):
        """
        DisallowWallJoinAtEnd(wall: Wall, end: int)
            Sets the wall's end not to join to other walls.
        
            wall: The wall in question
            end: 0 or 1 for the beginning or end of the wall's curve
        """
        pass

    @staticmethod
    def IsWallJoinAllowedAtEnd(wall, end):
        """
        IsWallJoinAllowedAtEnd(wall: Wall, end: int) -> bool
        
            Identifies if the indicated end of the wall allows joins or not.
        
            wall: The wall in question
            end: 0 or 1 for the beginning or end of the wall's curve
            Returns: true if it is allowed to join. false if it is disallowed.
        """
        pass

    __all__ = [
        'AllowWallJoinAtEnd',
        'DisallowWallJoinAtEnd',
        'IsWallJoinAllowedAtEnd',
    ]


class WireframeBuilder(ShapeBuilder, IDisposable):
    """
    Constructs a shape representation consisting of points and curves. That shape would typically be stored in a DirectShape or a DirectShapeType object.
    
    WireframeBuilder()
    """
    def AddCurve(self, GCurve):
        """
        AddCurve(self: WireframeBuilder, GCurve: Curve)
            Add a curve to the shape representation stored in this WireframeBuilder.
        
            GCurve: The curve to be added.
        """
        pass

    def AddPoint(self, GPoint):
        """
        AddPoint(self: WireframeBuilder, GPoint: Point)
            Add a point to the shape representation stored in this WireframeBuilder.
        
            GPoint: The point to be added.
        """
        pass

    def Dispose(self):
        """ Dispose(self: ShapeBuilder, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: ShapeBuilder, disposing: bool) """
        pass

    def Reset(self):
        """
        Reset(self: WireframeBuilder)
            Clears the accumulated geometry.
        """
        pass

    @staticmethod
    def ValidateCurve(GCurve):
        """
        ValidateCurve(GCurve: Curve) -> bool
        
            Validates curve to be added to the wireframe shape being constructed. Used by 
             addCurve to validate input.
           This function may be used to pre-validate the 
             geometry being added to avoid an exception from AddCurve().
        
        
            GCurve: Curve object to be validated.
            Returns: True is %GCurve% is acceptable as a part of a wireframe shape representation 
             being built.
        """
        pass

    @staticmethod
    def ValidatePoint(GPoint):
        """
        ValidatePoint(GPoint: Point) -> bool
        
            Validates the point object to be added to the wireframe shape being 
             constructed. Used by AddPoint() to validate input.
        
        
            GPoint: Point object to be validated.
            Returns: True is %GPoint% is acceptable as a part of a wireframe shape representation 
             being built.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class WorksetPreview(object, IDisposable):
    """ Represents an accessor for workset data which can be obtained from an unopened document. """
    def Dispose(self):
        """ Dispose(self: WorksetPreview) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: WorksetPreview, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Id = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Id of the workset.

Get: Id(self: WorksetPreview) -> WorksetId

"""

    IsDefaultWorkset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the workset is the default one.

Get: IsDefaultWorkset(self: WorksetPreview) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: WorksetPreview) -> bool

"""

    Name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Name of the workset.

Get: Name(self: WorksetPreview) -> str

"""

    Owner = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """User name of the workset.

Get: Owner(self: WorksetPreview) -> str

"""

    UniqueId = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """UniqueId of the workset.

Get: UniqueId(self: WorksetPreview) -> Guid

"""



class Workset(WorksetPreview, IDisposable):
    """ Represents a workset in the document. """
    @staticmethod
    def Create(document, name):
        """
        Create(document: Document, name: str) -> Workset
        
            Creates a new workset.
        
            document: The document in which the new instance is created.
            name: The workset name.
            Returns: Returns the newly created workset.
        """
        pass

    def Dispose(self):
        """ Dispose(self: WorksetPreview, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: WorksetPreview, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    IsEditable = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the workset is editable.

Get: IsEditable(self: Workset) -> bool

"""

    IsOpen = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the workset is open (rather than closed).

Get: IsOpen(self: Workset) -> bool

"""

    IsVisibleByDefault = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether the workset is visible by default.

Get: IsVisibleByDefault(self: Workset) -> bool

"""

    Kind = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Kind of the workset.

Get: Kind(self: Workset) -> WorksetKind

"""



class WorksetConfiguration(object, IDisposable):
    """
    A configuration class that is passed in to methods that open Revit documents to specify which user-created worksets are opened/closed.
    
    WorksetConfiguration(option: WorksetConfigurationOption)
    WorksetConfiguration()
    WorksetConfiguration(other: WorksetConfiguration)
    """
    def Close(self, worksetsToClose):
        """ Close(self: WorksetConfiguration, worksetsToClose: IList[WorksetId]) """
        pass

    def Dispose(self):
        """ Dispose(self: WorksetConfiguration) """
        pass

    def Open(self, worksetsToOpen):
        """ Open(self: WorksetConfiguration, worksetsToOpen: IList[WorksetId]) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: WorksetConfiguration, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, *__args):
        """
        __new__(cls: type, option: WorksetConfigurationOption)
        __new__(cls: type)
        __new__(cls: type, other: WorksetConfiguration)
        """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: WorksetConfiguration) -> bool

"""



class WorksetConfigurationOption(Enum, IComparable, IFormattable, IConvertible):
    """
    A collection of options used to initialize a WorksetConfiguration.
    
    enum WorksetConfigurationOption, values: CloseAllWorksets (1), OpenAllWorksets (0), OpenLastViewed (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CloseAllWorksets = None
    OpenAllWorksets = None
    OpenLastViewed = None
    value__ = None


class WorksetDefaultVisibilitySettings(Element, IDisposable):
    """ An object that manages default visibility of worksets in a document. """
    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    @staticmethod
    def GetWorksetDefaultVisibilitySettings(aDoc):
        """
        GetWorksetDefaultVisibilitySettings(aDoc: Document) -> WorksetDefaultVisibilitySettings
        
            Get the WorksetDefaultVisibilitySettings of the document.
        
            aDoc: The document.
            Returns: The WorksetDefaultVisibilitySettings of the document.
        """
        pass

    def IsWorksetVisible(self, worksetId):
        """
        IsWorksetVisible(self: WorksetDefaultVisibilitySettings, worksetId: WorksetId) -> bool
        
            Indicates whether the workset is visible by default.
        
            worksetId: Id of the workset.
            Returns: Whether the workset is visible by default.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetWorksetVisibility(self, worksetId, visible):
        """
        SetWorksetVisibility(self: WorksetDefaultVisibilitySettings, worksetId: WorksetId, visible: bool)
            Set the default visibility of a workset.
        
            worksetId: Id of the workset.
            visible: Whether the workset should be visible by default or not.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class WorksetFilter(object, IDisposable):
    """ A base class for a type of filter that accepts or rejects worksets based upon criteria. """
    def Dispose(self):
        """ Dispose(self: WorksetFilter) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: WorksetFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IncludeStandaloneWorksetsOnly = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the results of the filter only match stand-alone worksets; worksets that are not stand-alone will be rejected.

Get: IncludeStandaloneWorksetsOnly(self: WorksetFilter) -> bool

Set: IncludeStandaloneWorksetsOnly(self: WorksetFilter) = value
"""

    Inverted = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """True if the results of the filter are inverted; worksets that would normally be accepted by this filter will be rejected,
   and worksets that would normally be rejected will be accepted.

Get: Inverted(self: WorksetFilter) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: WorksetFilter) -> bool

"""



class WorksetId(object):
    """
    WorksetId identifies a workset within a single document.
    
    WorksetId(id: int)
    """
    def Compare(self, id):
        """
        Compare(self: WorksetId, id: WorksetId) -> int
        
            Compares two WorksetIds.
        
            id: The WorksetId to be compared with this WorksetId.
            Returns: -1 if this WorksetId is less than id, 0 if equal, 1 if greater.
        """
        pass

    def Equals(self, obj):
        """
        Equals(self: WorksetId, obj: object) -> bool
        
            Determines whether the specified System.Object is equal to the current 
             System.Object.
        
        
            obj: Another object.
        """
        pass

    def GetHashCode(self):
        """
        GetHashCode(self: WorksetId) -> int
        
            Gets the integer value of the id as hash code
        """
        pass

    def ToString(self):
        """
        ToString(self: WorksetId) -> str
        
            Gets a String representation of the integer value of the id.
        """
        pass

    def __cmp__(self, *args): #cannot find CLR method
        """ x.__cmp__(y) <==> cmp(x,y) """
        pass

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    @staticmethod # known case of __new__
    def __new__(self, id):
        """ __new__(cls: type, id: int) """
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    IntegerValue = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Provides the value of the WorksetId as an integer.

Get: IntegerValue(self: WorksetId) -> int

"""


    InvalidWorksetId = None


class WorksetKind(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates one of the standard kinds of workset (as available in the UI).
    
    enum WorksetKind, values: FamilyWorkset (1), OtherWorkset (0), StandardWorkset (3), UserWorkset (4), ViewWorkset (2)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FamilyWorkset = None
    OtherWorkset = None
    StandardWorkset = None
    UserWorkset = None
    value__ = None
    ViewWorkset = None


class WorksetKindFilter(WorksetFilter, IDisposable):
    """
    A filter used to match worksets of the given WorksetKind.
    
    WorksetKindFilter(worksetKind: WorksetKind, inverted: bool)
    WorksetKindFilter(worksetKind: WorksetKind)
    """
    def Dispose(self):
        """ Dispose(self: WorksetFilter, A_0: bool) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: WorksetFilter, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, worksetKind, inverted=None):
        """
        __new__(cls: type, worksetKind: WorksetKind, inverted: bool)
        __new__(cls: type, worksetKind: WorksetKind)
        """
        pass

    WorksetKind = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The WorksetKind.

Get: WorksetKind(self: WorksetKindFilter) -> WorksetKind

"""



class WorksetTable(object, IDisposable):
    """ A table containing references to all the worksets contained in a document. """
    def Dispose(self):
        """ Dispose(self: WorksetTable) """
        pass

    def GetActiveWorksetId(self):
        """
        GetActiveWorksetId(self: WorksetTable) -> WorksetId
        
            Returns the active workset's WorksetId.
            Returns: WorksetId of the active workset.
        """
        pass

    def GetWorkset(self, *__args):
        """
        GetWorkset(self: WorksetTable, id: WorksetId) -> Workset
        
            Returns the workset from a input WorksetId.
        
            id: Id of a workset.
            Returns: The returned workset. ll if there is no workset in this table with this Id.
        GetWorkset(self: WorksetTable, guid: Guid) -> Workset
        
            Returns the workset from a input Guid.
        
            guid: Guid of the workset.
            Returns: The returned workset. ll if there is no workset in this table with this Id.
        """
        pass

    @staticmethod
    def IsWorksetNameUnique(aDoc, name):
        """
        IsWorksetNameUnique(aDoc: Document, name: str) -> bool
        
            Checks if the given workset name is unique in the document.
        
            aDoc: The document in which the workset is accessed.
            name: The workset name.
            Returns: True if this given workset name is unique in the document, false otherwise.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: WorksetTable, disposing: bool) """
        pass

    @staticmethod
    def RenameWorkset(aDoc, worksetId, name):
        """
        RenameWorkset(aDoc: Document, worksetId: WorksetId, name: str)
            Renames the workset.
        
            aDoc: The document in which the workset is accessed.
            worksetId: The workset Id.
            name: The workset name.
        """
        pass

    def SetActiveWorksetId(self, worksetId):
        """
        SetActiveWorksetId(self: WorksetTable, worksetId: WorksetId)
            Sets the active workset.
        
            worksetId: The workset Id.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: WorksetTable) -> bool

"""



class WorksetVisibility(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates the visibility settings of a workset in a particular view.
    
    enum WorksetVisibility, values: Hidden (1), UseGlobalSetting (2), Visible (0)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    Hidden = None
    UseGlobalSetting = None
    value__ = None
    Visible = None


class WorksharingDisplayGraphicSettings(object, IDisposable):
    """
    Represents the graphical settings that can be assigned to elements in the worksharing
       display modes.
    
    WorksharingDisplayGraphicSettings(shouldApply: bool, lineColor: Color)
    """
    def Dispose(self):
        """ Dispose(self: WorksharingDisplayGraphicSettings) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: WorksharingDisplayGraphicSettings, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    @staticmethod # known case of __new__
    def __new__(self, shouldApply, lineColor):
        """ __new__(cls: type, shouldApply: bool, lineColor: Color) """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    FillColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The fill color that will be applied to elements when these settings are
   applied.  Note that this is automatically set by increasing the luma of
   the specified line color by 65%.

Get: FillColor(self: WorksharingDisplayGraphicSettings) -> Color

"""

    IsApplied = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Indicates whether this set of graphic overrides will be applied.

Get: IsApplied(self: WorksharingDisplayGraphicSettings) -> bool

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: WorksharingDisplayGraphicSettings) -> bool

"""

    LineColor = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The line color that will be applied to elements when these settings are
   applied.

Get: LineColor(self: WorksharingDisplayGraphicSettings) -> Color

"""



class WorksharingDisplayMode(Enum, IComparable, IFormattable, IConvertible):
    """
    Indicates which worksharing display mode a view is in.
    
    enum WorksharingDisplayMode, values: CheckoutStatus (1), ModelUpdates (3), Off (0), Owners (2), Worksets (4)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    CheckoutStatus = None
    ModelUpdates = None
    Off = None
    Owners = None
    value__ = None
    Worksets = None


class WorksharingDisplaySettings(Element, IDisposable):
    """
    WorksharingDisplaySettings controls how elements will appear when they are
       displayed in any of the worksharing display modes.
    """
    def CanUserHaveOverrides(self, username):
        """
        CanUserHaveOverrides(self: WorksharingDisplaySettings, username: str) -> bool
        
            Checks whether a single username can have customized graphic overrides.
        
            username: The username to check.
            Returns: False if the username is on the list of removed users, True otherwise.
        """
        pass

    def Dispose(self):
        """ Dispose(self: Element, A_0: bool) """
        pass

    def GetAllUsersWithGraphicOverrides(self):
        """
        GetAllUsersWithGraphicOverrides(self: WorksharingDisplaySettings) -> ICollection[str]
        
            Returns all usernames that have graphic overrides.  This list consists of
           
             all users included in the user table + all users who have explicitly been
           
             assigned overrides.
        
            Returns: All usernames that have been assigned graphic overrides.
        """
        pass

    def getBoundingBox(self, *args): #cannot find CLR method
        """ getBoundingBox(self: Element, view: View) -> BoundingBoxXYZ """
        pass

    def GetGraphicOverrides(self, *__args):
        """
        GetGraphicOverrides(self: WorksharingDisplaySettings, statusInCentral: ModelUpdatesStatus) -> WorksharingDisplayGraphicSettings
        
            Returns the graphic overrides assigned to a particular model update status.
        
            statusInCentral: The model update status of interest.
            Returns: Returns the graphic overrides assigned to the model update status.
        GetGraphicOverrides(self: WorksharingDisplaySettings, ownershipStatus: CheckoutStatus) -> WorksharingDisplayGraphicSettings
        
            Returns the graphic overrides associated with a particular ownership status.
        
            ownershipStatus: The ownership status of interest.
            Returns: Returns the graphic overrides assigned to a particular ownership status.
        GetGraphicOverrides(self: WorksharingDisplaySettings, worksetId: WorksetId) -> WorksharingDisplayGraphicSettings
        
            Returns the graphic overrides assigned to elements in a particular workset.
        
            worksetId: The workset id of interest.  This must be a user workset.
            Returns: Returns the graphic overrides assigned to the workset.
        GetGraphicOverrides(self: WorksharingDisplaySettings, username: str) -> WorksharingDisplayGraphicSettings
        
            Returns the graphic overrides assigned for elements owned by a particular user.
        
            username: The username of a particular user.
            Returns: The graphic overrides assigned to this user.
        """
        pass

    @staticmethod
    def GetOrCreateWorksharingDisplaySettings(doc):
        """
        GetOrCreateWorksharingDisplaySettings(doc: Document) -> WorksharingDisplaySettings
        
            Returns the worksharing display settings for the document, creating
           new 
             settings for the current user if necessary.
        
        
            doc: The document of interest.
            Returns: The worksharing display settings for the document.
        """
        pass

    def GetRemovedUsers(self):
        """
        GetRemovedUsers(self: WorksharingDisplaySettings) -> ICollection[str]
        
            Returns the set of users who have been explicitly removed from the settings.
            Returns: Users who have been explicitly removed from the list.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: Element, disposing: bool) """
        pass

    def RemoveUsers(self, document, usersToRemove, usersActuallyRemoved):
        """ RemoveUsers(self: WorksharingDisplaySettings, document: Document, usersToRemove: ICollection[str]) -> ICollection[str] """
        pass

    def RestoreUsers(self, usersToRestore):
        """ RestoreUsers(self: WorksharingDisplaySettings, usersToRestore: ICollection[str]) -> int """
        pass

    def setElementType(self, *args): #cannot find CLR method
        """ setElementType(self: Element, type: ElementType, incompatibleExceptionMessage: str) """
        pass

    def SetGraphicOverrides(self, *__args):
        """
        SetGraphicOverrides(self: WorksharingDisplaySettings, status: ModelUpdatesStatus, overrides: WorksharingDisplayGraphicSettings)
            Sets the graphic overrides assigned to elements with a particular status in the 
             central model.
        
        
            status: The status in the central model.
            overrides: The desired graphic overrides for this status.
        SetGraphicOverrides(self: WorksharingDisplaySettings, username: str, overrides: WorksharingDisplayGraphicSettings)
            Sets the graphic overrides assigned to elements owned by a particular user.
           
             The username cannot be on the list of removed usernames.
        
        
            username: The username of the desired user.
            overrides: The desired graphic overrides for this user.
        SetGraphicOverrides(self: WorksharingDisplaySettings, worksetId: WorksetId, overrides: WorksharingDisplayGraphicSettings)
            Sets the graphic overrides assigned to elements in a particular user workset.
        
            worksetId: The workset of interest, which must be a user workset.
            overrides: The desired graphic overrides for this workset.
        SetGraphicOverrides(self: WorksharingDisplaySettings, status: CheckoutStatus, overrides: WorksharingDisplayGraphicSettings)
            Sets the graphic overrides assigned to elements with a particular ownership 
             status.
        
        
            status: The ownership status of interest.
            overrides: The desired graphic overrides for this ownership status.
        """
        pass

    def UserHasGraphicOverrides(self, username):
        """
        UserHasGraphicOverrides(self: WorksharingDisplaySettings, username: str) -> bool
        
            Checks whether there are graphic overrides that would apply to elements
           
             owned by the given user in the "Individual Owners" display mode.
        
        
            username: The username to check
            Returns: True if there are graphic overrides assigned to the username, false otherwise.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass


class WorksharingSaveAsOptions(object, IDisposable):
    """
    This class contains options specific to worksharing SaveAs.
    
    WorksharingSaveAsOptions()
    """
    def Dispose(self):
        """ Dispose(self: WorksharingSaveAsOptions) """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: WorksharingSaveAsOptions, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    ClearTransmitted = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """For a transmitted model opened with DetachAndPreserveWorksets,
   clear its transmitted flag in the Save/SaveAs operation.

Get: ClearTransmitted(self: WorksharingSaveAsOptions) -> bool

Set: ClearTransmitted(self: WorksharingSaveAsOptions) = value
"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: WorksharingSaveAsOptions) -> bool

"""

    OpenWorksetsDefault = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The default set of user-worksets to open when opening the model in the UI.
   Default is AskUserToSpecify.

Get: OpenWorksetsDefault(self: WorksharingSaveAsOptions) -> SimpleWorksetConfiguration

Set: OpenWorksetsDefault(self: WorksharingSaveAsOptions) = value
"""

    SaveAsCentral = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Whether to save the new model as a central instead of local model.
   True: save as a central model.
   Default is false: save as a local model.

Get: SaveAsCentral(self: WorksharingSaveAsOptions) -> bool

Set: SaveAsCentral(self: WorksharingSaveAsOptions) = value
"""



class WorksharingTooltipInfo(object, IDisposable):
    """ Worksharing information about a single element suitable for display in an in-canvas tooltip. """
    def Dispose(self):
        """ Dispose(self: WorksharingTooltipInfo) """
        pass

    def GetRequesters(self):
        """
        GetRequesters(self: WorksharingTooltipInfo) -> IList[str]
        
            The ordered list of unique user names of users who have outstanding editing 
             requests for
           the specified element.
        
            Returns: The ordered list of unique user names.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: WorksharingTooltipInfo, disposing: bool) """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    Creator = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The user name of the user who created the element.

Get: Creator(self: WorksharingTooltipInfo) -> str

"""

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: WorksharingTooltipInfo) -> bool

"""

    LastChangedBy = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The user name of the most recent user who saved a user change of this element
   to the central model.

Get: LastChangedBy(self: WorksharingTooltipInfo) -> str

"""

    Owner = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current owner of the element or empty string if no one owns the element.

Get: Owner(self: WorksharingTooltipInfo) -> str

"""



class WorksharingUtils(object, IDisposable):
    """ A static class that contains utility functions related to worksharing. """
    @staticmethod
    def CheckoutElements(document, elementsToCheckout, options=None):
        """
        CheckoutElements(document: Document, elementsToCheckout: ICollection[ElementId]) -> ICollection[ElementId]
        CheckoutElements(document: Document, elementsToCheckout: ISet[ElementId], options: TransactWithCentralOptions) -> ISet[ElementId]
        """
        pass

    @staticmethod
    def CheckoutWorksets(document, worksetsToCheckout, options=None):
        """
        CheckoutWorksets(document: Document, worksetsToCheckout: ICollection[WorksetId]) -> ICollection[WorksetId]
        CheckoutWorksets(document: Document, worksetsToCheckout: ISet[WorksetId], options: TransactWithCentralOptions) -> ISet[WorksetId]
        """
        pass

    @staticmethod
    def CreateNewLocal(sourcePath, targetPath):
        """
        CreateNewLocal(sourcePath: ModelPath, targetPath: ModelPath)
            Takes a path to a central model and copies the model into a new local file for 
             the current user.
        
        
            sourcePath: The path to the central model.
            targetPath: The path to put the new local file.
        """
        pass

    def Dispose(self):
        """ Dispose(self: WorksharingUtils) """
        pass

    @staticmethod
    def GetCheckoutStatus(document, elementId, owner=None):
        """
        GetCheckoutStatus(document: Document, elementId: ElementId) -> (CheckoutStatus, str)
        
            Gets the ownership status and outputs the owner of an element.
        
            document: The document containing the element.
            elementId: The id of the element.
            Returns: An indication of whether the element is unowned, owned by the current user, or 
             owned by another user.
        
        GetCheckoutStatus(document: Document, elementId: ElementId) -> CheckoutStatus
        
            Gets the ownership status of an element.
        
            document: The document containing the element.
            elementId: The id of the element.
            Returns: A summary of whether the element is unowned, owned by the current user, or 
             owned by another user.
        """
        pass

    @staticmethod
    def GetModelUpdatesStatus(document, elementId):
        """
        GetModelUpdatesStatus(document: Document, elementId: ElementId) -> ModelUpdatesStatus
        
            Gets the status of a single element in the central model.
        
            document: The document containing the element.
            elementId: The id of the element.
            Returns: The status of the element in the local session versus the central model.
        """
        pass

    @staticmethod
    def GetUserWorksetInfo(path):
        """
        GetUserWorksetInfo(path: ModelPath) -> IList[WorksetPreview]
        
            Gets information about user worksets in a workshared model file, without fully 
             opening the file.
        
        
            path: The path to the workshared model.
            Returns: Information about all the user worksets in the model.
           The list is sorted by 
             workset id.
        """
        pass

    @staticmethod
    def GetWorksharingTooltipInfo(document, elementId):
        """
        GetWorksharingTooltipInfo(document: Document, elementId: ElementId) -> WorksharingTooltipInfo
        
            Gets worksharing information about an element to display in an in-canvas 
             tooltip.
        
        
            document: The document containing the element
            elementId: The id of the element in question
            Returns: Worksharing information about the specified element.
        """
        pass

    def ReleaseUnmanagedResources(self, *args): #cannot find CLR method
        """ ReleaseUnmanagedResources(self: WorksharingUtils, disposing: bool) """
        pass

    @staticmethod
    def RelinquishOwnership(document, generalCategories, options):
        """
        RelinquishOwnership(document: Document, generalCategories: RelinquishOptions, options: TransactWithCentralOptions) -> RelinquishedItems
        
            Relinquishes ownership by the current user of as many specified elements and 
             worksets as possible,
           and grants element ownership requested by other users 
             on a first-come, first-served basis.
        
        
            document: The document containing the elements and worksets.
            generalCategories: General categories of items to relinquish.  See RelinquishOptions for details.
            options: Options to customize access to the central model.
           ll is allowed and means 
             no customization.
        
            Returns: The elements and worksets that were relinquished.
        """
        pass

    def __enter__(self, *args): #cannot find CLR method
        """ __enter__(self: IDisposable) -> object """
        pass

    def __exit__(self, *args): #cannot find CLR method
        """ __exit__(self: IDisposable, exc_type: object, exc_value: object, exc_back: object) """
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __repr__(self, *args): #cannot find CLR method
        """ __repr__(self: object) -> str """
        pass

    IsValidObject = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Specifies whether the .NET object represents a valid Revit entity.

Get: IsValidObject(self: WorksharingUtils) -> bool

"""



class XYZ(object):
    """
    Object representing coordinates in 3-dimensional space.
    
    XYZ(x: float, y: float, z: float)
    XYZ()
    """
    def Add(self, source):
        """
        Add(self: XYZ, source: XYZ) -> XYZ
        
            Adds the specified vector to this vector and returns the result.
        
            source: The vector to add to this vector.
            Returns: The vector equal to the sum of the two vectors.
        """
        pass

    def AngleOnPlaneTo(self, right, normal):
        """
        AngleOnPlaneTo(self: XYZ, right: XYZ, normal: XYZ) -> float
        
            Returns the angle between this vector and the specified vector projected to the 
             specified plane.
        
        
            right: The specified vector.
            normal: The normal vector that defines the plane.
            Returns: The real number between 0 and 2*PI equal to the projected angle between the two 
             vectors.
        """
        pass

    def AngleTo(self, source):
        """
        AngleTo(self: XYZ, source: XYZ) -> float
        
            Returns the angle between this vector and the specified vector.
        
            source: The specified vector.
            Returns: The real number between 0 and PI equal to the angle between the two vectors in 
             radians..
        """
        pass

    def CrossProduct(self, source):
        """
        CrossProduct(self: XYZ, source: XYZ) -> XYZ
        
            The cross product of this vector and the specified vector.
        
            source: The vector to multiply with this vector.
            Returns: The vector equal to the cross product.
        """
        pass

    def DistanceTo(self, source):
        """
        DistanceTo(self: XYZ, source: XYZ) -> float
        
            Returns the distance from this point to the specified point.
        
            source: The specified point.
            Returns: The real number equal to the distance between the two points.
        """
        pass

    def Divide(self, value):
        """
        Divide(self: XYZ, value: float) -> XYZ
        
            Divides this vector by the specified value and returns the result.
        
            value: The value to divide this vector by.
            Returns: The divided vector.
        """
        pass

    def DotProduct(self, source):
        """
        DotProduct(self: XYZ, source: XYZ) -> float
        
            The dot product of this vector and the specified vector.
        
            source: The vector to multiply with this vector.
            Returns: The real number equal to the dot product.
        """
        pass

    def GetLength(self):
        """
        GetLength(self: XYZ) -> float
        
            Gets the length of this vector.
        """
        pass

    def IsAlmostEqualTo(self, source, tolerance=None):
        """
        IsAlmostEqualTo(self: XYZ, source: XYZ) -> bool
        
            Determines whether this vector and the specified vector are the same within the 
             tolerance (1.0e-09).
        
        
            source: The vector to compare with this vector.
            Returns: True if the vectors are the same; otherwise, false.
        IsAlmostEqualTo(self: XYZ, source: XYZ, tolerance: float) -> bool
        
            Determines whether 2 vectors are the same within the given tolerance.
        
            source: The vector to compare with this vector.
            tolerance: The tolerance for equality check.
            Returns: True if the vectors are the same; otherwise, false.
        """
        pass

    def IsUnitLength(self):
        """
        IsUnitLength(self: XYZ) -> bool
        
            The boolean value that indicates whether this vector is of unit length.
        """
        pass

    @staticmethod
    def IsWithinLengthLimits(point):
        """
        IsWithinLengthLimits(point: XYZ) -> bool
        
            Validates that the input point is within Revit design limits.
        
            point: The point to test.
            Returns: True if the input point is within Revit design limits, false otherwise.
        """
        pass

    def IsZeroLength(self):
        """
        IsZeroLength(self: XYZ) -> bool
        
            The boolean value that indicates whether this vector is a zero vector.
        """
        pass

    def Multiply(self, value):
        """
        Multiply(self: XYZ, value: float) -> XYZ
        
            Multiplies this vector by the specified value and returns the result.
        
            value: The value to multiply with this vector.
            Returns: The multiplied vector.
        """
        pass

    def Negate(self):
        """
        Negate(self: XYZ) -> XYZ
        
            Negates this vector.
            Returns: The vector opposite to this vector.
        """
        pass

    def Normalize(self):
        """
        Normalize(self: XYZ) -> XYZ
        
            Returns a new XYZ whose coordinates are the normalized values from this vector.
            Returns: The normalized XYZ or zero if the vector is almost Zero.
        """
        pass

    def Subtract(self, source):
        """
        Subtract(self: XYZ, source: XYZ) -> XYZ
        
            Subtracts the specified vector from this vector and returns the result.
        
            source: The vector to subtract from this vector.
            Returns: The vector equal to the difference between the two vectors.
        """
        pass

    def ToString(self):
        """
        ToString(self: XYZ) -> str
        
            Gets formatted string showing (X, Y, Z) with values formatted to 9 decimal 
             places.
        """
        pass

    def TripleProduct(self, middle, right):
        """
        TripleProduct(self: XYZ, middle: XYZ, right: XYZ) -> float
        
            The triple product of this vector and the two specified vectors.
        
            middle: The second vector.
            right: The third vector.
            Returns: The real number equal to the triple product.
        """
        pass

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        pass

    def __div__(self, *args): #cannot find CLR method
        """ x.__div__(y) <==> x/y """
        pass

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        pass

    def __mul__(self, *args): #cannot find CLR method
        """ x.__mul__(y) <==> x*y """
        pass

    def __neg__(self, *args): #cannot find CLR method
        """ x.__neg__() <==> -x """
        pass

    @staticmethod # known case of __new__
    def __new__(self, x=None, y=None, z=None):
        """
        __new__(cls: type, x: float, y: float, z: float)
        __new__(cls: type)
        """
        pass

    def __radd__(self, *args): #cannot find CLR method
        """
        __radd__(left: XYZ, right: XYZ) -> XYZ
        
            Adds the two specified vectors and returns the result.
        
            left: The first vector.
            right: The second vector.
            Returns: The vector equal to the sum of the two source vectors.
        """
        pass

    def __rmul__(self, *args): #cannot find CLR method
        """
        __rmul__(value: float, right: XYZ) -> XYZ
        
            Multiplies the specified number and the specified vector.
        
            value: The value to multiply with the specified vector.
            right: The vector to multiply with the value.
            Returns: The multiplied vector.
        """
        pass

    def __rsub__(self, *args): #cannot find CLR method
        """
        __rsub__(left: XYZ, right: XYZ) -> XYZ
        
            Subtracts the two specified vectors and returns the result.
        
            left: The first vector.
            right: The second vector.
            Returns: The vector equal to the difference between the two source vectors.
        """
        pass

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        pass

    X = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the first coordinate.

Get: X(self: XYZ) -> float

"""

    Y = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the second coordinate.

Get: Y(self: XYZ) -> float

"""

    Z = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Gets the third coordinate.

Get: Z(self: XYZ) -> float

"""


    BasisX = None
    BasisY = None
    BasisZ = None
    Zero = None


class ZoomFitType(Enum, IComparable, IFormattable, IConvertible):
    """
    This enum is used to define type of zoom.
    
    enum ZoomFitType, values: FitToPage (0), Zoom (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FitToPage = None
    value__ = None
    Zoom = None


class ZoomType(Enum, IComparable, IFormattable, IConvertible):
    """
    An enumerated type listing all Zoom types of Print Setting.
    
    enum ZoomType, values: FitToPage (0), Zoom (1)
    """
    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        pass

    def __format__(self, *args): #cannot find CLR method
        """ __format__(formattable: IFormattable, format: str) -> str """
        pass

    def __ge__(self, *args): #cannot find CLR method
        pass

    def __gt__(self, *args): #cannot find CLR method
        pass

    def __init__(self, *args): #cannot find CLR method
        """ x.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signaturex.__init__(...) initializes x; see x.__class__.__doc__ for signature """
        pass

    def __le__(self, *args): #cannot find CLR method
        pass

    def __lt__(self, *args): #cannot find CLR method
        pass

    def __ne__(self, *args): #cannot find CLR method
        pass

    def __reduce_ex__(self, *args): #cannot find CLR method
        pass

    def __str__(self, *args): #cannot find CLR method
        pass

    FitToPage = None
    value__ = None
    Zoom = None


# variables with complex values

